
CISYNTH_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000129dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e58  08012c7c  08012c7c  00022c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ad4  08014ad4  00031950  2**0
                  CONTENTS
  4 .ARM          00000008  08014ad4  08014ad4  00024ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014adc  08014adc  00031950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014adc  08014adc  00024adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ae0  08014ae0  00024ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  08014ae4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000090  08014b74  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000f0  08014bd4  000300f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .RxArraySection 00001800  24000150  08014c34  00030150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00003dc8  24001950  08016434  00031950  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  24005718  08016434  00035718  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00031950  2**0
                  CONTENTS, READONLY
 15 .debug_info   000418ca  00000000  00000000  0003197e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000070db  00000000  00000000  00073248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001980  00000000  00000000  0007a328  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001788  00000000  00000000  0007bca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00041976  00000000  00000000  0007d430  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00025949  00000000  00000000  000beda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0016b80b  00000000  00000000  000e46ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0024fefa  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00006c80  00000000  00000000  0024ff78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001950 	.word	0x24001950
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012c64 	.word	0x08012c64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001954 	.word	0x24001954
 80002dc:	08012c64 	.word	0x08012c64

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00b      	beq.n	80006a8 <LAN8742_RegisterBusIO+0x28>
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d007      	beq.n	80006a8 <LAN8742_RegisterBusIO+0x28>
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <LAN8742_RegisterBusIO+0x28>
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ac:	e014      	b.n	80006d8 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	691a      	ldr	r2, [r3, #16]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d17b      	bne.n	80007fc <LAN8742_Init+0x118>
   {
     if(pObj->IO.Init != 0)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2220      	movs	r2, #32
 8000716:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e01c      	b.n	8000758 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f107 0208 	add.w	r2, r7, #8
 8000726:	2112      	movs	r1, #18
 8000728:	6978      	ldr	r0, [r7, #20]
 800072a:	4798      	blx	r3
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	da03      	bge.n	800073a <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000732:	f06f 0304 	mvn.w	r3, #4
 8000736:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000738:	e00b      	b.n	8000752 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f003 031f 	and.w	r3, r3, #31
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	429a      	cmp	r2, r3
 8000744:	d105      	bne.n	8000752 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
         break;
 8000750:	e005      	b.n	800075e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	2b1f      	cmp	r3, #31
 800075c:	d9df      	bls.n	800071e <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b1f      	cmp	r3, #31
 8000764:	d902      	bls.n	800076c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000766:	f06f 0302 	mvn.w	r3, #2
 800076a:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d144      	bne.n	80007fc <LAN8742_Init+0x118>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	6810      	ldr	r0, [r2, #0]
 800077a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800077e:	2100      	movs	r1, #0
 8000780:	4798      	blx	r3
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	db36      	blt.n	80007f6 <LAN8742_Init+0x112>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	6810      	ldr	r0, [r2, #0]
 8000790:	f107 0208 	add.w	r2, r7, #8
 8000794:	2100      	movs	r1, #0
 8000796:	4798      	blx	r3
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	db27      	blt.n	80007ee <LAN8742_Init+0x10a>
         { 
           tickstart = pObj->IO.GetTick();
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4798      	blx	r3
 80007a4:	4603      	mov	r3, r0
 80007a6:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80007a8:	e01b      	b.n	80007e2 <LAN8742_Init+0xfe>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4798      	blx	r3
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007bc:	d80e      	bhi.n	80007dc <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	6810      	ldr	r0, [r2, #0]
 80007c6:	f107 0208 	add.w	r2, r7, #8
 80007ca:	2100      	movs	r1, #0
 80007cc:	4798      	blx	r3
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da06      	bge.n	80007e2 <LAN8742_Init+0xfe>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80007d4:	f06f 0304 	mvn.w	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]
                 break;
 80007da:	e00f      	b.n	80007fc <LAN8742_Init+0x118>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80007dc:	f06f 0301 	mvn.w	r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1de      	bne.n	80007aa <LAN8742_Init+0xc6>
 80007ec:	e006      	b.n	80007fc <LAN8742_Init+0x118>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80007ee:	f06f 0304 	mvn.w	r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	e002      	b.n	80007fc <LAN8742_Init+0x118>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80007f6:	f06f 0303 	mvn.w	r3, #3
 80007fa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d112      	bne.n	8000828 <LAN8742_Init+0x144>
   {
     tickstart =  pObj->IO.GetTick();
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4798      	blx	r3
 8000808:	4603      	mov	r3, r0
 800080a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800080c:	bf00      	nop
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4798      	blx	r3
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000820:	d9f5      	bls.n	800080e <LAN8742_Init+0x12a>
     {
     }
     pObj->Is_Initialized = 1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000828:	693b      	ldr	r3, [r7, #16]
 }
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	6810      	ldr	r0, [r2, #0]
 8000846:	f107 020c 	add.w	r2, r7, #12
 800084a:	2101      	movs	r1, #1
 800084c:	4798      	blx	r3
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	da02      	bge.n	800085a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000854:	f06f 0304 	mvn.w	r3, #4
 8000858:	e06e      	b.n	8000938 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	6810      	ldr	r0, [r2, #0]
 8000862:	f107 020c 	add.w	r2, r7, #12
 8000866:	2101      	movs	r1, #1
 8000868:	4798      	blx	r3
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	da02      	bge.n	8000876 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000870:	f06f 0304 	mvn.w	r3, #4
 8000874:	e060      	b.n	8000938 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	2b00      	cmp	r3, #0
 800087e:	d101      	bne.n	8000884 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000880:	2301      	movs	r3, #1
 8000882:	e059      	b.n	8000938 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	6810      	ldr	r0, [r2, #0]
 800088c:	f107 020c 	add.w	r2, r7, #12
 8000890:	2100      	movs	r1, #0
 8000892:	4798      	blx	r3
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	da02      	bge.n	80008a0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800089a:	f06f 0304 	mvn.w	r3, #4
 800089e:	e04b      	b.n	8000938 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d11b      	bne.n	80008e2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d006      	beq.n	80008c2 <LAN8742_GetLinkState+0x90>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80008be:	2302      	movs	r3, #2
 80008c0:	e03a      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80008cc:	2303      	movs	r3, #3
 80008ce:	e033      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80008da:	2304      	movs	r3, #4
 80008dc:	e02c      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80008de:	2305      	movs	r3, #5
 80008e0:	e02a      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	6810      	ldr	r0, [r2, #0]
 80008ea:	f107 020c 	add.w	r2, r7, #12
 80008ee:	211f      	movs	r1, #31
 80008f0:	4798      	blx	r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da02      	bge.n	80008fe <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80008f8:	f06f 0304 	mvn.w	r3, #4
 80008fc:	e01c      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000908:	2306      	movs	r3, #6
 800090a:	e015      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 031c 	and.w	r3, r3, #28
 8000912:	2b18      	cmp	r3, #24
 8000914:	d101      	bne.n	800091a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000916:	2302      	movs	r3, #2
 8000918:	e00e      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f003 031c 	and.w	r3, r3, #28
 8000920:	2b08      	cmp	r3, #8
 8000922:	d101      	bne.n	8000928 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000924:	2303      	movs	r3, #3
 8000926:	e007      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 031c 	and.w	r3, r3, #28
 800092e:	2b14      	cmp	r3, #20
 8000930:	d101      	bne.n	8000936 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000932:	2304      	movs	r3, #4
 8000934:	e000      	b.n	8000938 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000936:	2305      	movs	r3, #5
    }				
  }
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f97d 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800094a:	f002 ff57 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 800094e:	4601      	mov	r1, r0
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_Init+0x60>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <HAL_Init+0x64>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	fa21 f303 	lsr.w	r3, r1, r3
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_Init+0x68>)
 8000968:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_Init+0x68>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_Init+0x60>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	490b      	ldr	r1, [pc, #44]	; (80009a4 <HAL_Init+0x64>)
 8000978:	5ccb      	ldrb	r3, [r1, r3]
 800097a:	f003 031f 	and.w	r3, r3, #31
 800097e:	fa22 f303 	lsr.w	r3, r2, r3
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_Init+0x6c>)
 8000984:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f812 	bl	80009b0 <HAL_InitTick>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e002      	b.n	800099c <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000996:	f010 ff69 	bl	801186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	58024400 	.word	0x58024400
 80009a4:	08014a2c 	.word	0x08014a2c
 80009a8:	24000024 	.word	0x24000024
 80009ac:	24000028 	.word	0x24000028

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_InitTick+0x60>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d101      	bne.n	80009c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e021      	b.n	8000a08 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_InitTick+0x64>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_InitTick+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f957 	bl	8000c8e <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f8:	f000 f92f 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x68>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000024 	.word	0x24000024
 8000a18:	24000000 	.word	0x24000000

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	24000004 	.word	0x24000004
 8000a40:	24001af0 	.word	0x24001af0

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	24001af0 	.word	0x24001af0

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_Delay+0x40>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffde 	bl	8000a44 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000004 	.word	0x24000004

08000aa0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetREVID+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	0c1b      	lsrs	r3, r3, #16
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	5c001000 	.word	0x5c001000

08000ab8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000ac8:	4904      	ldr	r1, [pc, #16]	; (8000adc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	58000400 	.word	0x58000400

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <__NVIC_SetPriorityGrouping+0x40>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x40>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	05fa0000 	.word	0x05fa0000

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff47 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff5e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff90 	bl	8000b98 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5f 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffb2 	bl	8000c00 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e0c6      	b.n	8000e48 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f00f ff04 	bl	8010ad0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2223      	movs	r2, #35	; 0x23
 8000ccc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <HAL_ETH_Init+0x1a8>)
 8000cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cd4:	4a5e      	ldr	r2, [pc, #376]	; (8000e50 <HAL_ETH_Init+0x1a8>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cde:	4b5c      	ldr	r3, [pc, #368]	; (8000e50 <HAL_ETH_Init+0x1a8>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7a1b      	ldrb	r3, [r3, #8]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d103      	bne.n	8000cfc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fedf 	bl	8000ab8 <HAL_SYSCFG_ETHInterfaceSelect>
 8000cfa:	e003      	b.n	8000d04 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000cfc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000d00:	f7ff feda 	bl	8000ab8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d1c:	f7ff fe92 	bl	8000a44 <HAL_GetTick>
 8000d20:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000d22:	e00f      	b.n	8000d44 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000d24:	f7ff fe8e 	bl	8000a44 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d32:	d907      	bls.n	8000d44 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2204      	movs	r2, #4
 8000d38:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	22e0      	movs	r2, #224	; 0xe0
 8000d3e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e081      	b.n	8000e48 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1e6      	bne.n	8000d24 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f001 f94a 	bl	8001ff0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000d5c:	f002 fec0 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <HAL_ETH_Init+0x1ac>)
 8000d64:	fba3 2302 	umull	r2, r3, r3, r2
 8000d68:	0c9a      	lsrs	r2, r3, #18
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3a01      	subs	r2, #1
 8000d70:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f001 f89d 	bl	8001eb4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000d90:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000d94:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	22e0      	movs	r2, #224	; 0xe0
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e04a      	b.n	8000e48 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	f241 1308 	movw	r3, #4360	; 0x1108
 8000dba:	4413      	add	r3, r2
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_ETH_Init+0x1b0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6952      	ldr	r2, [r2, #20]
 8000dc6:	0052      	lsls	r2, r2, #1
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	6809      	ldr	r1, [r1, #0]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	f241 1308 	movw	r3, #4360	; 0x1108
 8000dd2:	440b      	add	r3, r1
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f001 f962 	bl	80020a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f001 f9a6 	bl	800212e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	3305      	adds	r3, #5
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	021a      	lsls	r2, r3, #8
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	3304      	adds	r3, #4
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	3303      	adds	r3, #3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	061a      	lsls	r2, r3, #24
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	041b      	lsls	r3, r3, #16
 8000e14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000e20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000e2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000e30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2210      	movs	r2, #16
 8000e3e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2210      	movs	r2, #16
 8000e44:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	ffff8001 	.word	0xffff8001

08000e5c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	330a      	adds	r3, #10
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <HAL_ETH_DescAssignMemory+0x28>
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d904      	bls.n	8000e8e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2201      	movs	r2, #1
 8000e88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e021      	b.n	8000ed2 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d14c      	bne.n	8000f88 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2223      	movs	r2, #35	; 0x23
 8000ef2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0202 	orr.w	r2, r2, #2
 8000f02:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	f241 1304 	movw	r3, #4356	; 0x1104
 8000f30:	4413      	add	r3, r2
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6811      	ldr	r1, [r2, #0]
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	f241 1304 	movw	r3, #4356	; 0x1104
 8000f40:	440b      	add	r3, r1
 8000f42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f241 1308 	movw	r3, #4360	; 0x1108
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	f043 0201 	orr.w	r2, r3, #1
 8000f58:	f241 1308 	movw	r3, #4360	; 0x1108
 8000f5c:	440b      	add	r3, r1
 8000f5e:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8000f72:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000f76:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2222      	movs	r2, #34	; 0x22
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e000      	b.n	8000f8a <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
  }
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d040      	beq.n	8001028 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2223      	movs	r2, #35	; 0x23
 8000faa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f241 1304 	movw	r3, #4356	; 0x1104
 8000fb4:	4413      	add	r3, r2
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6811      	ldr	r1, [r2, #0]
 8000fbc:	f023 0201 	bic.w	r2, r3, #1
 8000fc0:	f241 1304 	movw	r3, #4356	; 0x1104
 8000fc4:	440b      	add	r3, r1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	f241 1308 	movw	r3, #4360	; 0x1108
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	6811      	ldr	r1, [r2, #0]
 8000fd8:	f023 0201 	bic.w	r2, r3, #1
 8000fdc:	f241 1308 	movw	r3, #4360	; 0x1108
 8000fe0:	440b      	add	r3, r1
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0201 	orr.w	r2, r2, #1
 8001004:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0202 	bic.w	r2, r2, #2
 8001016:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2210      	movs	r2, #16
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2210      	movs	r2, #16
 8001022:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	e000      	b.n	800102a <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
  }
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104c:	f043 0201 	orr.w	r2, r3, #1
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e076      	b.n	8001146 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105c:	2b10      	cmp	r3, #16
 800105e:	d171      	bne.n	8001144 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001060:	2200      	movs	r2, #0
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f001 f8bf 	bl	80021e8 <ETH_Prepare_Tx_Descriptors>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001074:	f043 0202 	orr.w	r2, r3, #2
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e062      	b.n	8001146 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3206      	adds	r2, #6
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	2b03      	cmp	r3, #3
 800109e:	d904      	bls.n	80010aa <HAL_ETH_Transmit+0x74>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	1f1a      	subs	r2, r3, #4
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	3106      	adds	r1, #6
 80010b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80010ba:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80010be:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80010c0:	f7ff fcc0 	bl	8000a44 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80010c6:	e034      	b.n	8001132 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d011      	beq.n	80010fe <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010de:	f043 0208 	orr.w	r2, r3, #8
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	22e0      	movs	r2, #224	; 0xe0
 80010f8:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e023      	b.n	8001146 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001104:	d015      	beq.n	8001132 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001106:	f7ff fc9d 	bl	8000a44 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d302      	bcc.n	800111c <HAL_ETH_Transmit+0xe6>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10a      	bne.n	8001132 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	f043 0204 	orr.w	r2, r3, #4
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2210      	movs	r2, #16
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e009      	b.n	8001146 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dbc6      	blt.n	80010c8 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2210      	movs	r2, #16
 800113e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800114e:	b480      	push	{r7}
 8001150:	b089      	sub	sp, #36	; 0x24
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	332c      	adds	r3, #44	; 0x2c
 800115a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d06b      	beq.n	8001258 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	e0bc      	b.n	80012fe <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d036      	beq.n	8001204 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	3301      	adds	r3, #1
 800119a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d902      	bls.n	80011b8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b04      	subs	r3, #4
 80011b6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db11      	blt.n	80011ee <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2201      	movs	r2, #1
 80011da:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	3301      	adds	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d902      	bls.n	80011ee <HAL_ETH_IsRxDataAvailable+0xa0>
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	3b04      	subs	r3, #4
 80011ec:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001200:	2301      	movs	r3, #1
 8001202:	e07c      	b.n	80012fe <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d012      	beq.n	8001236 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001214:	2301      	movs	r3, #1
 8001216:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3301      	adds	r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d902      	bls.n	800122a <HAL_ETH_IsRxDataAvailable+0xdc>
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3b04      	subs	r3, #4
 8001228:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	e010      	b.n	8001258 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	3301      	adds	r3, #1
 800123a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	3301      	adds	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d902      	bls.n	800124e <HAL_ETH_IsRxDataAvailable+0x100>
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3b04      	subs	r3, #4
 800124c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db02      	blt.n	8001266 <HAL_ETH_IsRxDataAvailable+0x118>
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d98e      	bls.n	8001184 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d044      	beq.n	80012f6 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e036      	b.n	80012ee <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800128e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d009      	beq.n	80012ac <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	3301      	adds	r3, #1
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d902      	bls.n	80012de <HAL_ETH_IsRxDataAvailable+0x190>
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3b04      	subs	r3, #4
 80012dc:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	69fa      	ldr	r2, [r7, #28]
 80012e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d3c4      	bcc.n	8001280 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]

  return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b08a      	sub	sp, #40	; 0x28
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	332c      	adds	r3, #44	; 0x2c
 8001318:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d104      	bne.n	8001342 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e07d      	b.n	800143e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff feff 	bl	800114e <HAL_ETH_IsRxDataAvailable>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e071      	b.n	800143e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
 800136e:	e031      	b.n	80013d4 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	461a      	mov	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	461a      	mov	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013aa:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	3301      	adds	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d902      	bls.n	80013be <HAL_ETH_GetRxDataBuffer+0xb4>
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	3b04      	subs	r3, #4
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	3301      	adds	r3, #1
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	3b01      	subs	r3, #1
 80013da:	6a3a      	ldr	r2, [r7, #32]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3c7      	bcc.n	8001370 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	461a      	mov	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d803      	bhi.n	800140a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	e018      	b.n	800143c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d012      	beq.n	8001438 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	461a      	mov	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	1ad2      	subs	r2, r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	e001      	b.n	800143c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	332c      	adds	r3, #44	; 0x2c
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d107      	bne.n	8001474 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fe72 	bl	800114e <HAL_ETH_IsRxDataAvailable>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e017      	b.n	80014a4 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	699a      	ldr	r2, [r3, #24]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4413      	add	r3, r2
 800147c:	3b01      	subs	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d902      	bls.n	800148c <HAL_ETH_GetRxDataLength+0x46>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3b04      	subs	r3, #4
 800148a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	332c      	adds	r3, #44	; 0x2c
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	69fa      	ldr	r2, [r7, #28]
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e055      	b.n	8001588 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	e03c      	b.n	800156a <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014fe:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	695a      	ldr	r2, [r3, #20]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	3b01      	subs	r3, #1
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d20d      	bcs.n	8001564 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3301      	adds	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d902      	bls.n	800155a <HAL_ETH_BuildRxDescriptors+0xae>
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	3b04      	subs	r3, #4
 8001558:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	3301      	adds	r3, #1
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3be      	bcc.n	80014f0 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6819      	ldr	r1, [r3, #0]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	f241 1328 	movw	r3, #4392	; 0x1128
 800157c:	440b      	add	r3, r1
 800157e:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3724      	adds	r7, #36	; 0x24
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e03e      	b.n	8001634 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015be:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	055b      	lsls	r3, r3, #21
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f043 030c 	orr.w	r3, r3, #12
 80015e2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80015f6:	f7ff fa25 	bl	8000a44 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80015fc:	e009      	b.n	8001612 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80015fe:	f7ff fa21 	bl	8000a44 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160c:	d901      	bls.n	8001612 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e010      	b.n	8001634 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ed      	bne.n	80015fe <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e03c      	b.n	80016d8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001666:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	055b      	lsls	r3, r3, #21
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f023 030c 	bic.w	r3, r3, #12
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_ETH_WritePHYRegister+0xa4>)
 800169e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_ETH_WritePHYRegister+0xa4>)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80016aa:	f7ff f9cb 	bl	8000a44 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80016b0:	e009      	b.n	80016c6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80016b2:	f7ff f9c7 	bl	8000a44 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c0:	d901      	bls.n	80016c6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e008      	b.n	80016d8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ed      	bne.n	80016b2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40028000 	.word	0x40028000

080016e4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e1c3      	b.n	8001a80 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf0c      	ite	eq
 800173e:	2301      	moveq	r3, #1
 8001740:	2300      	movne	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf14      	ite	ne
 800192c:	2301      	movne	r3, #1
 800192e:	2300      	moveq	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	461a      	mov	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0e5b      	lsrs	r3, r3, #25
 8001942:	f003 021f 	and.w	r2, r3, #31
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 020f 	and.w	r2, r3, #15
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf0c      	ite	eq
 800199e:	2301      	moveq	r3, #1
 80019a0:	2300      	movne	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf14      	ite	ne
 80019d8:	2301      	movne	r3, #1
 80019da:	2300      	moveq	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001a0c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a1c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e00a      	b.n	8001ab6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d105      	bne.n	8001ab4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f860 	bl	8001b70 <ETH_SetMACConfig>

    return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e000      	b.n	8001ab6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ad0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ad8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ada:	f002 f801 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8001ade:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d908      	bls.n	8001afa <HAL_ETH_SetMDIOClockRange+0x3a>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d804      	bhi.n	8001afa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e027      	b.n	8001b4a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d908      	bls.n	8001b14 <HAL_ETH_SetMDIOClockRange+0x54>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d804      	bhi.n	8001b14 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e01a      	b.n	8001b4a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d903      	bls.n	8001b24 <HAL_ETH_SetMDIOClockRange+0x64>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d911      	bls.n	8001b48 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d908      	bls.n	8001b3e <HAL_ETH_SetMDIOClockRange+0x7e>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <HAL_ETH_SetMDIOClockRange+0xac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d804      	bhi.n	8001b3e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e005      	b.n	8001b4a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	e000      	b.n	8001b4a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b48:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	01312cff 	.word	0x01312cff
 8001b60:	02160ebf 	.word	0x02160ebf
 8001b64:	039386ff 	.word	0x039386ff
 8001b68:	05f5e0ff 	.word	0x05f5e0ff
 8001b6c:	08f0d17f 	.word	0x08f0d17f

08001b70 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b82:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001b8a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7b1b      	ldrb	r3, [r3, #12]
 8001b90:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b92:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	7b5b      	ldrb	r3, [r3, #13]
 8001b98:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b9a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	7b9b      	ldrb	r3, [r3, #14]
 8001ba0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001ba2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	7bdb      	ldrb	r3, [r3, #15]
 8001ba8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001baa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	7c12      	ldrb	r2, [r2, #16]
 8001bb0:	2a00      	cmp	r2, #0
 8001bb2:	d102      	bne.n	8001bba <ETH_SetMACConfig+0x4a>
 8001bb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bb8:	e000      	b.n	8001bbc <ETH_SetMACConfig+0x4c>
 8001bba:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bbc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	7c52      	ldrb	r2, [r2, #17]
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d102      	bne.n	8001bcc <ETH_SetMACConfig+0x5c>
 8001bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bca:	e000      	b.n	8001bce <ETH_SetMACConfig+0x5e>
 8001bcc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bce:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	7c9b      	ldrb	r3, [r3, #18]
 8001bd4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bd6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001bdc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001be2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	7f1b      	ldrb	r3, [r3, #28]
 8001be8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001bea:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	7f5b      	ldrb	r3, [r3, #29]
 8001bf0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001bf2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	7f92      	ldrb	r2, [r2, #30]
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d102      	bne.n	8001c02 <ETH_SetMACConfig+0x92>
 8001bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c00:	e000      	b.n	8001c04 <ETH_SetMACConfig+0x94>
 8001c02:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c04:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	7fdb      	ldrb	r3, [r3, #31]
 8001c0a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c0c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	d102      	bne.n	8001c1e <ETH_SetMACConfig+0xae>
 8001c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1c:	e000      	b.n	8001c20 <ETH_SetMACConfig+0xb0>
 8001c1e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001c20:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001c26:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c2e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001c30:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <ETH_SetMACConfig+0x22c>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	68f9      	ldr	r1, [r7, #12]
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c5a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c5c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c64:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001c66:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c6e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001c70:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d102      	bne.n	8001c82 <ETH_SetMACConfig+0x112>
 8001c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c80:	e000      	b.n	8001c84 <ETH_SetMACConfig+0x114>
 8001c82:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c84:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <ETH_SetMACConfig+0x230>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <ETH_SetMACConfig+0x234>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ccc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cd2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001cda:	2a00      	cmp	r2, #0
 8001cdc:	d101      	bne.n	8001ce2 <ETH_SetMACConfig+0x172>
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	e000      	b.n	8001ce4 <ETH_SetMACConfig+0x174>
 8001ce2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ce4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cea:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cf6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	430b      	orrs	r3, r1
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d0c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d14:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f023 0103 	bic.w	r1, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d3a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d101      	bne.n	8001d5e <ETH_SetMACConfig+0x1ee>
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	e000      	b.n	8001d60 <ETH_SetMACConfig+0x1f0>
 8001d5e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001d60:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001d68:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d6a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001d72:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d80:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	00048083 	.word	0x00048083
 8001da0:	c0f88000 	.word	0xc0f88000
 8001da4:	fffffef0 	.word	0xfffffef0

08001da8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <ETH_SetDMAConfig+0xf8>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	6809      	ldr	r1, [r1, #0]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001dce:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001dda:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	7b1b      	ldrb	r3, [r3, #12]
 8001de0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dee:	4413      	add	r3, r2
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <ETH_SetDMAConfig+0xfc>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6811      	ldr	r1, [r2, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e02:	440b      	add	r3, r1
 8001e04:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	7b5b      	ldrb	r3, [r3, #13]
 8001e0a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <ETH_SetDMAConfig+0x100>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6811      	ldr	r1, [r2, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001e2e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7d1b      	ldrb	r3, [r3, #20]
 8001e38:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e3a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	7f5b      	ldrb	r3, [r3, #29]
 8001e40:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e4e:	4413      	add	r3, r2
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <ETH_SetDMAConfig+0x104>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6811      	ldr	r1, [r2, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e62:	440b      	add	r3, r1
 8001e64:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	7f1b      	ldrb	r3, [r3, #28]
 8001e6a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <ETH_SetDMAConfig+0x108>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6811      	ldr	r1, [r2, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e90:	440b      	add	r3, r1
 8001e92:	601a      	str	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	ffff87fd 	.word	0xffff87fd
 8001ea4:	ffff2ffe 	.word	0xffff2ffe
 8001ea8:	fffec000 	.word	0xfffec000
 8001eac:	ffc0efef 	.word	0xffc0efef
 8001eb0:	7fc0ffff 	.word	0x7fc0ffff

08001eb4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0a4      	sub	sp, #144	; 0x90
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f0c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f10:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f36:	2300      	movs	r3, #0
 8001f38:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f46:	2301      	movs	r3, #1
 8001f48:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001f5e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f68:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fde6 	bl	8001b70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fbe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fcc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001fd4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fee1 	bl	8001da8 <ETH_SetDMAConfig>
}
 8001fe6:	bf00      	nop
 8001fe8:	3790      	adds	r7, #144	; 0x90
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002000:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002008:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800200a:	f001 fd69 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 800200e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d908      	bls.n	800202a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d804      	bhi.n	800202a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e027      	b.n	800207a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d908      	bls.n	8002044 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d804      	bhi.n	8002044 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e01a      	b.n	800207a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d903      	bls.n	8002054 <ETH_MAC_MDIO_ClkConfig+0x64>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d911      	bls.n	8002078 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d908      	bls.n	800206e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d804      	bhi.n	800206e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e005      	b.n	800207a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e000      	b.n	800207a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002078:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	01312cff 	.word	0x01312cff
 8002090:	02160ebf 	.word	0x02160ebf
 8002094:	039386ff 	.word	0x039386ff
 8002098:	05f5e0ff 	.word	0x05f5e0ff
 800209c:	08f0d17f 	.word	0x08f0d17f

080020a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e01d      	b.n	80020ea <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	3206      	adds	r2, #6
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3301      	adds	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d9de      	bls.n	80020ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f241 132c 	movw	r3, #4396	; 0x112c
 80020fe:	4413      	add	r3, r2
 8002100:	2203      	movs	r2, #3
 8002102:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68d9      	ldr	r1, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002110:	4413      	add	r3, r2
 8002112:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e024      	b.n	8002186 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6919      	ldr	r1, [r3, #16]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	330a      	adds	r3, #10
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d9d7      	bls.n	800213c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	f241 1330 	movw	r3, #4400	; 0x1130
 80021b2:	4413      	add	r3, r2
 80021b4:	2203      	movs	r2, #3
 80021b6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6919      	ldr	r1, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80021c4:	4413      	add	r3, r2
 80021c6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f241 1328 	movw	r3, #4392	; 0x1128
 80021d8:	4413      	add	r3, r2
 80021da:	6019      	str	r1, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b08d      	sub	sp, #52	; 0x34
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3318      	adds	r3, #24
 80021f8:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002226:	d101      	bne.n	800222c <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002228:	2302      	movs	r3, #2
 800222a:	e223      	b.n	8002674 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d044      	beq.n	80022c2 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4b72      	ldr	r3, [pc, #456]	; (8002408 <ETH_Prepare_Tx_Descriptors+0x220>)
 800223e:	4013      	ands	r3, r2
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002244:	431a      	orrs	r2, r3
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002264:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d027      	beq.n	80022c2 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	b29a      	uxth	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	431a      	orrs	r2, r3
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	431a      	orrs	r2, r3
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022b0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00e      	beq.n	80022ec <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	4b4e      	ldr	r3, [pc, #312]	; (800240c <ETH_Prepare_Tx_Descriptors+0x224>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	6992      	ldr	r2, [r2, #24]
 80022da:	431a      	orrs	r2, r3
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <ETH_Prepare_Tx_Descriptors+0x11c>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d030      	beq.n	8002366 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	3301      	adds	r3, #1
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b03      	cmp	r3, #3
 8002326:	d902      	bls.n	800232e <ETH_Prepare_Tx_Descriptors+0x146>
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	3b04      	subs	r3, #4
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	3301      	adds	r3, #1
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800234a:	d10c      	bne.n	8002366 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002362:	2302      	movs	r3, #2
 8002364:	e186      	b.n	8002674 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	3301      	adds	r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <ETH_Prepare_Tx_Descriptors+0x224>)
 800237c:	4013      	ands	r3, r2
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	6852      	ldr	r2, [r2, #4]
 8002382:	431a      	orrs	r2, r3
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d012      	beq.n	80023b6 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <ETH_Prepare_Tx_Descriptors+0x228>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	6852      	ldr	r2, [r2, #4]
 80023ac:	0412      	lsls	r2, r2, #16
 80023ae:	431a      	orrs	r2, r3
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e008      	b.n	80023c8 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <ETH_Prepare_Tx_Descriptors+0x228>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d021      	beq.n	8002418 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	04db      	lsls	r3, r3, #19
 80023e2:	431a      	orrs	r2, r3
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <ETH_Prepare_Tx_Descriptors+0x22c>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	69d2      	ldr	r2, [r2, #28]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	e02e      	b.n	8002466 <ETH_Prepare_Tx_Descriptors+0x27e>
 8002408:	ffff0000 	.word	0xffff0000
 800240c:	ffffc000 	.word	0xffffc000
 8002410:	c000ffff 	.word	0xc000ffff
 8002414:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b98      	ldr	r3, [pc, #608]	; (8002680 <ETH_Prepare_Tx_Descriptors+0x498>)
 800241e:	4013      	ands	r3, r2
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	6852      	ldr	r2, [r2, #4]
 8002424:	431a      	orrs	r2, r3
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	431a      	orrs	r2, r3
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	431a      	orrs	r2, r3
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80c0 	beq.w	8002636 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024c8:	e0b5      	b.n	8002636 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	3301      	adds	r3, #1
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d902      	bls.n	80024e8 <ETH_Prepare_Tx_Descriptors+0x300>
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	3b04      	subs	r3, #4
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800250a:	d126      	bne.n	800255a <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
 800251e:	e016      	b.n	800254e <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	3301      	adds	r3, #1
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	2b03      	cmp	r3, #3
 8002536:	d902      	bls.n	800253e <ETH_Prepare_Tx_Descriptors+0x356>
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	3b04      	subs	r3, #4
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	3301      	adds	r3, #1
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	429a      	cmp	r2, r3
 8002554:	d3e4      	bcc.n	8002520 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	e08c      	b.n	8002674 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	3301      	adds	r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8002576:	4013      	ands	r3, r2
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	6852      	ldr	r2, [r2, #4]
 800257c:	431a      	orrs	r2, r3
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d012      	beq.n	80025b0 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	6852      	ldr	r2, [r2, #4]
 80025a6:	0412      	lsls	r2, r2, #16
 80025a8:	431a      	orrs	r2, r3
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	e008      	b.n	80025c2 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2200      	movs	r2, #0
 80025b4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	6a3a      	ldr	r2, [r7, #32]
 80025c0:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00f      	beq.n	80025ee <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	69d2      	ldr	r2, [r2, #28]
 80025da:	431a      	orrs	r2, r3
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	e017      	b.n	800261e <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <ETH_Prepare_Tx_Descriptors+0x498>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	6852      	ldr	r2, [r2, #4]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	431a      	orrs	r2, r3
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f47f af45 	bne.w	80024ca <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	e005      	b.n	8002660 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002670:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3734      	adds	r7, #52	; 0x34
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	ffff8000 	.word	0xffff8000
 8002684:	ffffc000 	.word	0xffffc000
 8002688:	c000ffff 	.word	0xc000ffff
 800268c:	fffc0000 	.word	0xfffc0000

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_GPIO_Init+0x234>)
 80026a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026a2:	e194      	b.n	80029ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8186 	beq.w	80029c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x3c>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d123      	bne.n	8002714 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d00b      	beq.n	8002768 <HAL_GPIO_Init+0xd8>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d007      	beq.n	8002768 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275c:	2b11      	cmp	r3, #17
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b12      	cmp	r3, #18
 8002766:	d130      	bne.n	80027ca <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800279e:	2201      	movs	r2, #1
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 0201 	and.w	r2, r3, #1
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80e0 	beq.w	80029c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_GPIO_Init+0x238>)
 800280a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800280e:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <HAL_GPIO_Init+0x238>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_GPIO_Init+0x238>)
 800281a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002826:	4a29      	ldr	r2, [pc, #164]	; (80028cc <HAL_GPIO_Init+0x23c>)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_GPIO_Init+0x240>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d052      	beq.n	80028f8 <HAL_GPIO_Init+0x268>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_GPIO_Init+0x244>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d031      	beq.n	80028be <HAL_GPIO_Init+0x22e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <HAL_GPIO_Init+0x248>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x22a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_GPIO_Init+0x24c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_GPIO_Init+0x250>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x222>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_GPIO_Init+0x254>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x21e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x258>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x21a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_GPIO_Init+0x25c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x216>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <HAL_GPIO_Init+0x260>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x212>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a17      	ldr	r2, [pc, #92]	; (80028f4 <HAL_GPIO_Init+0x264>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x20e>
 800289a:	2309      	movs	r3, #9
 800289c:	e02d      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 800289e:	230a      	movs	r3, #10
 80028a0:	e02b      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028a2:	2308      	movs	r3, #8
 80028a4:	e029      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e027      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e025      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e023      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e021      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e01f      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e01d      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e01b      	b.n	80028fa <HAL_GPIO_Init+0x26a>
 80028c2:	bf00      	nop
 80028c4:	58000080 	.word	0x58000080
 80028c8:	58024400 	.word	0x58024400
 80028cc:	58000400 	.word	0x58000400
 80028d0:	58020000 	.word	0x58020000
 80028d4:	58020400 	.word	0x58020400
 80028d8:	58020800 	.word	0x58020800
 80028dc:	58020c00 	.word	0x58020c00
 80028e0:	58021000 	.word	0x58021000
 80028e4:	58021400 	.word	0x58021400
 80028e8:	58021800 	.word	0x58021800
 80028ec:	58021c00 	.word	0x58021c00
 80028f0:	58022000 	.word	0x58022000
 80028f4:	58022400 	.word	0x58022400
 80028f8:	2300      	movs	r3, #0
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	f002 0203 	and.w	r2, r2, #3
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	4093      	lsls	r3, r2
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800290a:	4938      	ldr	r1, [pc, #224]	; (80029ec <HAL_GPIO_Init+0x35c>)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800296c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f ae63 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
  }
}
 80029de:	bf00      	nop
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	58000400 	.word	0x58000400

080029f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
 80029fc:	4613      	mov	r3, r2
 80029fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a00:	787b      	ldrb	r3, [r7, #1]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a0c:	e003      	b.n	8002a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	041a      	lsls	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	619a      	str	r2, [r3, #24]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a24:	b08f      	sub	sp, #60	; 0x3c
 8002a26:	af0a      	add	r7, sp, #40	; 0x28
 8002a28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e116      	b.n	8002c62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f00f f95c 	bl	8011d0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2203      	movs	r2, #3
 8002a58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f005 f854 	bl	8007b20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	687e      	ldr	r6, [r7, #4]
 8002a80:	466d      	mov	r5, sp
 8002a82:	f106 0410 	add.w	r4, r6, #16
 8002a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a96:	1d33      	adds	r3, r6, #4
 8002a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a9a:	6838      	ldr	r0, [r7, #0]
 8002a9c:	f004 ffde 	bl	8007a5c <USB_CoreInit>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0d7      	b.n	8002c62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f005 f842 	bl	8007b42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e04a      	b.n	8002b5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	333d      	adds	r3, #61	; 0x3d
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	333c      	adds	r3, #60	; 0x3c
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	b298      	uxth	r0, r3
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3342      	adds	r3, #66	; 0x42
 8002b00:	4602      	mov	r2, r0
 8002b02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	333f      	adds	r3, #63	; 0x3f
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3344      	adds	r3, #68	; 0x44
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3348      	adds	r3, #72	; 0x48
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3350      	adds	r3, #80	; 0x50
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	3301      	adds	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3af      	bcc.n	8002ac4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e044      	b.n	8002bf4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3b5      	bcc.n	8002b6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	687e      	ldr	r6, [r7, #4]
 8002c06:	466d      	mov	r5, sp
 8002c08:	f106 0410 	add.w	r4, r6, #16
 8002c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c1c:	1d33      	adds	r3, r6, #4
 8002c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f004 ffb9 	bl	8007b98 <USB_DevInit>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e014      	b.n	8002c62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d102      	bne.n	8002c56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f80b 	bl	8002c6c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f005 f969 	bl	8007f32 <USB_DevDisconnect>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	10000003 	.word	0x10000003

08002cb4 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_PWREx_ConfigSupply+0x6c>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d008      	beq.n	8002cda <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_PWREx_ConfigSupply+0x6c>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d001      	beq.n	8002cda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e01d      	b.n	8002d16 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_PWREx_ConfigSupply+0x6c>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	490f      	ldr	r1, [pc, #60]	; (8002d20 <HAL_PWREx_ConfigSupply+0x6c>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cea:	f7fd feab 	bl	8000a44 <HAL_GetTick>
 8002cee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002cf0:	e009      	b.n	8002d06 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002cf2:	f7fd fea7 	bl	8000a44 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d00:	d901      	bls.n	8002d06 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e007      	b.n	8002d16 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_PWREx_ConfigSupply+0x6c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	58024800 	.word	0x58024800

08002d24 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	58024800 	.word	0x58024800

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e3a4      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8087 	beq.w	8002e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d64:	4b9a      	ldr	r3, [pc, #616]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d6e:	4b98      	ldr	r3, [pc, #608]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d007      	beq.n	8002d8a <HAL_RCC_OscConfig+0x46>
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2b18      	cmp	r3, #24
 8002d7e:	d110      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x12c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d168      	bne.n	8002e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e37e      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x76>
 8002dac:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a87      	ldr	r2, [pc, #540]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e02e      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x98>
 8002dc2:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a82      	ldr	r2, [pc, #520]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b80      	ldr	r3, [pc, #512]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7f      	ldr	r2, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0xbc>
 8002de6:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a79      	ldr	r2, [pc, #484]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a76      	ldr	r2, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002e00:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6f      	ldr	r2, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fd fe10 	bl	8000a44 <HAL_GetTick>
 8002e24:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fd fe0c 	bl	8000a44 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e332      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e3a:	4b65      	ldr	r3, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe4>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fd fdfc 	bl	8000a44 <HAL_GetTick>
 8002e4c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fd fdf8 	bl	8000a44 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e31e      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e62:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x10c>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80b0 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e80:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e8a:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x162>
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b18      	cmp	r3, #24
 8002e9a:	d149      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1ec>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d144      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x17a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e2f0      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ebe:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0219 	bic.w	r2, r3, #25
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4941      	ldr	r1, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fd fdb8 	bl	8000a44 <HAL_GetTick>
 8002ed4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7fd fdb4 	bl	8000a44 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e2da      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eea:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	f7fd fdd3 	bl	8000aa0 <HAL_GetREVID>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d80a      	bhi.n	8002f1a <HAL_RCC_OscConfig+0x1d6>
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	031b      	lsls	r3, r3, #12
 8002f12:	492f      	ldr	r1, [pc, #188]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	e062      	b.n	8002fe0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	4929      	ldr	r1, [pc, #164]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2e:	e057      	b.n	8002fe0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d038      	beq.n	8002faa <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 0219 	bic.w	r2, r3, #25
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fd fd7b 	bl	8000a44 <HAL_GetTick>
 8002f4e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f52:	f7fd fd77 	bl	8000a44 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e29d      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	f7fd fd96 	bl	8000aa0 <HAL_GetREVID>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f241 0303 	movw	r3, #4099	; 0x1003
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d80a      	bhi.n	8002f94 <HAL_RCC_OscConfig+0x250>
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	031b      	lsls	r3, r3, #12
 8002f8c:	4910      	ldr	r1, [pc, #64]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
 8002f92:	e025      	b.n	8002fe0 <HAL_RCC_OscConfig+0x29c>
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	490b      	ldr	r1, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	e01a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a08      	ldr	r2, [pc, #32]	; (8002fd0 <HAL_RCC_OscConfig+0x28c>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fd fd45 	bl	8000a44 <HAL_GetTick>
 8002fba:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fd fd41 	bl	8000a44 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d903      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e267      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
 8002fd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fd4:	4ba0      	ldr	r3, [pc, #640]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ee      	bne.n	8002fbe <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 808f 	beq.w	800310c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fee:	4b9a      	ldr	r3, [pc, #616]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ff8:	4b97      	ldr	r3, [pc, #604]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d007      	beq.n	8003014 <HAL_RCC_OscConfig+0x2d0>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b18      	cmp	r3, #24
 8003008:	d12d      	bne.n	8003066 <HAL_RCC_OscConfig+0x322>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d128      	bne.n	8003066 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003014:	4b90      	ldr	r3, [pc, #576]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_OscConfig+0x2e8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e239      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800302c:	f7fd fd38 	bl	8000aa0 <HAL_GetREVID>
 8003030:	4602      	mov	r2, r0
 8003032:	f241 0303 	movw	r3, #4099	; 0x1003
 8003036:	429a      	cmp	r2, r3
 8003038:	d80a      	bhi.n	8003050 <HAL_RCC_OscConfig+0x30c>
 800303a:	4b87      	ldr	r3, [pc, #540]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	4983      	ldr	r1, [pc, #524]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800304e:	e05d      	b.n	800310c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003050:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	497e      	ldr	r1, [pc, #504]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003064:	e052      	b.n	800310c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d035      	beq.n	80030da <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800306e:	4b7a      	ldr	r3, [pc, #488]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a79      	ldr	r2, [pc, #484]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fd fce3 	bl	8000a44 <HAL_GetTick>
 800307e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003082:	f7fd fcdf 	bl	8000a44 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e205      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003094:	4b70      	ldr	r3, [pc, #448]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030a0:	f7fd fcfe 	bl	8000aa0 <HAL_GetREVID>
 80030a4:	4602      	mov	r2, r0
 80030a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d80a      	bhi.n	80030c4 <HAL_RCC_OscConfig+0x380>
 80030ae:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	069b      	lsls	r3, r3, #26
 80030bc:	4966      	ldr	r1, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
 80030c2:	e023      	b.n	800310c <HAL_RCC_OscConfig+0x3c8>
 80030c4:	4b64      	ldr	r3, [pc, #400]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4961      	ldr	r1, [pc, #388]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60cb      	str	r3, [r1, #12]
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030da:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80030e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd fcad 	bl	8000a44 <HAL_GetTick>
 80030ea:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030ee:	f7fd fca9 	bl	8000a44 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1cf      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003100:	4b55      	ldr	r3, [pc, #340]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d036      	beq.n	8003186 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d019      	beq.n	8003154 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003120:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fd fc8a 	bl	8000a44 <HAL_GetTick>
 8003130:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003134:	f7fd fc86 	bl	8000a44 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e1ac      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003146:	4b44      	ldr	r3, [pc, #272]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x3f0>
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fd fc70 	bl	8000a44 <HAL_GetTick>
 8003164:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003168:	f7fd fc6c 	bl	8000a44 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e192      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d036      	beq.n	8003200 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d019      	beq.n	80031ce <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2e      	ldr	r2, [pc, #184]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80031a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031a6:	f7fd fc4d 	bl	8000a44 <HAL_GetTick>
 80031aa:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031ae:	f7fd fc49 	bl	8000a44 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e16f      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x46a>
 80031cc:	e018      	b.n	8003200 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a21      	ldr	r2, [pc, #132]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80031d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031da:	f7fd fc33 	bl	8000a44 <HAL_GetTick>
 80031de:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031e2:	f7fd fc2f 	bl	8000a44 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e155      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031f4:	4b18      	ldr	r3, [pc, #96]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8086 	beq.w	800331a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCC_OscConfig+0x518>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <HAL_RCC_OscConfig+0x518>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321a:	f7fd fc13 	bl	8000a44 <HAL_GetTick>
 800321e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7fd fc0f 	bl	8000a44 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b64      	cmp	r3, #100	; 0x64
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e135      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_OscConfig+0x518>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x51c>
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a02      	ldr	r2, [pc, #8]	; (8003258 <HAL_RCC_OscConfig+0x514>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	e032      	b.n	80032bc <HAL_RCC_OscConfig+0x578>
 8003256:	bf00      	nop
 8003258:	58024400 	.word	0x58024400
 800325c:	58024800 	.word	0x58024800
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0x53e>
 8003268:	4b8f      	ldr	r3, [pc, #572]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a8e      	ldr	r2, [pc, #568]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
 8003274:	4b8c      	ldr	r3, [pc, #560]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a8b      	ldr	r2, [pc, #556]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	e01c      	b.n	80032bc <HAL_RCC_OscConfig+0x578>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b05      	cmp	r3, #5
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x560>
 800328a:	4b87      	ldr	r3, [pc, #540]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a86      	ldr	r2, [pc, #536]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	4b84      	ldr	r3, [pc, #528]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a83      	ldr	r2, [pc, #524]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0x578>
 80032a4:	4b80      	ldr	r3, [pc, #512]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a7f      	ldr	r2, [pc, #508]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	4b7d      	ldr	r3, [pc, #500]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a7c      	ldr	r2, [pc, #496]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fd fbbe 	bl	8000a44 <HAL_GetTick>
 80032c8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fbba 	bl	8000a44 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0de      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e2:	4b71      	ldr	r3, [pc, #452]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ee      	beq.n	80032cc <HAL_RCC_OscConfig+0x588>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fd fba8 	bl	8000a44 <HAL_GetTick>
 80032f4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fd fba4 	bl	8000a44 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e0c8      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800330e:	4b66      	ldr	r3, [pc, #408]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ee      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80bd 	beq.w	800349e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003324:	4b60      	ldr	r3, [pc, #384]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800332c:	2b18      	cmp	r3, #24
 800332e:	f000 80b4 	beq.w	800349a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b02      	cmp	r3, #2
 8003338:	f040 8095 	bne.w	8003466 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333c:	4b5a      	ldr	r3, [pc, #360]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a59      	ldr	r2, [pc, #356]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fd fb7c 	bl	8000a44 <HAL_GetTick>
 800334c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003350:	f7fd fb78 	bl	8000a44 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e09e      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336e:	4b4e      	ldr	r3, [pc, #312]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <HAL_RCC_OscConfig+0x768>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	430a      	orrs	r2, r1
 8003382:	4949      	ldr	r1, [pc, #292]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003384:	4313      	orrs	r3, r2
 8003386:	628b      	str	r3, [r1, #40]	; 0x28
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	3b01      	subs	r3, #1
 800338e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	3b01      	subs	r3, #1
 8003398:	025b      	lsls	r3, r3, #9
 800339a:	b29b      	uxth	r3, r3
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	3b01      	subs	r3, #1
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033b8:	493b      	ldr	r1, [pc, #236]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80033be:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4a39      	ldr	r2, [pc, #228]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ce:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <HAL_RCC_OscConfig+0x76c>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033d6:	00d2      	lsls	r2, r2, #3
 80033d8:	4933      	ldr	r1, [pc, #204]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033de:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	f023 020c 	bic.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	492f      	ldr	r1, [pc, #188]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033f0:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	f023 0202 	bic.w	r2, r3, #2
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	492a      	ldr	r1, [pc, #168]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd fb01 	bl	8000a44 <HAL_GetTick>
 8003442:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fd fafd 	bl	8000a44 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e023      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x702>
 8003464:	e01b      	b.n	800349e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800346c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fd fae7 	bl	8000a44 <HAL_GetTick>
 8003476:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fd fae3 	bl	8000a44 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e009      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_OscConfig+0x764>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x736>
 8003498:	e001      	b.n	800349e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3728      	adds	r7, #40	; 0x28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	fffffc0c 	.word	0xfffffc0c
 80034b0:	ffff0007 	.word	0xffff0007

080034b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e18d      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b8a      	ldr	r3, [pc, #552]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d910      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b87      	ldr	r3, [pc, #540]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 020f 	bic.w	r2, r3, #15
 80034de:	4985      	ldr	r1, [pc, #532]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b83      	ldr	r3, [pc, #524]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e175      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003510:	429a      	cmp	r2, r3
 8003512:	d908      	bls.n	8003526 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003514:	4b78      	ldr	r3, [pc, #480]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4975      	ldr	r1, [pc, #468]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003522:	4313      	orrs	r3, r2
 8003524:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d010      	beq.n	8003554 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800353e:	429a      	cmp	r2, r3
 8003540:	d908      	bls.n	8003554 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003542:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	496a      	ldr	r1, [pc, #424]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003550:	4313      	orrs	r3, r2
 8003552:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	4b64      	ldr	r3, [pc, #400]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800356c:	429a      	cmp	r2, r3
 800356e:	d908      	bls.n	8003582 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003570:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	495e      	ldr	r1, [pc, #376]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 800357e:	4313      	orrs	r3, r2
 8003580:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d010      	beq.n	80035b0 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800359a:	429a      	cmp	r2, r3
 800359c:	d908      	bls.n	80035b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800359e:	4b56      	ldr	r3, [pc, #344]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4953      	ldr	r1, [pc, #332]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	4b4d      	ldr	r3, [pc, #308]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d908      	bls.n	80035de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f023 020f 	bic.w	r2, r3, #15
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4947      	ldr	r1, [pc, #284]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d055      	beq.n	8003696 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4940      	ldr	r1, [pc, #256]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d107      	bne.n	8003614 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003604:	4b3c      	ldr	r3, [pc, #240]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d121      	bne.n	8003654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0e7      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d107      	bne.n	800362c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800361c:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d115      	bne.n	8003654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0db      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003634:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0cf      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0c7      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003654:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f023 0207 	bic.w	r2, r3, #7
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4925      	ldr	r1, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003662:	4313      	orrs	r3, r2
 8003664:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fd f9ed 	bl	8000a44 <HAL_GetTick>
 800366a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366c:	e00a      	b.n	8003684 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366e:	f7fd f9e9 	bl	8000a44 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0af      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	429a      	cmp	r2, r3
 8003694:	d1eb      	bne.n	800366e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d208      	bcs.n	80036c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f023 020f 	bic.w	r2, r3, #15
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_RCC_ClockConfig+0x244>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d214      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 020f 	bic.w	r2, r3, #15
 80036da:	4906      	ldr	r1, [pc, #24]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_RCC_ClockConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e077      	b.n	80037e4 <HAL_RCC_ClockConfig+0x330>
 80036f4:	52002000 	.word	0x52002000
 80036f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	4b37      	ldr	r3, [pc, #220]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003714:	429a      	cmp	r2, r3
 8003716:	d208      	bcs.n	800372a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	4931      	ldr	r1, [pc, #196]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 8003726:	4313      	orrs	r3, r2
 8003728:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003742:	429a      	cmp	r2, r3
 8003744:	d208      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003746:	4b29      	ldr	r3, [pc, #164]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4926      	ldr	r1, [pc, #152]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 8003754:	4313      	orrs	r3, r2
 8003756:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003770:	429a      	cmp	r2, r3
 8003772:	d208      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	491a      	ldr	r1, [pc, #104]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 8003782:	4313      	orrs	r3, r2
 8003784:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800379e:	429a      	cmp	r2, r3
 80037a0:	d208      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	490f      	ldr	r1, [pc, #60]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037b4:	f000 f822 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037b8:	4601      	mov	r1, r0
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <HAL_RCC_ClockConfig+0x338>)
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <HAL_RCC_ClockConfig+0x33c>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	fa21 f303 	lsr.w	r3, r1, r3
 80037d0:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_RCC_ClockConfig+0x340>)
 80037d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCC_ClockConfig+0x344>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd f8e9 	bl	80009b0 <HAL_InitTick>
 80037de:	4603      	mov	r3, r0
 80037e0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80037e2:	7afb      	ldrb	r3, [r7, #11]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	58024400 	.word	0x58024400
 80037f0:	08014a2c 	.word	0x08014a2c
 80037f4:	24000024 	.word	0x24000024
 80037f8:	24000000 	.word	0x24000000

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003802:	4baf      	ldr	r3, [pc, #700]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380a:	2b18      	cmp	r3, #24
 800380c:	f200 814e 	bhi.w	8003aac <HAL_RCC_GetSysClockFreq+0x2b0>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800387d 	.word	0x0800387d
 800381c:	08003aad 	.word	0x08003aad
 8003820:	08003aad 	.word	0x08003aad
 8003824:	08003aad 	.word	0x08003aad
 8003828:	08003aad 	.word	0x08003aad
 800382c:	08003aad 	.word	0x08003aad
 8003830:	08003aad 	.word	0x08003aad
 8003834:	08003aad 	.word	0x08003aad
 8003838:	080038a3 	.word	0x080038a3
 800383c:	08003aad 	.word	0x08003aad
 8003840:	08003aad 	.word	0x08003aad
 8003844:	08003aad 	.word	0x08003aad
 8003848:	08003aad 	.word	0x08003aad
 800384c:	08003aad 	.word	0x08003aad
 8003850:	08003aad 	.word	0x08003aad
 8003854:	08003aad 	.word	0x08003aad
 8003858:	080038a9 	.word	0x080038a9
 800385c:	08003aad 	.word	0x08003aad
 8003860:	08003aad 	.word	0x08003aad
 8003864:	08003aad 	.word	0x08003aad
 8003868:	08003aad 	.word	0x08003aad
 800386c:	08003aad 	.word	0x08003aad
 8003870:	08003aad 	.word	0x08003aad
 8003874:	08003aad 	.word	0x08003aad
 8003878:	080038af 	.word	0x080038af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800387c:	4b90      	ldr	r3, [pc, #576]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003888:	4b8d      	ldr	r3, [pc, #564]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	4a8c      	ldr	r2, [pc, #560]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
 8003898:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800389a:	e10a      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800389c:	4b89      	ldr	r3, [pc, #548]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800389e:	61bb      	str	r3, [r7, #24]
    break;
 80038a0:	e107      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038a2:	4b89      	ldr	r3, [pc, #548]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80038a4:	61bb      	str	r3, [r7, #24]
    break;
 80038a6:	e104      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80038a8:	4b88      	ldr	r3, [pc, #544]	; (8003acc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80038aa:	61bb      	str	r3, [r7, #24]
    break;
 80038ac:	e101      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038ae:	4b84      	ldr	r3, [pc, #528]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038b8:	4b81      	ldr	r3, [pc, #516]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038c4:	4b7e      	ldr	r3, [pc, #504]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80038ce:	4b7c      	ldr	r3, [pc, #496]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d2:	08db      	lsrs	r3, r3, #3
 80038d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80da 	beq.w	8003aa6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d05a      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x1b2>
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d302      	bcc.n	8003902 <HAL_RCC_GetSysClockFreq+0x106>
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d078      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003900:	e099      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003902:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02d      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800390e:	4b6c      	ldr	r3, [pc, #432]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	08db      	lsrs	r3, r3, #3
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	4a6a      	ldr	r2, [pc, #424]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800391a:	fa22 f303 	lsr.w	r3, r2, r3
 800391e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003938:	4b61      	ldr	r3, [pc, #388]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003948:	ed97 6a02 	vldr	s12, [r7, #8]
 800394c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003964:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003968:	e087      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003974:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003ad4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397c:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003990:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003994:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ac:	e065      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003ad8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80039bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c0:	4b3f      	ldr	r3, [pc, #252]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80039d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039f0:	e043      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003adc <HAL_RCC_GetSysClockFreq+0x2e0>
 8003a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a04:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a14:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a18:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a34:	e021      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	ee07 3a90 	vmov	s15, r3
 8003a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a40:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003ad8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a58:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a78:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	0a5b      	lsrs	r3, r3, #9
 8003a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a84:	3301      	adds	r3, #1
 8003a86:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9e:	ee17 3a90 	vmov	r3, s15
 8003aa2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
    break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003aae:	61bb      	str	r3, [r7, #24]
    break;
 8003ab0:	bf00      	nop
  }

  return sysclockfreq;
 8003ab2:	69bb      	ldr	r3, [r7, #24]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3724      	adds	r7, #36	; 0x24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	58024400 	.word	0x58024400
 8003ac4:	03d09000 	.word	0x03d09000
 8003ac8:	003d0900 	.word	0x003d0900
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	46000000 	.word	0x46000000
 8003ad4:	4c742400 	.word	0x4c742400
 8003ad8:	4a742400 	.word	0x4a742400
 8003adc:	4af42400 	.word	0x4af42400

08003ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ae4:	f001 f9e2 	bl	8004eac <HAL_RCCEx_GetD1SysClockFreq>
 8003ae8:	4601      	mov	r1, r0
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x30>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa21 f303 	lsr.w	r3, r1, r3
 8003afe:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x34>)
 8003b00:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003b02:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x34>)
 8003b04:	681b      	ldr	r3, [r3, #0]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	08014a2c 	.word	0x08014a2c
 8003b14:	24000028 	.word	0x24000028

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b1c:	f7ff ffe0 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	08014a2c 	.word	0x08014a2c

08003b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b48:	f7ff ffca 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	58024400 	.word	0x58024400
 8003b6c:	08014a2c 	.word	0x08014a2c

08003b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d03d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b94:	d013      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9a:	d802      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003ba0:	e01f      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003ba8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bac:	d01c      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003bae:	e018      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4baf      	ldr	r3, [pc, #700]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4aae      	ldr	r2, [pc, #696]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bbc:	e015      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 f98d 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bce:	e00c      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3324      	adds	r3, #36	; 0x24
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fa36 	bl	8005048 <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
      break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bf0:	4b9f      	ldr	r3, [pc, #636]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfc:	499c      	ldr	r1, [pc, #624]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	650b      	str	r3, [r1, #80]	; 0x50
 8003c02:	e001      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d03d      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d826      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003c1c:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c22:	bf00      	nop
 8003c24:	08003c39 	.word	0x08003c39
 8003c28:	08003c47 	.word	0x08003c47
 8003c2c:	08003c59 	.word	0x08003c59
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c38:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a8c      	ldr	r2, [pc, #560]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c44:	e015      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 f949 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c56:	e00c      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3324      	adds	r3, #36	; 0x24
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 f9f2 	bl	8005048 <RCCEx_PLL3_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c78:	4b7d      	ldr	r3, [pc, #500]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	f023 0207 	bic.w	r2, r3, #7
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c84:	497a      	ldr	r1, [pc, #488]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	650b      	str	r3, [r1, #80]	; 0x50
 8003c8a:	e001      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d03e      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d01c      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ca4:	2b80      	cmp	r3, #128	; 0x80
 8003ca6:	d804      	bhi.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d00d      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003cb0:	e01e      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb4:	d01f      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cba:	d01e      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003cbc:	e018      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4a6b      	ldr	r2, [pc, #428]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cca:	e017      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f906 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cdc:	e00e      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3324      	adds	r3, #36	; 0x24
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f9af 	bl	8005048 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf4:	e002      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d02:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4958      	ldr	r1, [pc, #352]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	650b      	str	r3, [r1, #80]	; 0x50
 8003d14:	e001      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d044      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d30:	d01f      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d36:	d805      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d40:	d00e      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003d42:	e01f      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003d44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d48:	d01f      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003d4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d4e:	d01e      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003d50:	e018      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d5e:	e017      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3304      	adds	r3, #4
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f8bc 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d70:	e00e      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3324      	adds	r3, #36	; 0x24
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 f965 	bl	8005048 <RCCEx_PLL3_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
      break;
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003da4:	4932      	ldr	r1, [pc, #200]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	658b      	str	r3, [r1, #88]	; 0x58
 8003daa:	e001      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d044      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dc6:	d01f      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dcc:	d805      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd6:	d00e      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003dd8:	e01f      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003dda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dde:	d01f      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de4:	d01e      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003de6:	e018      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003df4:	e017      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 f871 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e06:	e00e      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3324      	adds	r3, #36	; 0x24
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 f91a 	bl	8005048 <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e18:	e005      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e3a:	490d      	ldr	r1, [pc, #52]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	658b      	str	r3, [r1, #88]	; 0x58
 8003e40:	e001      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d035      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d00c      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d802      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01b      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003e62:	e017      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d00c      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003e68:	2b30      	cmp	r3, #48	; 0x30
 8003e6a:	d018      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003e6c:	e012      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4baf      	ldr	r3, [pc, #700]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	4aae      	ldr	r2, [pc, #696]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e80:	e00e      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 f82b 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e92:	e005      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
      break;
 8003e98:	e002      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ea6:	4ba3      	ldr	r3, [pc, #652]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb2:	49a0      	ldr	r1, [pc, #640]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d042      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed2:	d01f      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d805      	bhi.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee2:	d00e      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003ee4:	e01f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003ee6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eea:	d01f      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef0:	d01e      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003ef2:	e018      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	4a8e      	ldr	r2, [pc, #568]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f00:	e017      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 ffeb 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f12:	e00e      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3324      	adds	r3, #36	; 0x24
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 f894 	bl	8005048 <RCCEx_PLL3_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f24:	e005      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	75fb      	strb	r3, [r7, #23]
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f38:	4b7e      	ldr	r3, [pc, #504]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	497b      	ldr	r1, [pc, #492]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	650b      	str	r3, [r1, #80]	; 0x50
 8003f4a:	e001      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d042      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f64:	d01b      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f6a:	d805      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d022      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003f76:	e01b      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003f78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7c:	d01d      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f82:	d01c      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003f84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f88:	d01b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003f8a:	e011      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 ffa6 	bl	8004ee4 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f9c:	e012      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3324      	adds	r3, #36	; 0x24
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 f84f 	bl	8005048 <RCCEx_PLL3_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003fae:	e009      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb4:	e006      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fca:	4b5a      	ldr	r3, [pc, #360]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd6:	4957      	ldr	r1, [pc, #348]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	650b      	str	r3, [r1, #80]	; 0x50
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d044      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff8:	d01b      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffe:	d805      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d022      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800400a:	e01b      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d01d      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004016:	d01c      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004018:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800401c:	d01b      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800401e:	e011      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ff5c 	bl	8004ee4 <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004030:	e012      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3324      	adds	r3, #36	; 0x24
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f001 f805 	bl	8005048 <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004042:	e009      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
      break;
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800404a:	bf00      	nop
 800404c:	e004      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800405e:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800406c:	4931      	ldr	r1, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	658b      	str	r3, [r1, #88]	; 0x58
 8004072:	e001      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02d      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800408c:	d005      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800408e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004092:	d009      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d013      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004098:	e00f      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409a:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	4a25      	ldr	r2, [pc, #148]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80040a6:	e00c      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 ff18 	bl	8004ee4 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      break;
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80040c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d4:	4917      	ldr	r1, [pc, #92]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	650b      	str	r3, [r1, #80]	; 0x50
 80040da:	e001      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d035      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d81b      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004139 	.word	0x08004139
 8004100:	0800410d 	.word	0x0800410d
 8004104:	0800411b 	.word	0x0800411b
 8004108:	08004139 	.word	0x08004139
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004118:	e00f      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3304      	adds	r3, #4
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fedf 	bl	8004ee4 <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800412a:	e006      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
      break;
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004132:	bf00      	nop
 8004134:	58024400 	.word	0x58024400
      break;
 8004138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d109      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004140:	4bba      	ldr	r3, [pc, #744]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	f023 0203 	bic.w	r2, r3, #3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	49b7      	ldr	r1, [pc, #732]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8086 	beq.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004166:	4bb2      	ldr	r3, [pc, #712]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4ab1      	ldr	r2, [pc, #708]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004172:	f7fc fc67 	bl	8000a44 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004178:	e009      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fc fc63 	bl	8000a44 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	; 0x64
 8004186:	d902      	bls.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	75fb      	strb	r3, [r7, #23]
        break;
 800418c:	e005      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800418e:	4ba8      	ldr	r3, [pc, #672]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ef      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d166      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041a0:	4ba2      	ldr	r3, [pc, #648]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041aa:	4053      	eors	r3, r2
 80041ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b4:	4b9d      	ldr	r3, [pc, #628]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041be:	4b9b      	ldr	r3, [pc, #620]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	4a9a      	ldr	r2, [pc, #616]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ca:	4b98      	ldr	r3, [pc, #608]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a97      	ldr	r2, [pc, #604]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041d6:	4a95      	ldr	r2, [pc, #596]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e6:	d115      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fc fc2c 	bl	8000a44 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ee:	e00b      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	f7fc fc28 	bl	8000a44 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d902      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	75fb      	strb	r3, [r7, #23]
            break;
 8004206:	e005      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004208:	4b88      	ldr	r3, [pc, #544]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ed      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d126      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004228:	d10d      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800422a:	4b80      	ldr	r3, [pc, #512]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004238:	0919      	lsrs	r1, r3, #4
 800423a:	4b7e      	ldr	r3, [pc, #504]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800423c:	400b      	ands	r3, r1
 800423e:	497b      	ldr	r1, [pc, #492]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	610b      	str	r3, [r1, #16]
 8004244:	e005      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004246:	4b79      	ldr	r3, [pc, #484]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4a78      	ldr	r2, [pc, #480]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800424c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004250:	6113      	str	r3, [r2, #16]
 8004252:	4b76      	ldr	r3, [pc, #472]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004254:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	4972      	ldr	r1, [pc, #456]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	670b      	str	r3, [r1, #112]	; 0x70
 8004266:	e004      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	75bb      	strb	r3, [r7, #22]
 800426c:	e001      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d07d      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004282:	2b28      	cmp	r3, #40	; 0x28
 8004284:	d866      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	0800435b 	.word	0x0800435b
 8004290:	08004355 	.word	0x08004355
 8004294:	08004355 	.word	0x08004355
 8004298:	08004355 	.word	0x08004355
 800429c:	08004355 	.word	0x08004355
 80042a0:	08004355 	.word	0x08004355
 80042a4:	08004355 	.word	0x08004355
 80042a8:	08004355 	.word	0x08004355
 80042ac:	08004331 	.word	0x08004331
 80042b0:	08004355 	.word	0x08004355
 80042b4:	08004355 	.word	0x08004355
 80042b8:	08004355 	.word	0x08004355
 80042bc:	08004355 	.word	0x08004355
 80042c0:	08004355 	.word	0x08004355
 80042c4:	08004355 	.word	0x08004355
 80042c8:	08004355 	.word	0x08004355
 80042cc:	08004343 	.word	0x08004343
 80042d0:	08004355 	.word	0x08004355
 80042d4:	08004355 	.word	0x08004355
 80042d8:	08004355 	.word	0x08004355
 80042dc:	08004355 	.word	0x08004355
 80042e0:	08004355 	.word	0x08004355
 80042e4:	08004355 	.word	0x08004355
 80042e8:	08004355 	.word	0x08004355
 80042ec:	0800435b 	.word	0x0800435b
 80042f0:	08004355 	.word	0x08004355
 80042f4:	08004355 	.word	0x08004355
 80042f8:	08004355 	.word	0x08004355
 80042fc:	08004355 	.word	0x08004355
 8004300:	08004355 	.word	0x08004355
 8004304:	08004355 	.word	0x08004355
 8004308:	08004355 	.word	0x08004355
 800430c:	0800435b 	.word	0x0800435b
 8004310:	08004355 	.word	0x08004355
 8004314:	08004355 	.word	0x08004355
 8004318:	08004355 	.word	0x08004355
 800431c:	08004355 	.word	0x08004355
 8004320:	08004355 	.word	0x08004355
 8004324:	08004355 	.word	0x08004355
 8004328:	08004355 	.word	0x08004355
 800432c:	0800435b 	.word	0x0800435b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fdd4 	bl	8004ee4 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004340:	e00c      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fe7d 	bl	8005048 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
      break;
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800435a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004362:	4b32      	ldr	r3, [pc, #200]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436e:	492f      	ldr	r1, [pc, #188]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	654b      	str	r3, [r1, #84]	; 0x54
 8004374:	e001      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d037      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438a:	2b05      	cmp	r3, #5
 800438c:	d820      	bhi.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043d7 	.word	0x080043d7
 8004398:	080043ad 	.word	0x080043ad
 800439c:	080043bf 	.word	0x080043bf
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fd96 	bl	8004ee4 <RCCEx_PLL2_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043bc:	e00c      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3324      	adds	r3, #36	; 0x24
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fe3f 	bl	8005048 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043ce:	e003      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75fb      	strb	r3, [r7, #23]
      break;
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80043d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ea:	4910      	ldr	r1, [pc, #64]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	654b      	str	r3, [r1, #84]	; 0x54
 80043f0:	e001      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d040      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	2b05      	cmp	r3, #5
 800440a:	d827      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004463 	.word	0x08004463
 8004418:	08004439 	.word	0x08004439
 800441c:	0800444b 	.word	0x0800444b
 8004420:	08004463 	.word	0x08004463
 8004424:	08004463 	.word	0x08004463
 8004428:	08004463 	.word	0x08004463
 800442c:	58024400 	.word	0x58024400
 8004430:	58024800 	.word	0x58024800
 8004434:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	2101      	movs	r1, #1
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fd50 	bl	8004ee4 <RCCEx_PLL2_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004448:	e00c      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3324      	adds	r3, #36	; 0x24
 800444e:	2101      	movs	r1, #1
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fdf9 	bl	8005048 <RCCEx_PLL3_Config>
 8004456:	4603      	mov	r3, r0
 8004458:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800445a:	e003      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	75fb      	strb	r3, [r7, #23]
      break;
 8004460:	e000      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800446a:	4bb3      	ldr	r3, [pc, #716]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f023 0207 	bic.w	r2, r3, #7
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	49af      	ldr	r1, [pc, #700]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	658b      	str	r3, [r1, #88]	; 0x58
 800447e:	e001      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d044      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449a:	d01b      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800449c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a0:	d805      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d022      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80044a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80044ac:	e01b      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d01d      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80044b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b8:	d01c      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80044ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044be:	d01b      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80044c0:	e011      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fd0b 	bl	8004ee4 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044d2:	e012      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	2102      	movs	r1, #2
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fdb4 	bl	8005048 <RCCEx_PLL3_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044e4:	e009      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
      break;
 80044ea:	e006      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044ec:	bf00      	nop
 80044ee:	e004      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80044f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004500:	4b8d      	ldr	r3, [pc, #564]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450e:	498a      	ldr	r1, [pc, #552]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	654b      	str	r3, [r1, #84]	; 0x54
 8004514:	e001      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d044      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004530:	d01b      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004536:	d805      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004542:	e01b      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d01d      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800454a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800454e:	d01c      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004554:	d01b      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004556:	e011      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fcc0 	bl	8004ee4 <RCCEx_PLL2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004568:	e012      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3324      	adds	r3, #36	; 0x24
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fd69 	bl	8005048 <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800457a:	e009      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
      break;
 8004580:	e006      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004582:	bf00      	nop
 8004584:	e004      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800458e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004596:	4b68      	ldr	r3, [pc, #416]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a4:	4964      	ldr	r1, [pc, #400]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	658b      	str	r3, [r1, #88]	; 0x58
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d044      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c6:	d01b      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045cc:	d805      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d022      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80045d8:	e01b      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80045da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045de:	d01d      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80045e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045e4:	d01c      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80045e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045ea:	d01b      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80045ec:	e011      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fc75 	bl	8004ee4 <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80045fe:	e012      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3324      	adds	r3, #36	; 0x24
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fd1e 	bl	8005048 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004610:	e009      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
      break;
 8004616:	e006      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004618:	bf00      	nop
 800461a:	e004      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800461c:	bf00      	nop
 800461e:	e002      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004620:	bf00      	nop
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10a      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800462c:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800463a:	493f      	ldr	r1, [pc, #252]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800463c:	4313      	orrs	r3, r2
 800463e:	658b      	str	r3, [r1, #88]	; 0x58
 8004640:	e001      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01b      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d10b      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3324      	adds	r3, #36	; 0x24
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fcef 	bl	8005048 <RCCEx_PLL3_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75bb      	strb	r3, [r7, #22]
 8004674:	e009      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004676:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004684:	492c      	ldr	r1, [pc, #176]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a0:	d10b      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3324      	adds	r3, #36	; 0x24
 80046a6:	2102      	movs	r1, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fccd 	bl	8005048 <RCCEx_PLL3_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	75bb      	strb	r3, [r7, #22]
 80046b8:	e009      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046ba:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c8:	491b      	ldr	r1, [pc, #108]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d032      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d00d      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80046e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ea:	d016      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d111      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fbf4 	bl	8004ee4 <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004700:	e00c      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3324      	adds	r3, #36	; 0x24
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fc9d 	bl	8005048 <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
      break;
 8004718:	e000      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 800471a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004730:	4901      	ldr	r1, [pc, #4]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	658b      	str	r3, [r1, #88]	; 0x58
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02f      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004756:	d00c      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800475c:	d015      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800475e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004762:	d10f      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004764:	4b79      	ldr	r3, [pc, #484]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	4a78      	ldr	r2, [pc, #480]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800476a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004770:	e00c      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3324      	adds	r3, #36	; 0x24
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fc65 	bl	8005048 <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	75fb      	strb	r3, [r7, #23]
      break;
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800478a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004792:	4b6e      	ldr	r3, [pc, #440]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a0:	496a      	ldr	r1, [pc, #424]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	654b      	str	r3, [r1, #84]	; 0x54
 80047a6:	e001      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d029      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d007      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80047c6:	e00f      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c8:	4b60      	ldr	r3, [pc, #384]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	4a5f      	ldr	r2, [pc, #380]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047d4:	e00b      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fb81 	bl	8004ee4 <RCCEx_PLL2_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047e6:	e002      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
      break;
 80047ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80047f4:	4b55      	ldr	r3, [pc, #340]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80047f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004800:	4952      	ldr	r1, [pc, #328]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004806:	e001      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3324      	adds	r3, #36	; 0x24
 800481c:	2102      	movs	r1, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fc12 	bl	8005048 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02f      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004842:	d00c      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004848:	d802      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d011      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800484e:	e00d      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004854:	d00f      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485a:	d00e      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 800485c:	e006      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485e:	4b3b      	ldr	r3, [pc, #236]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	4a3a      	ldr	r2, [pc, #232]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800486a:	e007      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
      break;
 8004870:	e004      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004872:	bf00      	nop
 8004874:	e002      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004876:	bf00      	nop
 8004878:	e000      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800487a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488e:	492f      	ldr	r1, [pc, #188]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	654b      	str	r3, [r1, #84]	; 0x54
 8004894:	e001      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048a6:	4b29      	ldr	r3, [pc, #164]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	4926      	ldr	r1, [pc, #152]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048d2:	491e      	ldr	r1, [pc, #120]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048e4:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f0:	4916      	ldr	r1, [pc, #88]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	4a11      	ldr	r2, [pc, #68]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800490c:	6113      	str	r3, [r2, #16]
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004918:	490c      	ldr	r1, [pc, #48]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	da08      	bge.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004932:	4906      	ldr	r1, [pc, #24]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004938:	7dbb      	ldrb	r3, [r7, #22]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	58024400 	.word	0x58024400

08004950 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004954:	f7ff f8c4 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8004958:	4601      	mov	r1, r0
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	58024400 	.word	0x58024400
 8004978:	08014a2c 	.word	0x08014a2c

0800497c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004984:	4b9d      	ldr	r3, [pc, #628]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800498e:	4b9b      	ldr	r3, [pc, #620]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	0b1b      	lsrs	r3, r3, #12
 8004994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004998:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 800499a:	4b98      	ldr	r3, [pc, #608]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80049a4:	4b95      	ldr	r3, [pc, #596]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 810a 	beq.w	8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d05a      	beq.n	8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d302      	bcc.n	80049d8 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d078      	beq.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80049d6:	e099      	b.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d8:	4b88      	ldr	r3, [pc, #544]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d02d      	beq.n	8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049e4:	4b85      	ldr	r3, [pc, #532]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	08db      	lsrs	r3, r3, #3
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	4a84      	ldr	r2, [pc, #528]	; (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b7b      	ldr	r3, [pc, #492]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a3e:	e087      	b.n	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b6a      	ldr	r3, [pc, #424]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a82:	e065      	b.n	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b59      	ldr	r3, [pc, #356]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ac6:	e043      	b.n	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b48      	ldr	r3, [pc, #288]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b0a:	e021      	b.n	8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b37      	ldr	r3, [pc, #220]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004b50:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	0a5b      	lsrs	r3, r3, #9
 8004b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b76:	ee17 2a90 	vmov	r2, s15
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004b7e:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	0c1b      	lsrs	r3, r3, #16
 8004b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba4:	ee17 2a90 	vmov	r2, s15
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	0e1b      	lsrs	r3, r3, #24
 8004bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd2:	ee17 2a90 	vmov	r2, s15
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bda:	e008      	b.n	8004bee <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	bf00      	nop
 8004bf0:	3724      	adds	r7, #36	; 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	03d09000 	.word	0x03d09000
 8004c04:	46000000 	.word	0x46000000
 8004c08:	4c742400 	.word	0x4c742400
 8004c0c:	4a742400 	.word	0x4a742400
 8004c10:	4af42400 	.word	0x4af42400

08004c14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c1c:	4b9d      	ldr	r3, [pc, #628]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004c26:	4b9b      	ldr	r3, [pc, #620]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	0d1b      	lsrs	r3, r3, #20
 8004c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c30:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004c32:	4b98      	ldr	r3, [pc, #608]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004c3c:	4b95      	ldr	r3, [pc, #596]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	fb02 f303 	mul.w	r3, r2, r3
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 810a 	beq.w	8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d05a      	beq.n	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d302      	bcc.n	8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d078      	beq.n	8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004c6e:	e099      	b.n	8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c70:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02d      	beq.n	8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c7c:	4b85      	ldr	r3, [pc, #532]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	4a84      	ldr	r2, [pc, #528]	; (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b7b      	ldr	r3, [pc, #492]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004cd6:	e087      	b.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b6a      	ldr	r3, [pc, #424]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d1a:	e065      	b.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	4b59      	ldr	r3, [pc, #356]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d5e:	e043      	b.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d72:	4b48      	ldr	r3, [pc, #288]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004da2:	e021      	b.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004de8:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	0a5b      	lsrs	r3, r3, #9
 8004dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0e:	ee17 2a90 	vmov	r2, s15
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3c:	ee17 2a90 	vmov	r2, s15
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	0e1b      	lsrs	r3, r3, #24
 8004e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6a:	ee17 2a90 	vmov	r2, s15
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e72:	e008      	b.n	8004e86 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
}
 8004e86:	bf00      	nop
 8004e88:	3724      	adds	r7, #36	; 0x24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	58024400 	.word	0x58024400
 8004e98:	03d09000 	.word	0x03d09000
 8004e9c:	46000000 	.word	0x46000000
 8004ea0:	4c742400 	.word	0x4c742400
 8004ea4:	4a742400 	.word	0x4a742400
 8004ea8:	4af42400 	.word	0x4af42400

08004eac <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004eb0:	f7fe fca4 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8004eb4:	4601      	mov	r1, r0
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	4a06      	ldr	r2, [pc, #24]	; (8004edc <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8004ec2:	5cd3      	ldrb	r3, [r2, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa21 f303 	lsr.w	r3, r1, r3
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004ece:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	08014a2c 	.word	0x08014a2c
 8004ee0:	24000024 	.word	0x24000024

08004ee4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef2:	4b53      	ldr	r3, [pc, #332]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d101      	bne.n	8004f02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e099      	b.n	8005036 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f02:	4b4f      	ldr	r3, [pc, #316]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a4e      	ldr	r2, [pc, #312]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0e:	f7fb fd99 	bl	8000a44 <HAL_GetTick>
 8004f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f16:	f7fb fd95 	bl	8000a44 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e086      	b.n	8005036 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f28:	4b45      	ldr	r3, [pc, #276]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f34:	4b42      	ldr	r3, [pc, #264]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	031b      	lsls	r3, r3, #12
 8004f42:	493f      	ldr	r1, [pc, #252]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	628b      	str	r3, [r1, #40]	; 0x28
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	025b      	lsls	r3, r3, #9
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f78:	4931      	ldr	r1, [pc, #196]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f7e:	4b30      	ldr	r3, [pc, #192]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	492d      	ldr	r1, [pc, #180]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f90:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	f023 0220 	bic.w	r2, r3, #32
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	4928      	ldr	r1, [pc, #160]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fa2:	4b27      	ldr	r3, [pc, #156]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	f023 0310 	bic.w	r3, r3, #16
 8004fac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <RCCEx_PLL2_Config+0x160>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	69d2      	ldr	r2, [r2, #28]
 8004fba:	00d2      	lsls	r2, r2, #3
 8004fbc:	4920      	ldr	r1, [pc, #128]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	f043 0310 	orr.w	r3, r3, #16
 8004fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	4a19      	ldr	r2, [pc, #100]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fe0:	e00f      	b.n	8005002 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d106      	bne.n	8004ff6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a14      	ldr	r2, [pc, #80]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ff4:	e005      	b.n	8005002 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	4a11      	ldr	r2, [pc, #68]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005000:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005002:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a0e      	ldr	r2, [pc, #56]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 8005008:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800500c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500e:	f7fb fd19 	bl	8000a44 <HAL_GetTick>
 8005012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005014:	e008      	b.n	8005028 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005016:	f7fb fd15 	bl	8000a44 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <RCCEx_PLL2_Config+0x15c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	58024400 	.word	0x58024400
 8005044:	ffff0007 	.word	0xffff0007

08005048 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005056:	4b53      	ldr	r3, [pc, #332]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b03      	cmp	r3, #3
 8005060:	d101      	bne.n	8005066 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e099      	b.n	800519a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005066:	4b4f      	ldr	r3, [pc, #316]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a4e      	ldr	r2, [pc, #312]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005072:	f7fb fce7 	bl	8000a44 <HAL_GetTick>
 8005076:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005078:	e008      	b.n	800508c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800507a:	f7fb fce3 	bl	8000a44 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e086      	b.n	800519a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800508c:	4b45      	ldr	r3, [pc, #276]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005098:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	051b      	lsls	r3, r3, #20
 80050a6:	493f      	ldr	r1, [pc, #252]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	628b      	str	r3, [r1, #40]	; 0x28
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	025b      	lsls	r3, r3, #9
 80050be:	b29b      	uxth	r3, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050dc:	4931      	ldr	r1, [pc, #196]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050e2:	4b30      	ldr	r3, [pc, #192]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	492d      	ldr	r1, [pc, #180]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	4928      	ldr	r1, [pc, #160]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005106:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <RCCEx_PLL3_Config+0x160>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	69d2      	ldr	r2, [r2, #28]
 800511e:	00d2      	lsls	r2, r2, #3
 8005120:	4920      	ldr	r1, [pc, #128]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005122:	4313      	orrs	r3, r2
 8005124:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005126:	4b1f      	ldr	r3, [pc, #124]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800513e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005142:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005144:	e00f      	b.n	8005166 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800514c:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005152:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005158:	e005      	b.n	8005166 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	4a11      	ldr	r2, [pc, #68]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005164:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a0e      	ldr	r2, [pc, #56]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005172:	f7fb fc67 	bl	8000a44 <HAL_GetTick>
 8005176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005178:	e008      	b.n	800518c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800517a:	f7fb fc63 	bl	8000a44 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e006      	b.n	800519a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <RCCEx_PLL3_Config+0x15c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400
 80051a8:	ffff0007 	.word	0xffff0007

080051ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e042      	b.n	8005244 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f00c fd1f 	bl	8011c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2224      	movs	r2, #36	; 0x24
 80051da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f82e 	bl	8005250 <UART_SetConfig>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e022      	b.n	8005244 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f002 f9a0 	bl	800754c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f002 fa27 	bl	8007690 <UART_CheckIdleState>
 8005242:	4603      	mov	r3, r0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	0000      	movs	r0, r0
	...

08005250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005250:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005254:	b090      	sub	sp, #64	; 0x40
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800525a:	2300      	movs	r3, #0
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005264:	2300      	movs	r3, #0
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	4313      	orrs	r3, r2
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005286:	4313      	orrs	r3, r2
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4bc1      	ldr	r3, [pc, #772]	; (8005598 <UART_SetConfig+0x348>)
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800529a:	430b      	orrs	r3, r1
 800529c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4ab7      	ldr	r2, [pc, #732]	; (800559c <UART_SetConfig+0x34c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ca:	4313      	orrs	r3, r2
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	4bb2      	ldr	r3, [pc, #712]	; (80055a0 <UART_SetConfig+0x350>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052de:	430b      	orrs	r3, r1
 80052e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	f023 010f 	bic.w	r1, r3, #15
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4aa9      	ldr	r2, [pc, #676]	; (80055a4 <UART_SetConfig+0x354>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d177      	bne.n	80053f2 <UART_SetConfig+0x1a2>
 8005302:	4ba9      	ldr	r3, [pc, #676]	; (80055a8 <UART_SetConfig+0x358>)
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800530a:	2b28      	cmp	r3, #40	; 0x28
 800530c:	d86c      	bhi.n	80053e8 <UART_SetConfig+0x198>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0xc4>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	080053b9 	.word	0x080053b9
 8005318:	080053e9 	.word	0x080053e9
 800531c:	080053e9 	.word	0x080053e9
 8005320:	080053e9 	.word	0x080053e9
 8005324:	080053e9 	.word	0x080053e9
 8005328:	080053e9 	.word	0x080053e9
 800532c:	080053e9 	.word	0x080053e9
 8005330:	080053e9 	.word	0x080053e9
 8005334:	080053c1 	.word	0x080053c1
 8005338:	080053e9 	.word	0x080053e9
 800533c:	080053e9 	.word	0x080053e9
 8005340:	080053e9 	.word	0x080053e9
 8005344:	080053e9 	.word	0x080053e9
 8005348:	080053e9 	.word	0x080053e9
 800534c:	080053e9 	.word	0x080053e9
 8005350:	080053e9 	.word	0x080053e9
 8005354:	080053c9 	.word	0x080053c9
 8005358:	080053e9 	.word	0x080053e9
 800535c:	080053e9 	.word	0x080053e9
 8005360:	080053e9 	.word	0x080053e9
 8005364:	080053e9 	.word	0x080053e9
 8005368:	080053e9 	.word	0x080053e9
 800536c:	080053e9 	.word	0x080053e9
 8005370:	080053e9 	.word	0x080053e9
 8005374:	080053d1 	.word	0x080053d1
 8005378:	080053e9 	.word	0x080053e9
 800537c:	080053e9 	.word	0x080053e9
 8005380:	080053e9 	.word	0x080053e9
 8005384:	080053e9 	.word	0x080053e9
 8005388:	080053e9 	.word	0x080053e9
 800538c:	080053e9 	.word	0x080053e9
 8005390:	080053e9 	.word	0x080053e9
 8005394:	080053d9 	.word	0x080053d9
 8005398:	080053e9 	.word	0x080053e9
 800539c:	080053e9 	.word	0x080053e9
 80053a0:	080053e9 	.word	0x080053e9
 80053a4:	080053e9 	.word	0x080053e9
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053e9 	.word	0x080053e9
 80053b0:	080053e9 	.word	0x080053e9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	2301      	movs	r3, #1
 80053ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80053be:	e233      	b.n	8005828 <UART_SetConfig+0x5d8>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80053c6:	e22f      	b.n	8005828 <UART_SetConfig+0x5d8>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80053ce:	e22b      	b.n	8005828 <UART_SetConfig+0x5d8>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80053d6:	e227      	b.n	8005828 <UART_SetConfig+0x5d8>
 80053d8:	2320      	movs	r3, #32
 80053da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80053de:	e223      	b.n	8005828 <UART_SetConfig+0x5d8>
 80053e0:	2340      	movs	r3, #64	; 0x40
 80053e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80053e6:	e21f      	b.n	8005828 <UART_SetConfig+0x5d8>
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80053ee:	bf00      	nop
 80053f0:	e21a      	b.n	8005828 <UART_SetConfig+0x5d8>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a6d      	ldr	r2, [pc, #436]	; (80055ac <UART_SetConfig+0x35c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d132      	bne.n	8005462 <UART_SetConfig+0x212>
 80053fc:	4b6a      	ldr	r3, [pc, #424]	; (80055a8 <UART_SetConfig+0x358>)
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	2b05      	cmp	r3, #5
 8005406:	d827      	bhi.n	8005458 <UART_SetConfig+0x208>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0x1c0>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005429 	.word	0x08005429
 8005414:	08005431 	.word	0x08005431
 8005418:	08005439 	.word	0x08005439
 800541c:	08005441 	.word	0x08005441
 8005420:	08005449 	.word	0x08005449
 8005424:	08005451 	.word	0x08005451
 8005428:	2300      	movs	r3, #0
 800542a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800542e:	e1fb      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005430:	2304      	movs	r3, #4
 8005432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005436:	e1f7      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005438:	2308      	movs	r3, #8
 800543a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800543e:	e1f3      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005440:	2310      	movs	r3, #16
 8005442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005446:	e1ef      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005448:	2320      	movs	r3, #32
 800544a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800544e:	e1eb      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005450:	2340      	movs	r3, #64	; 0x40
 8005452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005456:	e1e7      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800545e:	bf00      	nop
 8005460:	e1e2      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a52      	ldr	r2, [pc, #328]	; (80055b0 <UART_SetConfig+0x360>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d132      	bne.n	80054d2 <UART_SetConfig+0x282>
 800546c:	4b4e      	ldr	r3, [pc, #312]	; (80055a8 <UART_SetConfig+0x358>)
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	2b05      	cmp	r3, #5
 8005476:	d827      	bhi.n	80054c8 <UART_SetConfig+0x278>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x230>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	08005499 	.word	0x08005499
 8005484:	080054a1 	.word	0x080054a1
 8005488:	080054a9 	.word	0x080054a9
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054c1 	.word	0x080054c1
 8005498:	2300      	movs	r3, #0
 800549a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800549e:	e1c3      	b.n	8005828 <UART_SetConfig+0x5d8>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80054a6:	e1bf      	b.n	8005828 <UART_SetConfig+0x5d8>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80054ae:	e1bb      	b.n	8005828 <UART_SetConfig+0x5d8>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80054b6:	e1b7      	b.n	8005828 <UART_SetConfig+0x5d8>
 80054b8:	2320      	movs	r3, #32
 80054ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80054be:	e1b3      	b.n	8005828 <UART_SetConfig+0x5d8>
 80054c0:	2340      	movs	r3, #64	; 0x40
 80054c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80054c6:	e1af      	b.n	8005828 <UART_SetConfig+0x5d8>
 80054c8:	2380      	movs	r3, #128	; 0x80
 80054ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80054ce:	bf00      	nop
 80054d0:	e1aa      	b.n	8005828 <UART_SetConfig+0x5d8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a37      	ldr	r2, [pc, #220]	; (80055b4 <UART_SetConfig+0x364>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d132      	bne.n	8005542 <UART_SetConfig+0x2f2>
 80054dc:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <UART_SetConfig+0x358>)
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	d827      	bhi.n	8005538 <UART_SetConfig+0x2e8>
 80054e8:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <UART_SetConfig+0x2a0>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005509 	.word	0x08005509
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005519 	.word	0x08005519
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005529 	.word	0x08005529
 8005504:	08005531 	.word	0x08005531
 8005508:	2300      	movs	r3, #0
 800550a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800550e:	e18b      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005516:	e187      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800551e:	e183      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005526:	e17f      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005528:	2320      	movs	r3, #32
 800552a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800552e:	e17b      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005530:	2340      	movs	r3, #64	; 0x40
 8005532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005536:	e177      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800553e:	bf00      	nop
 8005540:	e172      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <UART_SetConfig+0x368>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d144      	bne.n	80055d6 <UART_SetConfig+0x386>
 800554c:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <UART_SetConfig+0x358>)
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	2b05      	cmp	r3, #5
 8005556:	d839      	bhi.n	80055cc <UART_SetConfig+0x37c>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <UART_SetConfig+0x310>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005579 	.word	0x08005579
 8005564:	08005581 	.word	0x08005581
 8005568:	08005589 	.word	0x08005589
 800556c:	08005591 	.word	0x08005591
 8005570:	080055bd 	.word	0x080055bd
 8005574:	080055c5 	.word	0x080055c5
 8005578:	2300      	movs	r3, #0
 800557a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800557e:	e153      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005580:	2304      	movs	r3, #4
 8005582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005586:	e14f      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005588:	2308      	movs	r3, #8
 800558a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800558e:	e14b      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005590:	2310      	movs	r3, #16
 8005592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005596:	e147      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005598:	cfff69f3 	.word	0xcfff69f3
 800559c:	58000c00 	.word	0x58000c00
 80055a0:	11fff4ff 	.word	0x11fff4ff
 80055a4:	40011000 	.word	0x40011000
 80055a8:	58024400 	.word	0x58024400
 80055ac:	40004400 	.word	0x40004400
 80055b0:	40004800 	.word	0x40004800
 80055b4:	40004c00 	.word	0x40004c00
 80055b8:	40005000 	.word	0x40005000
 80055bc:	2320      	movs	r3, #32
 80055be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80055c2:	e131      	b.n	8005828 <UART_SetConfig+0x5d8>
 80055c4:	2340      	movs	r3, #64	; 0x40
 80055c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80055ca:	e12d      	b.n	8005828 <UART_SetConfig+0x5d8>
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80055d2:	bf00      	nop
 80055d4:	e128      	b.n	8005828 <UART_SetConfig+0x5d8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4ac3      	ldr	r2, [pc, #780]	; (80058e8 <UART_SetConfig+0x698>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d178      	bne.n	80056d2 <UART_SetConfig+0x482>
 80055e0:	4bc2      	ldr	r3, [pc, #776]	; (80058ec <UART_SetConfig+0x69c>)
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e8:	2b28      	cmp	r3, #40	; 0x28
 80055ea:	d86d      	bhi.n	80056c8 <UART_SetConfig+0x478>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x3a4>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005699 	.word	0x08005699
 80055f8:	080056c9 	.word	0x080056c9
 80055fc:	080056c9 	.word	0x080056c9
 8005600:	080056c9 	.word	0x080056c9
 8005604:	080056c9 	.word	0x080056c9
 8005608:	080056c9 	.word	0x080056c9
 800560c:	080056c9 	.word	0x080056c9
 8005610:	080056c9 	.word	0x080056c9
 8005614:	080056a1 	.word	0x080056a1
 8005618:	080056c9 	.word	0x080056c9
 800561c:	080056c9 	.word	0x080056c9
 8005620:	080056c9 	.word	0x080056c9
 8005624:	080056c9 	.word	0x080056c9
 8005628:	080056c9 	.word	0x080056c9
 800562c:	080056c9 	.word	0x080056c9
 8005630:	080056c9 	.word	0x080056c9
 8005634:	080056a9 	.word	0x080056a9
 8005638:	080056c9 	.word	0x080056c9
 800563c:	080056c9 	.word	0x080056c9
 8005640:	080056c9 	.word	0x080056c9
 8005644:	080056c9 	.word	0x080056c9
 8005648:	080056c9 	.word	0x080056c9
 800564c:	080056c9 	.word	0x080056c9
 8005650:	080056c9 	.word	0x080056c9
 8005654:	080056b1 	.word	0x080056b1
 8005658:	080056c9 	.word	0x080056c9
 800565c:	080056c9 	.word	0x080056c9
 8005660:	080056c9 	.word	0x080056c9
 8005664:	080056c9 	.word	0x080056c9
 8005668:	080056c9 	.word	0x080056c9
 800566c:	080056c9 	.word	0x080056c9
 8005670:	080056c9 	.word	0x080056c9
 8005674:	080056b9 	.word	0x080056b9
 8005678:	080056c9 	.word	0x080056c9
 800567c:	080056c9 	.word	0x080056c9
 8005680:	080056c9 	.word	0x080056c9
 8005684:	080056c9 	.word	0x080056c9
 8005688:	080056c9 	.word	0x080056c9
 800568c:	080056c9 	.word	0x080056c9
 8005690:	080056c9 	.word	0x080056c9
 8005694:	080056c1 	.word	0x080056c1
 8005698:	2301      	movs	r3, #1
 800569a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800569e:	e0c3      	b.n	8005828 <UART_SetConfig+0x5d8>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056a6:	e0bf      	b.n	8005828 <UART_SetConfig+0x5d8>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056ae:	e0bb      	b.n	8005828 <UART_SetConfig+0x5d8>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056b6:	e0b7      	b.n	8005828 <UART_SetConfig+0x5d8>
 80056b8:	2320      	movs	r3, #32
 80056ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056be:	e0b3      	b.n	8005828 <UART_SetConfig+0x5d8>
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056c6:	e0af      	b.n	8005828 <UART_SetConfig+0x5d8>
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80056ce:	bf00      	nop
 80056d0:	e0aa      	b.n	8005828 <UART_SetConfig+0x5d8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a86      	ldr	r2, [pc, #536]	; (80058f0 <UART_SetConfig+0x6a0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d132      	bne.n	8005742 <UART_SetConfig+0x4f2>
 80056dc:	4b83      	ldr	r3, [pc, #524]	; (80058ec <UART_SetConfig+0x69c>)
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	2b05      	cmp	r3, #5
 80056e6:	d827      	bhi.n	8005738 <UART_SetConfig+0x4e8>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x4a0>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005709 	.word	0x08005709
 80056f4:	08005711 	.word	0x08005711
 80056f8:	08005719 	.word	0x08005719
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	2300      	movs	r3, #0
 800570a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800570e:	e08b      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005716:	e087      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800571e:	e083      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005726:	e07f      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005728:	2320      	movs	r3, #32
 800572a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800572e:	e07b      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005736:	e077      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800573e:	bf00      	nop
 8005740:	e072      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6b      	ldr	r2, [pc, #428]	; (80058f4 <UART_SetConfig+0x6a4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d132      	bne.n	80057b2 <UART_SetConfig+0x562>
 800574c:	4b67      	ldr	r3, [pc, #412]	; (80058ec <UART_SetConfig+0x69c>)
 800574e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	2b05      	cmp	r3, #5
 8005756:	d827      	bhi.n	80057a8 <UART_SetConfig+0x558>
 8005758:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0x510>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005779 	.word	0x08005779
 8005764:	08005781 	.word	0x08005781
 8005768:	08005789 	.word	0x08005789
 800576c:	08005791 	.word	0x08005791
 8005770:	08005799 	.word	0x08005799
 8005774:	080057a1 	.word	0x080057a1
 8005778:	2300      	movs	r3, #0
 800577a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800577e:	e053      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005780:	2304      	movs	r3, #4
 8005782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005786:	e04f      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005788:	2308      	movs	r3, #8
 800578a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800578e:	e04b      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005790:	2310      	movs	r3, #16
 8005792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005796:	e047      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005798:	2320      	movs	r3, #32
 800579a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800579e:	e043      	b.n	8005828 <UART_SetConfig+0x5d8>
 80057a0:	2340      	movs	r3, #64	; 0x40
 80057a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057a6:	e03f      	b.n	8005828 <UART_SetConfig+0x5d8>
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057ae:	bf00      	nop
 80057b0:	e03a      	b.n	8005828 <UART_SetConfig+0x5d8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a50      	ldr	r2, [pc, #320]	; (80058f8 <UART_SetConfig+0x6a8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d132      	bne.n	8005822 <UART_SetConfig+0x5d2>
 80057bc:	4b4b      	ldr	r3, [pc, #300]	; (80058ec <UART_SetConfig+0x69c>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	2b05      	cmp	r3, #5
 80057c6:	d827      	bhi.n	8005818 <UART_SetConfig+0x5c8>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x580>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057e9 	.word	0x080057e9
 80057d4:	080057f1 	.word	0x080057f1
 80057d8:	080057f9 	.word	0x080057f9
 80057dc:	08005801 	.word	0x08005801
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005811 	.word	0x08005811
 80057e8:	2302      	movs	r3, #2
 80057ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057ee:	e01b      	b.n	8005828 <UART_SetConfig+0x5d8>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057f6:	e017      	b.n	8005828 <UART_SetConfig+0x5d8>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057fe:	e013      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005806:	e00f      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005808:	2320      	movs	r3, #32
 800580a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800580e:	e00b      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005816:	e007      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800581e:	bf00      	nop
 8005820:	e002      	b.n	8005828 <UART_SetConfig+0x5d8>
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a32      	ldr	r2, [pc, #200]	; (80058f8 <UART_SetConfig+0x6a8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	f040 86f7 	bne.w	8006622 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005834:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005838:	2b08      	cmp	r3, #8
 800583a:	f000 80c0 	beq.w	80059be <UART_SetConfig+0x76e>
 800583e:	2b08      	cmp	r3, #8
 8005840:	dc04      	bgt.n	800584c <UART_SetConfig+0x5fc>
 8005842:	2b02      	cmp	r3, #2
 8005844:	d00c      	beq.n	8005860 <UART_SetConfig+0x610>
 8005846:	2b04      	cmp	r3, #4
 8005848:	d065      	beq.n	8005916 <UART_SetConfig+0x6c6>
 800584a:	e27a      	b.n	8005d42 <UART_SetConfig+0xaf2>
 800584c:	2b20      	cmp	r3, #32
 800584e:	f000 81b0 	beq.w	8005bb2 <UART_SetConfig+0x962>
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	f000 821e 	beq.w	8005c94 <UART_SetConfig+0xa44>
 8005858:	2b10      	cmp	r3, #16
 800585a:	f000 8104 	beq.w	8005a66 <UART_SetConfig+0x816>
 800585e:	e270      	b.n	8005d42 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005860:	f7ff f876 	bl	8004950 <HAL_RCCEx_GetD3PCLK1Freq>
 8005864:	4602      	mov	r2, r0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d04e      	beq.n	800590c <UART_SetConfig+0x6bc>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b01      	cmp	r3, #1
 8005874:	d048      	beq.n	8005908 <UART_SetConfig+0x6b8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b02      	cmp	r3, #2
 800587c:	d042      	beq.n	8005904 <UART_SetConfig+0x6b4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b03      	cmp	r3, #3
 8005884:	d03c      	beq.n	8005900 <UART_SetConfig+0x6b0>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b04      	cmp	r3, #4
 800588c:	d036      	beq.n	80058fc <UART_SetConfig+0x6ac>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b05      	cmp	r3, #5
 8005894:	d026      	beq.n	80058e4 <UART_SetConfig+0x694>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b06      	cmp	r3, #6
 800589c:	d020      	beq.n	80058e0 <UART_SetConfig+0x690>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b07      	cmp	r3, #7
 80058a4:	d01a      	beq.n	80058dc <UART_SetConfig+0x68c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d014      	beq.n	80058d8 <UART_SetConfig+0x688>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b09      	cmp	r3, #9
 80058b4:	d00e      	beq.n	80058d4 <UART_SetConfig+0x684>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b0a      	cmp	r3, #10
 80058bc:	d008      	beq.n	80058d0 <UART_SetConfig+0x680>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b0b      	cmp	r3, #11
 80058c4:	d102      	bne.n	80058cc <UART_SetConfig+0x67c>
 80058c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ca:	e020      	b.n	800590e <UART_SetConfig+0x6be>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e01e      	b.n	800590e <UART_SetConfig+0x6be>
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	e01c      	b.n	800590e <UART_SetConfig+0x6be>
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	e01a      	b.n	800590e <UART_SetConfig+0x6be>
 80058d8:	2320      	movs	r3, #32
 80058da:	e018      	b.n	800590e <UART_SetConfig+0x6be>
 80058dc:	2310      	movs	r3, #16
 80058de:	e016      	b.n	800590e <UART_SetConfig+0x6be>
 80058e0:	230c      	movs	r3, #12
 80058e2:	e014      	b.n	800590e <UART_SetConfig+0x6be>
 80058e4:	230a      	movs	r3, #10
 80058e6:	e012      	b.n	800590e <UART_SetConfig+0x6be>
 80058e8:	40011400 	.word	0x40011400
 80058ec:	58024400 	.word	0x58024400
 80058f0:	40007800 	.word	0x40007800
 80058f4:	40007c00 	.word	0x40007c00
 80058f8:	58000c00 	.word	0x58000c00
 80058fc:	2308      	movs	r3, #8
 80058fe:	e006      	b.n	800590e <UART_SetConfig+0x6be>
 8005900:	2306      	movs	r3, #6
 8005902:	e004      	b.n	800590e <UART_SetConfig+0x6be>
 8005904:	2304      	movs	r3, #4
 8005906:	e002      	b.n	800590e <UART_SetConfig+0x6be>
 8005908:	2302      	movs	r3, #2
 800590a:	e000      	b.n	800590e <UART_SetConfig+0x6be>
 800590c:	2301      	movs	r3, #1
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005914:	e219      	b.n	8005d4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005916:	f107 0318 	add.w	r3, r7, #24
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f82e 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d044      	beq.n	80059b4 <UART_SetConfig+0x764>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b01      	cmp	r3, #1
 8005930:	d03e      	beq.n	80059b0 <UART_SetConfig+0x760>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	2b02      	cmp	r3, #2
 8005938:	d038      	beq.n	80059ac <UART_SetConfig+0x75c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	2b03      	cmp	r3, #3
 8005940:	d032      	beq.n	80059a8 <UART_SetConfig+0x758>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	2b04      	cmp	r3, #4
 8005948:	d02c      	beq.n	80059a4 <UART_SetConfig+0x754>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b05      	cmp	r3, #5
 8005950:	d026      	beq.n	80059a0 <UART_SetConfig+0x750>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b06      	cmp	r3, #6
 8005958:	d020      	beq.n	800599c <UART_SetConfig+0x74c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b07      	cmp	r3, #7
 8005960:	d01a      	beq.n	8005998 <UART_SetConfig+0x748>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b08      	cmp	r3, #8
 8005968:	d014      	beq.n	8005994 <UART_SetConfig+0x744>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b09      	cmp	r3, #9
 8005970:	d00e      	beq.n	8005990 <UART_SetConfig+0x740>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2b0a      	cmp	r3, #10
 8005978:	d008      	beq.n	800598c <UART_SetConfig+0x73c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b0b      	cmp	r3, #11
 8005980:	d102      	bne.n	8005988 <UART_SetConfig+0x738>
 8005982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005986:	e016      	b.n	80059b6 <UART_SetConfig+0x766>
 8005988:	2301      	movs	r3, #1
 800598a:	e014      	b.n	80059b6 <UART_SetConfig+0x766>
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	e012      	b.n	80059b6 <UART_SetConfig+0x766>
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	e010      	b.n	80059b6 <UART_SetConfig+0x766>
 8005994:	2320      	movs	r3, #32
 8005996:	e00e      	b.n	80059b6 <UART_SetConfig+0x766>
 8005998:	2310      	movs	r3, #16
 800599a:	e00c      	b.n	80059b6 <UART_SetConfig+0x766>
 800599c:	230c      	movs	r3, #12
 800599e:	e00a      	b.n	80059b6 <UART_SetConfig+0x766>
 80059a0:	230a      	movs	r3, #10
 80059a2:	e008      	b.n	80059b6 <UART_SetConfig+0x766>
 80059a4:	2308      	movs	r3, #8
 80059a6:	e006      	b.n	80059b6 <UART_SetConfig+0x766>
 80059a8:	2306      	movs	r3, #6
 80059aa:	e004      	b.n	80059b6 <UART_SetConfig+0x766>
 80059ac:	2304      	movs	r3, #4
 80059ae:	e002      	b.n	80059b6 <UART_SetConfig+0x766>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e000      	b.n	80059b6 <UART_SetConfig+0x766>
 80059b4:	2301      	movs	r3, #1
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059bc:	e1c5      	b.n	8005d4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059be:	f107 030c 	add.w	r3, r7, #12
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff f926 	bl	8004c14 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d044      	beq.n	8005a5c <UART_SetConfig+0x80c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d03e      	beq.n	8005a58 <UART_SetConfig+0x808>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d038      	beq.n	8005a54 <UART_SetConfig+0x804>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d032      	beq.n	8005a50 <UART_SetConfig+0x800>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d02c      	beq.n	8005a4c <UART_SetConfig+0x7fc>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	d026      	beq.n	8005a48 <UART_SetConfig+0x7f8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	2b06      	cmp	r3, #6
 8005a00:	d020      	beq.n	8005a44 <UART_SetConfig+0x7f4>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	2b07      	cmp	r3, #7
 8005a08:	d01a      	beq.n	8005a40 <UART_SetConfig+0x7f0>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d014      	beq.n	8005a3c <UART_SetConfig+0x7ec>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b09      	cmp	r3, #9
 8005a18:	d00e      	beq.n	8005a38 <UART_SetConfig+0x7e8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	2b0a      	cmp	r3, #10
 8005a20:	d008      	beq.n	8005a34 <UART_SetConfig+0x7e4>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2b0b      	cmp	r3, #11
 8005a28:	d102      	bne.n	8005a30 <UART_SetConfig+0x7e0>
 8005a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a2e:	e016      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e014      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	e012      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	e010      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a3c:	2320      	movs	r3, #32
 8005a3e:	e00e      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a40:	2310      	movs	r3, #16
 8005a42:	e00c      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a44:	230c      	movs	r3, #12
 8005a46:	e00a      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a48:	230a      	movs	r3, #10
 8005a4a:	e008      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	e006      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a50:	2306      	movs	r3, #6
 8005a52:	e004      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a54:	2304      	movs	r3, #4
 8005a56:	e002      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e000      	b.n	8005a5e <UART_SetConfig+0x80e>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a64:	e171      	b.n	8005d4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a66:	4b7a      	ldr	r3, [pc, #488]	; (8005c50 <UART_SetConfig+0xa00>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d054      	beq.n	8005b1c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005a72:	4b77      	ldr	r3, [pc, #476]	; (8005c50 <UART_SetConfig+0xa00>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	08db      	lsrs	r3, r3, #3
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	4a75      	ldr	r2, [pc, #468]	; (8005c54 <UART_SetConfig+0xa04>)
 8005a7e:	40da      	lsrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d044      	beq.n	8005b12 <UART_SetConfig+0x8c2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d03e      	beq.n	8005b0e <UART_SetConfig+0x8be>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d038      	beq.n	8005b0a <UART_SetConfig+0x8ba>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d032      	beq.n	8005b06 <UART_SetConfig+0x8b6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d02c      	beq.n	8005b02 <UART_SetConfig+0x8b2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d026      	beq.n	8005afe <UART_SetConfig+0x8ae>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d020      	beq.n	8005afa <UART_SetConfig+0x8aa>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b07      	cmp	r3, #7
 8005abe:	d01a      	beq.n	8005af6 <UART_SetConfig+0x8a6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d014      	beq.n	8005af2 <UART_SetConfig+0x8a2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	2b09      	cmp	r3, #9
 8005ace:	d00e      	beq.n	8005aee <UART_SetConfig+0x89e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b0a      	cmp	r3, #10
 8005ad6:	d008      	beq.n	8005aea <UART_SetConfig+0x89a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	2b0b      	cmp	r3, #11
 8005ade:	d102      	bne.n	8005ae6 <UART_SetConfig+0x896>
 8005ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ae4:	e016      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e014      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	e012      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	e010      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005af2:	2320      	movs	r3, #32
 8005af4:	e00e      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005af6:	2310      	movs	r3, #16
 8005af8:	e00c      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005afa:	230c      	movs	r3, #12
 8005afc:	e00a      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005afe:	230a      	movs	r3, #10
 8005b00:	e008      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005b02:	2308      	movs	r3, #8
 8005b04:	e006      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005b06:	2306      	movs	r3, #6
 8005b08:	e004      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005b0a:	2304      	movs	r3, #4
 8005b0c:	e002      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e000      	b.n	8005b14 <UART_SetConfig+0x8c4>
 8005b12:	2301      	movs	r3, #1
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005b1a:	e116      	b.n	8005d4a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d043      	beq.n	8005bac <UART_SetConfig+0x95c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d03d      	beq.n	8005ba8 <UART_SetConfig+0x958>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d037      	beq.n	8005ba4 <UART_SetConfig+0x954>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d031      	beq.n	8005ba0 <UART_SetConfig+0x950>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d02b      	beq.n	8005b9c <UART_SetConfig+0x94c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b05      	cmp	r3, #5
 8005b4a:	d025      	beq.n	8005b98 <UART_SetConfig+0x948>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b06      	cmp	r3, #6
 8005b52:	d01f      	beq.n	8005b94 <UART_SetConfig+0x944>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	d019      	beq.n	8005b90 <UART_SetConfig+0x940>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d013      	beq.n	8005b8c <UART_SetConfig+0x93c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	d00d      	beq.n	8005b88 <UART_SetConfig+0x938>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b0a      	cmp	r3, #10
 8005b72:	d007      	beq.n	8005b84 <UART_SetConfig+0x934>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b0b      	cmp	r3, #11
 8005b7a:	d101      	bne.n	8005b80 <UART_SetConfig+0x930>
 8005b7c:	4b36      	ldr	r3, [pc, #216]	; (8005c58 <UART_SetConfig+0xa08>)
 8005b7e:	e016      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b80:	4b34      	ldr	r3, [pc, #208]	; (8005c54 <UART_SetConfig+0xa04>)
 8005b82:	e014      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b84:	4b35      	ldr	r3, [pc, #212]	; (8005c5c <UART_SetConfig+0xa0c>)
 8005b86:	e012      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b88:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <UART_SetConfig+0xa10>)
 8005b8a:	e010      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b8c:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <UART_SetConfig+0xa14>)
 8005b8e:	e00e      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b90:	4b35      	ldr	r3, [pc, #212]	; (8005c68 <UART_SetConfig+0xa18>)
 8005b92:	e00c      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b94:	4b35      	ldr	r3, [pc, #212]	; (8005c6c <UART_SetConfig+0xa1c>)
 8005b96:	e00a      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b98:	4b35      	ldr	r3, [pc, #212]	; (8005c70 <UART_SetConfig+0xa20>)
 8005b9a:	e008      	b.n	8005bae <UART_SetConfig+0x95e>
 8005b9c:	4b35      	ldr	r3, [pc, #212]	; (8005c74 <UART_SetConfig+0xa24>)
 8005b9e:	e006      	b.n	8005bae <UART_SetConfig+0x95e>
 8005ba0:	4b35      	ldr	r3, [pc, #212]	; (8005c78 <UART_SetConfig+0xa28>)
 8005ba2:	e004      	b.n	8005bae <UART_SetConfig+0x95e>
 8005ba4:	4b35      	ldr	r3, [pc, #212]	; (8005c7c <UART_SetConfig+0xa2c>)
 8005ba6:	e002      	b.n	8005bae <UART_SetConfig+0x95e>
 8005ba8:	4b35      	ldr	r3, [pc, #212]	; (8005c80 <UART_SetConfig+0xa30>)
 8005baa:	e000      	b.n	8005bae <UART_SetConfig+0x95e>
 8005bac:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <UART_SetConfig+0xa04>)
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005bb0:	e0cb      	b.n	8005d4a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d046      	beq.n	8005c48 <UART_SetConfig+0x9f8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d040      	beq.n	8005c44 <UART_SetConfig+0x9f4>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d03a      	beq.n	8005c40 <UART_SetConfig+0x9f0>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d034      	beq.n	8005c3c <UART_SetConfig+0x9ec>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d02e      	beq.n	8005c38 <UART_SetConfig+0x9e8>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d028      	beq.n	8005c34 <UART_SetConfig+0x9e4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d022      	beq.n	8005c30 <UART_SetConfig+0x9e0>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b07      	cmp	r3, #7
 8005bf0:	d01c      	beq.n	8005c2c <UART_SetConfig+0x9dc>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d016      	beq.n	8005c28 <UART_SetConfig+0x9d8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	d00f      	beq.n	8005c22 <UART_SetConfig+0x9d2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b0a      	cmp	r3, #10
 8005c08:	d008      	beq.n	8005c1c <UART_SetConfig+0x9cc>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b0b      	cmp	r3, #11
 8005c10:	d102      	bne.n	8005c18 <UART_SetConfig+0x9c8>
 8005c12:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005c16:	e018      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <UART_SetConfig+0xa18>)
 8005c1a:	e016      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c1c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005c20:	e013      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005c26:	e010      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c28:	4b16      	ldr	r3, [pc, #88]	; (8005c84 <UART_SetConfig+0xa34>)
 8005c2a:	e00e      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <UART_SetConfig+0xa08>)
 8005c2e:	e00c      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c30:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <UART_SetConfig+0xa38>)
 8005c32:	e00a      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c34:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <UART_SetConfig+0xa3c>)
 8005c36:	e008      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c38:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <UART_SetConfig+0xa0c>)
 8005c3a:	e006      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c3c:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <UART_SetConfig+0xa40>)
 8005c3e:	e004      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <UART_SetConfig+0xa10>)
 8005c42:	e002      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c44:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <UART_SetConfig+0xa14>)
 8005c46:	e000      	b.n	8005c4a <UART_SetConfig+0x9fa>
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <UART_SetConfig+0xa18>)
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c4c:	e07d      	b.n	8005d4a <UART_SetConfig+0xafa>
 8005c4e:	bf00      	nop
 8005c50:	58024400 	.word	0x58024400
 8005c54:	03d09000 	.word	0x03d09000
 8005c58:	0003d090 	.word	0x0003d090
 8005c5c:	0007a120 	.word	0x0007a120
 8005c60:	000f4240 	.word	0x000f4240
 8005c64:	001e8480 	.word	0x001e8480
 8005c68:	003d0900 	.word	0x003d0900
 8005c6c:	00516155 	.word	0x00516155
 8005c70:	0061a800 	.word	0x0061a800
 8005c74:	007a1200 	.word	0x007a1200
 8005c78:	00a2c2aa 	.word	0x00a2c2aa
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	01e84800 	.word	0x01e84800
 8005c84:	0001e848 	.word	0x0001e848
 8005c88:	00051615 	.word	0x00051615
 8005c8c:	00061a80 	.word	0x00061a80
 8005c90:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d04e      	beq.n	8005d3a <UART_SetConfig+0xaea>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d047      	beq.n	8005d34 <UART_SetConfig+0xae4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d040      	beq.n	8005d2e <UART_SetConfig+0xade>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d039      	beq.n	8005d28 <UART_SetConfig+0xad8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d032      	beq.n	8005d22 <UART_SetConfig+0xad2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b05      	cmp	r3, #5
 8005cc2:	d02b      	beq.n	8005d1c <UART_SetConfig+0xacc>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d024      	beq.n	8005d16 <UART_SetConfig+0xac6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b07      	cmp	r3, #7
 8005cd2:	d01d      	beq.n	8005d10 <UART_SetConfig+0xac0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d016      	beq.n	8005d0a <UART_SetConfig+0xaba>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d00f      	beq.n	8005d04 <UART_SetConfig+0xab4>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b0a      	cmp	r3, #10
 8005cea:	d008      	beq.n	8005cfe <UART_SetConfig+0xaae>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b0b      	cmp	r3, #11
 8005cf2:	d101      	bne.n	8005cf8 <UART_SetConfig+0xaa8>
 8005cf4:	2380      	movs	r3, #128	; 0x80
 8005cf6:	e022      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfc:	e01f      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d02:	e01c      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d08:	e019      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d0e:	e016      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d14:	e013      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d16:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005d1a:	e010      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d1c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005d20:	e00d      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d26:	e00a      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d28:	f241 5355 	movw	r3, #5461	; 0x1555
 8005d2c:	e007      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d32:	e004      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d38:	e001      	b.n	8005d3e <UART_SetConfig+0xaee>
 8005d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d40:	e003      	b.n	8005d4a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8005d48:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f001 83e8 	beq.w	8007522 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d305      	bcc.n	8005d6e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d904      	bls.n	8005d78 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d74:	f001 bbd5 	b.w	8007522 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8005d78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	f000 8154 	beq.w	800602a <UART_SetConfig+0xdda>
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	dc06      	bgt.n	8005d94 <UART_SetConfig+0xb44>
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d00f      	beq.n	8005daa <UART_SetConfig+0xb5a>
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	f000 80ac 	beq.w	8005ee8 <UART_SetConfig+0xc98>
 8005d90:	f000 bc30 	b.w	80065f4 <UART_SetConfig+0x13a4>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	f000 832d 	beq.w	80063f4 <UART_SetConfig+0x11a4>
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	f000 83a5 	beq.w	80064ea <UART_SetConfig+0x129a>
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	f000 81e3 	beq.w	800616c <UART_SetConfig+0xf1c>
 8005da6:	f000 bc25 	b.w	80065f4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005daa:	f7fe fdd1 	bl	8004950 <HAL_RCCEx_GetD3PCLK1Freq>
 8005dae:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	4618      	mov	r0, r3
 8005db4:	f04f 0100 	mov.w	r1, #0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d067      	beq.n	8005e90 <UART_SetConfig+0xc40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d05e      	beq.n	8005e86 <UART_SetConfig+0xc36>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d055      	beq.n	8005e7c <UART_SetConfig+0xc2c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d04c      	beq.n	8005e72 <UART_SetConfig+0xc22>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d043      	beq.n	8005e68 <UART_SetConfig+0xc18>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2b05      	cmp	r3, #5
 8005de6:	d03a      	beq.n	8005e5e <UART_SetConfig+0xc0e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	2b06      	cmp	r3, #6
 8005dee:	d031      	beq.n	8005e54 <UART_SetConfig+0xc04>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b07      	cmp	r3, #7
 8005df6:	d028      	beq.n	8005e4a <UART_SetConfig+0xbfa>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d01f      	beq.n	8005e40 <UART_SetConfig+0xbf0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b09      	cmp	r3, #9
 8005e06:	d016      	beq.n	8005e36 <UART_SetConfig+0xbe6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b0a      	cmp	r3, #10
 8005e0e:	d00d      	beq.n	8005e2c <UART_SetConfig+0xbdc>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b0b      	cmp	r3, #11
 8005e16:	d104      	bne.n	8005e22 <UART_SetConfig+0xbd2>
 8005e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e1c:	f04f 0400 	mov.w	r4, #0
 8005e20:	e03a      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e22:	f04f 0301 	mov.w	r3, #1
 8005e26:	f04f 0400 	mov.w	r4, #0
 8005e2a:	e035      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e2c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005e30:	f04f 0400 	mov.w	r4, #0
 8005e34:	e030      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e36:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005e3a:	f04f 0400 	mov.w	r4, #0
 8005e3e:	e02b      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e40:	f04f 0320 	mov.w	r3, #32
 8005e44:	f04f 0400 	mov.w	r4, #0
 8005e48:	e026      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e4a:	f04f 0310 	mov.w	r3, #16
 8005e4e:	f04f 0400 	mov.w	r4, #0
 8005e52:	e021      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e54:	f04f 030c 	mov.w	r3, #12
 8005e58:	f04f 0400 	mov.w	r4, #0
 8005e5c:	e01c      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e5e:	f04f 030a 	mov.w	r3, #10
 8005e62:	f04f 0400 	mov.w	r4, #0
 8005e66:	e017      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e68:	f04f 0308 	mov.w	r3, #8
 8005e6c:	f04f 0400 	mov.w	r4, #0
 8005e70:	e012      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e72:	f04f 0306 	mov.w	r3, #6
 8005e76:	f04f 0400 	mov.w	r4, #0
 8005e7a:	e00d      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e7c:	f04f 0304 	mov.w	r3, #4
 8005e80:	f04f 0400 	mov.w	r4, #0
 8005e84:	e008      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e86:	f04f 0302 	mov.w	r3, #2
 8005e8a:	f04f 0400 	mov.w	r4, #0
 8005e8e:	e003      	b.n	8005e98 <UART_SetConfig+0xc48>
 8005e90:	f04f 0301 	mov.w	r3, #1
 8005e94:	f04f 0400 	mov.w	r4, #0
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	f7fa fa70 	bl	8000380 <__aeabi_uldivmod>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	f04f 0400 	mov.w	r4, #0
 8005eb0:	0214      	lsls	r4, r2, #8
 8005eb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005eb6:	020b      	lsls	r3, r1, #8
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	0852      	lsrs	r2, r2, #1
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	eb13 0b01 	adds.w	fp, r3, r1
 8005ec8:	eb44 0c02 	adc.w	ip, r4, r2
 8005ecc:	4658      	mov	r0, fp
 8005ece:	4661      	mov	r1, ip
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f04f 0400 	mov.w	r4, #0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4623      	mov	r3, r4
 8005edc:	f7fa fa50 	bl	8000380 <__aeabi_uldivmod>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ee6:	e389      	b.n	80065fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ee8:	f107 0318 	add.w	r3, r7, #24
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fd45 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f04f 0100 	mov.w	r1, #0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d067      	beq.n	8005fd2 <UART_SetConfig+0xd82>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d05e      	beq.n	8005fc8 <UART_SetConfig+0xd78>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d055      	beq.n	8005fbe <UART_SetConfig+0xd6e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d04c      	beq.n	8005fb4 <UART_SetConfig+0xd64>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d043      	beq.n	8005faa <UART_SetConfig+0xd5a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d03a      	beq.n	8005fa0 <UART_SetConfig+0xd50>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d031      	beq.n	8005f96 <UART_SetConfig+0xd46>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b07      	cmp	r3, #7
 8005f38:	d028      	beq.n	8005f8c <UART_SetConfig+0xd3c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d01f      	beq.n	8005f82 <UART_SetConfig+0xd32>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	d016      	beq.n	8005f78 <UART_SetConfig+0xd28>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b0a      	cmp	r3, #10
 8005f50:	d00d      	beq.n	8005f6e <UART_SetConfig+0xd1e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b0b      	cmp	r3, #11
 8005f58:	d104      	bne.n	8005f64 <UART_SetConfig+0xd14>
 8005f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f5e:	f04f 0400 	mov.w	r4, #0
 8005f62:	e03a      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005f64:	f04f 0301 	mov.w	r3, #1
 8005f68:	f04f 0400 	mov.w	r4, #0
 8005f6c:	e035      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005f6e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005f72:	f04f 0400 	mov.w	r4, #0
 8005f76:	e030      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005f78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005f7c:	f04f 0400 	mov.w	r4, #0
 8005f80:	e02b      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005f82:	f04f 0320 	mov.w	r3, #32
 8005f86:	f04f 0400 	mov.w	r4, #0
 8005f8a:	e026      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005f8c:	f04f 0310 	mov.w	r3, #16
 8005f90:	f04f 0400 	mov.w	r4, #0
 8005f94:	e021      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005f96:	f04f 030c 	mov.w	r3, #12
 8005f9a:	f04f 0400 	mov.w	r4, #0
 8005f9e:	e01c      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005fa0:	f04f 030a 	mov.w	r3, #10
 8005fa4:	f04f 0400 	mov.w	r4, #0
 8005fa8:	e017      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005faa:	f04f 0308 	mov.w	r3, #8
 8005fae:	f04f 0400 	mov.w	r4, #0
 8005fb2:	e012      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005fb4:	f04f 0306 	mov.w	r3, #6
 8005fb8:	f04f 0400 	mov.w	r4, #0
 8005fbc:	e00d      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005fbe:	f04f 0304 	mov.w	r3, #4
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	e008      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005fc8:	f04f 0302 	mov.w	r3, #2
 8005fcc:	f04f 0400 	mov.w	r4, #0
 8005fd0:	e003      	b.n	8005fda <UART_SetConfig+0xd8a>
 8005fd2:	f04f 0301 	mov.w	r3, #1
 8005fd6:	f04f 0400 	mov.w	r4, #0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4623      	mov	r3, r4
 8005fde:	f7fa f9cf 	bl	8000380 <__aeabi_uldivmod>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4622      	mov	r2, r4
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	f04f 0400 	mov.w	r4, #0
 8005ff2:	0214      	lsls	r4, r2, #8
 8005ff4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005ff8:	020b      	lsls	r3, r1, #8
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6852      	ldr	r2, [r2, #4]
 8005ffe:	0852      	lsrs	r2, r2, #1
 8006000:	4611      	mov	r1, r2
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	eb13 0b01 	adds.w	fp, r3, r1
 800600a:	eb44 0c02 	adc.w	ip, r4, r2
 800600e:	4658      	mov	r0, fp
 8006010:	4661      	mov	r1, ip
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f04f 0400 	mov.w	r4, #0
 800601a:	461a      	mov	r2, r3
 800601c:	4623      	mov	r3, r4
 800601e:	f7fa f9af 	bl	8000380 <__aeabi_uldivmod>
 8006022:	4603      	mov	r3, r0
 8006024:	460c      	mov	r4, r1
 8006026:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006028:	e2e8      	b.n	80065fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800602a:	f107 030c 	add.w	r3, r7, #12
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fdf0 	bl	8004c14 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4618      	mov	r0, r3
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d067      	beq.n	8006114 <UART_SetConfig+0xec4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b01      	cmp	r3, #1
 800604a:	d05e      	beq.n	800610a <UART_SetConfig+0xeba>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b02      	cmp	r3, #2
 8006052:	d055      	beq.n	8006100 <UART_SetConfig+0xeb0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2b03      	cmp	r3, #3
 800605a:	d04c      	beq.n	80060f6 <UART_SetConfig+0xea6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	2b04      	cmp	r3, #4
 8006062:	d043      	beq.n	80060ec <UART_SetConfig+0xe9c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b05      	cmp	r3, #5
 800606a:	d03a      	beq.n	80060e2 <UART_SetConfig+0xe92>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b06      	cmp	r3, #6
 8006072:	d031      	beq.n	80060d8 <UART_SetConfig+0xe88>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b07      	cmp	r3, #7
 800607a:	d028      	beq.n	80060ce <UART_SetConfig+0xe7e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b08      	cmp	r3, #8
 8006082:	d01f      	beq.n	80060c4 <UART_SetConfig+0xe74>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b09      	cmp	r3, #9
 800608a:	d016      	beq.n	80060ba <UART_SetConfig+0xe6a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b0a      	cmp	r3, #10
 8006092:	d00d      	beq.n	80060b0 <UART_SetConfig+0xe60>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b0b      	cmp	r3, #11
 800609a:	d104      	bne.n	80060a6 <UART_SetConfig+0xe56>
 800609c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a0:	f04f 0400 	mov.w	r4, #0
 80060a4:	e03a      	b.n	800611c <UART_SetConfig+0xecc>
 80060a6:	f04f 0301 	mov.w	r3, #1
 80060aa:	f04f 0400 	mov.w	r4, #0
 80060ae:	e035      	b.n	800611c <UART_SetConfig+0xecc>
 80060b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80060b4:	f04f 0400 	mov.w	r4, #0
 80060b8:	e030      	b.n	800611c <UART_SetConfig+0xecc>
 80060ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80060be:	f04f 0400 	mov.w	r4, #0
 80060c2:	e02b      	b.n	800611c <UART_SetConfig+0xecc>
 80060c4:	f04f 0320 	mov.w	r3, #32
 80060c8:	f04f 0400 	mov.w	r4, #0
 80060cc:	e026      	b.n	800611c <UART_SetConfig+0xecc>
 80060ce:	f04f 0310 	mov.w	r3, #16
 80060d2:	f04f 0400 	mov.w	r4, #0
 80060d6:	e021      	b.n	800611c <UART_SetConfig+0xecc>
 80060d8:	f04f 030c 	mov.w	r3, #12
 80060dc:	f04f 0400 	mov.w	r4, #0
 80060e0:	e01c      	b.n	800611c <UART_SetConfig+0xecc>
 80060e2:	f04f 030a 	mov.w	r3, #10
 80060e6:	f04f 0400 	mov.w	r4, #0
 80060ea:	e017      	b.n	800611c <UART_SetConfig+0xecc>
 80060ec:	f04f 0308 	mov.w	r3, #8
 80060f0:	f04f 0400 	mov.w	r4, #0
 80060f4:	e012      	b.n	800611c <UART_SetConfig+0xecc>
 80060f6:	f04f 0306 	mov.w	r3, #6
 80060fa:	f04f 0400 	mov.w	r4, #0
 80060fe:	e00d      	b.n	800611c <UART_SetConfig+0xecc>
 8006100:	f04f 0304 	mov.w	r3, #4
 8006104:	f04f 0400 	mov.w	r4, #0
 8006108:	e008      	b.n	800611c <UART_SetConfig+0xecc>
 800610a:	f04f 0302 	mov.w	r3, #2
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	e003      	b.n	800611c <UART_SetConfig+0xecc>
 8006114:	f04f 0301 	mov.w	r3, #1
 8006118:	f04f 0400 	mov.w	r4, #0
 800611c:	461a      	mov	r2, r3
 800611e:	4623      	mov	r3, r4
 8006120:	f7fa f92e 	bl	8000380 <__aeabi_uldivmod>
 8006124:	4603      	mov	r3, r0
 8006126:	460c      	mov	r4, r1
 8006128:	4619      	mov	r1, r3
 800612a:	4622      	mov	r2, r4
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	f04f 0400 	mov.w	r4, #0
 8006134:	0214      	lsls	r4, r2, #8
 8006136:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800613a:	020b      	lsls	r3, r1, #8
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6852      	ldr	r2, [r2, #4]
 8006140:	0852      	lsrs	r2, r2, #1
 8006142:	4611      	mov	r1, r2
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	eb13 0b01 	adds.w	fp, r3, r1
 800614c:	eb44 0c02 	adc.w	ip, r4, r2
 8006150:	4658      	mov	r0, fp
 8006152:	4661      	mov	r1, ip
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f04f 0400 	mov.w	r4, #0
 800615c:	461a      	mov	r2, r3
 800615e:	4623      	mov	r3, r4
 8006160:	f7fa f90e 	bl	8000380 <__aeabi_uldivmod>
 8006164:	4603      	mov	r3, r0
 8006166:	460c      	mov	r4, r1
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800616a:	e247      	b.n	80065fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800616c:	4b96      	ldr	r3, [pc, #600]	; (80063c8 <UART_SetConfig+0x1178>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80a3 	beq.w	80062c0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800617a:	4b93      	ldr	r3, [pc, #588]	; (80063c8 <UART_SetConfig+0x1178>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	08db      	lsrs	r3, r3, #3
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	4a91      	ldr	r2, [pc, #580]	; (80063cc <UART_SetConfig+0x117c>)
 8006186:	fa22 f303 	lsr.w	r3, r2, r3
 800618a:	4618      	mov	r0, r3
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	d067      	beq.n	8006268 <UART_SetConfig+0x1018>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	2b01      	cmp	r3, #1
 800619e:	d05e      	beq.n	800625e <UART_SetConfig+0x100e>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d055      	beq.n	8006254 <UART_SetConfig+0x1004>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d04c      	beq.n	800624a <UART_SetConfig+0xffa>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d043      	beq.n	8006240 <UART_SetConfig+0xff0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b05      	cmp	r3, #5
 80061be:	d03a      	beq.n	8006236 <UART_SetConfig+0xfe6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b06      	cmp	r3, #6
 80061c6:	d031      	beq.n	800622c <UART_SetConfig+0xfdc>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	2b07      	cmp	r3, #7
 80061ce:	d028      	beq.n	8006222 <UART_SetConfig+0xfd2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d01f      	beq.n	8006218 <UART_SetConfig+0xfc8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b09      	cmp	r3, #9
 80061de:	d016      	beq.n	800620e <UART_SetConfig+0xfbe>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b0a      	cmp	r3, #10
 80061e6:	d00d      	beq.n	8006204 <UART_SetConfig+0xfb4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b0b      	cmp	r3, #11
 80061ee:	d104      	bne.n	80061fa <UART_SetConfig+0xfaa>
 80061f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f4:	f04f 0400 	mov.w	r4, #0
 80061f8:	e03a      	b.n	8006270 <UART_SetConfig+0x1020>
 80061fa:	f04f 0301 	mov.w	r3, #1
 80061fe:	f04f 0400 	mov.w	r4, #0
 8006202:	e035      	b.n	8006270 <UART_SetConfig+0x1020>
 8006204:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006208:	f04f 0400 	mov.w	r4, #0
 800620c:	e030      	b.n	8006270 <UART_SetConfig+0x1020>
 800620e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006212:	f04f 0400 	mov.w	r4, #0
 8006216:	e02b      	b.n	8006270 <UART_SetConfig+0x1020>
 8006218:	f04f 0320 	mov.w	r3, #32
 800621c:	f04f 0400 	mov.w	r4, #0
 8006220:	e026      	b.n	8006270 <UART_SetConfig+0x1020>
 8006222:	f04f 0310 	mov.w	r3, #16
 8006226:	f04f 0400 	mov.w	r4, #0
 800622a:	e021      	b.n	8006270 <UART_SetConfig+0x1020>
 800622c:	f04f 030c 	mov.w	r3, #12
 8006230:	f04f 0400 	mov.w	r4, #0
 8006234:	e01c      	b.n	8006270 <UART_SetConfig+0x1020>
 8006236:	f04f 030a 	mov.w	r3, #10
 800623a:	f04f 0400 	mov.w	r4, #0
 800623e:	e017      	b.n	8006270 <UART_SetConfig+0x1020>
 8006240:	f04f 0308 	mov.w	r3, #8
 8006244:	f04f 0400 	mov.w	r4, #0
 8006248:	e012      	b.n	8006270 <UART_SetConfig+0x1020>
 800624a:	f04f 0306 	mov.w	r3, #6
 800624e:	f04f 0400 	mov.w	r4, #0
 8006252:	e00d      	b.n	8006270 <UART_SetConfig+0x1020>
 8006254:	f04f 0304 	mov.w	r3, #4
 8006258:	f04f 0400 	mov.w	r4, #0
 800625c:	e008      	b.n	8006270 <UART_SetConfig+0x1020>
 800625e:	f04f 0302 	mov.w	r3, #2
 8006262:	f04f 0400 	mov.w	r4, #0
 8006266:	e003      	b.n	8006270 <UART_SetConfig+0x1020>
 8006268:	f04f 0301 	mov.w	r3, #1
 800626c:	f04f 0400 	mov.w	r4, #0
 8006270:	461a      	mov	r2, r3
 8006272:	4623      	mov	r3, r4
 8006274:	f7fa f884 	bl	8000380 <__aeabi_uldivmod>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	4619      	mov	r1, r3
 800627e:	4622      	mov	r2, r4
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	f04f 0400 	mov.w	r4, #0
 8006288:	0214      	lsls	r4, r2, #8
 800628a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800628e:	020b      	lsls	r3, r1, #8
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6852      	ldr	r2, [r2, #4]
 8006294:	0852      	lsrs	r2, r2, #1
 8006296:	4611      	mov	r1, r2
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	eb13 0b01 	adds.w	fp, r3, r1
 80062a0:	eb44 0c02 	adc.w	ip, r4, r2
 80062a4:	4658      	mov	r0, fp
 80062a6:	4661      	mov	r1, ip
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f04f 0400 	mov.w	r4, #0
 80062b0:	461a      	mov	r2, r3
 80062b2:	4623      	mov	r3, r4
 80062b4:	f7fa f864 	bl	8000380 <__aeabi_uldivmod>
 80062b8:	4603      	mov	r3, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80062be:	e19d      	b.n	80065fc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05b      	beq.n	8006380 <UART_SetConfig+0x1130>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d053      	beq.n	8006378 <UART_SetConfig+0x1128>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d04b      	beq.n	8006370 <UART_SetConfig+0x1120>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d043      	beq.n	8006368 <UART_SetConfig+0x1118>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d03b      	beq.n	8006360 <UART_SetConfig+0x1110>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	d033      	beq.n	8006358 <UART_SetConfig+0x1108>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2b06      	cmp	r3, #6
 80062f6:	d02b      	beq.n	8006350 <UART_SetConfig+0x1100>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2b07      	cmp	r3, #7
 80062fe:	d023      	beq.n	8006348 <UART_SetConfig+0x10f8>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	2b08      	cmp	r3, #8
 8006306:	d01b      	beq.n	8006340 <UART_SetConfig+0x10f0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	2b09      	cmp	r3, #9
 800630e:	d013      	beq.n	8006338 <UART_SetConfig+0x10e8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	2b0a      	cmp	r3, #10
 8006316:	d00b      	beq.n	8006330 <UART_SetConfig+0x10e0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	2b0b      	cmp	r3, #11
 800631e:	d103      	bne.n	8006328 <UART_SetConfig+0x10d8>
 8006320:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <UART_SetConfig+0x117c>)
 8006322:	f04f 0400 	mov.w	r4, #0
 8006326:	e02e      	b.n	8006386 <UART_SetConfig+0x1136>
 8006328:	4b29      	ldr	r3, [pc, #164]	; (80063d0 <UART_SetConfig+0x1180>)
 800632a:	f04f 0403 	mov.w	r4, #3
 800632e:	e02a      	b.n	8006386 <UART_SetConfig+0x1136>
 8006330:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <UART_SetConfig+0x1184>)
 8006332:	f04f 0400 	mov.w	r4, #0
 8006336:	e026      	b.n	8006386 <UART_SetConfig+0x1136>
 8006338:	4b27      	ldr	r3, [pc, #156]	; (80063d8 <UART_SetConfig+0x1188>)
 800633a:	f04f 0400 	mov.w	r4, #0
 800633e:	e022      	b.n	8006386 <UART_SetConfig+0x1136>
 8006340:	4b26      	ldr	r3, [pc, #152]	; (80063dc <UART_SetConfig+0x118c>)
 8006342:	f04f 0400 	mov.w	r4, #0
 8006346:	e01e      	b.n	8006386 <UART_SetConfig+0x1136>
 8006348:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <UART_SetConfig+0x1190>)
 800634a:	f04f 0400 	mov.w	r4, #0
 800634e:	e01a      	b.n	8006386 <UART_SetConfig+0x1136>
 8006350:	a419      	add	r4, pc, #100	; (adr r4, 80063b8 <UART_SetConfig+0x1168>)
 8006352:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006356:	e016      	b.n	8006386 <UART_SetConfig+0x1136>
 8006358:	4b22      	ldr	r3, [pc, #136]	; (80063e4 <UART_SetConfig+0x1194>)
 800635a:	f04f 0400 	mov.w	r4, #0
 800635e:	e012      	b.n	8006386 <UART_SetConfig+0x1136>
 8006360:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <UART_SetConfig+0x1198>)
 8006362:	f04f 0400 	mov.w	r4, #0
 8006366:	e00e      	b.n	8006386 <UART_SetConfig+0x1136>
 8006368:	a415      	add	r4, pc, #84	; (adr r4, 80063c0 <UART_SetConfig+0x1170>)
 800636a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800636e:	e00a      	b.n	8006386 <UART_SetConfig+0x1136>
 8006370:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <UART_SetConfig+0x119c>)
 8006372:	f04f 0400 	mov.w	r4, #0
 8006376:	e006      	b.n	8006386 <UART_SetConfig+0x1136>
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <UART_SetConfig+0x11a0>)
 800637a:	f04f 0401 	mov.w	r4, #1
 800637e:	e002      	b.n	8006386 <UART_SetConfig+0x1136>
 8006380:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <UART_SetConfig+0x1180>)
 8006382:	f04f 0403 	mov.w	r4, #3
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6852      	ldr	r2, [r2, #4]
 800638a:	0852      	lsrs	r2, r2, #1
 800638c:	4611      	mov	r1, r2
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	eb13 0b01 	adds.w	fp, r3, r1
 8006396:	eb44 0c02 	adc.w	ip, r4, r2
 800639a:	4658      	mov	r0, fp
 800639c:	4661      	mov	r1, ip
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f04f 0400 	mov.w	r4, #0
 80063a6:	461a      	mov	r2, r3
 80063a8:	4623      	mov	r3, r4
 80063aa:	f7f9 ffe9 	bl	8000380 <__aeabi_uldivmod>
 80063ae:	4603      	mov	r3, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063b4:	e122      	b.n	80065fc <UART_SetConfig+0x13ac>
 80063b6:	bf00      	nop
 80063b8:	51615500 	.word	0x51615500
 80063bc:	00000000 	.word	0x00000000
 80063c0:	a2c2aa00 	.word	0xa2c2aa00
 80063c4:	00000000 	.word	0x00000000
 80063c8:	58024400 	.word	0x58024400
 80063cc:	03d09000 	.word	0x03d09000
 80063d0:	d0900000 	.word	0xd0900000
 80063d4:	07a12000 	.word	0x07a12000
 80063d8:	0f424000 	.word	0x0f424000
 80063dc:	1e848000 	.word	0x1e848000
 80063e0:	3d090000 	.word	0x3d090000
 80063e4:	61a80000 	.word	0x61a80000
 80063e8:	7a120000 	.word	0x7a120000
 80063ec:	f4240000 	.word	0xf4240000
 80063f0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d05b      	beq.n	80064b4 <UART_SetConfig+0x1264>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	2b01      	cmp	r3, #1
 8006402:	d053      	beq.n	80064ac <UART_SetConfig+0x125c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	2b02      	cmp	r3, #2
 800640a:	d04b      	beq.n	80064a4 <UART_SetConfig+0x1254>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	2b03      	cmp	r3, #3
 8006412:	d043      	beq.n	800649c <UART_SetConfig+0x124c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	2b04      	cmp	r3, #4
 800641a:	d03b      	beq.n	8006494 <UART_SetConfig+0x1244>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b05      	cmp	r3, #5
 8006422:	d033      	beq.n	800648c <UART_SetConfig+0x123c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	2b06      	cmp	r3, #6
 800642a:	d02b      	beq.n	8006484 <UART_SetConfig+0x1234>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b07      	cmp	r3, #7
 8006432:	d023      	beq.n	800647c <UART_SetConfig+0x122c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	2b08      	cmp	r3, #8
 800643a:	d01b      	beq.n	8006474 <UART_SetConfig+0x1224>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b09      	cmp	r3, #9
 8006442:	d013      	beq.n	800646c <UART_SetConfig+0x121c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b0a      	cmp	r3, #10
 800644a:	d00b      	beq.n	8006464 <UART_SetConfig+0x1214>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b0b      	cmp	r3, #11
 8006452:	d103      	bne.n	800645c <UART_SetConfig+0x120c>
 8006454:	4bc0      	ldr	r3, [pc, #768]	; (8006758 <UART_SetConfig+0x1508>)
 8006456:	f04f 0400 	mov.w	r4, #0
 800645a:	e02e      	b.n	80064ba <UART_SetConfig+0x126a>
 800645c:	4bbf      	ldr	r3, [pc, #764]	; (800675c <UART_SetConfig+0x150c>)
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	e02a      	b.n	80064ba <UART_SetConfig+0x126a>
 8006464:	4bbe      	ldr	r3, [pc, #760]	; (8006760 <UART_SetConfig+0x1510>)
 8006466:	f04f 0400 	mov.w	r4, #0
 800646a:	e026      	b.n	80064ba <UART_SetConfig+0x126a>
 800646c:	4bbd      	ldr	r3, [pc, #756]	; (8006764 <UART_SetConfig+0x1514>)
 800646e:	f04f 0400 	mov.w	r4, #0
 8006472:	e022      	b.n	80064ba <UART_SetConfig+0x126a>
 8006474:	4bbc      	ldr	r3, [pc, #752]	; (8006768 <UART_SetConfig+0x1518>)
 8006476:	f04f 0400 	mov.w	r4, #0
 800647a:	e01e      	b.n	80064ba <UART_SetConfig+0x126a>
 800647c:	4bbb      	ldr	r3, [pc, #748]	; (800676c <UART_SetConfig+0x151c>)
 800647e:	f04f 0400 	mov.w	r4, #0
 8006482:	e01a      	b.n	80064ba <UART_SetConfig+0x126a>
 8006484:	a4b0      	add	r4, pc, #704	; (adr r4, 8006748 <UART_SetConfig+0x14f8>)
 8006486:	e9d4 3400 	ldrd	r3, r4, [r4]
 800648a:	e016      	b.n	80064ba <UART_SetConfig+0x126a>
 800648c:	4bb8      	ldr	r3, [pc, #736]	; (8006770 <UART_SetConfig+0x1520>)
 800648e:	f04f 0400 	mov.w	r4, #0
 8006492:	e012      	b.n	80064ba <UART_SetConfig+0x126a>
 8006494:	4bb7      	ldr	r3, [pc, #732]	; (8006774 <UART_SetConfig+0x1524>)
 8006496:	f04f 0400 	mov.w	r4, #0
 800649a:	e00e      	b.n	80064ba <UART_SetConfig+0x126a>
 800649c:	a4ac      	add	r4, pc, #688	; (adr r4, 8006750 <UART_SetConfig+0x1500>)
 800649e:	e9d4 3400 	ldrd	r3, r4, [r4]
 80064a2:	e00a      	b.n	80064ba <UART_SetConfig+0x126a>
 80064a4:	4bb4      	ldr	r3, [pc, #720]	; (8006778 <UART_SetConfig+0x1528>)
 80064a6:	f04f 0400 	mov.w	r4, #0
 80064aa:	e006      	b.n	80064ba <UART_SetConfig+0x126a>
 80064ac:	4bb3      	ldr	r3, [pc, #716]	; (800677c <UART_SetConfig+0x152c>)
 80064ae:	f04f 0400 	mov.w	r4, #0
 80064b2:	e002      	b.n	80064ba <UART_SetConfig+0x126a>
 80064b4:	4ba9      	ldr	r3, [pc, #676]	; (800675c <UART_SetConfig+0x150c>)
 80064b6:	f04f 0400 	mov.w	r4, #0
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6852      	ldr	r2, [r2, #4]
 80064be:	0852      	lsrs	r2, r2, #1
 80064c0:	4611      	mov	r1, r2
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	eb13 0b01 	adds.w	fp, r3, r1
 80064ca:	eb44 0c02 	adc.w	ip, r4, r2
 80064ce:	4658      	mov	r0, fp
 80064d0:	4661      	mov	r1, ip
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f04f 0400 	mov.w	r4, #0
 80064da:	461a      	mov	r2, r3
 80064dc:	4623      	mov	r3, r4
 80064de:	f7f9 ff4f 	bl	8000380 <__aeabi_uldivmod>
 80064e2:	4603      	mov	r3, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80064e8:	e088      	b.n	80065fc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d064      	beq.n	80065bc <UART_SetConfig+0x136c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d05b      	beq.n	80065b2 <UART_SetConfig+0x1362>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d052      	beq.n	80065a8 <UART_SetConfig+0x1358>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	2b03      	cmp	r3, #3
 8006508:	d04a      	beq.n	80065a0 <UART_SetConfig+0x1350>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	2b04      	cmp	r3, #4
 8006510:	d041      	beq.n	8006596 <UART_SetConfig+0x1346>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	2b05      	cmp	r3, #5
 8006518:	d039      	beq.n	800658e <UART_SetConfig+0x133e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2b06      	cmp	r3, #6
 8006520:	d031      	beq.n	8006586 <UART_SetConfig+0x1336>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b07      	cmp	r3, #7
 8006528:	d028      	beq.n	800657c <UART_SetConfig+0x132c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	2b08      	cmp	r3, #8
 8006530:	d01f      	beq.n	8006572 <UART_SetConfig+0x1322>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	2b09      	cmp	r3, #9
 8006538:	d016      	beq.n	8006568 <UART_SetConfig+0x1318>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2b0a      	cmp	r3, #10
 8006540:	d00d      	beq.n	800655e <UART_SetConfig+0x130e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b0b      	cmp	r3, #11
 8006548:	d104      	bne.n	8006554 <UART_SetConfig+0x1304>
 800654a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654e:	f04f 0400 	mov.w	r4, #0
 8006552:	e037      	b.n	80065c4 <UART_SetConfig+0x1374>
 8006554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006558:	f04f 0400 	mov.w	r4, #0
 800655c:	e032      	b.n	80065c4 <UART_SetConfig+0x1374>
 800655e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006562:	f04f 0400 	mov.w	r4, #0
 8006566:	e02d      	b.n	80065c4 <UART_SetConfig+0x1374>
 8006568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800656c:	f04f 0400 	mov.w	r4, #0
 8006570:	e028      	b.n	80065c4 <UART_SetConfig+0x1374>
 8006572:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006576:	f04f 0400 	mov.w	r4, #0
 800657a:	e023      	b.n	80065c4 <UART_SetConfig+0x1374>
 800657c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006580:	f04f 0400 	mov.w	r4, #0
 8006584:	e01e      	b.n	80065c4 <UART_SetConfig+0x1374>
 8006586:	4b7e      	ldr	r3, [pc, #504]	; (8006780 <UART_SetConfig+0x1530>)
 8006588:	f04f 0400 	mov.w	r4, #0
 800658c:	e01a      	b.n	80065c4 <UART_SetConfig+0x1374>
 800658e:	4b7d      	ldr	r3, [pc, #500]	; (8006784 <UART_SetConfig+0x1534>)
 8006590:	f04f 0400 	mov.w	r4, #0
 8006594:	e016      	b.n	80065c4 <UART_SetConfig+0x1374>
 8006596:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800659a:	f04f 0400 	mov.w	r4, #0
 800659e:	e011      	b.n	80065c4 <UART_SetConfig+0x1374>
 80065a0:	4b79      	ldr	r3, [pc, #484]	; (8006788 <UART_SetConfig+0x1538>)
 80065a2:	f04f 0400 	mov.w	r4, #0
 80065a6:	e00d      	b.n	80065c4 <UART_SetConfig+0x1374>
 80065a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065ac:	f04f 0400 	mov.w	r4, #0
 80065b0:	e008      	b.n	80065c4 <UART_SetConfig+0x1374>
 80065b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065b6:	f04f 0400 	mov.w	r4, #0
 80065ba:	e003      	b.n	80065c4 <UART_SetConfig+0x1374>
 80065bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80065c0:	f04f 0400 	mov.w	r4, #0
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6852      	ldr	r2, [r2, #4]
 80065c8:	0852      	lsrs	r2, r2, #1
 80065ca:	4611      	mov	r1, r2
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	eb13 0b01 	adds.w	fp, r3, r1
 80065d4:	eb44 0c02 	adc.w	ip, r4, r2
 80065d8:	4658      	mov	r0, fp
 80065da:	4661      	mov	r1, ip
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f04f 0400 	mov.w	r4, #0
 80065e4:	461a      	mov	r2, r3
 80065e6:	4623      	mov	r3, r4
 80065e8:	f7f9 feca 	bl	8000380 <__aeabi_uldivmod>
 80065ec:	4603      	mov	r3, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80065f2:	e003      	b.n	80065fc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80065fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006602:	d309      	bcc.n	8006618 <UART_SetConfig+0x13c8>
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660a:	d205      	bcs.n	8006618 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006612:	60da      	str	r2, [r3, #12]
 8006614:	f000 bf85 	b.w	8007522 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661e:	f000 bf80 	b.w	8007522 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662a:	f040 83da 	bne.w	8006de2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800662e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	f200 83b3 	bhi.w	8006d9e <UART_SetConfig+0x1b4e>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0x13f0>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	0800678d 	.word	0x0800678d
 8006644:	08006845 	.word	0x08006845
 8006648:	08006d9f 	.word	0x08006d9f
 800664c:	08006d9f 	.word	0x08006d9f
 8006650:	080068fd 	.word	0x080068fd
 8006654:	08006d9f 	.word	0x08006d9f
 8006658:	08006d9f 	.word	0x08006d9f
 800665c:	08006d9f 	.word	0x08006d9f
 8006660:	080069b9 	.word	0x080069b9
 8006664:	08006d9f 	.word	0x08006d9f
 8006668:	08006d9f 	.word	0x08006d9f
 800666c:	08006d9f 	.word	0x08006d9f
 8006670:	08006d9f 	.word	0x08006d9f
 8006674:	08006d9f 	.word	0x08006d9f
 8006678:	08006d9f 	.word	0x08006d9f
 800667c:	08006d9f 	.word	0x08006d9f
 8006680:	08006a75 	.word	0x08006a75
 8006684:	08006d9f 	.word	0x08006d9f
 8006688:	08006d9f 	.word	0x08006d9f
 800668c:	08006d9f 	.word	0x08006d9f
 8006690:	08006d9f 	.word	0x08006d9f
 8006694:	08006d9f 	.word	0x08006d9f
 8006698:	08006d9f 	.word	0x08006d9f
 800669c:	08006d9f 	.word	0x08006d9f
 80066a0:	08006d9f 	.word	0x08006d9f
 80066a4:	08006d9f 	.word	0x08006d9f
 80066a8:	08006d9f 	.word	0x08006d9f
 80066ac:	08006d9f 	.word	0x08006d9f
 80066b0:	08006d9f 	.word	0x08006d9f
 80066b4:	08006d9f 	.word	0x08006d9f
 80066b8:	08006d9f 	.word	0x08006d9f
 80066bc:	08006d9f 	.word	0x08006d9f
 80066c0:	08006be7 	.word	0x08006be7
 80066c4:	08006d9f 	.word	0x08006d9f
 80066c8:	08006d9f 	.word	0x08006d9f
 80066cc:	08006d9f 	.word	0x08006d9f
 80066d0:	08006d9f 	.word	0x08006d9f
 80066d4:	08006d9f 	.word	0x08006d9f
 80066d8:	08006d9f 	.word	0x08006d9f
 80066dc:	08006d9f 	.word	0x08006d9f
 80066e0:	08006d9f 	.word	0x08006d9f
 80066e4:	08006d9f 	.word	0x08006d9f
 80066e8:	08006d9f 	.word	0x08006d9f
 80066ec:	08006d9f 	.word	0x08006d9f
 80066f0:	08006d9f 	.word	0x08006d9f
 80066f4:	08006d9f 	.word	0x08006d9f
 80066f8:	08006d9f 	.word	0x08006d9f
 80066fc:	08006d9f 	.word	0x08006d9f
 8006700:	08006d9f 	.word	0x08006d9f
 8006704:	08006d9f 	.word	0x08006d9f
 8006708:	08006d9f 	.word	0x08006d9f
 800670c:	08006d9f 	.word	0x08006d9f
 8006710:	08006d9f 	.word	0x08006d9f
 8006714:	08006d9f 	.word	0x08006d9f
 8006718:	08006d9f 	.word	0x08006d9f
 800671c:	08006d9f 	.word	0x08006d9f
 8006720:	08006d9f 	.word	0x08006d9f
 8006724:	08006d9f 	.word	0x08006d9f
 8006728:	08006d9f 	.word	0x08006d9f
 800672c:	08006d9f 	.word	0x08006d9f
 8006730:	08006d9f 	.word	0x08006d9f
 8006734:	08006d9f 	.word	0x08006d9f
 8006738:	08006d9f 	.word	0x08006d9f
 800673c:	08006d9f 	.word	0x08006d9f
 8006740:	08006cdd 	.word	0x08006cdd
 8006744:	f3af 8000 	nop.w
 8006748:	05161500 	.word	0x05161500
 800674c:	00000000 	.word	0x00000000
 8006750:	0a2c2a00 	.word	0x0a2c2a00
 8006754:	00000000 	.word	0x00000000
 8006758:	003d0900 	.word	0x003d0900
 800675c:	3d090000 	.word	0x3d090000
 8006760:	007a1200 	.word	0x007a1200
 8006764:	00f42400 	.word	0x00f42400
 8006768:	01e84800 	.word	0x01e84800
 800676c:	03d09000 	.word	0x03d09000
 8006770:	061a8000 	.word	0x061a8000
 8006774:	07a12000 	.word	0x07a12000
 8006778:	0f424000 	.word	0x0f424000
 800677c:	1e848000 	.word	0x1e848000
 8006780:	000aaa00 	.word	0x000aaa00
 8006784:	000ccc00 	.word	0x000ccc00
 8006788:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678c:	f7fd f9c4 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8006790:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d044      	beq.n	8006824 <UART_SetConfig+0x15d4>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d03e      	beq.n	8006820 <UART_SetConfig+0x15d0>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d038      	beq.n	800681c <UART_SetConfig+0x15cc>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d032      	beq.n	8006818 <UART_SetConfig+0x15c8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d02c      	beq.n	8006814 <UART_SetConfig+0x15c4>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d026      	beq.n	8006810 <UART_SetConfig+0x15c0>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	2b06      	cmp	r3, #6
 80067c8:	d020      	beq.n	800680c <UART_SetConfig+0x15bc>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b07      	cmp	r3, #7
 80067d0:	d01a      	beq.n	8006808 <UART_SetConfig+0x15b8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d014      	beq.n	8006804 <UART_SetConfig+0x15b4>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b09      	cmp	r3, #9
 80067e0:	d00e      	beq.n	8006800 <UART_SetConfig+0x15b0>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b0a      	cmp	r3, #10
 80067e8:	d008      	beq.n	80067fc <UART_SetConfig+0x15ac>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b0b      	cmp	r3, #11
 80067f0:	d102      	bne.n	80067f8 <UART_SetConfig+0x15a8>
 80067f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067f6:	e016      	b.n	8006826 <UART_SetConfig+0x15d6>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e014      	b.n	8006826 <UART_SetConfig+0x15d6>
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	e012      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	e010      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006804:	2320      	movs	r3, #32
 8006806:	e00e      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006808:	2310      	movs	r3, #16
 800680a:	e00c      	b.n	8006826 <UART_SetConfig+0x15d6>
 800680c:	230c      	movs	r3, #12
 800680e:	e00a      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006810:	230a      	movs	r3, #10
 8006812:	e008      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006814:	2308      	movs	r3, #8
 8006816:	e006      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006818:	2306      	movs	r3, #6
 800681a:	e004      	b.n	8006826 <UART_SetConfig+0x15d6>
 800681c:	2304      	movs	r3, #4
 800681e:	e002      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006820:	2302      	movs	r3, #2
 8006822:	e000      	b.n	8006826 <UART_SetConfig+0x15d6>
 8006824:	2301      	movs	r3, #1
 8006826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	005a      	lsls	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	441a      	add	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	b29b      	uxth	r3, r3
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006842:	e2b0      	b.n	8006da6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006844:	f7fd f97e 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8006848:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	2b00      	cmp	r3, #0
 8006850:	d044      	beq.n	80068dc <UART_SetConfig+0x168c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b01      	cmp	r3, #1
 8006858:	d03e      	beq.n	80068d8 <UART_SetConfig+0x1688>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	2b02      	cmp	r3, #2
 8006860:	d038      	beq.n	80068d4 <UART_SetConfig+0x1684>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b03      	cmp	r3, #3
 8006868:	d032      	beq.n	80068d0 <UART_SetConfig+0x1680>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2b04      	cmp	r3, #4
 8006870:	d02c      	beq.n	80068cc <UART_SetConfig+0x167c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	2b05      	cmp	r3, #5
 8006878:	d026      	beq.n	80068c8 <UART_SetConfig+0x1678>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b06      	cmp	r3, #6
 8006880:	d020      	beq.n	80068c4 <UART_SetConfig+0x1674>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	2b07      	cmp	r3, #7
 8006888:	d01a      	beq.n	80068c0 <UART_SetConfig+0x1670>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2b08      	cmp	r3, #8
 8006890:	d014      	beq.n	80068bc <UART_SetConfig+0x166c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	2b09      	cmp	r3, #9
 8006898:	d00e      	beq.n	80068b8 <UART_SetConfig+0x1668>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2b0a      	cmp	r3, #10
 80068a0:	d008      	beq.n	80068b4 <UART_SetConfig+0x1664>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	2b0b      	cmp	r3, #11
 80068a8:	d102      	bne.n	80068b0 <UART_SetConfig+0x1660>
 80068aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ae:	e016      	b.n	80068de <UART_SetConfig+0x168e>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e014      	b.n	80068de <UART_SetConfig+0x168e>
 80068b4:	2380      	movs	r3, #128	; 0x80
 80068b6:	e012      	b.n	80068de <UART_SetConfig+0x168e>
 80068b8:	2340      	movs	r3, #64	; 0x40
 80068ba:	e010      	b.n	80068de <UART_SetConfig+0x168e>
 80068bc:	2320      	movs	r3, #32
 80068be:	e00e      	b.n	80068de <UART_SetConfig+0x168e>
 80068c0:	2310      	movs	r3, #16
 80068c2:	e00c      	b.n	80068de <UART_SetConfig+0x168e>
 80068c4:	230c      	movs	r3, #12
 80068c6:	e00a      	b.n	80068de <UART_SetConfig+0x168e>
 80068c8:	230a      	movs	r3, #10
 80068ca:	e008      	b.n	80068de <UART_SetConfig+0x168e>
 80068cc:	2308      	movs	r3, #8
 80068ce:	e006      	b.n	80068de <UART_SetConfig+0x168e>
 80068d0:	2306      	movs	r3, #6
 80068d2:	e004      	b.n	80068de <UART_SetConfig+0x168e>
 80068d4:	2304      	movs	r3, #4
 80068d6:	e002      	b.n	80068de <UART_SetConfig+0x168e>
 80068d8:	2302      	movs	r3, #2
 80068da:	e000      	b.n	80068de <UART_SetConfig+0x168e>
 80068dc:	2301      	movs	r3, #1
 80068de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	005a      	lsls	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	441a      	add	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068fa:	e254      	b.n	8006da6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068fc:	f107 0318 	add.w	r3, r7, #24
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe f83b 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	2b00      	cmp	r3, #0
 800690e:	d044      	beq.n	800699a <UART_SetConfig+0x174a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	2b01      	cmp	r3, #1
 8006916:	d03e      	beq.n	8006996 <UART_SetConfig+0x1746>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	2b02      	cmp	r3, #2
 800691e:	d038      	beq.n	8006992 <UART_SetConfig+0x1742>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2b03      	cmp	r3, #3
 8006926:	d032      	beq.n	800698e <UART_SetConfig+0x173e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	2b04      	cmp	r3, #4
 800692e:	d02c      	beq.n	800698a <UART_SetConfig+0x173a>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b05      	cmp	r3, #5
 8006936:	d026      	beq.n	8006986 <UART_SetConfig+0x1736>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2b06      	cmp	r3, #6
 800693e:	d020      	beq.n	8006982 <UART_SetConfig+0x1732>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	2b07      	cmp	r3, #7
 8006946:	d01a      	beq.n	800697e <UART_SetConfig+0x172e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	2b08      	cmp	r3, #8
 800694e:	d014      	beq.n	800697a <UART_SetConfig+0x172a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	2b09      	cmp	r3, #9
 8006956:	d00e      	beq.n	8006976 <UART_SetConfig+0x1726>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b0a      	cmp	r3, #10
 800695e:	d008      	beq.n	8006972 <UART_SetConfig+0x1722>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2b0b      	cmp	r3, #11
 8006966:	d102      	bne.n	800696e <UART_SetConfig+0x171e>
 8006968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800696c:	e016      	b.n	800699c <UART_SetConfig+0x174c>
 800696e:	2301      	movs	r3, #1
 8006970:	e014      	b.n	800699c <UART_SetConfig+0x174c>
 8006972:	2380      	movs	r3, #128	; 0x80
 8006974:	e012      	b.n	800699c <UART_SetConfig+0x174c>
 8006976:	2340      	movs	r3, #64	; 0x40
 8006978:	e010      	b.n	800699c <UART_SetConfig+0x174c>
 800697a:	2320      	movs	r3, #32
 800697c:	e00e      	b.n	800699c <UART_SetConfig+0x174c>
 800697e:	2310      	movs	r3, #16
 8006980:	e00c      	b.n	800699c <UART_SetConfig+0x174c>
 8006982:	230c      	movs	r3, #12
 8006984:	e00a      	b.n	800699c <UART_SetConfig+0x174c>
 8006986:	230a      	movs	r3, #10
 8006988:	e008      	b.n	800699c <UART_SetConfig+0x174c>
 800698a:	2308      	movs	r3, #8
 800698c:	e006      	b.n	800699c <UART_SetConfig+0x174c>
 800698e:	2306      	movs	r3, #6
 8006990:	e004      	b.n	800699c <UART_SetConfig+0x174c>
 8006992:	2304      	movs	r3, #4
 8006994:	e002      	b.n	800699c <UART_SetConfig+0x174c>
 8006996:	2302      	movs	r3, #2
 8006998:	e000      	b.n	800699c <UART_SetConfig+0x174c>
 800699a:	2301      	movs	r3, #1
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	005a      	lsls	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	441a      	add	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069b6:	e1f6      	b.n	8006da6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069b8:	f107 030c 	add.w	r3, r7, #12
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe f929 	bl	8004c14 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d044      	beq.n	8006a56 <UART_SetConfig+0x1806>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d03e      	beq.n	8006a52 <UART_SetConfig+0x1802>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d038      	beq.n	8006a4e <UART_SetConfig+0x17fe>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d032      	beq.n	8006a4a <UART_SetConfig+0x17fa>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d02c      	beq.n	8006a46 <UART_SetConfig+0x17f6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	2b05      	cmp	r3, #5
 80069f2:	d026      	beq.n	8006a42 <UART_SetConfig+0x17f2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2b06      	cmp	r3, #6
 80069fa:	d020      	beq.n	8006a3e <UART_SetConfig+0x17ee>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	2b07      	cmp	r3, #7
 8006a02:	d01a      	beq.n	8006a3a <UART_SetConfig+0x17ea>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d014      	beq.n	8006a36 <UART_SetConfig+0x17e6>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2b09      	cmp	r3, #9
 8006a12:	d00e      	beq.n	8006a32 <UART_SetConfig+0x17e2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	2b0a      	cmp	r3, #10
 8006a1a:	d008      	beq.n	8006a2e <UART_SetConfig+0x17de>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	2b0b      	cmp	r3, #11
 8006a22:	d102      	bne.n	8006a2a <UART_SetConfig+0x17da>
 8006a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a28:	e016      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e014      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	e012      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a32:	2340      	movs	r3, #64	; 0x40
 8006a34:	e010      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a36:	2320      	movs	r3, #32
 8006a38:	e00e      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	e00c      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a3e:	230c      	movs	r3, #12
 8006a40:	e00a      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a42:	230a      	movs	r3, #10
 8006a44:	e008      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a46:	2308      	movs	r3, #8
 8006a48:	e006      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a4a:	2306      	movs	r3, #6
 8006a4c:	e004      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a4e:	2304      	movs	r3, #4
 8006a50:	e002      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e000      	b.n	8006a58 <UART_SetConfig+0x1808>
 8006a56:	2301      	movs	r3, #1
 8006a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5c:	005a      	lsls	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a72:	e198      	b.n	8006da6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a74:	4b87      	ldr	r3, [pc, #540]	; (8006c94 <UART_SetConfig+0x1a44>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d05e      	beq.n	8006b3e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a80:	4b84      	ldr	r3, [pc, #528]	; (8006c94 <UART_SetConfig+0x1a44>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	08db      	lsrs	r3, r3, #3
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	4a83      	ldr	r2, [pc, #524]	; (8006c98 <UART_SetConfig+0x1a48>)
 8006a8c:	40da      	lsrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d044      	beq.n	8006b20 <UART_SetConfig+0x18d0>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d03e      	beq.n	8006b1c <UART_SetConfig+0x18cc>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d038      	beq.n	8006b18 <UART_SetConfig+0x18c8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d032      	beq.n	8006b14 <UART_SetConfig+0x18c4>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d02c      	beq.n	8006b10 <UART_SetConfig+0x18c0>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d026      	beq.n	8006b0c <UART_SetConfig+0x18bc>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b06      	cmp	r3, #6
 8006ac4:	d020      	beq.n	8006b08 <UART_SetConfig+0x18b8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2b07      	cmp	r3, #7
 8006acc:	d01a      	beq.n	8006b04 <UART_SetConfig+0x18b4>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d014      	beq.n	8006b00 <UART_SetConfig+0x18b0>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d00e      	beq.n	8006afc <UART_SetConfig+0x18ac>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	2b0a      	cmp	r3, #10
 8006ae4:	d008      	beq.n	8006af8 <UART_SetConfig+0x18a8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	2b0b      	cmp	r3, #11
 8006aec:	d102      	bne.n	8006af4 <UART_SetConfig+0x18a4>
 8006aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af2:	e016      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e014      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006af8:	2380      	movs	r3, #128	; 0x80
 8006afa:	e012      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	e010      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b00:	2320      	movs	r3, #32
 8006b02:	e00e      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b04:	2310      	movs	r3, #16
 8006b06:	e00c      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b08:	230c      	movs	r3, #12
 8006b0a:	e00a      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b0c:	230a      	movs	r3, #10
 8006b0e:	e008      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b10:	2308      	movs	r3, #8
 8006b12:	e006      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b14:	2306      	movs	r3, #6
 8006b16:	e004      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	e002      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e000      	b.n	8006b22 <UART_SetConfig+0x18d2>
 8006b20:	2301      	movs	r3, #1
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	005a      	lsls	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	085b      	lsrs	r3, r3, #1
 8006b2e:	441a      	add	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006b3c:	e133      	b.n	8006da6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d043      	beq.n	8006bce <UART_SetConfig+0x197e>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d03d      	beq.n	8006bca <UART_SetConfig+0x197a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d037      	beq.n	8006bc6 <UART_SetConfig+0x1976>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d031      	beq.n	8006bc2 <UART_SetConfig+0x1972>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d02b      	beq.n	8006bbe <UART_SetConfig+0x196e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d025      	beq.n	8006bba <UART_SetConfig+0x196a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	2b06      	cmp	r3, #6
 8006b74:	d01f      	beq.n	8006bb6 <UART_SetConfig+0x1966>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2b07      	cmp	r3, #7
 8006b7c:	d019      	beq.n	8006bb2 <UART_SetConfig+0x1962>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d013      	beq.n	8006bae <UART_SetConfig+0x195e>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b09      	cmp	r3, #9
 8006b8c:	d00d      	beq.n	8006baa <UART_SetConfig+0x195a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	2b0a      	cmp	r3, #10
 8006b94:	d007      	beq.n	8006ba6 <UART_SetConfig+0x1956>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b0b      	cmp	r3, #11
 8006b9c:	d101      	bne.n	8006ba2 <UART_SetConfig+0x1952>
 8006b9e:	4b3f      	ldr	r3, [pc, #252]	; (8006c9c <UART_SetConfig+0x1a4c>)
 8006ba0:	e016      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006ba2:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <UART_SetConfig+0x1a50>)
 8006ba4:	e014      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006ba6:	4b3f      	ldr	r3, [pc, #252]	; (8006ca4 <UART_SetConfig+0x1a54>)
 8006ba8:	e012      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006baa:	4b3f      	ldr	r3, [pc, #252]	; (8006ca8 <UART_SetConfig+0x1a58>)
 8006bac:	e010      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bae:	4b3f      	ldr	r3, [pc, #252]	; (8006cac <UART_SetConfig+0x1a5c>)
 8006bb0:	e00e      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bb2:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <UART_SetConfig+0x1a60>)
 8006bb4:	e00c      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bb6:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <UART_SetConfig+0x1a64>)
 8006bb8:	e00a      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bba:	4b3f      	ldr	r3, [pc, #252]	; (8006cb8 <UART_SetConfig+0x1a68>)
 8006bbc:	e008      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bbe:	4b3f      	ldr	r3, [pc, #252]	; (8006cbc <UART_SetConfig+0x1a6c>)
 8006bc0:	e006      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bc2:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <UART_SetConfig+0x1a70>)
 8006bc4:	e004      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bc6:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <UART_SetConfig+0x1a74>)
 8006bc8:	e002      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bca:	4b33      	ldr	r3, [pc, #204]	; (8006c98 <UART_SetConfig+0x1a48>)
 8006bcc:	e000      	b.n	8006bd0 <UART_SetConfig+0x1980>
 8006bce:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <UART_SetConfig+0x1a50>)
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6852      	ldr	r2, [r2, #4]
 8006bd4:	0852      	lsrs	r2, r2, #1
 8006bd6:	441a      	add	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be4:	e0df      	b.n	8006da6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d045      	beq.n	8006c7a <UART_SetConfig+0x1a2a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d03f      	beq.n	8006c76 <UART_SetConfig+0x1a26>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d039      	beq.n	8006c72 <UART_SetConfig+0x1a22>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d033      	beq.n	8006c6e <UART_SetConfig+0x1a1e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d02d      	beq.n	8006c6a <UART_SetConfig+0x1a1a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	d027      	beq.n	8006c66 <UART_SetConfig+0x1a16>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2b06      	cmp	r3, #6
 8006c1c:	d021      	beq.n	8006c62 <UART_SetConfig+0x1a12>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b07      	cmp	r3, #7
 8006c24:	d01b      	beq.n	8006c5e <UART_SetConfig+0x1a0e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d015      	beq.n	8006c5a <UART_SetConfig+0x1a0a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	2b09      	cmp	r3, #9
 8006c34:	d00f      	beq.n	8006c56 <UART_SetConfig+0x1a06>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	2b0a      	cmp	r3, #10
 8006c3c:	d008      	beq.n	8006c50 <UART_SetConfig+0x1a00>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b0b      	cmp	r3, #11
 8006c44:	d102      	bne.n	8006c4c <UART_SetConfig+0x19fc>
 8006c46:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006c4a:	e017      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c4c:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <UART_SetConfig+0x1a60>)
 8006c4e:	e015      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c50:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c54:	e012      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <UART_SetConfig+0x1a78>)
 8006c58:	e010      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <UART_SetConfig+0x1a7c>)
 8006c5c:	e00e      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c5e:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <UART_SetConfig+0x1a4c>)
 8006c60:	e00c      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <UART_SetConfig+0x1a80>)
 8006c64:	e00a      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c66:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <UART_SetConfig+0x1a84>)
 8006c68:	e008      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <UART_SetConfig+0x1a54>)
 8006c6c:	e006      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c6e:	4b1a      	ldr	r3, [pc, #104]	; (8006cd8 <UART_SetConfig+0x1a88>)
 8006c70:	e004      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <UART_SetConfig+0x1a58>)
 8006c74:	e002      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c76:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <UART_SetConfig+0x1a5c>)
 8006c78:	e000      	b.n	8006c7c <UART_SetConfig+0x1a2c>
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <UART_SetConfig+0x1a60>)
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6852      	ldr	r2, [r2, #4]
 8006c80:	0852      	lsrs	r2, r2, #1
 8006c82:	441a      	add	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c90:	e089      	b.n	8006da6 <UART_SetConfig+0x1b56>
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
 8006c98:	03d09000 	.word	0x03d09000
 8006c9c:	0007a120 	.word	0x0007a120
 8006ca0:	07a12000 	.word	0x07a12000
 8006ca4:	000f4240 	.word	0x000f4240
 8006ca8:	001e8480 	.word	0x001e8480
 8006cac:	003d0900 	.word	0x003d0900
 8006cb0:	007a1200 	.word	0x007a1200
 8006cb4:	00a2c2aa 	.word	0x00a2c2aa
 8006cb8:	00c35000 	.word	0x00c35000
 8006cbc:	00f42400 	.word	0x00f42400
 8006cc0:	01458554 	.word	0x01458554
 8006cc4:	01e84800 	.word	0x01e84800
 8006cc8:	0001e848 	.word	0x0001e848
 8006ccc:	0003d090 	.word	0x0003d090
 8006cd0:	000a2c2a 	.word	0x000a2c2a
 8006cd4:	000c3500 	.word	0x000c3500
 8006cd8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d04f      	beq.n	8006d84 <UART_SetConfig+0x1b34>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d048      	beq.n	8006d7e <UART_SetConfig+0x1b2e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d041      	beq.n	8006d78 <UART_SetConfig+0x1b28>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d03a      	beq.n	8006d72 <UART_SetConfig+0x1b22>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d033      	beq.n	8006d6c <UART_SetConfig+0x1b1c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	d02c      	beq.n	8006d66 <UART_SetConfig+0x1b16>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d025      	beq.n	8006d60 <UART_SetConfig+0x1b10>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	2b07      	cmp	r3, #7
 8006d1a:	d01e      	beq.n	8006d5a <UART_SetConfig+0x1b0a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d017      	beq.n	8006d54 <UART_SetConfig+0x1b04>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d010      	beq.n	8006d4e <UART_SetConfig+0x1afe>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b0a      	cmp	r3, #10
 8006d32:	d009      	beq.n	8006d48 <UART_SetConfig+0x1af8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	2b0b      	cmp	r3, #11
 8006d3a:	d102      	bne.n	8006d42 <UART_SetConfig+0x1af2>
 8006d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d40:	e022      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d46:	e01f      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d4c:	e01c      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d52:	e019      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d58:	e016      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d5e:	e013      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d60:	f241 5354 	movw	r3, #5460	; 0x1554
 8006d64:	e010      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d66:	f641 1398 	movw	r3, #6552	; 0x1998
 8006d6a:	e00d      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d70:	e00a      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d72:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006d76:	e007      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d7c:	e004      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	e001      	b.n	8006d88 <UART_SetConfig+0x1b38>
 8006d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6852      	ldr	r2, [r2, #4]
 8006d8c:	0852      	lsrs	r2, r2, #1
 8006d8e:	441a      	add	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d9c:	e003      	b.n	8006da6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006da4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	2b0f      	cmp	r3, #15
 8006daa:	d916      	bls.n	8006dda <UART_SetConfig+0x1b8a>
 8006dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db2:	d212      	bcs.n	8006dda <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f023 030f 	bic.w	r3, r3, #15
 8006dbc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	e3a3      	b.n	8007522 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de0:	e39f      	b.n	8007522 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8006de2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	f200 8388 	bhi.w	80074fc <UART_SetConfig+0x22ac>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0x1ba4>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006ef9 	.word	0x08006ef9
 8006df8:	08006faf 	.word	0x08006faf
 8006dfc:	080074fd 	.word	0x080074fd
 8006e00:	080074fd 	.word	0x080074fd
 8006e04:	08007065 	.word	0x08007065
 8006e08:	080074fd 	.word	0x080074fd
 8006e0c:	080074fd 	.word	0x080074fd
 8006e10:	080074fd 	.word	0x080074fd
 8006e14:	0800711f 	.word	0x0800711f
 8006e18:	080074fd 	.word	0x080074fd
 8006e1c:	080074fd 	.word	0x080074fd
 8006e20:	080074fd 	.word	0x080074fd
 8006e24:	080074fd 	.word	0x080074fd
 8006e28:	080074fd 	.word	0x080074fd
 8006e2c:	080074fd 	.word	0x080074fd
 8006e30:	080074fd 	.word	0x080074fd
 8006e34:	080071d9 	.word	0x080071d9
 8006e38:	080074fd 	.word	0x080074fd
 8006e3c:	080074fd 	.word	0x080074fd
 8006e40:	080074fd 	.word	0x080074fd
 8006e44:	080074fd 	.word	0x080074fd
 8006e48:	080074fd 	.word	0x080074fd
 8006e4c:	080074fd 	.word	0x080074fd
 8006e50:	080074fd 	.word	0x080074fd
 8006e54:	080074fd 	.word	0x080074fd
 8006e58:	080074fd 	.word	0x080074fd
 8006e5c:	080074fd 	.word	0x080074fd
 8006e60:	080074fd 	.word	0x080074fd
 8006e64:	080074fd 	.word	0x080074fd
 8006e68:	080074fd 	.word	0x080074fd
 8006e6c:	080074fd 	.word	0x080074fd
 8006e70:	080074fd 	.word	0x080074fd
 8006e74:	08007349 	.word	0x08007349
 8006e78:	080074fd 	.word	0x080074fd
 8006e7c:	080074fd 	.word	0x080074fd
 8006e80:	080074fd 	.word	0x080074fd
 8006e84:	080074fd 	.word	0x080074fd
 8006e88:	080074fd 	.word	0x080074fd
 8006e8c:	080074fd 	.word	0x080074fd
 8006e90:	080074fd 	.word	0x080074fd
 8006e94:	080074fd 	.word	0x080074fd
 8006e98:	080074fd 	.word	0x080074fd
 8006e9c:	080074fd 	.word	0x080074fd
 8006ea0:	080074fd 	.word	0x080074fd
 8006ea4:	080074fd 	.word	0x080074fd
 8006ea8:	080074fd 	.word	0x080074fd
 8006eac:	080074fd 	.word	0x080074fd
 8006eb0:	080074fd 	.word	0x080074fd
 8006eb4:	080074fd 	.word	0x080074fd
 8006eb8:	080074fd 	.word	0x080074fd
 8006ebc:	080074fd 	.word	0x080074fd
 8006ec0:	080074fd 	.word	0x080074fd
 8006ec4:	080074fd 	.word	0x080074fd
 8006ec8:	080074fd 	.word	0x080074fd
 8006ecc:	080074fd 	.word	0x080074fd
 8006ed0:	080074fd 	.word	0x080074fd
 8006ed4:	080074fd 	.word	0x080074fd
 8006ed8:	080074fd 	.word	0x080074fd
 8006edc:	080074fd 	.word	0x080074fd
 8006ee0:	080074fd 	.word	0x080074fd
 8006ee4:	080074fd 	.word	0x080074fd
 8006ee8:	080074fd 	.word	0x080074fd
 8006eec:	080074fd 	.word	0x080074fd
 8006ef0:	080074fd 	.word	0x080074fd
 8006ef4:	0800743d 	.word	0x0800743d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef8:	f7fc fe0e 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8006efc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d044      	beq.n	8006f90 <UART_SetConfig+0x1d40>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d03e      	beq.n	8006f8c <UART_SetConfig+0x1d3c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d038      	beq.n	8006f88 <UART_SetConfig+0x1d38>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d032      	beq.n	8006f84 <UART_SetConfig+0x1d34>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d02c      	beq.n	8006f80 <UART_SetConfig+0x1d30>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	d026      	beq.n	8006f7c <UART_SetConfig+0x1d2c>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d020      	beq.n	8006f78 <UART_SetConfig+0x1d28>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b07      	cmp	r3, #7
 8006f3c:	d01a      	beq.n	8006f74 <UART_SetConfig+0x1d24>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d014      	beq.n	8006f70 <UART_SetConfig+0x1d20>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d00e      	beq.n	8006f6c <UART_SetConfig+0x1d1c>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b0a      	cmp	r3, #10
 8006f54:	d008      	beq.n	8006f68 <UART_SetConfig+0x1d18>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b0b      	cmp	r3, #11
 8006f5c:	d102      	bne.n	8006f64 <UART_SetConfig+0x1d14>
 8006f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f62:	e016      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f64:	2301      	movs	r3, #1
 8006f66:	e014      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	e012      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f6c:	2340      	movs	r3, #64	; 0x40
 8006f6e:	e010      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f70:	2320      	movs	r3, #32
 8006f72:	e00e      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f74:	2310      	movs	r3, #16
 8006f76:	e00c      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f78:	230c      	movs	r3, #12
 8006f7a:	e00a      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f7c:	230a      	movs	r3, #10
 8006f7e:	e008      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f80:	2308      	movs	r3, #8
 8006f82:	e006      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f84:	2306      	movs	r3, #6
 8006f86:	e004      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	e002      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e000      	b.n	8006f92 <UART_SetConfig+0x1d42>
 8006f90:	2301      	movs	r3, #1
 8006f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	441a      	add	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fac:	e2aa      	b.n	8007504 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fae:	f7fc fdc9 	bl	8003b44 <HAL_RCC_GetPCLK2Freq>
 8006fb2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d044      	beq.n	8007046 <UART_SetConfig+0x1df6>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d03e      	beq.n	8007042 <UART_SetConfig+0x1df2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d038      	beq.n	800703e <UART_SetConfig+0x1dee>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d032      	beq.n	800703a <UART_SetConfig+0x1dea>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d02c      	beq.n	8007036 <UART_SetConfig+0x1de6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d026      	beq.n	8007032 <UART_SetConfig+0x1de2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2b06      	cmp	r3, #6
 8006fea:	d020      	beq.n	800702e <UART_SetConfig+0x1dde>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	d01a      	beq.n	800702a <UART_SetConfig+0x1dda>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d014      	beq.n	8007026 <UART_SetConfig+0x1dd6>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	2b09      	cmp	r3, #9
 8007002:	d00e      	beq.n	8007022 <UART_SetConfig+0x1dd2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b0a      	cmp	r3, #10
 800700a:	d008      	beq.n	800701e <UART_SetConfig+0x1dce>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b0b      	cmp	r3, #11
 8007012:	d102      	bne.n	800701a <UART_SetConfig+0x1dca>
 8007014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007018:	e016      	b.n	8007048 <UART_SetConfig+0x1df8>
 800701a:	2301      	movs	r3, #1
 800701c:	e014      	b.n	8007048 <UART_SetConfig+0x1df8>
 800701e:	2380      	movs	r3, #128	; 0x80
 8007020:	e012      	b.n	8007048 <UART_SetConfig+0x1df8>
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	e010      	b.n	8007048 <UART_SetConfig+0x1df8>
 8007026:	2320      	movs	r3, #32
 8007028:	e00e      	b.n	8007048 <UART_SetConfig+0x1df8>
 800702a:	2310      	movs	r3, #16
 800702c:	e00c      	b.n	8007048 <UART_SetConfig+0x1df8>
 800702e:	230c      	movs	r3, #12
 8007030:	e00a      	b.n	8007048 <UART_SetConfig+0x1df8>
 8007032:	230a      	movs	r3, #10
 8007034:	e008      	b.n	8007048 <UART_SetConfig+0x1df8>
 8007036:	2308      	movs	r3, #8
 8007038:	e006      	b.n	8007048 <UART_SetConfig+0x1df8>
 800703a:	2306      	movs	r3, #6
 800703c:	e004      	b.n	8007048 <UART_SetConfig+0x1df8>
 800703e:	2304      	movs	r3, #4
 8007040:	e002      	b.n	8007048 <UART_SetConfig+0x1df8>
 8007042:	2302      	movs	r3, #2
 8007044:	e000      	b.n	8007048 <UART_SetConfig+0x1df8>
 8007046:	2301      	movs	r3, #1
 8007048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800704a:	fbb2 f2f3 	udiv	r2, r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	441a      	add	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	b29b      	uxth	r3, r3
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007062:	e24f      	b.n	8007504 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007064:	f107 0318 	add.w	r3, r7, #24
 8007068:	4618      	mov	r0, r3
 800706a:	f7fd fc87 	bl	800497c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d044      	beq.n	8007102 <UART_SetConfig+0x1eb2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	2b01      	cmp	r3, #1
 800707e:	d03e      	beq.n	80070fe <UART_SetConfig+0x1eae>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	2b02      	cmp	r3, #2
 8007086:	d038      	beq.n	80070fa <UART_SetConfig+0x1eaa>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	2b03      	cmp	r3, #3
 800708e:	d032      	beq.n	80070f6 <UART_SetConfig+0x1ea6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	2b04      	cmp	r3, #4
 8007096:	d02c      	beq.n	80070f2 <UART_SetConfig+0x1ea2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	2b05      	cmp	r3, #5
 800709e:	d026      	beq.n	80070ee <UART_SetConfig+0x1e9e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d020      	beq.n	80070ea <UART_SetConfig+0x1e9a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2b07      	cmp	r3, #7
 80070ae:	d01a      	beq.n	80070e6 <UART_SetConfig+0x1e96>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d014      	beq.n	80070e2 <UART_SetConfig+0x1e92>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	2b09      	cmp	r3, #9
 80070be:	d00e      	beq.n	80070de <UART_SetConfig+0x1e8e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	2b0a      	cmp	r3, #10
 80070c6:	d008      	beq.n	80070da <UART_SetConfig+0x1e8a>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	2b0b      	cmp	r3, #11
 80070ce:	d102      	bne.n	80070d6 <UART_SetConfig+0x1e86>
 80070d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d4:	e016      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e014      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	e012      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	e010      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070e2:	2320      	movs	r3, #32
 80070e4:	e00e      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070e6:	2310      	movs	r3, #16
 80070e8:	e00c      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070ea:	230c      	movs	r3, #12
 80070ec:	e00a      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070ee:	230a      	movs	r3, #10
 80070f0:	e008      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070f2:	2308      	movs	r3, #8
 80070f4:	e006      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070f6:	2306      	movs	r3, #6
 80070f8:	e004      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070fa:	2304      	movs	r3, #4
 80070fc:	e002      	b.n	8007104 <UART_SetConfig+0x1eb4>
 80070fe:	2302      	movs	r3, #2
 8007100:	e000      	b.n	8007104 <UART_SetConfig+0x1eb4>
 8007102:	2301      	movs	r3, #1
 8007104:	fbb2 f2f3 	udiv	r2, r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	085b      	lsrs	r3, r3, #1
 800710e:	441a      	add	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	b29b      	uxth	r3, r3
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800711c:	e1f2      	b.n	8007504 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711e:	f107 030c 	add.w	r3, r7, #12
 8007122:	4618      	mov	r0, r3
 8007124:	f7fd fd76 	bl	8004c14 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d044      	beq.n	80071bc <UART_SetConfig+0x1f6c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	2b01      	cmp	r3, #1
 8007138:	d03e      	beq.n	80071b8 <UART_SetConfig+0x1f68>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2b02      	cmp	r3, #2
 8007140:	d038      	beq.n	80071b4 <UART_SetConfig+0x1f64>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b03      	cmp	r3, #3
 8007148:	d032      	beq.n	80071b0 <UART_SetConfig+0x1f60>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	2b04      	cmp	r3, #4
 8007150:	d02c      	beq.n	80071ac <UART_SetConfig+0x1f5c>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	2b05      	cmp	r3, #5
 8007158:	d026      	beq.n	80071a8 <UART_SetConfig+0x1f58>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	2b06      	cmp	r3, #6
 8007160:	d020      	beq.n	80071a4 <UART_SetConfig+0x1f54>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	2b07      	cmp	r3, #7
 8007168:	d01a      	beq.n	80071a0 <UART_SetConfig+0x1f50>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b08      	cmp	r3, #8
 8007170:	d014      	beq.n	800719c <UART_SetConfig+0x1f4c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b09      	cmp	r3, #9
 8007178:	d00e      	beq.n	8007198 <UART_SetConfig+0x1f48>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b0a      	cmp	r3, #10
 8007180:	d008      	beq.n	8007194 <UART_SetConfig+0x1f44>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2b0b      	cmp	r3, #11
 8007188:	d102      	bne.n	8007190 <UART_SetConfig+0x1f40>
 800718a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800718e:	e016      	b.n	80071be <UART_SetConfig+0x1f6e>
 8007190:	2301      	movs	r3, #1
 8007192:	e014      	b.n	80071be <UART_SetConfig+0x1f6e>
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	e012      	b.n	80071be <UART_SetConfig+0x1f6e>
 8007198:	2340      	movs	r3, #64	; 0x40
 800719a:	e010      	b.n	80071be <UART_SetConfig+0x1f6e>
 800719c:	2320      	movs	r3, #32
 800719e:	e00e      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071a0:	2310      	movs	r3, #16
 80071a2:	e00c      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071a4:	230c      	movs	r3, #12
 80071a6:	e00a      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071a8:	230a      	movs	r3, #10
 80071aa:	e008      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071ac:	2308      	movs	r3, #8
 80071ae:	e006      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071b0:	2306      	movs	r3, #6
 80071b2:	e004      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071b4:	2304      	movs	r3, #4
 80071b6:	e002      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e000      	b.n	80071be <UART_SetConfig+0x1f6e>
 80071bc:	2301      	movs	r3, #1
 80071be:	fbb2 f2f3 	udiv	r2, r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071d6:	e195      	b.n	8007504 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d8:	4b87      	ldr	r3, [pc, #540]	; (80073f8 <UART_SetConfig+0x21a8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d05d      	beq.n	80072a0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e4:	4b84      	ldr	r3, [pc, #528]	; (80073f8 <UART_SetConfig+0x21a8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	4a83      	ldr	r2, [pc, #524]	; (80073fc <UART_SetConfig+0x21ac>)
 80071f0:	40da      	lsrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d044      	beq.n	8007284 <UART_SetConfig+0x2034>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d03e      	beq.n	8007280 <UART_SetConfig+0x2030>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b02      	cmp	r3, #2
 8007208:	d038      	beq.n	800727c <UART_SetConfig+0x202c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	2b03      	cmp	r3, #3
 8007210:	d032      	beq.n	8007278 <UART_SetConfig+0x2028>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	2b04      	cmp	r3, #4
 8007218:	d02c      	beq.n	8007274 <UART_SetConfig+0x2024>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2b05      	cmp	r3, #5
 8007220:	d026      	beq.n	8007270 <UART_SetConfig+0x2020>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b06      	cmp	r3, #6
 8007228:	d020      	beq.n	800726c <UART_SetConfig+0x201c>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b07      	cmp	r3, #7
 8007230:	d01a      	beq.n	8007268 <UART_SetConfig+0x2018>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	2b08      	cmp	r3, #8
 8007238:	d014      	beq.n	8007264 <UART_SetConfig+0x2014>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b09      	cmp	r3, #9
 8007240:	d00e      	beq.n	8007260 <UART_SetConfig+0x2010>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	2b0a      	cmp	r3, #10
 8007248:	d008      	beq.n	800725c <UART_SetConfig+0x200c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b0b      	cmp	r3, #11
 8007250:	d102      	bne.n	8007258 <UART_SetConfig+0x2008>
 8007252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007256:	e016      	b.n	8007286 <UART_SetConfig+0x2036>
 8007258:	2301      	movs	r3, #1
 800725a:	e014      	b.n	8007286 <UART_SetConfig+0x2036>
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	e012      	b.n	8007286 <UART_SetConfig+0x2036>
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	e010      	b.n	8007286 <UART_SetConfig+0x2036>
 8007264:	2320      	movs	r3, #32
 8007266:	e00e      	b.n	8007286 <UART_SetConfig+0x2036>
 8007268:	2310      	movs	r3, #16
 800726a:	e00c      	b.n	8007286 <UART_SetConfig+0x2036>
 800726c:	230c      	movs	r3, #12
 800726e:	e00a      	b.n	8007286 <UART_SetConfig+0x2036>
 8007270:	230a      	movs	r3, #10
 8007272:	e008      	b.n	8007286 <UART_SetConfig+0x2036>
 8007274:	2308      	movs	r3, #8
 8007276:	e006      	b.n	8007286 <UART_SetConfig+0x2036>
 8007278:	2306      	movs	r3, #6
 800727a:	e004      	b.n	8007286 <UART_SetConfig+0x2036>
 800727c:	2304      	movs	r3, #4
 800727e:	e002      	b.n	8007286 <UART_SetConfig+0x2036>
 8007280:	2302      	movs	r3, #2
 8007282:	e000      	b.n	8007286 <UART_SetConfig+0x2036>
 8007284:	2301      	movs	r3, #1
 8007286:	fbb2 f2f3 	udiv	r2, r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	441a      	add	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	fbb2 f3f3 	udiv	r3, r2, r3
 800729a:	b29b      	uxth	r3, r3
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800729e:	e131      	b.n	8007504 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d043      	beq.n	8007330 <UART_SetConfig+0x20e0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d03d      	beq.n	800732c <UART_SetConfig+0x20dc>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d037      	beq.n	8007328 <UART_SetConfig+0x20d8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d031      	beq.n	8007324 <UART_SetConfig+0x20d4>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d02b      	beq.n	8007320 <UART_SetConfig+0x20d0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	2b05      	cmp	r3, #5
 80072ce:	d025      	beq.n	800731c <UART_SetConfig+0x20cc>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b06      	cmp	r3, #6
 80072d6:	d01f      	beq.n	8007318 <UART_SetConfig+0x20c8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	2b07      	cmp	r3, #7
 80072de:	d019      	beq.n	8007314 <UART_SetConfig+0x20c4>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d013      	beq.n	8007310 <UART_SetConfig+0x20c0>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	2b09      	cmp	r3, #9
 80072ee:	d00d      	beq.n	800730c <UART_SetConfig+0x20bc>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	2b0a      	cmp	r3, #10
 80072f6:	d007      	beq.n	8007308 <UART_SetConfig+0x20b8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	2b0b      	cmp	r3, #11
 80072fe:	d101      	bne.n	8007304 <UART_SetConfig+0x20b4>
 8007300:	4b3f      	ldr	r3, [pc, #252]	; (8007400 <UART_SetConfig+0x21b0>)
 8007302:	e016      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007304:	4b3d      	ldr	r3, [pc, #244]	; (80073fc <UART_SetConfig+0x21ac>)
 8007306:	e014      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007308:	4b3e      	ldr	r3, [pc, #248]	; (8007404 <UART_SetConfig+0x21b4>)
 800730a:	e012      	b.n	8007332 <UART_SetConfig+0x20e2>
 800730c:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <UART_SetConfig+0x21b8>)
 800730e:	e010      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007310:	4b3e      	ldr	r3, [pc, #248]	; (800740c <UART_SetConfig+0x21bc>)
 8007312:	e00e      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007314:	4b3e      	ldr	r3, [pc, #248]	; (8007410 <UART_SetConfig+0x21c0>)
 8007316:	e00c      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007318:	4b3e      	ldr	r3, [pc, #248]	; (8007414 <UART_SetConfig+0x21c4>)
 800731a:	e00a      	b.n	8007332 <UART_SetConfig+0x20e2>
 800731c:	4b3e      	ldr	r3, [pc, #248]	; (8007418 <UART_SetConfig+0x21c8>)
 800731e:	e008      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007320:	4b3e      	ldr	r3, [pc, #248]	; (800741c <UART_SetConfig+0x21cc>)
 8007322:	e006      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007324:	4b3e      	ldr	r3, [pc, #248]	; (8007420 <UART_SetConfig+0x21d0>)
 8007326:	e004      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007328:	4b3e      	ldr	r3, [pc, #248]	; (8007424 <UART_SetConfig+0x21d4>)
 800732a:	e002      	b.n	8007332 <UART_SetConfig+0x20e2>
 800732c:	4b3e      	ldr	r3, [pc, #248]	; (8007428 <UART_SetConfig+0x21d8>)
 800732e:	e000      	b.n	8007332 <UART_SetConfig+0x20e2>
 8007330:	4b32      	ldr	r3, [pc, #200]	; (80073fc <UART_SetConfig+0x21ac>)
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6852      	ldr	r2, [r2, #4]
 8007336:	0852      	lsrs	r2, r2, #1
 8007338:	441a      	add	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	b29b      	uxth	r3, r3
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007346:	e0dd      	b.n	8007504 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d046      	beq.n	80073de <UART_SetConfig+0x218e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b01      	cmp	r3, #1
 8007356:	d040      	beq.n	80073da <UART_SetConfig+0x218a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b02      	cmp	r3, #2
 800735e:	d03a      	beq.n	80073d6 <UART_SetConfig+0x2186>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b03      	cmp	r3, #3
 8007366:	d034      	beq.n	80073d2 <UART_SetConfig+0x2182>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	2b04      	cmp	r3, #4
 800736e:	d02e      	beq.n	80073ce <UART_SetConfig+0x217e>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	2b05      	cmp	r3, #5
 8007376:	d028      	beq.n	80073ca <UART_SetConfig+0x217a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	2b06      	cmp	r3, #6
 800737e:	d022      	beq.n	80073c6 <UART_SetConfig+0x2176>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b07      	cmp	r3, #7
 8007386:	d01c      	beq.n	80073c2 <UART_SetConfig+0x2172>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b08      	cmp	r3, #8
 800738e:	d016      	beq.n	80073be <UART_SetConfig+0x216e>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b09      	cmp	r3, #9
 8007396:	d00f      	beq.n	80073b8 <UART_SetConfig+0x2168>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	2b0a      	cmp	r3, #10
 800739e:	d008      	beq.n	80073b2 <UART_SetConfig+0x2162>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2b0b      	cmp	r3, #11
 80073a6:	d102      	bne.n	80073ae <UART_SetConfig+0x215e>
 80073a8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80073ac:	e018      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073ae:	4b18      	ldr	r3, [pc, #96]	; (8007410 <UART_SetConfig+0x21c0>)
 80073b0:	e016      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80073b6:	e013      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80073bc:	e010      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073be:	4b1b      	ldr	r3, [pc, #108]	; (800742c <UART_SetConfig+0x21dc>)
 80073c0:	e00e      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073c2:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <UART_SetConfig+0x21b0>)
 80073c4:	e00c      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <UART_SetConfig+0x21e0>)
 80073c8:	e00a      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073ca:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <UART_SetConfig+0x21e4>)
 80073cc:	e008      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073ce:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <UART_SetConfig+0x21b4>)
 80073d0:	e006      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073d2:	4b19      	ldr	r3, [pc, #100]	; (8007438 <UART_SetConfig+0x21e8>)
 80073d4:	e004      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <UART_SetConfig+0x21b8>)
 80073d8:	e002      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073da:	4b0c      	ldr	r3, [pc, #48]	; (800740c <UART_SetConfig+0x21bc>)
 80073dc:	e000      	b.n	80073e0 <UART_SetConfig+0x2190>
 80073de:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <UART_SetConfig+0x21c0>)
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6852      	ldr	r2, [r2, #4]
 80073e4:	0852      	lsrs	r2, r2, #1
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f4:	e086      	b.n	8007504 <UART_SetConfig+0x22b4>
 80073f6:	bf00      	nop
 80073f8:	58024400 	.word	0x58024400
 80073fc:	03d09000 	.word	0x03d09000
 8007400:	0003d090 	.word	0x0003d090
 8007404:	0007a120 	.word	0x0007a120
 8007408:	000f4240 	.word	0x000f4240
 800740c:	001e8480 	.word	0x001e8480
 8007410:	003d0900 	.word	0x003d0900
 8007414:	00516155 	.word	0x00516155
 8007418:	0061a800 	.word	0x0061a800
 800741c:	007a1200 	.word	0x007a1200
 8007420:	00a2c2aa 	.word	0x00a2c2aa
 8007424:	00f42400 	.word	0x00f42400
 8007428:	01e84800 	.word	0x01e84800
 800742c:	0001e848 	.word	0x0001e848
 8007430:	00051615 	.word	0x00051615
 8007434:	00061a80 	.word	0x00061a80
 8007438:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d04e      	beq.n	80074e2 <UART_SetConfig+0x2292>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b01      	cmp	r3, #1
 800744a:	d047      	beq.n	80074dc <UART_SetConfig+0x228c>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	2b02      	cmp	r3, #2
 8007452:	d040      	beq.n	80074d6 <UART_SetConfig+0x2286>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	2b03      	cmp	r3, #3
 800745a:	d039      	beq.n	80074d0 <UART_SetConfig+0x2280>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	2b04      	cmp	r3, #4
 8007462:	d032      	beq.n	80074ca <UART_SetConfig+0x227a>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	2b05      	cmp	r3, #5
 800746a:	d02b      	beq.n	80074c4 <UART_SetConfig+0x2274>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	2b06      	cmp	r3, #6
 8007472:	d024      	beq.n	80074be <UART_SetConfig+0x226e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	2b07      	cmp	r3, #7
 800747a:	d01d      	beq.n	80074b8 <UART_SetConfig+0x2268>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	2b08      	cmp	r3, #8
 8007482:	d016      	beq.n	80074b2 <UART_SetConfig+0x2262>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2b09      	cmp	r3, #9
 800748a:	d00f      	beq.n	80074ac <UART_SetConfig+0x225c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b0a      	cmp	r3, #10
 8007492:	d008      	beq.n	80074a6 <UART_SetConfig+0x2256>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b0b      	cmp	r3, #11
 800749a:	d101      	bne.n	80074a0 <UART_SetConfig+0x2250>
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	e022      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074a4:	e01f      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074aa:	e01c      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b0:	e019      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074b6:	e016      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074bc:	e013      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074be:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80074c2:	e010      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074c4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80074c8:	e00d      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ce:	e00a      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074d0:	f241 5355 	movw	r3, #5461	; 0x1555
 80074d4:	e007      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074da:	e004      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80074e0:	e001      	b.n	80074e6 <UART_SetConfig+0x2296>
 80074e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6852      	ldr	r2, [r2, #4]
 80074ea:	0852      	lsrs	r2, r2, #1
 80074ec:	441a      	add	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074fa:	e003      	b.n	8007504 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007502:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007506:	2b0f      	cmp	r3, #15
 8007508:	d908      	bls.n	800751c <UART_SetConfig+0x22cc>
 800750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d204      	bcs.n	800751c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007518:	60da      	str	r2, [r3, #12]
 800751a:	e002      	b.n	8007522 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800753e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8007542:	4618      	mov	r0, r3
 8007544:	3740      	adds	r7, #64	; 0x40
 8007546:	46bd      	mov	sp, r7
 8007548:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800754c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01a      	beq.n	8007662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800764a:	d10a      	bne.n	8007662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	605a      	str	r2, [r3, #4]
  }
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af02      	add	r7, sp, #8
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80076a0:	f7f9 f9d0 	bl	8000a44 <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d10e      	bne.n	80076d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f82c 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e022      	b.n	8007718 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d10e      	bne.n	80076fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f816 	bl	8007720 <UART_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e00c      	b.n	8007718 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	4613      	mov	r3, r2
 800772e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007730:	e062      	b.n	80077f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007738:	d05e      	beq.n	80077f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800773a:	f7f9 f983 	bl	8000a44 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	429a      	cmp	r2, r3
 8007748:	d302      	bcc.n	8007750 <UART_WaitOnFlagUntilTimeout+0x30>
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d11d      	bne.n	800778c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800775e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0201 	bic.w	r2, r2, #1
 800776e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e045      	b.n	8007818 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d02e      	beq.n	80077f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a8:	d126      	bne.n	80077f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e00f      	b.n	8007818 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69da      	ldr	r2, [r3, #28]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4013      	ands	r3, r2
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	429a      	cmp	r2, r3
 8007806:	bf0c      	ite	eq
 8007808:	2301      	moveq	r3, #1
 800780a:	2300      	movne	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	461a      	mov	r2, r3
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	429a      	cmp	r2, r3
 8007814:	d08d      	beq.n	8007732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_UARTEx_DisableFifoMode+0x16>
 8007832:	2302      	movs	r3, #2
 8007834:	e027      	b.n	8007886 <HAL_UARTEx_DisableFifoMode+0x66>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2224      	movs	r2, #36	; 0x24
 8007842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0201 	bic.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007864:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e02d      	b.n	8007906 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2224      	movs	r2, #36	; 0x24
 80078b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f850 	bl	800798c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007922:	2302      	movs	r3, #2
 8007924:	e02d      	b.n	8007982 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2224      	movs	r2, #36	; 0x24
 8007932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f812 	bl	800798c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b089      	sub	sp, #36	; 0x24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007994:	4a2f      	ldr	r2, [pc, #188]	; (8007a54 <UARTEx_SetNbDataToProcess+0xc8>)
 8007996:	f107 0314 	add.w	r3, r7, #20
 800799a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800799e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80079a2:	4a2d      	ldr	r2, [pc, #180]	; (8007a58 <UARTEx_SetNbDataToProcess+0xcc>)
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d108      	bne.n	80079ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079c8:	e03d      	b.n	8007a46 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ca:	2308      	movs	r3, #8
 80079cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079ce:	2308      	movs	r3, #8
 80079d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	0e5b      	lsrs	r3, r3, #25
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	0f5b      	lsrs	r3, r3, #29
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80079f2:	7fbb      	ldrb	r3, [r7, #30]
 80079f4:	7f3a      	ldrb	r2, [r7, #28]
 80079f6:	f107 0120 	add.w	r1, r7, #32
 80079fa:	440a      	add	r2, r1
 80079fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007a00:	fb02 f303 	mul.w	r3, r2, r3
 8007a04:	7f3a      	ldrb	r2, [r7, #28]
 8007a06:	f107 0120 	add.w	r1, r7, #32
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007a1c:	7ffb      	ldrb	r3, [r7, #31]
 8007a1e:	7f7a      	ldrb	r2, [r7, #29]
 8007a20:	f107 0120 	add.w	r1, r7, #32
 8007a24:	440a      	add	r2, r1
 8007a26:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007a2a:	fb02 f303 	mul.w	r3, r2, r3
 8007a2e:	7f7a      	ldrb	r2, [r7, #29]
 8007a30:	f107 0120 	add.w	r1, r7, #32
 8007a34:	440a      	add	r2, r1
 8007a36:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007a3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a46:	bf00      	nop
 8007a48:	3724      	adds	r7, #36	; 0x24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	08012c7c 	.word	0x08012c7c
 8007a58:	08012c84 	.word	0x08012c84

08007a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	f107 001c 	add.w	r0, r7, #28
 8007a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d120      	bne.n	8007ab6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	4b25      	ldr	r3, [pc, #148]	; (8007b1c <USB_CoreInit+0xc0>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d105      	bne.n	8007aaa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa5a 	bl	8007f64 <USB_CoreReset>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	e01a      	b.n	8007aec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa4e 	bl	8007f64 <USB_CoreReset>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ade:	e005      	b.n	8007aec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d10b      	bne.n	8007b0a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f043 0208 	orr.w	r2, r3, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f043 0220 	orr.w	r2, r3, #32
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b16:	b004      	add	sp, #16
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	ffbdffbf 	.word	0xffbdffbf

08007b20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f023 0201 	bic.w	r2, r3, #1
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d106      	bne.n	8007b6e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60da      	str	r2, [r3, #12]
 8007b6c:	e00b      	b.n	8007b86 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60da      	str	r2, [r3, #12]
 8007b80:	e001      	b.n	8007b86 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e003      	b.n	8007b8e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b86:	2032      	movs	r0, #50	; 0x32
 8007b88:	f7f8 ff68 	bl	8000a5c <HAL_Delay>

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b98:	b084      	sub	sp, #16
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	e009      	b.n	8007bcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3340      	adds	r3, #64	; 0x40
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b0e      	cmp	r3, #14
 8007bd0:	d9f2      	bls.n	8007bb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d112      	bne.n	8007bfe <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e005      	b.n	8007c0a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c10:	461a      	mov	r2, r3
 8007c12:	2300      	movs	r3, #0
 8007c14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c24:	461a      	mov	r2, r3
 8007c26:	680b      	ldr	r3, [r1, #0]
 8007c28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d10c      	bne.n	8007c4a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d104      	bne.n	8007c40 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c36:	2100      	movs	r1, #0
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f961 	bl	8007f00 <USB_SetDevSpeed>
 8007c3e:	e008      	b.n	8007c52 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c40:	2101      	movs	r1, #1
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f95c 	bl	8007f00 <USB_SetDevSpeed>
 8007c48:	e003      	b.n	8007c52 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c4a:	2103      	movs	r1, #3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f957 	bl	8007f00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c52:	2110      	movs	r1, #16
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f90b 	bl	8007e70 <USB_FlushTxFifo>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f929 	bl	8007ebc <USB_FlushRxFifo>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c86:	461a      	mov	r2, r3
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	461a      	mov	r2, r3
 8007c94:	2300      	movs	r3, #0
 8007c96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	e043      	b.n	8007d26 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb4:	d118      	bne.n	8007ce8 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	e013      	b.n	8007cfa <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	e008      	b.n	8007cfa <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	461a      	mov	r2, r3
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	3301      	adds	r3, #1
 8007d24:	613b      	str	r3, [r7, #16]
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d3b7      	bcc.n	8007c9e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	613b      	str	r3, [r7, #16]
 8007d32:	e043      	b.n	8007dbc <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d4a:	d118      	bne.n	8007d7e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	e013      	b.n	8007d90 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	461a      	mov	r2, r3
 8007d76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	e008      	b.n	8007d90 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	461a      	mov	r2, r3
 8007db0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007db4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	3301      	adds	r3, #1
 8007dba:	613b      	str	r3, [r7, #16]
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d3b7      	bcc.n	8007d34 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dd6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d110      	bne.n	8007e00 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de4:	461a      	mov	r2, r3
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <USB_DevInit+0x2c8>)
 8007de8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <USB_DevInit+0x2cc>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	f043 0210 	orr.w	r2, r3, #16
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	4b10      	ldr	r3, [pc, #64]	; (8007e68 <USB_DevInit+0x2d0>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f043 0208 	orr.w	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d105      	bne.n	8007e50 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <USB_DevInit+0x2d4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e5c:	b004      	add	sp, #16
 8007e5e:	4770      	bx	lr
 8007e60:	00800100 	.word	0x00800100
 8007e64:	00010003 	.word	0x00010003
 8007e68:	803c3800 	.word	0x803c3800
 8007e6c:	40000004 	.word	0x40000004

08007e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	019b      	lsls	r3, r3, #6
 8007e82:	f043 0220 	orr.w	r2, r3, #32
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <USB_FlushTxFifo+0x48>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d901      	bls.n	8007e9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e006      	b.n	8007eaa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d0f0      	beq.n	8007e8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	00030d40 	.word	0x00030d40

08007ebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2210      	movs	r2, #16
 8007ecc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4a09      	ldr	r2, [pc, #36]	; (8007efc <USB_FlushRxFifo+0x40>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d901      	bls.n	8007ee0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e006      	b.n	8007eee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f003 0310 	and.w	r3, r3, #16
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	d0f0      	beq.n	8007ece <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	00030d40 	.word	0x00030d40

08007f00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f20:	4313      	orrs	r3, r2
 8007f22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f4c:	f043 0302 	orr.w	r3, r3, #2
 8007f50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007f52:	2003      	movs	r0, #3
 8007f54:	f7f8 fd82 	bl	8000a5c <HAL_Delay>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4a13      	ldr	r2, [pc, #76]	; (8007fc8 <USB_CoreReset+0x64>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d901      	bls.n	8007f82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e01b      	b.n	8007fba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	daf2      	bge.n	8007f70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f043 0201 	orr.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <USB_CoreReset+0x64>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d901      	bls.n	8007fac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e006      	b.n	8007fba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d0f0      	beq.n	8007f9a <USB_CoreReset+0x36>

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	00030d40 	.word	0x00030d40

08007fcc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	ba5b      	rev16	r3, r3
 8007fda:	b29b      	uxth	r3, r3
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	061a      	lsls	r2, r3, #24
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	0e1b      	lsrs	r3, r3, #24
 800800c:	4313      	orrs	r3, r2
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008024:	f000 f8a6 	bl	8008174 <mem_init>
  memp_init();
 8008028:	f000 fb3a 	bl	80086a0 <memp_init>
  pbuf_init();
  netif_init();
 800802c:	f000 fc38 	bl	80088a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008030:	f006 f890 	bl	800e154 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008034:	f001 fbdc 	bl	80097f0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8008038:	f005 ff6e 	bl	800df18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800804c:	4b40      	ldr	r3, [pc, #256]	; (8008150 <plug_holes+0x10c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d206      	bcs.n	8008064 <plug_holes+0x20>
 8008056:	4b3f      	ldr	r3, [pc, #252]	; (8008154 <plug_holes+0x110>)
 8008058:	f240 125d 	movw	r2, #349	; 0x15d
 800805c:	493e      	ldr	r1, [pc, #248]	; (8008158 <plug_holes+0x114>)
 800805e:	483f      	ldr	r0, [pc, #252]	; (800815c <plug_holes+0x118>)
 8008060:	f009 ff1c 	bl	8011e9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008064:	4b3e      	ldr	r3, [pc, #248]	; (8008160 <plug_holes+0x11c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	429a      	cmp	r2, r3
 800806c:	d306      	bcc.n	800807c <plug_holes+0x38>
 800806e:	4b39      	ldr	r3, [pc, #228]	; (8008154 <plug_holes+0x110>)
 8008070:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008074:	493b      	ldr	r1, [pc, #236]	; (8008164 <plug_holes+0x120>)
 8008076:	4839      	ldr	r0, [pc, #228]	; (800815c <plug_holes+0x118>)
 8008078:	f009 ff10 	bl	8011e9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d006      	beq.n	8008092 <plug_holes+0x4e>
 8008084:	4b33      	ldr	r3, [pc, #204]	; (8008154 <plug_holes+0x110>)
 8008086:	f240 125f 	movw	r2, #351	; 0x15f
 800808a:	4937      	ldr	r1, [pc, #220]	; (8008168 <plug_holes+0x124>)
 800808c:	4833      	ldr	r0, [pc, #204]	; (800815c <plug_holes+0x118>)
 800808e:	f009 ff05 	bl	8011e9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800809a:	d906      	bls.n	80080aa <plug_holes+0x66>
 800809c:	4b2d      	ldr	r3, [pc, #180]	; (8008154 <plug_holes+0x110>)
 800809e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80080a2:	4932      	ldr	r1, [pc, #200]	; (800816c <plug_holes+0x128>)
 80080a4:	482d      	ldr	r0, [pc, #180]	; (800815c <plug_holes+0x118>)
 80080a6:	f009 fef9 	bl	8011e9c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80080aa:	4b29      	ldr	r3, [pc, #164]	; (8008150 <plug_holes+0x10c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	8812      	ldrh	r2, [r2, #0]
 80080b2:	4413      	add	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d01f      	beq.n	80080fe <plug_holes+0xba>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d11b      	bne.n	80080fe <plug_holes+0xba>
 80080c6:	4b26      	ldr	r3, [pc, #152]	; (8008160 <plug_holes+0x11c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d016      	beq.n	80080fe <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80080d0:	4b27      	ldr	r3, [pc, #156]	; (8008170 <plug_holes+0x12c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d102      	bne.n	80080e0 <plug_holes+0x9c>
      lfree = mem;
 80080da:	4a25      	ldr	r2, [pc, #148]	; (8008170 <plug_holes+0x12c>)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	881a      	ldrh	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <plug_holes+0x10c>)
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	1a99      	subs	r1, r3, r2
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <plug_holes+0x10c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	8812      	ldrh	r2, [r2, #0]
 80080f8:	4413      	add	r3, r2
 80080fa:	b28a      	uxth	r2, r1
 80080fc:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80080fe:	4b14      	ldr	r3, [pc, #80]	; (8008150 <plug_holes+0x10c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	8852      	ldrh	r2, [r2, #2]
 8008106:	4413      	add	r3, r2
 8008108:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	429a      	cmp	r2, r3
 8008110:	d01a      	beq.n	8008148 <plug_holes+0x104>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	791b      	ldrb	r3, [r3, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d116      	bne.n	8008148 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800811a:	4b15      	ldr	r3, [pc, #84]	; (8008170 <plug_holes+0x12c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d102      	bne.n	800812a <plug_holes+0xe6>
      lfree = pmem;
 8008124:	4a12      	ldr	r2, [pc, #72]	; (8008170 <plug_holes+0x12c>)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	881a      	ldrh	r2, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	4a06      	ldr	r2, [pc, #24]	; (8008150 <plug_holes+0x10c>)
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	1a99      	subs	r1, r3, r2
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <plug_holes+0x10c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	8812      	ldrh	r2, [r2, #0]
 8008142:	4413      	add	r3, r2
 8008144:	b28a      	uxth	r2, r1
 8008146:	805a      	strh	r2, [r3, #2]
  }
}
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	2400196c 	.word	0x2400196c
 8008154:	08012c8c 	.word	0x08012c8c
 8008158:	08012cbc 	.word	0x08012cbc
 800815c:	08012cd4 	.word	0x08012cd4
 8008160:	24001970 	.word	0x24001970
 8008164:	08012cfc 	.word	0x08012cfc
 8008168:	08012d18 	.word	0x08012d18
 800816c:	08012d34 	.word	0x08012d34
 8008170:	24001974 	.word	0x24001974

08008174 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800817a:	4b19      	ldr	r3, [pc, #100]	; (80081e0 <mem_init+0x6c>)
 800817c:	3303      	adds	r3, #3
 800817e:	f023 0303 	bic.w	r3, r3, #3
 8008182:	461a      	mov	r2, r3
 8008184:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <mem_init+0x70>)
 8008186:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008188:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <mem_init+0x70>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008194:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80081a2:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <mem_init+0x70>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80081aa:	4a0f      	ldr	r2, [pc, #60]	; (80081e8 <mem_init+0x74>)
 80081ac:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <mem_init+0x74>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2201      	movs	r2, #1
 80081b4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80081b6:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <mem_init+0x74>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80081be:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <mem_init+0x74>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80081c8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80081ca:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <mem_init+0x70>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a07      	ldr	r2, [pc, #28]	; (80081ec <mem_init+0x78>)
 80081d0:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	24001b0c 	.word	0x24001b0c
 80081e4:	2400196c 	.word	0x2400196c
 80081e8:	24001970 	.word	0x24001970
 80081ec:	24001974 	.word	0x24001974

080081f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d043      	beq.n	8008286 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d006      	beq.n	8008216 <mem_free+0x26>
 8008208:	4b22      	ldr	r3, [pc, #136]	; (8008294 <mem_free+0xa4>)
 800820a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800820e:	4922      	ldr	r1, [pc, #136]	; (8008298 <mem_free+0xa8>)
 8008210:	4822      	ldr	r0, [pc, #136]	; (800829c <mem_free+0xac>)
 8008212:	f009 fe43 	bl	8011e9c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008216:	4b22      	ldr	r3, [pc, #136]	; (80082a0 <mem_free+0xb0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d304      	bcc.n	800822a <mem_free+0x3a>
 8008220:	4b20      	ldr	r3, [pc, #128]	; (80082a4 <mem_free+0xb4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d306      	bcc.n	8008238 <mem_free+0x48>
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <mem_free+0xa4>)
 800822c:	f240 12af 	movw	r2, #431	; 0x1af
 8008230:	491d      	ldr	r1, [pc, #116]	; (80082a8 <mem_free+0xb8>)
 8008232:	481a      	ldr	r0, [pc, #104]	; (800829c <mem_free+0xac>)
 8008234:	f009 fe32 	bl	8011e9c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <mem_free+0xb0>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	429a      	cmp	r2, r3
 8008240:	d323      	bcc.n	800828a <mem_free+0x9a>
 8008242:	4b18      	ldr	r3, [pc, #96]	; (80082a4 <mem_free+0xb4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	d21e      	bcs.n	800828a <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3b08      	subs	r3, #8
 8008250:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	791b      	ldrb	r3, [r3, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <mem_free+0x78>
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <mem_free+0xa4>)
 800825c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8008260:	4912      	ldr	r1, [pc, #72]	; (80082ac <mem_free+0xbc>)
 8008262:	480e      	ldr	r0, [pc, #56]	; (800829c <mem_free+0xac>)
 8008264:	f009 fe1a 	bl	8011e9c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800826e:	4b10      	ldr	r3, [pc, #64]	; (80082b0 <mem_free+0xc0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	429a      	cmp	r2, r3
 8008276:	d202      	bcs.n	800827e <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008278:	4a0d      	ldr	r2, [pc, #52]	; (80082b0 <mem_free+0xc0>)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff fee0 	bl	8008044 <plug_holes>
 8008284:	e002      	b.n	800828c <mem_free+0x9c>
    return;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <mem_free+0x9c>
    return;
 800828a:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	08012c8c 	.word	0x08012c8c
 8008298:	08012d60 	.word	0x08012d60
 800829c:	08012cd4 	.word	0x08012cd4
 80082a0:	2400196c 	.word	0x2400196c
 80082a4:	24001970 	.word	0x24001970
 80082a8:	08012d84 	.word	0x08012d84
 80082ac:	08012d9c 	.word	0x08012d9c
 80082b0:	24001974 	.word	0x24001974

080082b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80082c0:	887b      	ldrh	r3, [r7, #2]
 80082c2:	3303      	adds	r3, #3
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80082cc:	887b      	ldrh	r3, [r7, #2]
 80082ce:	2b0b      	cmp	r3, #11
 80082d0:	d801      	bhi.n	80082d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80082d2:	230c      	movs	r3, #12
 80082d4:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80082d6:	887b      	ldrh	r3, [r7, #2]
 80082d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082dc:	d901      	bls.n	80082e2 <mem_trim+0x2e>
    return NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	e0b1      	b.n	8008446 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80082e2:	4b5b      	ldr	r3, [pc, #364]	; (8008450 <mem_trim+0x19c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d304      	bcc.n	80082f6 <mem_trim+0x42>
 80082ec:	4b59      	ldr	r3, [pc, #356]	; (8008454 <mem_trim+0x1a0>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d306      	bcc.n	8008304 <mem_trim+0x50>
 80082f6:	4b58      	ldr	r3, [pc, #352]	; (8008458 <mem_trim+0x1a4>)
 80082f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80082fc:	4957      	ldr	r1, [pc, #348]	; (800845c <mem_trim+0x1a8>)
 80082fe:	4858      	ldr	r0, [pc, #352]	; (8008460 <mem_trim+0x1ac>)
 8008300:	f009 fdcc 	bl	8011e9c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008304:	4b52      	ldr	r3, [pc, #328]	; (8008450 <mem_trim+0x19c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d304      	bcc.n	8008318 <mem_trim+0x64>
 800830e:	4b51      	ldr	r3, [pc, #324]	; (8008454 <mem_trim+0x1a0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d301      	bcc.n	800831c <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	e094      	b.n	8008446 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3b08      	subs	r3, #8
 8008320:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	4a4a      	ldr	r2, [pc, #296]	; (8008450 <mem_trim+0x19c>)
 8008326:	6812      	ldr	r2, [r2, #0]
 8008328:	1a9b      	subs	r3, r3, r2
 800832a:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	8a7b      	ldrh	r3, [r7, #18]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b08      	subs	r3, #8
 8008338:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800833a:	887a      	ldrh	r2, [r7, #2]
 800833c:	8a3b      	ldrh	r3, [r7, #16]
 800833e:	429a      	cmp	r2, r3
 8008340:	d906      	bls.n	8008350 <mem_trim+0x9c>
 8008342:	4b45      	ldr	r3, [pc, #276]	; (8008458 <mem_trim+0x1a4>)
 8008344:	f240 2206 	movw	r2, #518	; 0x206
 8008348:	4946      	ldr	r1, [pc, #280]	; (8008464 <mem_trim+0x1b0>)
 800834a:	4845      	ldr	r0, [pc, #276]	; (8008460 <mem_trim+0x1ac>)
 800834c:	f009 fda6 	bl	8011e9c <iprintf>
  if (newsize > size) {
 8008350:	887a      	ldrh	r2, [r7, #2]
 8008352:	8a3b      	ldrh	r3, [r7, #16]
 8008354:	429a      	cmp	r2, r3
 8008356:	d901      	bls.n	800835c <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8008358:	2300      	movs	r3, #0
 800835a:	e074      	b.n	8008446 <mem_trim+0x192>
  }
  if (newsize == size) {
 800835c:	887a      	ldrh	r2, [r7, #2]
 800835e:	8a3b      	ldrh	r3, [r7, #16]
 8008360:	429a      	cmp	r2, r3
 8008362:	d101      	bne.n	8008368 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	e06e      	b.n	8008446 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8008368:	4b39      	ldr	r3, [pc, #228]	; (8008450 <mem_trim+0x19c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	8812      	ldrh	r2, [r2, #0]
 8008370:	4413      	add	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	791b      	ldrb	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d131      	bne.n	80083e0 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008382:	8a7a      	ldrh	r2, [r7, #18]
 8008384:	887b      	ldrh	r3, [r7, #2]
 8008386:	4413      	add	r3, r2
 8008388:	b29b      	uxth	r3, r3
 800838a:	3308      	adds	r3, #8
 800838c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800838e:	4b36      	ldr	r3, [pc, #216]	; (8008468 <mem_trim+0x1b4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	429a      	cmp	r2, r3
 8008396:	d105      	bne.n	80083a4 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8008398:	4b2d      	ldr	r3, [pc, #180]	; (8008450 <mem_trim+0x19c>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	897b      	ldrh	r3, [r7, #10]
 800839e:	4413      	add	r3, r2
 80083a0:	4a31      	ldr	r2, [pc, #196]	; (8008468 <mem_trim+0x1b4>)
 80083a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80083a4:	4b2a      	ldr	r3, [pc, #168]	; (8008450 <mem_trim+0x19c>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	897b      	ldrh	r3, [r7, #10]
 80083aa:	4413      	add	r3, r2
 80083ac:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	893a      	ldrh	r2, [r7, #8]
 80083b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8a7a      	ldrh	r2, [r7, #18]
 80083be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	897a      	ldrh	r2, [r7, #10]
 80083c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80083ce:	d039      	beq.n	8008444 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80083d0:	4b1f      	ldr	r3, [pc, #124]	; (8008450 <mem_trim+0x19c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	8812      	ldrh	r2, [r2, #0]
 80083d8:	4413      	add	r3, r2
 80083da:	897a      	ldrh	r2, [r7, #10]
 80083dc:	805a      	strh	r2, [r3, #2]
 80083de:	e031      	b.n	8008444 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80083e0:	887b      	ldrh	r3, [r7, #2]
 80083e2:	f103 0214 	add.w	r2, r3, #20
 80083e6:	8a3b      	ldrh	r3, [r7, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d82b      	bhi.n	8008444 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80083ec:	8a7a      	ldrh	r2, [r7, #18]
 80083ee:	887b      	ldrh	r3, [r7, #2]
 80083f0:	4413      	add	r3, r2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3308      	adds	r3, #8
 80083f6:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80083f8:	4b15      	ldr	r3, [pc, #84]	; (8008450 <mem_trim+0x19c>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	897b      	ldrh	r3, [r7, #10]
 80083fe:	4413      	add	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8008402:	4b19      	ldr	r3, [pc, #100]	; (8008468 <mem_trim+0x1b4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	429a      	cmp	r2, r3
 800840a:	d202      	bcs.n	8008412 <mem_trim+0x15e>
      lfree = mem2;
 800840c:	4a16      	ldr	r2, [pc, #88]	; (8008468 <mem_trim+0x1b4>)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	881a      	ldrh	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8a7a      	ldrh	r2, [r7, #18]
 8008424:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	897a      	ldrh	r2, [r7, #10]
 800842a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008434:	d006      	beq.n	8008444 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008436:	4b06      	ldr	r3, [pc, #24]	; (8008450 <mem_trim+0x19c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	8812      	ldrh	r2, [r2, #0]
 800843e:	4413      	add	r3, r2
 8008440:	897a      	ldrh	r2, [r7, #10]
 8008442:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008444:	687b      	ldr	r3, [r7, #4]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	2400196c 	.word	0x2400196c
 8008454:	24001970 	.word	0x24001970
 8008458:	08012c8c 	.word	0x08012c8c
 800845c:	08012db0 	.word	0x08012db0
 8008460:	08012cd4 	.word	0x08012cd4
 8008464:	08012dc8 	.word	0x08012dc8
 8008468:	24001974 	.word	0x24001974

0800846c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <mem_malloc+0x14>
    return NULL;
 800847c:	2300      	movs	r3, #0
 800847e:	e0c8      	b.n	8008612 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	3303      	adds	r3, #3
 8008484:	b29b      	uxth	r3, r3
 8008486:	f023 0303 	bic.w	r3, r3, #3
 800848a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	2b0b      	cmp	r3, #11
 8008490:	d801      	bhi.n	8008496 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008492:	230c      	movs	r3, #12
 8008494:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800849c:	d901      	bls.n	80084a2 <mem_malloc+0x36>
    return NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	e0b7      	b.n	8008612 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80084a2:	4b5e      	ldr	r3, [pc, #376]	; (800861c <mem_malloc+0x1b0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	4b5d      	ldr	r3, [pc, #372]	; (8008620 <mem_malloc+0x1b4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	83fb      	strh	r3, [r7, #30]
 80084b0:	e0a7      	b.n	8008602 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80084b2:	4b5b      	ldr	r3, [pc, #364]	; (8008620 <mem_malloc+0x1b4>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	8bfb      	ldrh	r3, [r7, #30]
 80084b8:	4413      	add	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	791b      	ldrb	r3, [r3, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f040 8098 	bne.w	80085f6 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	8bfb      	ldrh	r3, [r7, #30]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	f1a3 0208 	sub.w	r2, r3, #8
 80084d4:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80084d6:	429a      	cmp	r2, r3
 80084d8:	f0c0 808d 	bcc.w	80085f6 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	8bfb      	ldrh	r3, [r7, #30]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	f1a3 0208 	sub.w	r2, r3, #8
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	3314      	adds	r3, #20
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d327      	bcc.n	8008542 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80084f2:	8bfa      	ldrh	r2, [r7, #30]
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	4413      	add	r3, r2
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3308      	adds	r3, #8
 80084fc:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80084fe:	4b48      	ldr	r3, [pc, #288]	; (8008620 <mem_malloc+0x1b4>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	8a7b      	ldrh	r3, [r7, #18]
 8008504:	4413      	add	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	881a      	ldrh	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8bfa      	ldrh	r2, [r7, #30]
 800851a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	8a7a      	ldrh	r2, [r7, #18]
 8008520:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2201      	movs	r2, #1
 8008526:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008530:	d00a      	beq.n	8008548 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008532:	4b3b      	ldr	r3, [pc, #236]	; (8008620 <mem_malloc+0x1b4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	8812      	ldrh	r2, [r2, #0]
 800853a:	4413      	add	r3, r2
 800853c:	8a7a      	ldrh	r2, [r7, #18]
 800853e:	805a      	strh	r2, [r3, #2]
 8008540:	e002      	b.n	8008548 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2201      	movs	r2, #1
 8008546:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008548:	4b34      	ldr	r3, [pc, #208]	; (800861c <mem_malloc+0x1b0>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	429a      	cmp	r2, r3
 8008550:	d127      	bne.n	80085a2 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8008552:	4b32      	ldr	r3, [pc, #200]	; (800861c <mem_malloc+0x1b0>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008558:	e005      	b.n	8008566 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800855a:	4b31      	ldr	r3, [pc, #196]	; (8008620 <mem_malloc+0x1b4>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	8812      	ldrh	r2, [r2, #0]
 8008562:	4413      	add	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	791b      	ldrb	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <mem_malloc+0x10c>
 800856e:	4b2d      	ldr	r3, [pc, #180]	; (8008624 <mem_malloc+0x1b8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	429a      	cmp	r2, r3
 8008576:	d1f0      	bne.n	800855a <mem_malloc+0xee>
          }
          lfree = cur;
 8008578:	4a28      	ldr	r2, [pc, #160]	; (800861c <mem_malloc+0x1b0>)
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800857e:	4b27      	ldr	r3, [pc, #156]	; (800861c <mem_malloc+0x1b0>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4b28      	ldr	r3, [pc, #160]	; (8008624 <mem_malloc+0x1b8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d00b      	beq.n	80085a2 <mem_malloc+0x136>
 800858a:	4b24      	ldr	r3, [pc, #144]	; (800861c <mem_malloc+0x1b0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	791b      	ldrb	r3, [r3, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <mem_malloc+0x136>
 8008594:	4b24      	ldr	r3, [pc, #144]	; (8008628 <mem_malloc+0x1bc>)
 8008596:	f240 22cf 	movw	r2, #719	; 0x2cf
 800859a:	4924      	ldr	r1, [pc, #144]	; (800862c <mem_malloc+0x1c0>)
 800859c:	4824      	ldr	r0, [pc, #144]	; (8008630 <mem_malloc+0x1c4>)
 800859e:	f009 fc7d 	bl	8011e9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80085a2:	88fa      	ldrh	r2, [r7, #6]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	4413      	add	r3, r2
 80085a8:	3308      	adds	r3, #8
 80085aa:	4a1e      	ldr	r2, [pc, #120]	; (8008624 <mem_malloc+0x1b8>)
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d906      	bls.n	80085c0 <mem_malloc+0x154>
 80085b2:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <mem_malloc+0x1bc>)
 80085b4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80085b8:	491e      	ldr	r1, [pc, #120]	; (8008634 <mem_malloc+0x1c8>)
 80085ba:	481d      	ldr	r0, [pc, #116]	; (8008630 <mem_malloc+0x1c4>)
 80085bc:	f009 fc6e 	bl	8011e9c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d006      	beq.n	80085d8 <mem_malloc+0x16c>
 80085ca:	4b17      	ldr	r3, [pc, #92]	; (8008628 <mem_malloc+0x1bc>)
 80085cc:	f240 22d6 	movw	r2, #726	; 0x2d6
 80085d0:	4919      	ldr	r1, [pc, #100]	; (8008638 <mem_malloc+0x1cc>)
 80085d2:	4817      	ldr	r0, [pc, #92]	; (8008630 <mem_malloc+0x1c4>)
 80085d4:	f009 fc62 	bl	8011e9c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d006      	beq.n	80085f0 <mem_malloc+0x184>
 80085e2:	4b11      	ldr	r3, [pc, #68]	; (8008628 <mem_malloc+0x1bc>)
 80085e4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80085e8:	4914      	ldr	r1, [pc, #80]	; (800863c <mem_malloc+0x1d0>)
 80085ea:	4811      	ldr	r0, [pc, #68]	; (8008630 <mem_malloc+0x1c4>)
 80085ec:	f009 fc56 	bl	8011e9c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	3308      	adds	r3, #8
 80085f4:	e00d      	b.n	8008612 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80085f6:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <mem_malloc+0x1b4>)
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	8bfb      	ldrh	r3, [r7, #30]
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008602:	8bfa      	ldrh	r2, [r7, #30]
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800860a:	429a      	cmp	r2, r3
 800860c:	f4ff af51 	bcc.w	80084b2 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	24001974 	.word	0x24001974
 8008620:	2400196c 	.word	0x2400196c
 8008624:	24001970 	.word	0x24001970
 8008628:	08012c8c 	.word	0x08012c8c
 800862c:	08012de8 	.word	0x08012de8
 8008630:	08012cd4 	.word	0x08012cd4
 8008634:	08012e04 	.word	0x08012e04
 8008638:	08012e34 	.word	0x08012e34
 800863c:	08012e64 	.word	0x08012e64

08008640 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	3303      	adds	r3, #3
 8008656:	f023 0303 	bic.w	r3, r3, #3
 800865a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800865c:	2300      	movs	r3, #0
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	e011      	b.n	8008686 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	885b      	ldrh	r3, [r3, #2]
 800868a:	461a      	mov	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4293      	cmp	r3, r2
 8008690:	dbe7      	blt.n	8008662 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008692:	bf00      	nop
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80086a6:	2300      	movs	r3, #0
 80086a8:	80fb      	strh	r3, [r7, #6]
 80086aa:	e009      	b.n	80086c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	4a08      	ldr	r2, [pc, #32]	; (80086d0 <memp_init+0x30>)
 80086b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff ffc3 	bl	8008640 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80086ba:	88fb      	ldrh	r3, [r7, #6]
 80086bc:	3301      	adds	r3, #1
 80086be:	80fb      	strh	r3, [r7, #6]
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	2b08      	cmp	r3, #8
 80086c4:	d9f2      	bls.n	80086ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	080149a8 	.word	0x080149a8

080086d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d012      	beq.n	8008710 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d006      	beq.n	800870c <do_memp_malloc_pool+0x38>
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <do_memp_malloc_pool+0x48>)
 8008700:	f240 1249 	movw	r2, #329	; 0x149
 8008704:	4906      	ldr	r1, [pc, #24]	; (8008720 <do_memp_malloc_pool+0x4c>)
 8008706:	4807      	ldr	r0, [pc, #28]	; (8008724 <do_memp_malloc_pool+0x50>)
 8008708:	f009 fbc8 	bl	8011e9c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	e000      	b.n	8008712 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	08012e88 	.word	0x08012e88
 8008720:	08012eb8 	.word	0x08012eb8
 8008724:	08012edc 	.word	0x08012edc

08008728 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <memp_malloc_pool+0x1c>
 8008736:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <memp_malloc_pool+0x38>)
 8008738:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800873c:	4909      	ldr	r1, [pc, #36]	; (8008764 <memp_malloc_pool+0x3c>)
 800873e:	480a      	ldr	r0, [pc, #40]	; (8008768 <memp_malloc_pool+0x40>)
 8008740:	f009 fbac 	bl	8011e9c <iprintf>
  if (desc == NULL) {
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <memp_malloc_pool+0x26>
    return NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	e003      	b.n	8008756 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ffc0 	bl	80086d4 <do_memp_malloc_pool>
 8008754:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08012e88 	.word	0x08012e88
 8008764:	08012f04 	.word	0x08012f04
 8008768:	08012edc 	.word	0x08012edc

0800876c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	2b08      	cmp	r3, #8
 800877a:	d908      	bls.n	800878e <memp_malloc+0x22>
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <memp_malloc+0x3c>)
 800877e:	f240 1287 	movw	r2, #391	; 0x187
 8008782:	490a      	ldr	r1, [pc, #40]	; (80087ac <memp_malloc+0x40>)
 8008784:	480a      	ldr	r0, [pc, #40]	; (80087b0 <memp_malloc+0x44>)
 8008786:	f009 fb89 	bl	8011e9c <iprintf>
 800878a:	2300      	movs	r3, #0
 800878c:	e008      	b.n	80087a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	4a08      	ldr	r2, [pc, #32]	; (80087b4 <memp_malloc+0x48>)
 8008792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff ff9c 	bl	80086d4 <do_memp_malloc_pool>
 800879c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800879e:	68fb      	ldr	r3, [r7, #12]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	08012e88 	.word	0x08012e88
 80087ac:	08012f18 	.word	0x08012f18
 80087b0:	08012edc 	.word	0x08012edc
 80087b4:	080149a8 	.word	0x080149a8

080087b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d006      	beq.n	80087da <do_memp_free_pool+0x22>
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <do_memp_free_pool+0x40>)
 80087ce:	f240 129d 	movw	r2, #413	; 0x19d
 80087d2:	490a      	ldr	r1, [pc, #40]	; (80087fc <do_memp_free_pool+0x44>)
 80087d4:	480a      	ldr	r0, [pc, #40]	; (8008800 <do_memp_free_pool+0x48>)
 80087d6:	f009 fb61 	bl	8011e9c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	08012e88 	.word	0x08012e88
 80087fc:	08012f38 	.word	0x08012f38
 8008800:	08012edc 	.word	0x08012edc

08008804 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d106      	bne.n	8008822 <memp_free_pool+0x1e>
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <memp_free_pool+0x3c>)
 8008816:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800881a:	490a      	ldr	r1, [pc, #40]	; (8008844 <memp_free_pool+0x40>)
 800881c:	480a      	ldr	r0, [pc, #40]	; (8008848 <memp_free_pool+0x44>)
 800881e:	f009 fb3d 	bl	8011e9c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <memp_free_pool+0x34>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff ffc1 	bl	80087b8 <do_memp_free_pool>
 8008836:	e000      	b.n	800883a <memp_free_pool+0x36>
    return;
 8008838:	bf00      	nop
}
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	08012e88 	.word	0x08012e88
 8008844:	08012f04 	.word	0x08012f04
 8008848:	08012edc 	.word	0x08012edc

0800884c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	2b08      	cmp	r3, #8
 800885c:	d907      	bls.n	800886e <memp_free+0x22>
 800885e:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <memp_free+0x44>)
 8008860:	f240 12db 	movw	r2, #475	; 0x1db
 8008864:	490b      	ldr	r1, [pc, #44]	; (8008894 <memp_free+0x48>)
 8008866:	480c      	ldr	r0, [pc, #48]	; (8008898 <memp_free+0x4c>)
 8008868:	f009 fb18 	bl	8011e9c <iprintf>
 800886c:	e00c      	b.n	8008888 <memp_free+0x3c>

  if (mem == NULL) {
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d008      	beq.n	8008886 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	4a09      	ldr	r2, [pc, #36]	; (800889c <memp_free+0x50>)
 8008878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff ff9a 	bl	80087b8 <do_memp_free_pool>
 8008884:	e000      	b.n	8008888 <memp_free+0x3c>
    return;
 8008886:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	08012e88 	.word	0x08012e88
 8008894:	08012f58 	.word	0x08012f58
 8008898:	08012edc 	.word	0x08012edc
 800889c:	080149a8 	.word	0x080149a8

080088a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <netif_add+0x20>
 80088c4:	4b1f      	ldr	r3, [pc, #124]	; (8008944 <netif_add+0x94>)
 80088c6:	22fb      	movs	r2, #251	; 0xfb
 80088c8:	491f      	ldr	r1, [pc, #124]	; (8008948 <netif_add+0x98>)
 80088ca:	4820      	ldr	r0, [pc, #128]	; (800894c <netif_add+0x9c>)
 80088cc:	f009 fae6 	bl	8011e9c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2203      	movs	r2, #3
 80088ee:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 80088f8:	4b15      	ldr	r3, [pc, #84]	; (8008950 <netif_add+0xa0>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	b2d1      	uxtb	r1, r2
 8008900:	4a13      	ldr	r2, [pc, #76]	; (8008950 <netif_add+0xa0>)
 8008902:	7011      	strb	r1, [r2, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a3a      	ldr	r2, [r7, #32]
 800890e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 f81e 	bl	8008958 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	4798      	blx	r3
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <netif_add+0x7c>
    return NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	e007      	b.n	800893c <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <netif_add+0xa4>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008934:	4a07      	ldr	r2, [pc, #28]	; (8008954 <netif_add+0xa4>)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	08012f74 	.word	0x08012f74
 8008948:	08012fa8 	.word	0x08012fa8
 800894c:	08012fc0 	.word	0x08012fc0
 8008950:	2400199c 	.word	0x2400199c
 8008954:	24005014 	.word	0x24005014

08008958 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <netif_set_addr+0x1c>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10c      	bne.n	800898e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f81a 	bl	80089b0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f862 	bl	8008a48 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 f84a 	bl	8008a20 <netif_set_gw>
 800898c:	e00b      	b.n	80089a6 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f859 	bl	8008a48 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 f841 	bl	8008a20 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f805 	bl	80089b0 <netif_set_ipaddr>
  }
}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <netif_set_ipaddr+0x18>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e002      	b.n	80089ce <netif_set_ipaddr+0x1e>
 80089c8:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <netif_set_ipaddr+0x6c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3304      	adds	r3, #4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d01c      	beq.n	8008a14 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3304      	adds	r3, #4
 80089de:	f107 020c 	add.w	r2, r7, #12
 80089e2:	4611      	mov	r1, r2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f002 f891 	bl	800ab0c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3304      	adds	r3, #4
 80089ee:	f107 020c 	add.w	r2, r7, #12
 80089f2:	4611      	mov	r1, r2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f005 fdff 	bl	800e5f8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <netif_set_ipaddr+0x56>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	e000      	b.n	8008a08 <netif_set_ipaddr+0x58>
 8008a06:	2300      	movs	r3, #0
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f861 	bl	8008ad6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	08014a0c 	.word	0x08014a0c

08008a20 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <netif_set_gw+0x16>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	e000      	b.n	8008a38 <netif_set_gw+0x18>
 8008a36:	2300      	movs	r3, #0
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <netif_set_netmask+0x16>
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	e000      	b.n	8008a60 <netif_set_netmask+0x18>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008a78:	4a04      	ldr	r2, [pc, #16]	; (8008a8c <netif_set_default+0x1c>)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	24005018 	.word	0x24005018

08008a90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d113      	bne.n	8008ace <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008ac6:	2103      	movs	r1, #3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f804 	bl	8008ad6 <netif_issue_reports>
    }
  }
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d011      	beq.n	8008b10 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3304      	adds	r3, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00c      	beq.n	8008b10 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f006 fca8 	bl	800f460 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d012      	beq.n	8008b54 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f006 f84c 	bl	800ebec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d113      	bne.n	8008b9a <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008b78:	f043 0304 	orr.w	r3, r3, #4
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8008b92:	2103      	movs	r1, #3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff ff9e 	bl	8008ad6 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d008      	beq.n	8008bca <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008bbe:	f023 0304 	bic.w	r3, r3, #4
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
	...

08008bd8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008bde:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <pbuf_free_ooseq+0x40>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008be4:	4b0d      	ldr	r3, [pc, #52]	; (8008c1c <pbuf_free_ooseq+0x44>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	607b      	str	r3, [r7, #4]
 8008bea:	e00f      	b.n	8008c0c <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 fcc2 	bl	800a582 <tcp_segs_free>
      pcb->ooseq = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8008c04:	e005      	b.n	8008c12 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	607b      	str	r3, [r7, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1ec      	bne.n	8008bec <pbuf_free_ooseq+0x14>
    }
  }
}
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	2400501c 	.word	0x2400501c
 8008c1c:	24005024 	.word	0x24005024

08008c20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008c24:	4b03      	ldr	r3, [pc, #12]	; (8008c34 <pbuf_pool_is_empty+0x14>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008c2a:	bf00      	nop
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	2400501c 	.word	0x2400501c

08008c38 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	71fb      	strb	r3, [r7, #7]
 8008c42:	460b      	mov	r3, r1
 8008c44:	80bb      	strh	r3, [r7, #4]
 8008c46:	4613      	mov	r3, r2
 8008c48:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008c4a:	79fb      	ldrb	r3, [r7, #7]
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	d81c      	bhi.n	8008c8a <pbuf_alloc+0x52>
 8008c50:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <pbuf_alloc+0x20>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008c6d 	.word	0x08008c6d
 8008c5c:	08008c73 	.word	0x08008c73
 8008c60:	08008c79 	.word	0x08008c79
 8008c64:	08008c7f 	.word	0x08008c7f
 8008c68:	08008c85 	.word	0x08008c85
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008c6c:	2336      	movs	r3, #54	; 0x36
 8008c6e:	82fb      	strh	r3, [r7, #22]
    break;
 8008c70:	e014      	b.n	8008c9c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008c72:	2322      	movs	r3, #34	; 0x22
 8008c74:	82fb      	strh	r3, [r7, #22]
    break;
 8008c76:	e011      	b.n	8008c9c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008c78:	230e      	movs	r3, #14
 8008c7a:	82fb      	strh	r3, [r7, #22]
    break;
 8008c7c:	e00e      	b.n	8008c9c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	82fb      	strh	r3, [r7, #22]
    break;
 8008c82:	e00b      	b.n	8008c9c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	82fb      	strh	r3, [r7, #22]
    break;
 8008c88:	e008      	b.n	8008c9c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008c8a:	4ba5      	ldr	r3, [pc, #660]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008c8c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8008c90:	49a4      	ldr	r1, [pc, #656]	; (8008f24 <pbuf_alloc+0x2ec>)
 8008c92:	48a5      	ldr	r0, [pc, #660]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008c94:	f009 f902 	bl	8011e9c <iprintf>
    return NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e15d      	b.n	8008f58 <pbuf_alloc+0x320>
  }

  switch (type) {
 8008c9c:	79bb      	ldrb	r3, [r7, #6]
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	f200 8134 	bhi.w	8008f0c <pbuf_alloc+0x2d4>
 8008ca4:	a201      	add	r2, pc, #4	; (adr r2, 8008cac <pbuf_alloc+0x74>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008e4d 	.word	0x08008e4d
 8008cb0:	08008ed9 	.word	0x08008ed9
 8008cb4:	08008ed9 	.word	0x08008ed9
 8008cb8:	08008cbd 	.word	0x08008cbd
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008cbc:	2008      	movs	r0, #8
 8008cbe:	f7ff fd55 	bl	800876c <memp_malloc>
 8008cc2:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8008cca:	f7ff ffa9 	bl	8008c20 <pbuf_pool_is_empty>
      return NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e142      	b.n	8008f58 <pbuf_alloc+0x320>
    }
    p->type = type;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	79ba      	ldrb	r2, [r7, #6]
 8008cd6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8008cde:	8afb      	ldrh	r3, [r7, #22]
 8008ce0:	3310      	adds	r3, #16
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	3303      	adds	r3, #3
 8008ce8:	f023 0303 	bic.w	r3, r3, #3
 8008cec:	461a      	mov	r2, r3
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d006      	beq.n	8008d0c <pbuf_alloc+0xd4>
 8008cfe:	4b88      	ldr	r3, [pc, #544]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008d00:	f240 1229 	movw	r2, #297	; 0x129
 8008d04:	4989      	ldr	r1, [pc, #548]	; (8008f2c <pbuf_alloc+0x2f4>)
 8008d06:	4888      	ldr	r0, [pc, #544]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008d08:	f009 f8c8 	bl	8011e9c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	88ba      	ldrh	r2, [r7, #4]
 8008d10:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8008d12:	8afb      	ldrh	r3, [r7, #22]
 8008d14:	3303      	adds	r3, #3
 8008d16:	f023 0303 	bic.w	r3, r3, #3
 8008d1a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8008d1e:	88bb      	ldrh	r3, [r7, #4]
 8008d20:	4293      	cmp	r3, r2
 8008d22:	bf28      	it	cs
 8008d24:	4613      	movcs	r3, r2
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	8952      	ldrh	r2, [r2, #10]
 8008d34:	441a      	add	r2, r3
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d906      	bls.n	8008d4e <pbuf_alloc+0x116>
 8008d40:	4b77      	ldr	r3, [pc, #476]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008d42:	f44f 7298 	mov.w	r2, #304	; 0x130
 8008d46:	497a      	ldr	r1, [pc, #488]	; (8008f30 <pbuf_alloc+0x2f8>)
 8008d48:	4877      	ldr	r0, [pc, #476]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008d4a:	f009 f8a7 	bl	8011e9c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008d4e:	8afb      	ldrh	r3, [r7, #22]
 8008d50:	3303      	adds	r3, #3
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008d5a:	d106      	bne.n	8008d6a <pbuf_alloc+0x132>
 8008d5c:	4b70      	ldr	r3, [pc, #448]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008d5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8008d62:	4974      	ldr	r1, [pc, #464]	; (8008f34 <pbuf_alloc+0x2fc>)
 8008d64:	4870      	ldr	r0, [pc, #448]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008d66:	f009 f899 	bl	8011e9c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8008d74:	88bb      	ldrh	r3, [r7, #4]
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	8952      	ldrh	r2, [r2, #10]
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8008d7e:	e061      	b.n	8008e44 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008d80:	2008      	movs	r0, #8
 8008d82:	f7ff fcf3 	bl	800876c <memp_malloc>
 8008d86:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8008d8e:	f7ff ff47 	bl	8008c20 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8008d92:	69f8      	ldr	r0, [r7, #28]
 8008d94:	f000 fac2 	bl	800931c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e0dd      	b.n	8008f58 <pbuf_alloc+0x320>
      }
      q->type = type;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	79ba      	ldrb	r2, [r7, #6]
 8008da0:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	dd06      	ble.n	8008dcc <pbuf_alloc+0x194>
 8008dbe:	4b58      	ldr	r3, [pc, #352]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008dc0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008dc4:	495c      	ldr	r1, [pc, #368]	; (8008f38 <pbuf_alloc+0x300>)
 8008dc6:	4858      	ldr	r0, [pc, #352]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008dc8:	f009 f868 	bl	8011e9c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008ddc:	bf28      	it	cs
 8008dde:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f103 0210 	add.w	r2, r3, #16
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d006      	beq.n	8008e0c <pbuf_alloc+0x1d4>
 8008dfe:	4b48      	ldr	r3, [pc, #288]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008e00:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8008e04:	494d      	ldr	r1, [pc, #308]	; (8008f3c <pbuf_alloc+0x304>)
 8008e06:	4848      	ldr	r0, [pc, #288]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008e08:	f009 f848 	bl	8011e9c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	8952      	ldrh	r2, [r2, #10]
 8008e14:	441a      	add	r2, r3
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d906      	bls.n	8008e2e <pbuf_alloc+0x1f6>
 8008e20:	4b3f      	ldr	r3, [pc, #252]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008e22:	f240 1255 	movw	r2, #341	; 0x155
 8008e26:	4942      	ldr	r1, [pc, #264]	; (8008f30 <pbuf_alloc+0x2f8>)
 8008e28:	483f      	ldr	r0, [pc, #252]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008e2a:	f009 f837 	bl	8011e9c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2201      	movs	r2, #1
 8008e32:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	895b      	ldrh	r3, [r3, #10]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dc9a      	bgt.n	8008d80 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008e4a:	e07e      	b.n	8008f4a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8008e4c:	8afb      	ldrh	r3, [r7, #22]
 8008e4e:	3313      	adds	r3, #19
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	f023 0303 	bic.w	r3, r3, #3
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	88bb      	ldrh	r3, [r7, #4]
 8008e5a:	3303      	adds	r3, #3
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f023 0303 	bic.w	r3, r3, #3
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4413      	add	r3, r2
 8008e66:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8008e68:	897a      	ldrh	r2, [r7, #10]
 8008e6a:	88bb      	ldrh	r3, [r7, #4]
 8008e6c:	3303      	adds	r3, #3
 8008e6e:	f023 0303 	bic.w	r3, r3, #3
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d201      	bcs.n	8008e7a <pbuf_alloc+0x242>
        return NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e06e      	b.n	8008f58 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008e7a:	897b      	ldrh	r3, [r7, #10]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff faf5 	bl	800846c <mem_malloc>
 8008e82:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <pbuf_alloc+0x256>
      return NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e064      	b.n	8008f58 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008e8e:	8afb      	ldrh	r3, [r7, #22]
 8008e90:	3310      	adds	r3, #16
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	3303      	adds	r3, #3
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	88ba      	ldrh	r2, [r7, #4]
 8008ea6:	811a      	strh	r2, [r3, #8]
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	891a      	ldrh	r2, [r3, #8]
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	79ba      	ldrb	r2, [r7, #6]
 8008eba:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d03f      	beq.n	8008f48 <pbuf_alloc+0x310>
 8008ec8:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008eca:	f240 1277 	movw	r2, #375	; 0x177
 8008ece:	491c      	ldr	r1, [pc, #112]	; (8008f40 <pbuf_alloc+0x308>)
 8008ed0:	4815      	ldr	r0, [pc, #84]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008ed2:	f008 ffe3 	bl	8011e9c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8008ed6:	e037      	b.n	8008f48 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008ed8:	2007      	movs	r0, #7
 8008eda:	f7ff fc47 	bl	800876c <memp_malloc>
 8008ede:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e036      	b.n	8008f58 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	2200      	movs	r2, #0
 8008eee:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	88ba      	ldrh	r2, [r7, #4]
 8008ef4:	811a      	strh	r2, [r3, #8]
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	891a      	ldrh	r2, [r3, #8]
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	79ba      	ldrb	r2, [r7, #6]
 8008f08:	731a      	strb	r2, [r3, #12]
    break;
 8008f0a:	e01e      	b.n	8008f4a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008f0c:	4b04      	ldr	r3, [pc, #16]	; (8008f20 <pbuf_alloc+0x2e8>)
 8008f0e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008f12:	490c      	ldr	r1, [pc, #48]	; (8008f44 <pbuf_alloc+0x30c>)
 8008f14:	4804      	ldr	r0, [pc, #16]	; (8008f28 <pbuf_alloc+0x2f0>)
 8008f16:	f008 ffc1 	bl	8011e9c <iprintf>
    return NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e01c      	b.n	8008f58 <pbuf_alloc+0x320>
 8008f1e:	bf00      	nop
 8008f20:	08012fe8 	.word	0x08012fe8
 8008f24:	08013018 	.word	0x08013018
 8008f28:	08013034 	.word	0x08013034
 8008f2c:	0801305c 	.word	0x0801305c
 8008f30:	0801308c 	.word	0x0801308c
 8008f34:	080130c0 	.word	0x080130c0
 8008f38:	080130f4 	.word	0x080130f4
 8008f3c:	08013108 	.word	0x08013108
 8008f40:	08013138 	.word	0x08013138
 8008f44:	08013164 	.word	0x08013164
    break;
 8008f48:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	2200      	movs	r2, #0
 8008f54:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008f56:	69fb      	ldr	r3, [r7, #28]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	603b      	str	r3, [r7, #0]
 8008f68:	4603      	mov	r3, r0
 8008f6a:	71fb      	strb	r3, [r7, #7]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	80bb      	strh	r3, [r7, #4]
 8008f70:	4613      	mov	r3, r2
 8008f72:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d81b      	bhi.n	8008fb2 <pbuf_alloced_custom+0x52>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <pbuf_alloced_custom+0x20>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008f95 	.word	0x08008f95
 8008f84:	08008f9b 	.word	0x08008f9b
 8008f88:	08008fa1 	.word	0x08008fa1
 8008f8c:	08008fa7 	.word	0x08008fa7
 8008f90:	08008fad 	.word	0x08008fad
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008f94:	2336      	movs	r3, #54	; 0x36
 8008f96:	81fb      	strh	r3, [r7, #14]
    break;
 8008f98:	e014      	b.n	8008fc4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008f9a:	2322      	movs	r3, #34	; 0x22
 8008f9c:	81fb      	strh	r3, [r7, #14]
    break;
 8008f9e:	e011      	b.n	8008fc4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008fa0:	230e      	movs	r3, #14
 8008fa2:	81fb      	strh	r3, [r7, #14]
    break;
 8008fa4:	e00e      	b.n	8008fc4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	81fb      	strh	r3, [r7, #14]
    break;
 8008faa:	e00b      	b.n	8008fc4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	81fb      	strh	r3, [r7, #14]
    break;
 8008fb0:	e008      	b.n	8008fc4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	; (8009028 <pbuf_alloced_custom+0xc8>)
 8008fb4:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008fb8:	491c      	ldr	r1, [pc, #112]	; (800902c <pbuf_alloced_custom+0xcc>)
 8008fba:	481d      	ldr	r0, [pc, #116]	; (8009030 <pbuf_alloced_custom+0xd0>)
 8008fbc:	f008 ff6e 	bl	8011e9c <iprintf>
    return NULL;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	e02d      	b.n	8009020 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008fc4:	89fb      	ldrh	r3, [r7, #14]
 8008fc6:	3303      	adds	r3, #3
 8008fc8:	f023 0203 	bic.w	r2, r3, #3
 8008fcc:	88bb      	ldrh	r3, [r7, #4]
 8008fce:	441a      	add	r2, r3
 8008fd0:	8bbb      	ldrh	r3, [r7, #28]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d901      	bls.n	8008fda <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e022      	b.n	8009020 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d008      	beq.n	8008ff8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008fe6:	89fb      	ldrh	r3, [r7, #14]
 8008fe8:	3303      	adds	r3, #3
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	441a      	add	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	605a      	str	r2, [r3, #4]
 8008ff6:	e002      	b.n	8008ffe <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2202      	movs	r2, #2
 8009002:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	88ba      	ldrh	r2, [r7, #4]
 8009008:	811a      	strh	r2, [r3, #8]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	891a      	ldrh	r2, [r3, #8]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	79ba      	ldrb	r2, [r7, #6]
 8009016:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2201      	movs	r2, #1
 800901c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800901e:	683b      	ldr	r3, [r7, #0]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	08012fe8 	.word	0x08012fe8
 800902c:	08013180 	.word	0x08013180
 8009030:	08013034 	.word	0x08013034

08009034 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <pbuf_realloc+0x20>
 8009046:	4b4b      	ldr	r3, [pc, #300]	; (8009174 <pbuf_realloc+0x140>)
 8009048:	f240 12f3 	movw	r2, #499	; 0x1f3
 800904c:	494a      	ldr	r1, [pc, #296]	; (8009178 <pbuf_realloc+0x144>)
 800904e:	484b      	ldr	r0, [pc, #300]	; (800917c <pbuf_realloc+0x148>)
 8009050:	f008 ff24 	bl	8011e9c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	7b1b      	ldrb	r3, [r3, #12]
 8009058:	2b03      	cmp	r3, #3
 800905a:	d012      	beq.n	8009082 <pbuf_realloc+0x4e>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7b1b      	ldrb	r3, [r3, #12]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d00e      	beq.n	8009082 <pbuf_realloc+0x4e>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	7b1b      	ldrb	r3, [r3, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <pbuf_realloc+0x4e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	7b1b      	ldrb	r3, [r3, #12]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d006      	beq.n	8009082 <pbuf_realloc+0x4e>
 8009074:	4b3f      	ldr	r3, [pc, #252]	; (8009174 <pbuf_realloc+0x140>)
 8009076:	f240 12f7 	movw	r2, #503	; 0x1f7
 800907a:	4941      	ldr	r1, [pc, #260]	; (8009180 <pbuf_realloc+0x14c>)
 800907c:	483f      	ldr	r0, [pc, #252]	; (800917c <pbuf_realloc+0x148>)
 800907e:	f008 ff0d 	bl	8011e9c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	891b      	ldrh	r3, [r3, #8]
 8009086:	887a      	ldrh	r2, [r7, #2]
 8009088:	429a      	cmp	r2, r3
 800908a:	d26f      	bcs.n	800916c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800908c:	887b      	ldrh	r3, [r7, #2]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	8912      	ldrh	r2, [r2, #8]
 8009092:	1a9b      	subs	r3, r3, r2
 8009094:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009096:	887b      	ldrh	r3, [r7, #2]
 8009098:	827b      	strh	r3, [r7, #18]
  q = p;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800909e:	e025      	b.n	80090ec <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	895b      	ldrh	r3, [r3, #10]
 80090a4:	8a7a      	ldrh	r2, [r7, #18]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80090b0:	4293      	cmp	r3, r2
 80090b2:	dd06      	ble.n	80090c2 <pbuf_realloc+0x8e>
 80090b4:	4b2f      	ldr	r3, [pc, #188]	; (8009174 <pbuf_realloc+0x140>)
 80090b6:	f240 220b 	movw	r2, #523	; 0x20b
 80090ba:	4932      	ldr	r1, [pc, #200]	; (8009184 <pbuf_realloc+0x150>)
 80090bc:	482f      	ldr	r0, [pc, #188]	; (800917c <pbuf_realloc+0x148>)
 80090be:	f008 feed 	bl	8011e9c <iprintf>
    q->tot_len += (u16_t)grow;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	891a      	ldrh	r2, [r3, #8]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4413      	add	r3, r2
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <pbuf_realloc+0xb8>
 80090de:	4b25      	ldr	r3, [pc, #148]	; (8009174 <pbuf_realloc+0x140>)
 80090e0:	f240 220f 	movw	r2, #527	; 0x20f
 80090e4:	4928      	ldr	r1, [pc, #160]	; (8009188 <pbuf_realloc+0x154>)
 80090e6:	4825      	ldr	r0, [pc, #148]	; (800917c <pbuf_realloc+0x148>)
 80090e8:	f008 fed8 	bl	8011e9c <iprintf>
  while (rem_len > q->len) {
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	895b      	ldrh	r3, [r3, #10]
 80090f0:	8a7a      	ldrh	r2, [r7, #18]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d8d4      	bhi.n	80090a0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	7b1b      	ldrb	r3, [r3, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d122      	bne.n	8009144 <pbuf_realloc+0x110>
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	895b      	ldrh	r3, [r3, #10]
 8009102:	8a7a      	ldrh	r2, [r7, #18]
 8009104:	429a      	cmp	r2, r3
 8009106:	d01d      	beq.n	8009144 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	7b5b      	ldrb	r3, [r3, #13]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d117      	bne.n	8009144 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	461a      	mov	r2, r3
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	b29a      	uxth	r2, r3
 8009120:	8a7b      	ldrh	r3, [r7, #18]
 8009122:	4413      	add	r3, r2
 8009124:	b29b      	uxth	r3, r3
 8009126:	4619      	mov	r1, r3
 8009128:	6978      	ldr	r0, [r7, #20]
 800912a:	f7ff f8c3 	bl	80082b4 <mem_trim>
 800912e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <pbuf_realloc+0x110>
 8009136:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <pbuf_realloc+0x140>)
 8009138:	f240 221d 	movw	r2, #541	; 0x21d
 800913c:	4913      	ldr	r1, [pc, #76]	; (800918c <pbuf_realloc+0x158>)
 800913e:	480f      	ldr	r0, [pc, #60]	; (800917c <pbuf_realloc+0x148>)
 8009140:	f008 feac 	bl	8011e9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	8a7a      	ldrh	r2, [r7, #18]
 8009148:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	895a      	ldrh	r2, [r3, #10]
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d004      	beq.n	8009164 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f000 f8dc 	bl	800931c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	e000      	b.n	800916e <pbuf_realloc+0x13a>
    return;
 800916c:	bf00      	nop

}
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	08012fe8 	.word	0x08012fe8
 8009178:	080131a4 	.word	0x080131a4
 800917c:	08013034 	.word	0x08013034
 8009180:	080131bc 	.word	0x080131bc
 8009184:	080131d8 	.word	0x080131d8
 8009188:	080131ec 	.word	0x080131ec
 800918c:	08013204 	.word	0x08013204

08009190 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	807b      	strh	r3, [r7, #2]
 800919c:	4613      	mov	r3, r2
 800919e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <pbuf_header_impl+0x24>
 80091a6:	4b46      	ldr	r3, [pc, #280]	; (80092c0 <pbuf_header_impl+0x130>)
 80091a8:	f240 223f 	movw	r2, #575	; 0x23f
 80091ac:	4945      	ldr	r1, [pc, #276]	; (80092c4 <pbuf_header_impl+0x134>)
 80091ae:	4846      	ldr	r0, [pc, #280]	; (80092c8 <pbuf_header_impl+0x138>)
 80091b0:	f008 fe74 	bl	8011e9c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80091b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <pbuf_header_impl+0x32>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <pbuf_header_impl+0x36>
    return 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	e078      	b.n	80092b8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80091c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da10      	bge.n	80091f0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80091ce:	887b      	ldrh	r3, [r7, #2]
 80091d0:	425b      	negs	r3, r3
 80091d2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	895b      	ldrh	r3, [r3, #10]
 80091d8:	89fa      	ldrh	r2, [r7, #14]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d90a      	bls.n	80091f4 <pbuf_header_impl+0x64>
 80091de:	4b38      	ldr	r3, [pc, #224]	; (80092c0 <pbuf_header_impl+0x130>)
 80091e0:	f240 2247 	movw	r2, #583	; 0x247
 80091e4:	4939      	ldr	r1, [pc, #228]	; (80092cc <pbuf_header_impl+0x13c>)
 80091e6:	4838      	ldr	r0, [pc, #224]	; (80092c8 <pbuf_header_impl+0x138>)
 80091e8:	f008 fe58 	bl	8011e9c <iprintf>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e063      	b.n	80092b8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80091f0:	887b      	ldrh	r3, [r7, #2]
 80091f2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7b1b      	ldrb	r3, [r3, #12]
 80091f8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8009200:	89bb      	ldrh	r3, [r7, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <pbuf_header_impl+0x7c>
 8009206:	89bb      	ldrh	r3, [r7, #12]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d112      	bne.n	8009232 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009214:	425b      	negs	r3, r3
 8009216:	441a      	add	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3310      	adds	r3, #16
 8009224:	429a      	cmp	r2, r3
 8009226:	d238      	bcs.n	800929a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800922e:	2301      	movs	r3, #1
 8009230:	e042      	b.n	80092b8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8009232:	89bb      	ldrh	r3, [r7, #12]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d002      	beq.n	800923e <pbuf_header_impl+0xae>
 8009238:	89bb      	ldrh	r3, [r7, #12]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d124      	bne.n	8009288 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800923e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009242:	2b00      	cmp	r3, #0
 8009244:	da0d      	bge.n	8009262 <pbuf_header_impl+0xd2>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	895b      	ldrh	r3, [r3, #10]
 800924a:	89fa      	ldrh	r2, [r7, #14]
 800924c:	429a      	cmp	r2, r3
 800924e:	d808      	bhi.n	8009262 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009258:	425b      	negs	r3, r3
 800925a:	441a      	add	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	605a      	str	r2, [r3, #4]
 8009260:	e011      	b.n	8009286 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8009262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009266:	2b00      	cmp	r3, #0
 8009268:	dd0b      	ble.n	8009282 <pbuf_header_impl+0xf2>
 800926a:	787b      	ldrb	r3, [r7, #1]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d008      	beq.n	8009282 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009278:	425b      	negs	r3, r3
 800927a:	441a      	add	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	605a      	str	r2, [r3, #4]
 8009280:	e001      	b.n	8009286 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009282:	2301      	movs	r3, #1
 8009284:	e018      	b.n	80092b8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009286:	e008      	b.n	800929a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8009288:	4b0d      	ldr	r3, [pc, #52]	; (80092c0 <pbuf_header_impl+0x130>)
 800928a:	f240 2277 	movw	r2, #631	; 0x277
 800928e:	4910      	ldr	r1, [pc, #64]	; (80092d0 <pbuf_header_impl+0x140>)
 8009290:	480d      	ldr	r0, [pc, #52]	; (80092c8 <pbuf_header_impl+0x138>)
 8009292:	f008 fe03 	bl	8011e9c <iprintf>
    return 1;
 8009296:	2301      	movs	r3, #1
 8009298:	e00e      	b.n	80092b8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	895a      	ldrh	r2, [r3, #10]
 800929e:	887b      	ldrh	r3, [r7, #2]
 80092a0:	4413      	add	r3, r2
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	891a      	ldrh	r2, [r3, #8]
 80092ac:	887b      	ldrh	r3, [r7, #2]
 80092ae:	4413      	add	r3, r2
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	08012fe8 	.word	0x08012fe8
 80092c4:	08013220 	.word	0x08013220
 80092c8:	08013034 	.word	0x08013034
 80092cc:	0801322c 	.word	0x0801322c
 80092d0:	0801324c 	.word	0x0801324c

080092d4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80092e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092e4:	2200      	movs	r2, #0
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff ff51 	bl	8009190 <pbuf_header_impl>
 80092ee:	4603      	mov	r3, r0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8009304:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009308:	2201      	movs	r2, #1
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff ff3f 	bl	8009190 <pbuf_header_impl>
 8009312:	4603      	mov	r3, r0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10b      	bne.n	8009342 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <pbuf_free+0x22>
 8009330:	4b3e      	ldr	r3, [pc, #248]	; (800942c <pbuf_free+0x110>)
 8009332:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009336:	493e      	ldr	r1, [pc, #248]	; (8009430 <pbuf_free+0x114>)
 8009338:	483e      	ldr	r0, [pc, #248]	; (8009434 <pbuf_free+0x118>)
 800933a:	f008 fdaf 	bl	8011e9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800933e:	2300      	movs	r3, #0
 8009340:	e070      	b.n	8009424 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	7b1b      	ldrb	r3, [r3, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d012      	beq.n	8009370 <pbuf_free+0x54>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7b1b      	ldrb	r3, [r3, #12]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d00e      	beq.n	8009370 <pbuf_free+0x54>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	7b1b      	ldrb	r3, [r3, #12]
 8009356:	2b02      	cmp	r3, #2
 8009358:	d00a      	beq.n	8009370 <pbuf_free+0x54>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	7b1b      	ldrb	r3, [r3, #12]
 800935e:	2b03      	cmp	r3, #3
 8009360:	d006      	beq.n	8009370 <pbuf_free+0x54>
 8009362:	4b32      	ldr	r3, [pc, #200]	; (800942c <pbuf_free+0x110>)
 8009364:	f240 22de 	movw	r2, #734	; 0x2de
 8009368:	4933      	ldr	r1, [pc, #204]	; (8009438 <pbuf_free+0x11c>)
 800936a:	4832      	ldr	r0, [pc, #200]	; (8009434 <pbuf_free+0x118>)
 800936c:	f008 fd96 	bl	8011e9c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009374:	e052      	b.n	800941c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	89db      	ldrh	r3, [r3, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <pbuf_free+0x70>
 800937e:	4b2b      	ldr	r3, [pc, #172]	; (800942c <pbuf_free+0x110>)
 8009380:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009384:	492d      	ldr	r1, [pc, #180]	; (800943c <pbuf_free+0x120>)
 8009386:	482b      	ldr	r0, [pc, #172]	; (8009434 <pbuf_free+0x118>)
 8009388:	f008 fd88 	bl	8011e9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	89db      	ldrh	r3, [r3, #14]
 8009390:	3b01      	subs	r3, #1
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	81da      	strh	r2, [r3, #14]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	89db      	ldrh	r3, [r3, #14]
 800939c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800939e:	8abb      	ldrh	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d139      	bne.n	8009418 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7b1b      	ldrb	r3, [r3, #12]
 80093ae:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7b5b      	ldrb	r3, [r3, #13]
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d011      	beq.n	80093e0 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d106      	bne.n	80093d6 <pbuf_free+0xba>
 80093c8:	4b18      	ldr	r3, [pc, #96]	; (800942c <pbuf_free+0x110>)
 80093ca:	f240 22f9 	movw	r2, #761	; 0x2f9
 80093ce:	491c      	ldr	r1, [pc, #112]	; (8009440 <pbuf_free+0x124>)
 80093d0:	4818      	ldr	r0, [pc, #96]	; (8009434 <pbuf_free+0x118>)
 80093d2:	f008 fd63 	bl	8011e9c <iprintf>
        pc->custom_free_function(p);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
 80093de:	e015      	b.n	800940c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80093e0:	89fb      	ldrh	r3, [r7, #14]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d104      	bne.n	80093f0 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	2008      	movs	r0, #8
 80093ea:	f7ff fa2f 	bl	800884c <memp_free>
 80093ee:	e00d      	b.n	800940c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80093f0:	89fb      	ldrh	r3, [r7, #14]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d002      	beq.n	80093fc <pbuf_free+0xe0>
 80093f6:	89fb      	ldrh	r3, [r7, #14]
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d104      	bne.n	8009406 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	2007      	movs	r0, #7
 8009400:	f7ff fa24 	bl	800884c <memp_free>
 8009404:	e002      	b.n	800940c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7fe fef2 	bl	80081f0 <mem_free>
        }
      }
      count++;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	3301      	adds	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	607b      	str	r3, [r7, #4]
 8009416:	e001      	b.n	800941c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8009418:	2300      	movs	r3, #0
 800941a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1a9      	bne.n	8009376 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	08012fe8 	.word	0x08012fe8
 8009430:	08013220 	.word	0x08013220
 8009434:	08013034 	.word	0x08013034
 8009438:	0801325c 	.word	0x0801325c
 800943c:	08013274 	.word	0x08013274
 8009440:	0801328c 	.word	0x0801328c

08009444 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800944c:	2300      	movs	r3, #0
 800944e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009450:	e005      	b.n	800945e <pbuf_clen+0x1a>
    ++len;
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	3301      	adds	r3, #1
 8009456:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1f6      	bne.n	8009452 <pbuf_clen+0xe>
  }
  return len;
 8009464:	89fb      	ldrh	r3, [r7, #14]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
	...

08009474 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d010      	beq.n	80094a4 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	89db      	ldrh	r3, [r3, #14]
 8009486:	3301      	adds	r3, #1
 8009488:	b29a      	uxth	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	89db      	ldrh	r3, [r3, #14]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d106      	bne.n	80094a4 <pbuf_ref+0x30>
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <pbuf_ref+0x38>)
 8009498:	f240 3239 	movw	r2, #825	; 0x339
 800949c:	4904      	ldr	r1, [pc, #16]	; (80094b0 <pbuf_ref+0x3c>)
 800949e:	4805      	ldr	r0, [pc, #20]	; (80094b4 <pbuf_ref+0x40>)
 80094a0:	f008 fcfc 	bl	8011e9c <iprintf>
  }
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	08012fe8 	.word	0x08012fe8
 80094b0:	080132b0 	.word	0x080132b0
 80094b4:	08013034 	.word	0x08013034

080094b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <pbuf_cat+0x16>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d107      	bne.n	80094de <pbuf_cat+0x26>
 80094ce:	4b20      	ldr	r3, [pc, #128]	; (8009550 <pbuf_cat+0x98>)
 80094d0:	f240 324d 	movw	r2, #845	; 0x34d
 80094d4:	491f      	ldr	r1, [pc, #124]	; (8009554 <pbuf_cat+0x9c>)
 80094d6:	4820      	ldr	r0, [pc, #128]	; (8009558 <pbuf_cat+0xa0>)
 80094d8:	f008 fce0 	bl	8011e9c <iprintf>
 80094dc:	e034      	b.n	8009548 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	e00a      	b.n	80094fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	891a      	ldrh	r2, [r3, #8]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	891b      	ldrh	r3, [r3, #8]
 80094ec:	4413      	add	r3, r2
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1f0      	bne.n	80094e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	891a      	ldrh	r2, [r3, #8]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	895b      	ldrh	r3, [r3, #10]
 800950a:	429a      	cmp	r2, r3
 800950c:	d006      	beq.n	800951c <pbuf_cat+0x64>
 800950e:	4b10      	ldr	r3, [pc, #64]	; (8009550 <pbuf_cat+0x98>)
 8009510:	f240 3255 	movw	r2, #853	; 0x355
 8009514:	4911      	ldr	r1, [pc, #68]	; (800955c <pbuf_cat+0xa4>)
 8009516:	4810      	ldr	r0, [pc, #64]	; (8009558 <pbuf_cat+0xa0>)
 8009518:	f008 fcc0 	bl	8011e9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d006      	beq.n	8009532 <pbuf_cat+0x7a>
 8009524:	4b0a      	ldr	r3, [pc, #40]	; (8009550 <pbuf_cat+0x98>)
 8009526:	f240 3256 	movw	r2, #854	; 0x356
 800952a:	490d      	ldr	r1, [pc, #52]	; (8009560 <pbuf_cat+0xa8>)
 800952c:	480a      	ldr	r0, [pc, #40]	; (8009558 <pbuf_cat+0xa0>)
 800952e:	f008 fcb5 	bl	8011e9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	891a      	ldrh	r2, [r3, #8]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	891b      	ldrh	r3, [r3, #8]
 800953a:	4413      	add	r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	08012fe8 	.word	0x08012fe8
 8009554:	080132c4 	.word	0x080132c4
 8009558:	08013034 	.word	0x08013034
 800955c:	080132fc 	.word	0x080132fc
 8009560:	0801332c 	.word	0x0801332c

08009564 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800956e:	2300      	movs	r3, #0
 8009570:	81fb      	strh	r3, [r7, #14]
 8009572:	2300      	movs	r3, #0
 8009574:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d008      	beq.n	800958e <pbuf_copy+0x2a>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <pbuf_copy+0x2a>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	891a      	ldrh	r2, [r3, #8]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	891b      	ldrh	r3, [r3, #8]
 800958a:	429a      	cmp	r2, r3
 800958c:	d209      	bcs.n	80095a2 <pbuf_copy+0x3e>
 800958e:	4b54      	ldr	r3, [pc, #336]	; (80096e0 <pbuf_copy+0x17c>)
 8009590:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009594:	4953      	ldr	r1, [pc, #332]	; (80096e4 <pbuf_copy+0x180>)
 8009596:	4854      	ldr	r0, [pc, #336]	; (80096e8 <pbuf_copy+0x184>)
 8009598:	f008 fc80 	bl	8011e9c <iprintf>
 800959c:	f06f 030f 	mvn.w	r3, #15
 80095a0:	e099      	b.n	80096d6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	895b      	ldrh	r3, [r3, #10]
 80095a6:	461a      	mov	r2, r3
 80095a8:	89fb      	ldrh	r3, [r7, #14]
 80095aa:	1ad2      	subs	r2, r2, r3
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	895b      	ldrh	r3, [r3, #10]
 80095b0:	4619      	mov	r1, r3
 80095b2:	89bb      	ldrh	r3, [r7, #12]
 80095b4:	1acb      	subs	r3, r1, r3
 80095b6:	429a      	cmp	r2, r3
 80095b8:	db05      	blt.n	80095c6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	895a      	ldrh	r2, [r3, #10]
 80095be:	89bb      	ldrh	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	817b      	strh	r3, [r7, #10]
 80095c4:	e004      	b.n	80095d0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	895a      	ldrh	r2, [r3, #10]
 80095ca:	89fb      	ldrh	r3, [r7, #14]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	89fb      	ldrh	r3, [r7, #14]
 80095d6:	18d0      	adds	r0, r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	89bb      	ldrh	r3, [r7, #12]
 80095de:	4413      	add	r3, r2
 80095e0:	897a      	ldrh	r2, [r7, #10]
 80095e2:	4619      	mov	r1, r3
 80095e4:	f008 fc47 	bl	8011e76 <memcpy>
    offset_to += len;
 80095e8:	89fa      	ldrh	r2, [r7, #14]
 80095ea:	897b      	ldrh	r3, [r7, #10]
 80095ec:	4413      	add	r3, r2
 80095ee:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80095f0:	89ba      	ldrh	r2, [r7, #12]
 80095f2:	897b      	ldrh	r3, [r7, #10]
 80095f4:	4413      	add	r3, r2
 80095f6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	895b      	ldrh	r3, [r3, #10]
 80095fc:	89fa      	ldrh	r2, [r7, #14]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d906      	bls.n	8009610 <pbuf_copy+0xac>
 8009602:	4b37      	ldr	r3, [pc, #220]	; (80096e0 <pbuf_copy+0x17c>)
 8009604:	f240 32cd 	movw	r2, #973	; 0x3cd
 8009608:	4938      	ldr	r1, [pc, #224]	; (80096ec <pbuf_copy+0x188>)
 800960a:	4837      	ldr	r0, [pc, #220]	; (80096e8 <pbuf_copy+0x184>)
 800960c:	f008 fc46 	bl	8011e9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	895b      	ldrh	r3, [r3, #10]
 8009614:	89ba      	ldrh	r2, [r7, #12]
 8009616:	429a      	cmp	r2, r3
 8009618:	d906      	bls.n	8009628 <pbuf_copy+0xc4>
 800961a:	4b31      	ldr	r3, [pc, #196]	; (80096e0 <pbuf_copy+0x17c>)
 800961c:	f240 32ce 	movw	r2, #974	; 0x3ce
 8009620:	4933      	ldr	r1, [pc, #204]	; (80096f0 <pbuf_copy+0x18c>)
 8009622:	4831      	ldr	r0, [pc, #196]	; (80096e8 <pbuf_copy+0x184>)
 8009624:	f008 fc3a 	bl	8011e9c <iprintf>
    if (offset_from >= p_from->len) {
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	895b      	ldrh	r3, [r3, #10]
 800962c:	89ba      	ldrh	r2, [r7, #12]
 800962e:	429a      	cmp	r2, r3
 8009630:	d304      	bcc.n	800963c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	895b      	ldrh	r3, [r3, #10]
 8009640:	89fa      	ldrh	r2, [r7, #14]
 8009642:	429a      	cmp	r2, r3
 8009644:	d114      	bne.n	8009670 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10c      	bne.n	8009670 <pbuf_copy+0x10c>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <pbuf_copy+0x10c>
 800965c:	4b20      	ldr	r3, [pc, #128]	; (80096e0 <pbuf_copy+0x17c>)
 800965e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009662:	4924      	ldr	r1, [pc, #144]	; (80096f4 <pbuf_copy+0x190>)
 8009664:	4820      	ldr	r0, [pc, #128]	; (80096e8 <pbuf_copy+0x184>)
 8009666:	f008 fc19 	bl	8011e9c <iprintf>
 800966a:	f06f 030f 	mvn.w	r3, #15
 800966e:	e032      	b.n	80096d6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d013      	beq.n	800969e <pbuf_copy+0x13a>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	895a      	ldrh	r2, [r3, #10]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	891b      	ldrh	r3, [r3, #8]
 800967e:	429a      	cmp	r2, r3
 8009680:	d10d      	bne.n	800969e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d009      	beq.n	800969e <pbuf_copy+0x13a>
 800968a:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <pbuf_copy+0x17c>)
 800968c:	f240 32de 	movw	r2, #990	; 0x3de
 8009690:	4919      	ldr	r1, [pc, #100]	; (80096f8 <pbuf_copy+0x194>)
 8009692:	4815      	ldr	r0, [pc, #84]	; (80096e8 <pbuf_copy+0x184>)
 8009694:	f008 fc02 	bl	8011e9c <iprintf>
 8009698:	f06f 0305 	mvn.w	r3, #5
 800969c:	e01b      	b.n	80096d6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d013      	beq.n	80096cc <pbuf_copy+0x168>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	895a      	ldrh	r2, [r3, #10]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	891b      	ldrh	r3, [r3, #8]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d10d      	bne.n	80096cc <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d009      	beq.n	80096cc <pbuf_copy+0x168>
 80096b8:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <pbuf_copy+0x17c>)
 80096ba:	f240 32e3 	movw	r2, #995	; 0x3e3
 80096be:	490e      	ldr	r1, [pc, #56]	; (80096f8 <pbuf_copy+0x194>)
 80096c0:	4809      	ldr	r0, [pc, #36]	; (80096e8 <pbuf_copy+0x184>)
 80096c2:	f008 fbeb 	bl	8011e9c <iprintf>
 80096c6:	f06f 0305 	mvn.w	r3, #5
 80096ca:	e004      	b.n	80096d6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f47f af67 	bne.w	80095a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	08012fe8 	.word	0x08012fe8
 80096e4:	08013378 	.word	0x08013378
 80096e8:	08013034 	.word	0x08013034
 80096ec:	080133a8 	.word	0x080133a8
 80096f0:	080133c0 	.word	0x080133c0
 80096f4:	080133dc 	.word	0x080133dc
 80096f8:	080133ec 	.word	0x080133ec

080096fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	460b      	mov	r3, r1
 800970c:	80fb      	strh	r3, [r7, #6]
 800970e:	4613      	mov	r3, r2
 8009710:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d108      	bne.n	800972e <pbuf_copy_partial+0x32>
 800971c:	4b30      	ldr	r3, [pc, #192]	; (80097e0 <pbuf_copy_partial+0xe4>)
 800971e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009722:	4930      	ldr	r1, [pc, #192]	; (80097e4 <pbuf_copy_partial+0xe8>)
 8009724:	4830      	ldr	r0, [pc, #192]	; (80097e8 <pbuf_copy_partial+0xec>)
 8009726:	f008 fbb9 	bl	8011e9c <iprintf>
 800972a:	2300      	movs	r3, #0
 800972c:	e054      	b.n	80097d8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d108      	bne.n	8009746 <pbuf_copy_partial+0x4a>
 8009734:	4b2a      	ldr	r3, [pc, #168]	; (80097e0 <pbuf_copy_partial+0xe4>)
 8009736:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800973a:	492c      	ldr	r1, [pc, #176]	; (80097ec <pbuf_copy_partial+0xf0>)
 800973c:	482a      	ldr	r0, [pc, #168]	; (80097e8 <pbuf_copy_partial+0xec>)
 800973e:	f008 fbad 	bl	8011e9c <iprintf>
 8009742:	2300      	movs	r3, #0
 8009744:	e048      	b.n	80097d8 <pbuf_copy_partial+0xdc>

  left = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <pbuf_copy_partial+0x5a>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <pbuf_copy_partial+0x5e>
    return 0;
 8009756:	2300      	movs	r3, #0
 8009758:	e03e      	b.n	80097d8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	e034      	b.n	80097ca <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8009760:	88bb      	ldrh	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00a      	beq.n	800977c <pbuf_copy_partial+0x80>
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	895b      	ldrh	r3, [r3, #10]
 800976a:	88ba      	ldrh	r2, [r7, #4]
 800976c:	429a      	cmp	r2, r3
 800976e:	d305      	bcc.n	800977c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	895b      	ldrh	r3, [r3, #10]
 8009774:	88ba      	ldrh	r2, [r7, #4]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	80bb      	strh	r3, [r7, #4]
 800977a:	e023      	b.n	80097c4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	895a      	ldrh	r2, [r3, #10]
 8009780:	88bb      	ldrh	r3, [r7, #4]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009786:	8b3a      	ldrh	r2, [r7, #24]
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	429a      	cmp	r2, r3
 800978c:	d901      	bls.n	8009792 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8009792:	8b7b      	ldrh	r3, [r7, #26]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	18d0      	adds	r0, r2, r3
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	88bb      	ldrh	r3, [r7, #4]
 800979e:	4413      	add	r3, r2
 80097a0:	8b3a      	ldrh	r2, [r7, #24]
 80097a2:	4619      	mov	r1, r3
 80097a4:	f008 fb67 	bl	8011e76 <memcpy>
      copied_total += buf_copy_len;
 80097a8:	8afa      	ldrh	r2, [r7, #22]
 80097aa:	8b3b      	ldrh	r3, [r7, #24]
 80097ac:	4413      	add	r3, r2
 80097ae:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80097b0:	8b7a      	ldrh	r2, [r7, #26]
 80097b2:	8b3b      	ldrh	r3, [r7, #24]
 80097b4:	4413      	add	r3, r2
 80097b6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80097b8:	88fa      	ldrh	r2, [r7, #6]
 80097ba:	8b3b      	ldrh	r3, [r7, #24]
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	88fb      	ldrh	r3, [r7, #6]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <pbuf_copy_partial+0xda>
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1c4      	bne.n	8009760 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80097d6:	8afb      	ldrh	r3, [r7, #22]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3720      	adds	r7, #32
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	08012fe8 	.word	0x08012fe8
 80097e4:	08013418 	.word	0x08013418
 80097e8:	08013034 	.word	0x08013034
 80097ec:	08013438 	.word	0x08013438

080097f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80097f4:	bf00      	nop
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009804:	f000 fdf0 	bl	800a3e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009808:	4b07      	ldr	r3, [pc, #28]	; (8009828 <tcp_tmr+0x28>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	3301      	adds	r3, #1
 800980e:	b2da      	uxtb	r2, r3
 8009810:	4b05      	ldr	r3, [pc, #20]	; (8009828 <tcp_tmr+0x28>)
 8009812:	701a      	strb	r2, [r3, #0]
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <tcp_tmr+0x28>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009820:	f000 fb22 	bl	8009e68 <tcp_slowtmr>
  }
}
 8009824:	bf00      	nop
 8009826:	bd80      	pop	{r7, pc}
 8009828:	2400199d 	.word	0x2400199d

0800982c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	e00a      	b.n	8009852 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d102      	bne.n	800984c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	60fb      	str	r3, [r7, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1f1      	bne.n	800983c <tcp_remove_listener+0x10>
      }
   }
}
 8009858:	bf00      	nop
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <tcp_listen_closed+0x1a>
 8009872:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <tcp_listen_closed+0x5c>)
 8009874:	22c0      	movs	r2, #192	; 0xc0
 8009876:	4913      	ldr	r1, [pc, #76]	; (80098c4 <tcp_listen_closed+0x60>)
 8009878:	4813      	ldr	r0, [pc, #76]	; (80098c8 <tcp_listen_closed+0x64>)
 800987a:	f008 fb0f 	bl	8011e9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7d1b      	ldrb	r3, [r3, #20]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d005      	beq.n	8009892 <tcp_listen_closed+0x2e>
 8009886:	4b0e      	ldr	r3, [pc, #56]	; (80098c0 <tcp_listen_closed+0x5c>)
 8009888:	22c1      	movs	r2, #193	; 0xc1
 800988a:	4910      	ldr	r1, [pc, #64]	; (80098cc <tcp_listen_closed+0x68>)
 800988c:	480e      	ldr	r0, [pc, #56]	; (80098c8 <tcp_listen_closed+0x64>)
 800988e:	f008 fb05 	bl	8011e9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009892:	2301      	movs	r3, #1
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	e00b      	b.n	80098b0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8009898:	4a0d      	ldr	r2, [pc, #52]	; (80098d0 <tcp_listen_closed+0x6c>)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff ffc1 	bl	800982c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d9f0      	bls.n	8009898 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	0801356c 	.word	0x0801356c
 80098c4:	0801359c 	.word	0x0801359c
 80098c8:	080135a8 	.word	0x080135a8
 80098cc:	080135d0 	.word	0x080135d0
 80098d0:	080149e4 	.word	0x080149e4

080098d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80098d4:	b5b0      	push	{r4, r5, r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af02      	add	r7, sp, #8
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d075      	beq.n	80099d2 <tcp_close_shutdown+0xfe>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	7d1b      	ldrb	r3, [r3, #20]
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d003      	beq.n	80098f6 <tcp_close_shutdown+0x22>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7d1b      	ldrb	r3, [r3, #20]
 80098f2:	2b07      	cmp	r3, #7
 80098f4:	d16d      	bne.n	80099d2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d104      	bne.n	8009908 <tcp_close_shutdown+0x34>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009902:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009906:	d064      	beq.n	80099d2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7e9b      	ldrb	r3, [r3, #26]
 800990c:	f003 0310 	and.w	r3, r3, #16
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <tcp_close_shutdown+0x4e>
 8009914:	4b59      	ldr	r3, [pc, #356]	; (8009a7c <tcp_close_shutdown+0x1a8>)
 8009916:	f240 120f 	movw	r2, #271	; 0x10f
 800991a:	4959      	ldr	r1, [pc, #356]	; (8009a80 <tcp_close_shutdown+0x1ac>)
 800991c:	4859      	ldr	r0, [pc, #356]	; (8009a84 <tcp_close_shutdown+0x1b0>)
 800991e:	f008 fabd 	bl	8011e9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800992a:	687c      	ldr	r4, [r7, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	1d1d      	adds	r5, r3, #4
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	8adb      	ldrh	r3, [r3, #22]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	8b12      	ldrh	r2, [r2, #24]
 8009938:	9201      	str	r2, [sp, #4]
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	462b      	mov	r3, r5
 800993e:	4622      	mov	r2, r4
 8009940:	f004 f862 	bl	800da08 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 ffc5 	bl	800a8d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800994a:	4b4f      	ldr	r3, [pc, #316]	; (8009a88 <tcp_close_shutdown+0x1b4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d105      	bne.n	8009960 <tcp_close_shutdown+0x8c>
 8009954:	4b4c      	ldr	r3, [pc, #304]	; (8009a88 <tcp_close_shutdown+0x1b4>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	4a4b      	ldr	r2, [pc, #300]	; (8009a88 <tcp_close_shutdown+0x1b4>)
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	e013      	b.n	8009988 <tcp_close_shutdown+0xb4>
 8009960:	4b49      	ldr	r3, [pc, #292]	; (8009a88 <tcp_close_shutdown+0x1b4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	e00c      	b.n	8009982 <tcp_close_shutdown+0xae>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d104      	bne.n	800997c <tcp_close_shutdown+0xa8>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	60da      	str	r2, [r3, #12]
 800997a:	e005      	b.n	8009988 <tcp_close_shutdown+0xb4>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1ef      	bne.n	8009968 <tcp_close_shutdown+0x94>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	60da      	str	r2, [r3, #12]
 800998e:	4b3f      	ldr	r3, [pc, #252]	; (8009a8c <tcp_close_shutdown+0x1b8>)
 8009990:	2201      	movs	r2, #1
 8009992:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	7d1b      	ldrb	r3, [r3, #20]
 8009998:	2b04      	cmp	r3, #4
 800999a:	d10c      	bne.n	80099b6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	220a      	movs	r2, #10
 80099a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80099a2:	4b3b      	ldr	r3, [pc, #236]	; (8009a90 <tcp_close_shutdown+0x1bc>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60da      	str	r2, [r3, #12]
 80099aa:	4a39      	ldr	r2, [pc, #228]	; (8009a90 <tcp_close_shutdown+0x1bc>)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	f004 fa7c 	bl	800deac <tcp_timer_needed>
 80099b4:	e00b      	b.n	80099ce <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80099b6:	4b37      	ldr	r3, [pc, #220]	; (8009a94 <tcp_close_shutdown+0x1c0>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d102      	bne.n	80099c6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80099c0:	f003 faec 	bl	800cf9c <tcp_trigger_input_pcb_close>
 80099c4:	e003      	b.n	80099ce <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	2001      	movs	r0, #1
 80099ca:	f7fe ff3f 	bl	800884c <memp_free>
        }
      }
      return ERR_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e050      	b.n	8009a74 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	7d1b      	ldrb	r3, [r3, #20]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d02e      	beq.n	8009a38 <tcp_close_shutdown+0x164>
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d038      	beq.n	8009a50 <tcp_close_shutdown+0x17c>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d142      	bne.n	8009a68 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	8adb      	ldrh	r3, [r3, #22]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d021      	beq.n	8009a2e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80099ea:	4b2b      	ldr	r3, [pc, #172]	; (8009a98 <tcp_close_shutdown+0x1c4>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d105      	bne.n	8009a00 <tcp_close_shutdown+0x12c>
 80099f4:	4b28      	ldr	r3, [pc, #160]	; (8009a98 <tcp_close_shutdown+0x1c4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	4a27      	ldr	r2, [pc, #156]	; (8009a98 <tcp_close_shutdown+0x1c4>)
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	e013      	b.n	8009a28 <tcp_close_shutdown+0x154>
 8009a00:	4b25      	ldr	r3, [pc, #148]	; (8009a98 <tcp_close_shutdown+0x1c4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60bb      	str	r3, [r7, #8]
 8009a06:	e00c      	b.n	8009a22 <tcp_close_shutdown+0x14e>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d104      	bne.n	8009a1c <tcp_close_shutdown+0x148>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	60da      	str	r2, [r3, #12]
 8009a1a:	e005      	b.n	8009a28 <tcp_close_shutdown+0x154>
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1ef      	bne.n	8009a08 <tcp_close_shutdown+0x134>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	2001      	movs	r0, #1
 8009a32:	f7fe ff0b 	bl	800884c <memp_free>
    break;
 8009a36:	e01c      	b.n	8009a72 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff ff13 	bl	8009864 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4816      	ldr	r0, [pc, #88]	; (8009a9c <tcp_close_shutdown+0x1c8>)
 8009a42:	f000 ff89 	bl	800a958 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	2002      	movs	r0, #2
 8009a4a:	f7fe feff 	bl	800884c <memp_free>
    break;
 8009a4e:	e010      	b.n	8009a72 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	480d      	ldr	r0, [pc, #52]	; (8009a88 <tcp_close_shutdown+0x1b4>)
 8009a54:	f000 ff80 	bl	800a958 <tcp_pcb_remove>
 8009a58:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <tcp_close_shutdown+0x1b8>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	2001      	movs	r0, #1
 8009a62:	f7fe fef3 	bl	800884c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8009a66:	e004      	b.n	8009a72 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f819 	bl	8009aa0 <tcp_close_shutdown_fin>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	e000      	b.n	8009a74 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a7c:	0801356c 	.word	0x0801356c
 8009a80:	080135e8 	.word	0x080135e8
 8009a84:	080135a8 	.word	0x080135a8
 8009a88:	24005024 	.word	0x24005024
 8009a8c:	24005020 	.word	0x24005020
 8009a90:	24005034 	.word	0x24005034
 8009a94:	24005038 	.word	0x24005038
 8009a98:	24005030 	.word	0x24005030
 8009a9c:	2400502c 	.word	0x2400502c

08009aa0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <tcp_close_shutdown_fin+0x1c>
 8009aae:	4b2c      	ldr	r3, [pc, #176]	; (8009b60 <tcp_close_shutdown_fin+0xc0>)
 8009ab0:	f240 124d 	movw	r2, #333	; 0x14d
 8009ab4:	492b      	ldr	r1, [pc, #172]	; (8009b64 <tcp_close_shutdown_fin+0xc4>)
 8009ab6:	482c      	ldr	r0, [pc, #176]	; (8009b68 <tcp_close_shutdown_fin+0xc8>)
 8009ab8:	f008 f9f0 	bl	8011e9c <iprintf>

  switch (pcb->state) {
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	7d1b      	ldrb	r3, [r3, #20]
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d010      	beq.n	8009ae6 <tcp_close_shutdown_fin+0x46>
 8009ac4:	2b07      	cmp	r3, #7
 8009ac6:	d01b      	beq.n	8009b00 <tcp_close_shutdown_fin+0x60>
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d126      	bne.n	8009b1a <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f003 faf1 	bl	800d0b4 <tcp_send_fin>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d11f      	bne.n	8009b1e <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2205      	movs	r2, #5
 8009ae2:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009ae4:	e01b      	b.n	8009b1e <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f003 fae4 	bl	800d0b4 <tcp_send_fin>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d114      	bne.n	8009b22 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2205      	movs	r2, #5
 8009afc:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009afe:	e010      	b.n	8009b22 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f003 fad7 	bl	800d0b4 <tcp_send_fin>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d109      	bne.n	8009b26 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2209      	movs	r2, #9
 8009b16:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009b18:	e005      	b.n	8009b26 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e01c      	b.n	8009b58 <tcp_close_shutdown_fin+0xb8>
    break;
 8009b1e:	bf00      	nop
 8009b20:	e002      	b.n	8009b28 <tcp_close_shutdown_fin+0x88>
    break;
 8009b22:	bf00      	nop
 8009b24:	e000      	b.n	8009b28 <tcp_close_shutdown_fin+0x88>
    break;
 8009b26:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d103      	bne.n	8009b38 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f003 fcdf 	bl	800d4f4 <tcp_output>
 8009b36:	e00d      	b.n	8009b54 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b40:	d108      	bne.n	8009b54 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	7e9b      	ldrb	r3, [r3, #26]
 8009b46:	f043 0308 	orr.w	r3, r3, #8
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e001      	b.n	8009b58 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	0801356c 	.word	0x0801356c
 8009b64:	0801359c 	.word	0x0801359c
 8009b68:	080135a8 	.word	0x080135a8

08009b6c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	7d1b      	ldrb	r3, [r3, #20]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d006      	beq.n	8009b8a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7e9b      	ldrb	r3, [r3, #26]
 8009b80:	f043 0310 	orr.w	r3, r3, #16
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fea1 	bl	80098d4 <tcp_close_shutdown>
 8009b92:	4603      	mov	r3, r0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7d1b      	ldrb	r3, [r3, #20]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d106      	bne.n	8009bbc <tcp_abandon+0x20>
 8009bae:	4b4d      	ldr	r3, [pc, #308]	; (8009ce4 <tcp_abandon+0x148>)
 8009bb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009bb4:	494c      	ldr	r1, [pc, #304]	; (8009ce8 <tcp_abandon+0x14c>)
 8009bb6:	484d      	ldr	r0, [pc, #308]	; (8009cec <tcp_abandon+0x150>)
 8009bb8:	f008 f970 	bl	8011e9c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7d1b      	ldrb	r3, [r3, #20]
 8009bc0:	2b0a      	cmp	r3, #10
 8009bc2:	d108      	bne.n	8009bd6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	484a      	ldr	r0, [pc, #296]	; (8009cf0 <tcp_abandon+0x154>)
 8009bc8:	f000 fec6 	bl	800a958 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	2001      	movs	r0, #1
 8009bd0:	f7fe fe3c 	bl	800884c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8009bd4:	e081      	b.n	8009cda <tcp_abandon+0x13e>
    int send_rst = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf0:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7d1b      	ldrb	r3, [r3, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d126      	bne.n	8009c4e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	8adb      	ldrh	r3, [r3, #22]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d02e      	beq.n	8009c66 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c08:	4b3a      	ldr	r3, [pc, #232]	; (8009cf4 <tcp_abandon+0x158>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d105      	bne.n	8009c1e <tcp_abandon+0x82>
 8009c12:	4b38      	ldr	r3, [pc, #224]	; (8009cf4 <tcp_abandon+0x158>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	4a36      	ldr	r2, [pc, #216]	; (8009cf4 <tcp_abandon+0x158>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	e013      	b.n	8009c46 <tcp_abandon+0xaa>
 8009c1e:	4b35      	ldr	r3, [pc, #212]	; (8009cf4 <tcp_abandon+0x158>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	e00c      	b.n	8009c40 <tcp_abandon+0xa4>
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d104      	bne.n	8009c3a <tcp_abandon+0x9e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	60da      	str	r2, [r3, #12]
 8009c38:	e005      	b.n	8009c46 <tcp_abandon+0xaa>
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	61fb      	str	r3, [r7, #28]
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1ef      	bne.n	8009c26 <tcp_abandon+0x8a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	60da      	str	r2, [r3, #12]
 8009c4c:	e00b      	b.n	8009c66 <tcp_abandon+0xca>
      send_rst = reset;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	8adb      	ldrh	r3, [r3, #22]
 8009c56:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	4827      	ldr	r0, [pc, #156]	; (8009cf8 <tcp_abandon+0x15c>)
 8009c5c:	f000 fe7c 	bl	800a958 <tcp_pcb_remove>
 8009c60:	4b26      	ldr	r3, [pc, #152]	; (8009cfc <tcp_abandon+0x160>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fc85 	bl	800a582 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d004      	beq.n	8009c8a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 fc7c 	bl	800a582 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fc73 	bl	800a582 <tcp_segs_free>
    if (send_rst) {
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00c      	beq.n	8009cbc <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	1d19      	adds	r1, r3, #4
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	8b1b      	ldrh	r3, [r3, #24]
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	6979      	ldr	r1, [r7, #20]
 8009cb6:	69b8      	ldr	r0, [r7, #24]
 8009cb8:	f003 fea6 	bl	800da08 <tcp_rst>
    last_state = pcb->state;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	7d1b      	ldrb	r3, [r3, #20]
 8009cc0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	f7fe fdc1 	bl	800884c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d004      	beq.n	8009cda <tcp_abandon+0x13e>
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f06f 010c 	mvn.w	r1, #12
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	4798      	blx	r3
}
 8009cda:	bf00      	nop
 8009cdc:	3728      	adds	r7, #40	; 0x28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	0801356c 	.word	0x0801356c
 8009ce8:	08013604 	.word	0x08013604
 8009cec:	080135a8 	.word	0x080135a8
 8009cf0:	24005034 	.word	0x24005034
 8009cf4:	24005030 	.word	0x24005030
 8009cf8:	24005024 	.word	0x24005024
 8009cfc:	24005020 	.word	0x24005020

08009d00 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009d08:	2101      	movs	r1, #1
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff ff46 	bl	8009b9c <tcp_abandon>
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009d28:	4413      	add	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009d34:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009d38:	bf28      	it	cs
 8009d3a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	4413      	add	r3, r2
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	db08      	blt.n	8009d5c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	e020      	b.n	8009d9e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd03      	ble.n	8009d72 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d70:	e014      	b.n	8009d9c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d84:	d306      	bcc.n	8009d94 <tcp_update_rcv_ann_wnd+0x7c>
 8009d86:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <tcp_update_rcv_ann_wnd+0x90>)
 8009d88:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009d8c:	4907      	ldr	r1, [pc, #28]	; (8009dac <tcp_update_rcv_ann_wnd+0x94>)
 8009d8e:	4808      	ldr	r0, [pc, #32]	; (8009db0 <tcp_update_rcv_ann_wnd+0x98>)
 8009d90:	f008 f884 	bl	8011e9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009d9c:	2300      	movs	r3, #0
  }
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	0801356c 	.word	0x0801356c
 8009dac:	08013684 	.word	0x08013684
 8009db0:	080135a8 	.word	0x080135a8

08009db4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	7d1b      	ldrb	r3, [r3, #20]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d106      	bne.n	8009dd6 <tcp_recved+0x22>
 8009dc8:	4b23      	ldr	r3, [pc, #140]	; (8009e58 <tcp_recved+0xa4>)
 8009dca:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009dce:	4923      	ldr	r1, [pc, #140]	; (8009e5c <tcp_recved+0xa8>)
 8009dd0:	4823      	ldr	r0, [pc, #140]	; (8009e60 <tcp_recved+0xac>)
 8009dd2:	f008 f863 	bl	8011e9c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009dda:	887b      	ldrh	r3, [r7, #2]
 8009ddc:	4413      	add	r3, r2
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009dec:	d904      	bls.n	8009df8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009df4:	851a      	strh	r2, [r3, #40]	; 0x28
 8009df6:	e017      	b.n	8009e28 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d113      	bne.n	8009e28 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7d1b      	ldrb	r3, [r3, #20]
 8009e04:	2b07      	cmp	r3, #7
 8009e06:	d003      	beq.n	8009e10 <tcp_recved+0x5c>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	7d1b      	ldrb	r3, [r3, #20]
 8009e0c:	2b09      	cmp	r3, #9
 8009e0e:	d104      	bne.n	8009e1a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009e16:	851a      	strh	r2, [r3, #40]	; 0x28
 8009e18:	e006      	b.n	8009e28 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8009e1a:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <tcp_recved+0xa4>)
 8009e1c:	f240 322d 	movw	r2, #813	; 0x32d
 8009e20:	4910      	ldr	r1, [pc, #64]	; (8009e64 <tcp_recved+0xb0>)
 8009e22:	480f      	ldr	r0, [pc, #60]	; (8009e60 <tcp_recved+0xac>)
 8009e24:	f008 f83a 	bl	8011e9c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff ff75 	bl	8009d18 <tcp_update_rcv_ann_wnd>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009e38:	db09      	blt.n	8009e4e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	7e9b      	ldrb	r3, [r3, #26]
 8009e3e:	f043 0302 	orr.w	r3, r3, #2
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f003 fb53 	bl	800d4f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	0801356c 	.word	0x0801356c
 8009e5c:	080136a0 	.word	0x080136a0
 8009e60:	080135a8 	.word	0x080135a8
 8009e64:	080136c8 	.word	0x080136c8

08009e68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009e68:	b5b0      	push	{r4, r5, r7, lr}
 8009e6a:	b08c      	sub	sp, #48	; 0x30
 8009e6c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8009e72:	4b96      	ldr	r3, [pc, #600]	; (800a0cc <tcp_slowtmr+0x264>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3301      	adds	r3, #1
 8009e78:	4a94      	ldr	r2, [pc, #592]	; (800a0cc <tcp_slowtmr+0x264>)
 8009e7a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009e7c:	4b94      	ldr	r3, [pc, #592]	; (800a0d0 <tcp_slowtmr+0x268>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	4b92      	ldr	r3, [pc, #584]	; (800a0d0 <tcp_slowtmr+0x268>)
 8009e86:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8009e8c:	4b91      	ldr	r3, [pc, #580]	; (800a0d4 <tcp_slowtmr+0x26c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009e92:	e227      	b.n	800a2e4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	7d1b      	ldrb	r3, [r3, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d106      	bne.n	8009eaa <tcp_slowtmr+0x42>
 8009e9c:	4b8e      	ldr	r3, [pc, #568]	; (800a0d8 <tcp_slowtmr+0x270>)
 8009e9e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8009ea2:	498e      	ldr	r1, [pc, #568]	; (800a0dc <tcp_slowtmr+0x274>)
 8009ea4:	488e      	ldr	r0, [pc, #568]	; (800a0e0 <tcp_slowtmr+0x278>)
 8009ea6:	f007 fff9 	bl	8011e9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	7d1b      	ldrb	r3, [r3, #20]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d106      	bne.n	8009ec0 <tcp_slowtmr+0x58>
 8009eb2:	4b89      	ldr	r3, [pc, #548]	; (800a0d8 <tcp_slowtmr+0x270>)
 8009eb4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009eb8:	498a      	ldr	r1, [pc, #552]	; (800a0e4 <tcp_slowtmr+0x27c>)
 8009eba:	4889      	ldr	r0, [pc, #548]	; (800a0e0 <tcp_slowtmr+0x278>)
 8009ebc:	f007 ffee 	bl	8011e9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	7d1b      	ldrb	r3, [r3, #20]
 8009ec4:	2b0a      	cmp	r3, #10
 8009ec6:	d106      	bne.n	8009ed6 <tcp_slowtmr+0x6e>
 8009ec8:	4b83      	ldr	r3, [pc, #524]	; (800a0d8 <tcp_slowtmr+0x270>)
 8009eca:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8009ece:	4986      	ldr	r1, [pc, #536]	; (800a0e8 <tcp_slowtmr+0x280>)
 8009ed0:	4883      	ldr	r0, [pc, #524]	; (800a0e0 <tcp_slowtmr+0x278>)
 8009ed2:	f007 ffe3 	bl	8011e9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	7f5a      	ldrb	r2, [r3, #29]
 8009eda:	4b7d      	ldr	r3, [pc, #500]	; (800a0d0 <tcp_slowtmr+0x268>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d103      	bne.n	8009eea <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009ee8:	e1fc      	b.n	800a2e4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009eea:	4b79      	ldr	r3, [pc, #484]	; (800a0d0 <tcp_slowtmr+0x268>)
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	7d1b      	ldrb	r3, [r3, #20]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d108      	bne.n	8009f14 <tcp_slowtmr+0xac>
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	d903      	bls.n	8009f14 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8009f0c:	7ffb      	ldrb	r3, [r7, #31]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	77fb      	strb	r3, [r7, #31]
 8009f12:	e0a2      	b.n	800a05a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f1a:	2b0b      	cmp	r3, #11
 8009f1c:	d903      	bls.n	8009f26 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009f1e:	7ffb      	ldrb	r3, [r7, #31]
 8009f20:	3301      	adds	r3, #1
 8009f22:	77fb      	strb	r3, [r7, #31]
 8009f24:	e099      	b.n	800a05a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d032      	beq.n	8009f96 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009f36:	3b01      	subs	r3, #1
 8009f38:	4a6c      	ldr	r2, [pc, #432]	; (800a0ec <tcp_slowtmr+0x284>)
 8009f3a:	5cd3      	ldrb	r3, [r2, r3]
 8009f3c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009f44:	7cfa      	ldrb	r2, [r7, #19]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d907      	bls.n	8009f5a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009f50:	3301      	adds	r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009f60:	7cfa      	ldrb	r2, [r7, #19]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d879      	bhi.n	800a05a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8009f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f68:	f003 fee0 	bl	800dd2c <tcp_zero_window_probe>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d173      	bne.n	800a05a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009f80:	2b06      	cmp	r3, #6
 8009f82:	d86a      	bhi.n	800a05a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009f94:	e061      	b.n	800a05a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	db08      	blt.n	8009fb2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3301      	adds	r3, #1
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	b21a      	sxth	r2, r3
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d04f      	beq.n	800a05a <tcp_slowtmr+0x1f2>
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	db47      	blt.n	800a05a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	7d1b      	ldrb	r3, [r3, #20]
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d018      	beq.n	800a004 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fd8:	2b0c      	cmp	r3, #12
 8009fda:	bf28      	it	cs
 8009fdc:	230c      	movcs	r3, #12
 8009fde:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009fe6:	10db      	asrs	r3, r3, #3
 8009fe8:	b21b      	sxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ff2:	4413      	add	r3, r2
 8009ff4:	7dfa      	ldrb	r2, [r7, #23]
 8009ff6:	493e      	ldr	r1, [pc, #248]	; (800a0f0 <tcp_slowtmr+0x288>)
 8009ff8:	5c8a      	ldrb	r2, [r1, r2]
 8009ffa:	4093      	lsls	r3, r2
 8009ffc:	b21a      	sxth	r2, r3
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	2200      	movs	r2, #0
 800a008:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a016:	4293      	cmp	r3, r2
 800a018:	bf28      	it	cs
 800a01a:	4613      	movcs	r3, r2
 800a01c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800a01e:	8abb      	ldrh	r3, [r7, #20]
 800a020:	085b      	lsrs	r3, r3, #1
 800a022:	b29a      	uxth	r2, r3
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	b29b      	uxth	r3, r3
 800a038:	429a      	cmp	r2, r3
 800a03a:	d206      	bcs.n	800a04a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	b29a      	uxth	r2, r3
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800a054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a056:	f003 fd4d 	bl	800daf4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	7d1b      	ldrb	r3, [r3, #20]
 800a05e:	2b06      	cmp	r3, #6
 800a060:	d10f      	bne.n	800a082 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	7e9b      	ldrb	r3, [r3, #26]
 800a066:	f003 0310 	and.w	r3, r3, #16
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d009      	beq.n	800a082 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a06e:	4b17      	ldr	r3, [pc, #92]	; (800a0cc <tcp_slowtmr+0x264>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	2b28      	cmp	r3, #40	; 0x28
 800a07a:	d902      	bls.n	800a082 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a07c:	7ffb      	ldrb	r3, [r7, #31]
 800a07e:	3301      	adds	r3, #1
 800a080:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	7a1b      	ldrb	r3, [r3, #8]
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d05d      	beq.n	800a14a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a092:	2b04      	cmp	r3, #4
 800a094:	d003      	beq.n	800a09e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800a09a:	2b07      	cmp	r3, #7
 800a09c:	d155      	bne.n	800a14a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a09e:	4b0b      	ldr	r3, [pc, #44]	; (800a0cc <tcp_slowtmr+0x264>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a0ae:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <tcp_slowtmr+0x28c>)
 800a0b0:	440b      	add	r3, r1
 800a0b2:	4911      	ldr	r1, [pc, #68]	; (800a0f8 <tcp_slowtmr+0x290>)
 800a0b4:	fba1 1303 	umull	r1, r3, r1, r3
 800a0b8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d91e      	bls.n	800a0fc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a0be:	7ffb      	ldrb	r3, [r7, #31]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800a0c4:	7fbb      	ldrb	r3, [r7, #30]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	77bb      	strb	r3, [r7, #30]
 800a0ca:	e03e      	b.n	800a14a <tcp_slowtmr+0x2e2>
 800a0cc:	24005028 	.word	0x24005028
 800a0d0:	2400199e 	.word	0x2400199e
 800a0d4:	24005024 	.word	0x24005024
 800a0d8:	0801356c 	.word	0x0801356c
 800a0dc:	0801371c 	.word	0x0801371c
 800a0e0:	080135a8 	.word	0x080135a8
 800a0e4:	08013748 	.word	0x08013748
 800a0e8:	08013774 	.word	0x08013774
 800a0ec:	080149dc 	.word	0x080149dc
 800a0f0:	080149cc 	.word	0x080149cc
 800a0f4:	000a4cb8 	.word	0x000a4cb8
 800a0f8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a0fc:	4b97      	ldr	r3, [pc, #604]	; (800a35c <tcp_slowtmr+0x4f4>)
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a112:	4618      	mov	r0, r3
 800a114:	4b92      	ldr	r3, [pc, #584]	; (800a360 <tcp_slowtmr+0x4f8>)
 800a116:	fb03 f300 	mul.w	r3, r3, r0
 800a11a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800a11c:	4991      	ldr	r1, [pc, #580]	; (800a364 <tcp_slowtmr+0x4fc>)
 800a11e:	fba1 1303 	umull	r1, r3, r1, r3
 800a122:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a124:	429a      	cmp	r2, r3
 800a126:	d910      	bls.n	800a14a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800a128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a12a:	f003 fdc2 	bl	800dcb2 <tcp_keepalive>
 800a12e:	4603      	mov	r3, r0
 800a130:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800a132:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d107      	bne.n	800a14a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800a140:	3301      	adds	r3, #1
 800a142:	b2da      	uxtb	r2, r3
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d016      	beq.n	800a180 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800a152:	4b82      	ldr	r3, [pc, #520]	; (800a35c <tcp_slowtmr+0x4f4>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	1ad2      	subs	r2, r2, r3
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a162:	4619      	mov	r1, r3
 800a164:	460b      	mov	r3, r1
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	440b      	add	r3, r1
 800a16a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d307      	bcc.n	800a180 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fa04 	bl	800a582 <tcp_segs_free>
      pcb->ooseq = NULL;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	2200      	movs	r2, #0
 800a17e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	7d1b      	ldrb	r3, [r3, #20]
 800a184:	2b03      	cmp	r3, #3
 800a186:	d109      	bne.n	800a19c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a188:	4b74      	ldr	r3, [pc, #464]	; (800a35c <tcp_slowtmr+0x4f4>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b28      	cmp	r3, #40	; 0x28
 800a194:	d902      	bls.n	800a19c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a196:	7ffb      	ldrb	r3, [r7, #31]
 800a198:	3301      	adds	r3, #1
 800a19a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	2b09      	cmp	r3, #9
 800a1a2:	d109      	bne.n	800a1b8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a1a4:	4b6d      	ldr	r3, [pc, #436]	; (800a35c <tcp_slowtmr+0x4f4>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	2bf0      	cmp	r3, #240	; 0xf0
 800a1b0:	d902      	bls.n	800a1b8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800a1b2:	7ffb      	ldrb	r3, [r7, #31]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a1b8:	7ffb      	ldrb	r3, [r7, #31]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d05d      	beq.n	800a27a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1c8:	f000 fb84 	bl	800a8d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d010      	beq.n	800a1f4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a1d2:	4b65      	ldr	r3, [pc, #404]	; (800a368 <tcp_slowtmr+0x500>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d106      	bne.n	800a1ea <tcp_slowtmr+0x382>
 800a1dc:	4b63      	ldr	r3, [pc, #396]	; (800a36c <tcp_slowtmr+0x504>)
 800a1de:	f240 4289 	movw	r2, #1161	; 0x489
 800a1e2:	4963      	ldr	r1, [pc, #396]	; (800a370 <tcp_slowtmr+0x508>)
 800a1e4:	4863      	ldr	r0, [pc, #396]	; (800a374 <tcp_slowtmr+0x50c>)
 800a1e6:	f007 fe59 	bl	8011e9c <iprintf>
        prev->next = pcb->next;
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	60da      	str	r2, [r3, #12]
 800a1f2:	e00f      	b.n	800a214 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a1f4:	4b5c      	ldr	r3, [pc, #368]	; (800a368 <tcp_slowtmr+0x500>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d006      	beq.n	800a20c <tcp_slowtmr+0x3a4>
 800a1fe:	4b5b      	ldr	r3, [pc, #364]	; (800a36c <tcp_slowtmr+0x504>)
 800a200:	f240 428d 	movw	r2, #1165	; 0x48d
 800a204:	495c      	ldr	r1, [pc, #368]	; (800a378 <tcp_slowtmr+0x510>)
 800a206:	485b      	ldr	r0, [pc, #364]	; (800a374 <tcp_slowtmr+0x50c>)
 800a208:	f007 fe48 	bl	8011e9c <iprintf>
        tcp_active_pcbs = pcb->next;
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	4a55      	ldr	r2, [pc, #340]	; (800a368 <tcp_slowtmr+0x500>)
 800a212:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a214:	7fbb      	ldrb	r3, [r7, #30]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d010      	beq.n	800a23c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a222:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	1d1d      	adds	r5, r3, #4
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	8adb      	ldrh	r3, [r3, #22]
 800a22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22e:	8b12      	ldrh	r2, [r2, #24]
 800a230:	9201      	str	r2, [sp, #4]
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462b      	mov	r3, r5
 800a236:	4622      	mov	r2, r4
 800a238:	f003 fbe6 	bl	800da08 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	7d1b      	ldrb	r3, [r3, #20]
 800a246:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	2001      	movs	r0, #1
 800a256:	f7fe faf9 	bl	800884c <memp_free>

      tcp_active_pcbs_changed = 0;
 800a25a:	4b48      	ldr	r3, [pc, #288]	; (800a37c <tcp_slowtmr+0x514>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d004      	beq.n	800a270 <tcp_slowtmr+0x408>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f06f 010c 	mvn.w	r1, #12
 800a26c:	68b8      	ldr	r0, [r7, #8]
 800a26e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a270:	4b42      	ldr	r3, [pc, #264]	; (800a37c <tcp_slowtmr+0x514>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d035      	beq.n	800a2e4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800a278:	e606      	b.n	8009e88 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	7edb      	ldrb	r3, [r3, #27]
 800a288:	3301      	adds	r3, #1
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	7eda      	ldrb	r2, [r3, #27]
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	7f1b      	ldrb	r3, [r3, #28]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d323      	bcc.n	800a2e4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a2a2:	4b36      	ldr	r3, [pc, #216]	; (800a37c <tcp_slowtmr+0x514>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <tcp_slowtmr+0x460>
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b8:	6a3a      	ldr	r2, [r7, #32]
 800a2ba:	6912      	ldr	r2, [r2, #16]
 800a2bc:	6a39      	ldr	r1, [r7, #32]
 800a2be:	4610      	mov	r0, r2
 800a2c0:	4798      	blx	r3
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	777b      	strb	r3, [r7, #29]
 800a2c6:	e001      	b.n	800a2cc <tcp_slowtmr+0x464>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800a2cc:	4b2b      	ldr	r3, [pc, #172]	; (800a37c <tcp_slowtmr+0x514>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d000      	beq.n	800a2d6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800a2d4:	e5d8      	b.n	8009e88 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a2d6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d102      	bne.n	800a2e4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800a2de:	6a38      	ldr	r0, [r7, #32]
 800a2e0:	f003 f908 	bl	800d4f4 <tcp_output>
  while (pcb != NULL) {
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f47f add4 	bne.w	8009e94 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800a2f0:	4b23      	ldr	r3, [pc, #140]	; (800a380 <tcp_slowtmr+0x518>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a2f6:	e068      	b.n	800a3ca <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	7d1b      	ldrb	r3, [r3, #20]
 800a2fc:	2b0a      	cmp	r3, #10
 800a2fe:	d006      	beq.n	800a30e <tcp_slowtmr+0x4a6>
 800a300:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <tcp_slowtmr+0x504>)
 800a302:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a306:	491f      	ldr	r1, [pc, #124]	; (800a384 <tcp_slowtmr+0x51c>)
 800a308:	481a      	ldr	r0, [pc, #104]	; (800a374 <tcp_slowtmr+0x50c>)
 800a30a:	f007 fdc7 	bl	8011e9c <iprintf>
    pcb_remove = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a312:	4b12      	ldr	r3, [pc, #72]	; (800a35c <tcp_slowtmr+0x4f4>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2bf0      	cmp	r3, #240	; 0xf0
 800a31e:	d902      	bls.n	800a326 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800a320:	7ffb      	ldrb	r3, [r7, #31]
 800a322:	3301      	adds	r3, #1
 800a324:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a326:	7ffb      	ldrb	r3, [r7, #31]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d049      	beq.n	800a3c0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a32e:	f000 fad1 	bl	800a8d4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d029      	beq.n	800a38c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a338:	4b11      	ldr	r3, [pc, #68]	; (800a380 <tcp_slowtmr+0x518>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33e:	429a      	cmp	r2, r3
 800a340:	d106      	bne.n	800a350 <tcp_slowtmr+0x4e8>
 800a342:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <tcp_slowtmr+0x504>)
 800a344:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a348:	490f      	ldr	r1, [pc, #60]	; (800a388 <tcp_slowtmr+0x520>)
 800a34a:	480a      	ldr	r0, [pc, #40]	; (800a374 <tcp_slowtmr+0x50c>)
 800a34c:	f007 fda6 	bl	8011e9c <iprintf>
        prev->next = pcb->next;
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	60da      	str	r2, [r3, #12]
 800a358:	e028      	b.n	800a3ac <tcp_slowtmr+0x544>
 800a35a:	bf00      	nop
 800a35c:	24005028 	.word	0x24005028
 800a360:	000124f8 	.word	0x000124f8
 800a364:	10624dd3 	.word	0x10624dd3
 800a368:	24005024 	.word	0x24005024
 800a36c:	0801356c 	.word	0x0801356c
 800a370:	080137a4 	.word	0x080137a4
 800a374:	080135a8 	.word	0x080135a8
 800a378:	080137d0 	.word	0x080137d0
 800a37c:	24005020 	.word	0x24005020
 800a380:	24005034 	.word	0x24005034
 800a384:	080137fc 	.word	0x080137fc
 800a388:	0801382c 	.word	0x0801382c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a38c:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <tcp_slowtmr+0x570>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a392:	429a      	cmp	r2, r3
 800a394:	d006      	beq.n	800a3a4 <tcp_slowtmr+0x53c>
 800a396:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <tcp_slowtmr+0x574>)
 800a398:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800a39c:	4910      	ldr	r1, [pc, #64]	; (800a3e0 <tcp_slowtmr+0x578>)
 800a39e:	4811      	ldr	r0, [pc, #68]	; (800a3e4 <tcp_slowtmr+0x57c>)
 800a3a0:	f007 fd7c 	bl	8011e9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	4a0b      	ldr	r2, [pc, #44]	; (800a3d8 <tcp_slowtmr+0x570>)
 800a3aa:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a3b6:	69b9      	ldr	r1, [r7, #24]
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	f7fe fa47 	bl	800884c <memp_free>
 800a3be:	e004      	b.n	800a3ca <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d193      	bne.n	800a2f8 <tcp_slowtmr+0x490>
    }
  }
}
 800a3d0:	bf00      	nop
 800a3d2:	3728      	adds	r7, #40	; 0x28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bdb0      	pop	{r4, r5, r7, pc}
 800a3d8:	24005034 	.word	0x24005034
 800a3dc:	0801356c 	.word	0x0801356c
 800a3e0:	08013854 	.word	0x08013854
 800a3e4:	080135a8 	.word	0x080135a8

0800a3e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a3ee:	4b2d      	ldr	r3, [pc, #180]	; (800a4a4 <tcp_fasttmr+0xbc>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	4b2b      	ldr	r3, [pc, #172]	; (800a4a4 <tcp_fasttmr+0xbc>)
 800a3f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a3fa:	4b2b      	ldr	r3, [pc, #172]	; (800a4a8 <tcp_fasttmr+0xc0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a400:	e048      	b.n	800a494 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	7f5a      	ldrb	r2, [r3, #29]
 800a406:	4b27      	ldr	r3, [pc, #156]	; (800a4a4 <tcp_fasttmr+0xbc>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d03f      	beq.n	800a48e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a40e:	4b25      	ldr	r3, [pc, #148]	; (800a4a4 <tcp_fasttmr+0xbc>)
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	7e9b      	ldrb	r3, [r3, #26]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d010      	beq.n	800a444 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	7e9b      	ldrb	r3, [r3, #26]
 800a426:	f043 0302 	orr.w	r3, r3, #2
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f003 f85f 	bl	800d4f4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	7e9b      	ldrb	r3, [r3, #26]
 800a43a:	f023 0303 	bic.w	r3, r3, #3
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	7e9b      	ldrb	r3, [r3, #26]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d009      	beq.n	800a464 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7e9b      	ldrb	r3, [r3, #26]
 800a454:	f023 0308 	bic.w	r3, r3, #8
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff fb1e 	bl	8009aa0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a472:	4b0e      	ldr	r3, [pc, #56]	; (800a4ac <tcp_fasttmr+0xc4>)
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f819 	bl	800a4b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <tcp_fasttmr+0xc4>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d000      	beq.n	800a488 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a486:	e7b8      	b.n	800a3fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	607b      	str	r3, [r7, #4]
 800a48c:	e002      	b.n	800a494 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1b3      	bne.n	800a402 <tcp_fasttmr+0x1a>
    }
  }
}
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2400199e 	.word	0x2400199e
 800a4a8:	24005024 	.word	0x24005024
 800a4ac:	24005020 	.word	0x24005020

0800a4b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a4b0:	b590      	push	{r4, r7, lr}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4bc:	7b5b      	ldrb	r3, [r3, #13]
 800a4be:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4c4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00b      	beq.n	800a4ee <tcp_process_refused_data+0x3e>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6918      	ldr	r0, [r3, #16]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	47a0      	blx	r4
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
 800a4ec:	e007      	b.n	800a4fe <tcp_process_refused_data+0x4e>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	f000 f88c 	bl	800a612 <tcp_recv_null>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d12a      	bne.n	800a55c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d033      	beq.n	800a578 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a514:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a518:	d005      	beq.n	800a526 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a51e:	3301      	adds	r3, #1
 800a520:	b29a      	uxth	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00b      	beq.n	800a548 <tcp_process_refused_data+0x98>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6918      	ldr	r0, [r3, #16]
 800a53a:	2300      	movs	r3, #0
 800a53c:	2200      	movs	r2, #0
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	47a0      	blx	r4
 800a542:	4603      	mov	r3, r0
 800a544:	73fb      	strb	r3, [r7, #15]
 800a546:	e001      	b.n	800a54c <tcp_process_refused_data+0x9c>
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a54c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a550:	f113 0f0d 	cmn.w	r3, #13
 800a554:	d110      	bne.n	800a578 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800a556:	f06f 030c 	mvn.w	r3, #12
 800a55a:	e00e      	b.n	800a57a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800a55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a560:	f113 0f0d 	cmn.w	r3, #13
 800a564:	d102      	bne.n	800a56c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a566:	f06f 030c 	mvn.w	r3, #12
 800a56a:	e006      	b.n	800a57a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800a572:	f06f 0304 	mvn.w	r3, #4
 800a576:	e000      	b.n	800a57a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd90      	pop	{r4, r7, pc}

0800a582 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a58a:	e007      	b.n	800a59c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f809 	bl	800a5aa <tcp_seg_free>
    seg = next;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1f4      	bne.n	800a58c <tcp_segs_free+0xa>
  }
}
 800a5a2:	bf00      	nop
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00c      	beq.n	800a5d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe fea9 	bl	800931c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	2003      	movs	r0, #3
 800a5ce:	f7fe f93d 	bl	800884c <memp_free>
  }
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a5e2:	2003      	movs	r0, #3
 800a5e4:	f7fe f8c2 	bl	800876c <memp_malloc>
 800a5e8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <tcp_seg_copy+0x1a>
    return NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e00a      	b.n	800a60a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a5f4:	2210      	movs	r2, #16
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f007 fc3c 	bl	8011e76 <memcpy>
  pbuf_ref(cseg->p);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe ff36 	bl	8009474 <pbuf_ref>
  return cseg;
 800a608:	68fb      	ldr	r3, [r7, #12]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	891b      	ldrh	r3, [r3, #8]
 800a62a:	4619      	mov	r1, r3
 800a62c:	68b8      	ldr	r0, [r7, #8]
 800a62e:	f7ff fbc1 	bl	8009db4 <tcp_recved>
    pbuf_free(p);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7fe fe72 	bl	800931c <pbuf_free>
 800a638:	e008      	b.n	800a64c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800a63a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800a642:	68b8      	ldr	r0, [r7, #8]
 800a644:	f7ff fa92 	bl	8009b6c <tcp_close>
 800a648:	4603      	mov	r3, r0
 800a64a:	e000      	b.n	800a64e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a666:	2b00      	cmp	r3, #0
 800a668:	db01      	blt.n	800a66e <tcp_kill_prio+0x16>
 800a66a:	79fb      	ldrb	r3, [r7, #7]
 800a66c:	e000      	b.n	800a670 <tcp_kill_prio+0x18>
 800a66e:	237f      	movs	r3, #127	; 0x7f
 800a670:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a676:	2300      	movs	r3, #0
 800a678:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a67a:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <tcp_kill_prio+0x7c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	e01a      	b.n	800a6b8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	7d5b      	ldrb	r3, [r3, #21]
 800a686:	7afa      	ldrb	r2, [r7, #11]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d312      	bcc.n	800a6b2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a68c:	4b12      	ldr	r3, [pc, #72]	; (800a6d8 <tcp_kill_prio+0x80>)
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d80a      	bhi.n	800a6b2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800a69c:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <tcp_kill_prio+0x80>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	7d5b      	ldrb	r3, [r3, #21]
 800a6b0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e1      	bne.n	800a682 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d002      	beq.n	800a6ca <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a6c4:	6938      	ldr	r0, [r7, #16]
 800a6c6:	f7ff fb1b 	bl	8009d00 <tcp_abort>
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	24005024 	.word	0x24005024
 800a6d8:	24005028 	.word	0x24005028

0800a6dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	2b08      	cmp	r3, #8
 800a6ea:	d009      	beq.n	800a700 <tcp_kill_state+0x24>
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b09      	cmp	r3, #9
 800a6f0:	d006      	beq.n	800a700 <tcp_kill_state+0x24>
 800a6f2:	4b1a      	ldr	r3, [pc, #104]	; (800a75c <tcp_kill_state+0x80>)
 800a6f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a6f8:	4919      	ldr	r1, [pc, #100]	; (800a760 <tcp_kill_state+0x84>)
 800a6fa:	481a      	ldr	r0, [pc, #104]	; (800a764 <tcp_kill_state+0x88>)
 800a6fc:	f007 fbce 	bl	8011e9c <iprintf>

  inactivity = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a704:	2300      	movs	r3, #0
 800a706:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a708:	4b17      	ldr	r3, [pc, #92]	; (800a768 <tcp_kill_state+0x8c>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	e017      	b.n	800a740 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	7d1b      	ldrb	r3, [r3, #20]
 800a714:	79fa      	ldrb	r2, [r7, #7]
 800a716:	429a      	cmp	r2, r3
 800a718:	d10f      	bne.n	800a73a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a71a:	4b14      	ldr	r3, [pc, #80]	; (800a76c <tcp_kill_state+0x90>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	429a      	cmp	r2, r3
 800a728:	d807      	bhi.n	800a73a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a72a:	4b10      	ldr	r3, [pc, #64]	; (800a76c <tcp_kill_state+0x90>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e4      	bne.n	800a710 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a74c:	2100      	movs	r1, #0
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f7ff fa24 	bl	8009b9c <tcp_abandon>
  }
}
 800a754:	bf00      	nop
 800a756:	3718      	adds	r7, #24
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	0801356c 	.word	0x0801356c
 800a760:	0801387c 	.word	0x0801387c
 800a764:	080135a8 	.word	0x080135a8
 800a768:	24005024 	.word	0x24005024
 800a76c:	24005028 	.word	0x24005028

0800a770 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a77e:	4b12      	ldr	r3, [pc, #72]	; (800a7c8 <tcp_kill_timewait+0x58>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e012      	b.n	800a7ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <tcp_kill_timewait+0x5c>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d807      	bhi.n	800a7a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a796:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <tcp_kill_timewait+0x5c>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e9      	bne.n	800a786 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a7b8:	68b8      	ldr	r0, [r7, #8]
 800a7ba:	f7ff faa1 	bl	8009d00 <tcp_abort>
  }
}
 800a7be:	bf00      	nop
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	24005034 	.word	0x24005034
 800a7cc:	24005028 	.word	0x24005028

0800a7d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7da:	2001      	movs	r0, #1
 800a7dc:	f7fd ffc6 	bl	800876c <memp_malloc>
 800a7e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d124      	bne.n	800a832 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a7e8:	f7ff ffc2 	bl	800a770 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	f7fd ffbd 	bl	800876c <memp_malloc>
 800a7f2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d11b      	bne.n	800a832 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a7fa:	2009      	movs	r0, #9
 800a7fc:	f7ff ff6e 	bl	800a6dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a800:	2001      	movs	r0, #1
 800a802:	f7fd ffb3 	bl	800876c <memp_malloc>
 800a806:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d111      	bne.n	800a832 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a80e:	2008      	movs	r0, #8
 800a810:	f7ff ff64 	bl	800a6dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a814:	2001      	movs	r0, #1
 800a816:	f7fd ffa9 	bl	800876c <memp_malloc>
 800a81a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d107      	bne.n	800a832 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff ff17 	bl	800a658 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a82a:	2001      	movs	r0, #1
 800a82c:	f7fd ff9e 	bl	800876c <memp_malloc>
 800a830:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d03f      	beq.n	800a8b8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a838:	2298      	movs	r2, #152	; 0x98
 800a83a:	2100      	movs	r1, #0
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f007 fb25 	bl	8011e8c <memset>
    pcb->prio = prio;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	79fa      	ldrb	r2, [r7, #7]
 800a846:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a84e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	22ff      	movs	r2, #255	; 0xff
 800a866:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a86e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2206      	movs	r2, #6
 800a874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2206      	movs	r2, #6
 800a87c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a884:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a88e:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <tcp_alloc+0xf4>)
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a896:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <tcp_alloc+0xf8>)
 800a898:	781a      	ldrb	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a8a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4a08      	ldr	r2, [pc, #32]	; (800a8cc <tcp_alloc+0xfc>)
 800a8ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a07      	ldr	r2, [pc, #28]	; (800a8d0 <tcp_alloc+0x100>)
 800a8b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	24005028 	.word	0x24005028
 800a8c8:	2400199e 	.word	0x2400199e
 800a8cc:	0800a613 	.word	0x0800a613
 800a8d0:	006ddd00 	.word	0x006ddd00

0800a8d4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	7d1b      	ldrb	r3, [r3, #20]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d034      	beq.n	800a94e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a8e8:	2b0a      	cmp	r3, #10
 800a8ea:	d030      	beq.n	800a94e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d02c      	beq.n	800a94e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d007      	beq.n	800a90c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a900:	4618      	mov	r0, r3
 800a902:	f7fe fd0b 	bl	800931c <pbuf_free>
      pcb->refused_data = NULL;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fe36 	bl	800a582 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a922:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fe2a 	bl	800a582 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff fe25 	bl	800a582 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	669a      	str	r2, [r3, #104]	; 0x68
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
	...

0800a958 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d105      	bne.n	800a978 <tcp_pcb_remove+0x20>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68da      	ldr	r2, [r3, #12]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	e013      	b.n	800a9a0 <tcp_pcb_remove+0x48>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	e00c      	b.n	800a99a <tcp_pcb_remove+0x42>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d104      	bne.n	800a994 <tcp_pcb_remove+0x3c>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	60da      	str	r2, [r3, #12]
 800a992:	e005      	b.n	800a9a0 <tcp_pcb_remove+0x48>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1ef      	bne.n	800a980 <tcp_pcb_remove+0x28>
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a9a6:	6838      	ldr	r0, [r7, #0]
 800a9a8:	f7ff ff94 	bl	800a8d4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	7d1b      	ldrb	r3, [r3, #20]
 800a9b0:	2b0a      	cmp	r3, #10
 800a9b2:	d013      	beq.n	800a9dc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d00f      	beq.n	800a9dc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	7e9b      	ldrb	r3, [r3, #26]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	7e9b      	ldrb	r3, [r3, #26]
 800a9cc:	f043 0302 	orr.w	r3, r3, #2
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a9d6:	6838      	ldr	r0, [r7, #0]
 800a9d8:	f002 fd8c 	bl	800d4f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	7d1b      	ldrb	r3, [r3, #20]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d020      	beq.n	800aa26 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d006      	beq.n	800a9fa <tcp_pcb_remove+0xa2>
 800a9ec:	4b13      	ldr	r3, [pc, #76]	; (800aa3c <tcp_pcb_remove+0xe4>)
 800a9ee:	f240 7253 	movw	r2, #1875	; 0x753
 800a9f2:	4913      	ldr	r1, [pc, #76]	; (800aa40 <tcp_pcb_remove+0xe8>)
 800a9f4:	4813      	ldr	r0, [pc, #76]	; (800aa44 <tcp_pcb_remove+0xec>)
 800a9f6:	f007 fa51 	bl	8011e9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d006      	beq.n	800aa10 <tcp_pcb_remove+0xb8>
 800aa02:	4b0e      	ldr	r3, [pc, #56]	; (800aa3c <tcp_pcb_remove+0xe4>)
 800aa04:	f240 7254 	movw	r2, #1876	; 0x754
 800aa08:	490f      	ldr	r1, [pc, #60]	; (800aa48 <tcp_pcb_remove+0xf0>)
 800aa0a:	480e      	ldr	r0, [pc, #56]	; (800aa44 <tcp_pcb_remove+0xec>)
 800aa0c:	f007 fa46 	bl	8011e9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d006      	beq.n	800aa26 <tcp_pcb_remove+0xce>
 800aa18:	4b08      	ldr	r3, [pc, #32]	; (800aa3c <tcp_pcb_remove+0xe4>)
 800aa1a:	f240 7256 	movw	r2, #1878	; 0x756
 800aa1e:	490b      	ldr	r1, [pc, #44]	; (800aa4c <tcp_pcb_remove+0xf4>)
 800aa20:	4808      	ldr	r0, [pc, #32]	; (800aa44 <tcp_pcb_remove+0xec>)
 800aa22:	f007 fa3b 	bl	8011e9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0801356c 	.word	0x0801356c
 800aa40:	08013924 	.word	0x08013924
 800aa44:	080135a8 	.word	0x080135a8
 800aa48:	0801393c 	.word	0x0801393c
 800aa4c:	08013958 	.word	0x08013958

0800aa50 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800aa58:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <tcp_next_iss+0x28>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <tcp_next_iss+0x2c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4413      	add	r3, r2
 800aa62:	4a05      	ldr	r2, [pc, #20]	; (800aa78 <tcp_next_iss+0x28>)
 800aa64:	6013      	str	r3, [r2, #0]
  return iss;
 800aa66:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <tcp_next_iss+0x28>)
 800aa68:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	24000008 	.word	0x24000008
 800aa7c:	24005028 	.word	0x24005028

0800aa80 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800aa8c:	6838      	ldr	r0, [r7, #0]
 800aa8e:	f004 fe87 	bl	800f7a0 <ip4_route>
 800aa92:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	e010      	b.n	800aac0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800aaa2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aaa4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d008      	beq.n	800aabe <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800aaac:	897b      	ldrh	r3, [r7, #10]
 800aaae:	3b28      	subs	r3, #40	; 0x28
 800aab0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800aab2:	893a      	ldrh	r2, [r7, #8]
 800aab4:	88fb      	ldrh	r3, [r7, #6]
 800aab6:	4293      	cmp	r3, r2
 800aab8:	bf28      	it	cs
 800aaba:	4613      	movcs	r3, r2
 800aabc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800aabe:	88fb      	ldrh	r3, [r7, #6]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aad6:	e011      	b.n	800aafc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d108      	bne.n	800aaf6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f7ff f908 	bl	8009d00 <tcp_abort>
      pcb = next;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e002      	b.n	800aafc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1ea      	bne.n	800aad8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d02c      	beq.n	800ab76 <tcp_netif_ip_addr_changed+0x6a>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d028      	beq.n	800ab76 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ab24:	4b16      	ldr	r3, [pc, #88]	; (800ab80 <tcp_netif_ip_addr_changed+0x74>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff ffcc 	bl	800aac8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ab30:	4b14      	ldr	r3, [pc, #80]	; (800ab84 <tcp_netif_ip_addr_changed+0x78>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff ffc6 	bl	800aac8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d019      	beq.n	800ab76 <tcp_netif_ip_addr_changed+0x6a>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d015      	beq.n	800ab76 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800ab4a:	4b0f      	ldr	r3, [pc, #60]	; (800ab88 <tcp_netif_ip_addr_changed+0x7c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	e00e      	b.n	800ab70 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d103      	bne.n	800ab6c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1ed      	bne.n	800ab52 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ab76:	bf00      	nop
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	24005024 	.word	0x24005024
 800ab84:	24005030 	.word	0x24005030
 800ab88:	2400502c 	.word	0x2400502c

0800ab8c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b08b      	sub	sp, #44	; 0x2c
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	4a82      	ldr	r2, [pc, #520]	; (800ada4 <tcp_input+0x218>)
 800ab9c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	895b      	ldrh	r3, [r3, #10]
 800aba2:	2b13      	cmp	r3, #19
 800aba4:	f240 838a 	bls.w	800b2bc <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aba8:	4b7f      	ldr	r3, [pc, #508]	; (800ada8 <tcp_input+0x21c>)
 800abaa:	695a      	ldr	r2, [r3, #20]
 800abac:	4b7e      	ldr	r3, [pc, #504]	; (800ada8 <tcp_input+0x21c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4619      	mov	r1, r3
 800abb2:	4610      	mov	r0, r2
 800abb4:	f005 f86e 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f040 8380 	bne.w	800b2c0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800abc0:	4b79      	ldr	r3, [pc, #484]	; (800ada8 <tcp_input+0x21c>)
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800abc8:	2be0      	cmp	r3, #224	; 0xe0
 800abca:	f000 8379 	beq.w	800b2c0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800abce:	4b75      	ldr	r3, [pc, #468]	; (800ada4 <tcp_input+0x218>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	899b      	ldrh	r3, [r3, #12]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fd f9f8 	bl	8007fcc <lwip_htons>
 800abdc:	4603      	mov	r3, r0
 800abde:	0b1b      	lsrs	r3, r3, #12
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800abe8:	7cbb      	ldrb	r3, [r7, #18]
 800abea:	2b13      	cmp	r3, #19
 800abec:	f240 8368 	bls.w	800b2c0 <tcp_input+0x734>
 800abf0:	7cbb      	ldrb	r3, [r7, #18]
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	891b      	ldrh	r3, [r3, #8]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	f200 8361 	bhi.w	800b2c0 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800abfe:	7cbb      	ldrb	r3, [r7, #18]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	3b14      	subs	r3, #20
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	4b69      	ldr	r3, [pc, #420]	; (800adac <tcp_input+0x220>)
 800ac08:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ac0a:	4b69      	ldr	r3, [pc, #420]	; (800adb0 <tcp_input+0x224>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	895a      	ldrh	r2, [r3, #10]
 800ac14:	7cbb      	ldrb	r3, [r7, #18]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d30d      	bcc.n	800ac38 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ac1c:	4b63      	ldr	r3, [pc, #396]	; (800adac <tcp_input+0x220>)
 800ac1e:	881a      	ldrh	r2, [r3, #0]
 800ac20:	4b64      	ldr	r3, [pc, #400]	; (800adb4 <tcp_input+0x228>)
 800ac22:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800ac24:	7cbb      	ldrb	r3, [r7, #18]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	425b      	negs	r3, r3
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	b21b      	sxth	r3, r3
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7fe fb4f 	bl	80092d4 <pbuf_header>
 800ac36:	e055      	b.n	800ace4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d105      	bne.n	800ac4c <tcp_input+0xc0>
 800ac40:	4b5d      	ldr	r3, [pc, #372]	; (800adb8 <tcp_input+0x22c>)
 800ac42:	22b2      	movs	r2, #178	; 0xb2
 800ac44:	495d      	ldr	r1, [pc, #372]	; (800adbc <tcp_input+0x230>)
 800ac46:	485e      	ldr	r0, [pc, #376]	; (800adc0 <tcp_input+0x234>)
 800ac48:	f007 f928 	bl	8011e9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800ac4c:	f06f 0113 	mvn.w	r1, #19
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7fe fb3f 	bl	80092d4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	895a      	ldrh	r2, [r3, #10]
 800ac5a:	4b56      	ldr	r3, [pc, #344]	; (800adb4 <tcp_input+0x228>)
 800ac5c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800ac5e:	4b53      	ldr	r3, [pc, #332]	; (800adac <tcp_input+0x220>)
 800ac60:	881a      	ldrh	r2, [r3, #0]
 800ac62:	4b54      	ldr	r3, [pc, #336]	; (800adb4 <tcp_input+0x228>)
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800ac6a:	4b52      	ldr	r3, [pc, #328]	; (800adb4 <tcp_input+0x228>)
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	425b      	negs	r3, r3
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	b21b      	sxth	r3, r3
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7fe fb2c 	bl	80092d4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	895b      	ldrh	r3, [r3, #10]
 800ac82:	8a3a      	ldrh	r2, [r7, #16]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	f200 831d 	bhi.w	800b2c4 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	4a47      	ldr	r2, [pc, #284]	; (800adb0 <tcp_input+0x224>)
 800ac92:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	8a3b      	ldrh	r3, [r7, #16]
 800ac9a:	425b      	negs	r3, r3
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	b21b      	sxth	r3, r3
 800aca0:	4619      	mov	r1, r3
 800aca2:	4610      	mov	r0, r2
 800aca4:	f7fe fb16 	bl	80092d4 <pbuf_header>
    p->tot_len -= opt2len;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	891a      	ldrh	r2, [r3, #8]
 800acac:	8a3b      	ldrh	r3, [r7, #16]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	895b      	ldrh	r3, [r3, #10]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d005      	beq.n	800acca <tcp_input+0x13e>
 800acbe:	4b3e      	ldr	r3, [pc, #248]	; (800adb8 <tcp_input+0x22c>)
 800acc0:	22cf      	movs	r2, #207	; 0xcf
 800acc2:	4940      	ldr	r1, [pc, #256]	; (800adc4 <tcp_input+0x238>)
 800acc4:	483e      	ldr	r0, [pc, #248]	; (800adc0 <tcp_input+0x234>)
 800acc6:	f007 f8e9 	bl	8011e9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	891a      	ldrh	r2, [r3, #8]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	891b      	ldrh	r3, [r3, #8]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d005      	beq.n	800ace4 <tcp_input+0x158>
 800acd8:	4b37      	ldr	r3, [pc, #220]	; (800adb8 <tcp_input+0x22c>)
 800acda:	22d0      	movs	r2, #208	; 0xd0
 800acdc:	493a      	ldr	r1, [pc, #232]	; (800adc8 <tcp_input+0x23c>)
 800acde:	4838      	ldr	r0, [pc, #224]	; (800adc0 <tcp_input+0x234>)
 800ace0:	f007 f8dc 	bl	8011e9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ace4:	4b2f      	ldr	r3, [pc, #188]	; (800ada4 <tcp_input+0x218>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	b29a      	uxth	r2, r3
 800acec:	4b2d      	ldr	r3, [pc, #180]	; (800ada4 <tcp_input+0x218>)
 800acee:	681c      	ldr	r4, [r3, #0]
 800acf0:	4610      	mov	r0, r2
 800acf2:	f7fd f96b 	bl	8007fcc <lwip_htons>
 800acf6:	4603      	mov	r3, r0
 800acf8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800acfa:	4b2a      	ldr	r3, [pc, #168]	; (800ada4 <tcp_input+0x218>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	885b      	ldrh	r3, [r3, #2]
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	4b28      	ldr	r3, [pc, #160]	; (800ada4 <tcp_input+0x218>)
 800ad04:	681c      	ldr	r4, [r3, #0]
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fd f960 	bl	8007fcc <lwip_htons>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ad10:	4b24      	ldr	r3, [pc, #144]	; (800ada4 <tcp_input+0x218>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	4b23      	ldr	r3, [pc, #140]	; (800ada4 <tcp_input+0x218>)
 800ad18:	681c      	ldr	r4, [r3, #0]
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fd f964 	bl	8007fe8 <lwip_htonl>
 800ad20:	4603      	mov	r3, r0
 800ad22:	6063      	str	r3, [r4, #4]
 800ad24:	6863      	ldr	r3, [r4, #4]
 800ad26:	4a29      	ldr	r2, [pc, #164]	; (800adcc <tcp_input+0x240>)
 800ad28:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ad2a:	4b1e      	ldr	r3, [pc, #120]	; (800ada4 <tcp_input+0x218>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	4b1c      	ldr	r3, [pc, #112]	; (800ada4 <tcp_input+0x218>)
 800ad32:	681c      	ldr	r4, [r3, #0]
 800ad34:	4610      	mov	r0, r2
 800ad36:	f7fd f957 	bl	8007fe8 <lwip_htonl>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	68a3      	ldr	r3, [r4, #8]
 800ad40:	4a23      	ldr	r2, [pc, #140]	; (800add0 <tcp_input+0x244>)
 800ad42:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ad44:	4b17      	ldr	r3, [pc, #92]	; (800ada4 <tcp_input+0x218>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	89db      	ldrh	r3, [r3, #14]
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	4b15      	ldr	r3, [pc, #84]	; (800ada4 <tcp_input+0x218>)
 800ad4e:	681c      	ldr	r4, [r3, #0]
 800ad50:	4610      	mov	r0, r2
 800ad52:	f7fd f93b 	bl	8007fcc <lwip_htons>
 800ad56:	4603      	mov	r3, r0
 800ad58:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ad5a:	4b12      	ldr	r3, [pc, #72]	; (800ada4 <tcp_input+0x218>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	899b      	ldrh	r3, [r3, #12]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fd f932 	bl	8007fcc <lwip_htons>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	4b18      	ldr	r3, [pc, #96]	; (800add4 <tcp_input+0x248>)
 800ad74:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	891a      	ldrh	r2, [r3, #8]
 800ad7a:	4b16      	ldr	r3, [pc, #88]	; (800add4 <tcp_input+0x248>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bf14      	ite	ne
 800ad86:	2301      	movne	r3, #1
 800ad88:	2300      	moveq	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	4413      	add	r3, r2
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	4b11      	ldr	r3, [pc, #68]	; (800add8 <tcp_input+0x24c>)
 800ad94:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad9a:	4b10      	ldr	r3, [pc, #64]	; (800addc <tcp_input+0x250>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	61fb      	str	r3, [r7, #28]
 800ada0:	e082      	b.n	800aea8 <tcp_input+0x31c>
 800ada2:	bf00      	nop
 800ada4:	240019b0 	.word	0x240019b0
 800ada8:	24001af4 	.word	0x24001af4
 800adac:	240019b4 	.word	0x240019b4
 800adb0:	240019b8 	.word	0x240019b8
 800adb4:	240019b6 	.word	0x240019b6
 800adb8:	08013970 	.word	0x08013970
 800adbc:	080139a4 	.word	0x080139a4
 800adc0:	080139b4 	.word	0x080139b4
 800adc4:	080139dc 	.word	0x080139dc
 800adc8:	080139e8 	.word	0x080139e8
 800adcc:	240019c0 	.word	0x240019c0
 800add0:	240019c4 	.word	0x240019c4
 800add4:	240019cc 	.word	0x240019cc
 800add8:	240019ca 	.word	0x240019ca
 800addc:	24005024 	.word	0x24005024
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	7d1b      	ldrb	r3, [r3, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d105      	bne.n	800adf4 <tcp_input+0x268>
 800ade8:	4b8f      	ldr	r3, [pc, #572]	; (800b028 <tcp_input+0x49c>)
 800adea:	22e2      	movs	r2, #226	; 0xe2
 800adec:	498f      	ldr	r1, [pc, #572]	; (800b02c <tcp_input+0x4a0>)
 800adee:	4890      	ldr	r0, [pc, #576]	; (800b030 <tcp_input+0x4a4>)
 800adf0:	f007 f854 	bl	8011e9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	2b0a      	cmp	r3, #10
 800adfa:	d105      	bne.n	800ae08 <tcp_input+0x27c>
 800adfc:	4b8a      	ldr	r3, [pc, #552]	; (800b028 <tcp_input+0x49c>)
 800adfe:	22e3      	movs	r2, #227	; 0xe3
 800ae00:	498c      	ldr	r1, [pc, #560]	; (800b034 <tcp_input+0x4a8>)
 800ae02:	488b      	ldr	r0, [pc, #556]	; (800b030 <tcp_input+0x4a4>)
 800ae04:	f007 f84a 	bl	8011e9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	7d1b      	ldrb	r3, [r3, #20]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d105      	bne.n	800ae1c <tcp_input+0x290>
 800ae10:	4b85      	ldr	r3, [pc, #532]	; (800b028 <tcp_input+0x49c>)
 800ae12:	22e4      	movs	r2, #228	; 0xe4
 800ae14:	4988      	ldr	r1, [pc, #544]	; (800b038 <tcp_input+0x4ac>)
 800ae16:	4886      	ldr	r0, [pc, #536]	; (800b030 <tcp_input+0x4a4>)
 800ae18:	f007 f840 	bl	8011e9c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	8b1a      	ldrh	r2, [r3, #24]
 800ae20:	4b86      	ldr	r3, [pc, #536]	; (800b03c <tcp_input+0x4b0>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d138      	bne.n	800ae9e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	8ada      	ldrh	r2, [r3, #22]
 800ae30:	4b82      	ldr	r3, [pc, #520]	; (800b03c <tcp_input+0x4b0>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	885b      	ldrh	r3, [r3, #2]
 800ae36:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d130      	bne.n	800ae9e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	4b7f      	ldr	r3, [pc, #508]	; (800b040 <tcp_input+0x4b4>)
 800ae42:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d12a      	bne.n	800ae9e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	4b7c      	ldr	r3, [pc, #496]	; (800b040 <tcp_input+0x4b4>)
 800ae4e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d124      	bne.n	800ae9e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	69fa      	ldr	r2, [r7, #28]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d105      	bne.n	800ae6a <tcp_input+0x2de>
 800ae5e:	4b72      	ldr	r3, [pc, #456]	; (800b028 <tcp_input+0x49c>)
 800ae60:	22ec      	movs	r2, #236	; 0xec
 800ae62:	4978      	ldr	r1, [pc, #480]	; (800b044 <tcp_input+0x4b8>)
 800ae64:	4872      	ldr	r0, [pc, #456]	; (800b030 <tcp_input+0x4a4>)
 800ae66:	f007 f819 	bl	8011e9c <iprintf>
      if (prev != NULL) {
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	68da      	ldr	r2, [r3, #12]
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ae78:	4b73      	ldr	r3, [pc, #460]	; (800b048 <tcp_input+0x4bc>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ae80:	4a71      	ldr	r2, [pc, #452]	; (800b048 <tcp_input+0x4bc>)
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	69fa      	ldr	r2, [r7, #28]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d10f      	bne.n	800aeb0 <tcp_input+0x324>
 800ae90:	4b65      	ldr	r3, [pc, #404]	; (800b028 <tcp_input+0x49c>)
 800ae92:	22f4      	movs	r2, #244	; 0xf4
 800ae94:	496d      	ldr	r1, [pc, #436]	; (800b04c <tcp_input+0x4c0>)
 800ae96:	4866      	ldr	r0, [pc, #408]	; (800b030 <tcp_input+0x4a4>)
 800ae98:	f007 f800 	bl	8011e9c <iprintf>
      break;
 800ae9c:	e008      	b.n	800aeb0 <tcp_input+0x324>
    }
    prev = pcb;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	61fb      	str	r3, [r7, #28]
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d198      	bne.n	800ade0 <tcp_input+0x254>
 800aeae:	e000      	b.n	800aeb2 <tcp_input+0x326>
      break;
 800aeb0:	bf00      	nop
  }

  if (pcb == NULL) {
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d173      	bne.n	800afa0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aeb8:	4b65      	ldr	r3, [pc, #404]	; (800b050 <tcp_input+0x4c4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	e02f      	b.n	800af20 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	7d1b      	ldrb	r3, [r3, #20]
 800aec4:	2b0a      	cmp	r3, #10
 800aec6:	d005      	beq.n	800aed4 <tcp_input+0x348>
 800aec8:	4b57      	ldr	r3, [pc, #348]	; (800b028 <tcp_input+0x49c>)
 800aeca:	22fe      	movs	r2, #254	; 0xfe
 800aecc:	4961      	ldr	r1, [pc, #388]	; (800b054 <tcp_input+0x4c8>)
 800aece:	4858      	ldr	r0, [pc, #352]	; (800b030 <tcp_input+0x4a4>)
 800aed0:	f006 ffe4 	bl	8011e9c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	8b1a      	ldrh	r2, [r3, #24]
 800aed8:	4b58      	ldr	r3, [pc, #352]	; (800b03c <tcp_input+0x4b0>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	b29b      	uxth	r3, r3
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d11a      	bne.n	800af1a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	8ada      	ldrh	r2, [r3, #22]
 800aee8:	4b54      	ldr	r3, [pc, #336]	; (800b03c <tcp_input+0x4b0>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	885b      	ldrh	r3, [r3, #2]
 800aeee:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d112      	bne.n	800af1a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	4b51      	ldr	r3, [pc, #324]	; (800b040 <tcp_input+0x4b4>)
 800aefa:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d10c      	bne.n	800af1a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	4b4e      	ldr	r3, [pc, #312]	; (800b040 <tcp_input+0x4b4>)
 800af06:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af08:	429a      	cmp	r2, r3
 800af0a:	d106      	bne.n	800af1a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800af0c:	69f8      	ldr	r0, [r7, #28]
 800af0e:	f000 fb15 	bl	800b53c <tcp_timewait_input>
        pbuf_free(p);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7fe fa02 	bl	800931c <pbuf_free>
        return;
 800af18:	e1da      	b.n	800b2d0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	61fb      	str	r3, [r7, #28]
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1cc      	bne.n	800aec0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af2a:	4b4b      	ldr	r3, [pc, #300]	; (800b058 <tcp_input+0x4cc>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	e019      	b.n	800af66 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	8ada      	ldrh	r2, [r3, #22]
 800af36:	4b41      	ldr	r3, [pc, #260]	; (800b03c <tcp_input+0x4b0>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	885b      	ldrh	r3, [r3, #2]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	429a      	cmp	r2, r3
 800af40:	d10c      	bne.n	800af5c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	4b3e      	ldr	r3, [pc, #248]	; (800b040 <tcp_input+0x4b4>)
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d00f      	beq.n	800af6e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00d      	beq.n	800af70 <tcp_input+0x3e4>
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d009      	beq.n	800af70 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	617b      	str	r3, [r7, #20]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1e2      	bne.n	800af32 <tcp_input+0x3a6>
 800af6c:	e000      	b.n	800af70 <tcp_input+0x3e4>
            break;
 800af6e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d014      	beq.n	800afa0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00a      	beq.n	800af92 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800af84:	4b34      	ldr	r3, [pc, #208]	; (800b058 <tcp_input+0x4cc>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800af8c:	4a32      	ldr	r2, [pc, #200]	; (800b058 <tcp_input+0x4cc>)
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800af92:	6978      	ldr	r0, [r7, #20]
 800af94:	f000 f9f0 	bl	800b378 <tcp_listen_input>
      pbuf_free(p);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fe f9bf 	bl	800931c <pbuf_free>
      return;
 800af9e:	e197      	b.n	800b2d0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 8164 	beq.w	800b270 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800afa8:	4b2c      	ldr	r3, [pc, #176]	; (800b05c <tcp_input+0x4d0>)
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	891a      	ldrh	r2, [r3, #8]
 800afb2:	4b2a      	ldr	r3, [pc, #168]	; (800b05c <tcp_input+0x4d0>)
 800afb4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800afb6:	4a29      	ldr	r2, [pc, #164]	; (800b05c <tcp_input+0x4d0>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800afbc:	4b1f      	ldr	r3, [pc, #124]	; (800b03c <tcp_input+0x4b0>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a26      	ldr	r2, [pc, #152]	; (800b05c <tcp_input+0x4d0>)
 800afc2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800afc4:	4b26      	ldr	r3, [pc, #152]	; (800b060 <tcp_input+0x4d4>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800afca:	4b26      	ldr	r3, [pc, #152]	; (800b064 <tcp_input+0x4d8>)
 800afcc:	2200      	movs	r2, #0
 800afce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800afd0:	4b25      	ldr	r3, [pc, #148]	; (800b068 <tcp_input+0x4dc>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800afd6:	4b25      	ldr	r3, [pc, #148]	; (800b06c <tcp_input+0x4e0>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d006      	beq.n	800aff0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	7b5b      	ldrb	r3, [r3, #13]
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	b2da      	uxtb	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d03d      	beq.n	800b074 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aff8:	69f8      	ldr	r0, [r7, #28]
 800affa:	f7ff fa59 	bl	800a4b0 <tcp_process_refused_data>
 800affe:	4603      	mov	r3, r0
 800b000:	f113 0f0d 	cmn.w	r3, #13
 800b004:	d007      	beq.n	800b016 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d032      	beq.n	800b074 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b00e:	4b18      	ldr	r3, [pc, #96]	; (800b070 <tcp_input+0x4e4>)
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d02e      	beq.n	800b074 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f040 8108 	bne.w	800b230 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b020:	69f8      	ldr	r0, [r7, #28]
 800b022:	f002 fa0b 	bl	800d43c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b026:	e103      	b.n	800b230 <tcp_input+0x6a4>
 800b028:	08013970 	.word	0x08013970
 800b02c:	08013a08 	.word	0x08013a08
 800b030:	080139b4 	.word	0x080139b4
 800b034:	08013a30 	.word	0x08013a30
 800b038:	08013a5c 	.word	0x08013a5c
 800b03c:	240019b0 	.word	0x240019b0
 800b040:	24001af4 	.word	0x24001af4
 800b044:	08013a84 	.word	0x08013a84
 800b048:	24005024 	.word	0x24005024
 800b04c:	08013ab0 	.word	0x08013ab0
 800b050:	24005034 	.word	0x24005034
 800b054:	08013adc 	.word	0x08013adc
 800b058:	2400502c 	.word	0x2400502c
 800b05c:	240019a0 	.word	0x240019a0
 800b060:	240019d0 	.word	0x240019d0
 800b064:	240019cd 	.word	0x240019cd
 800b068:	240019c8 	.word	0x240019c8
 800b06c:	240019cc 	.word	0x240019cc
 800b070:	240019ca 	.word	0x240019ca
      }
    }
    tcp_input_pcb = pcb;
 800b074:	4a98      	ldr	r2, [pc, #608]	; (800b2d8 <tcp_input+0x74c>)
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b07a:	69f8      	ldr	r0, [r7, #28]
 800b07c:	f000 fac6 	bl	800b60c <tcp_process>
 800b080:	4603      	mov	r3, r0
 800b082:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b088:	f113 0f0d 	cmn.w	r3, #13
 800b08c:	f000 80d2 	beq.w	800b234 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800b090:	4b92      	ldr	r3, [pc, #584]	; (800b2dc <tcp_input+0x750>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 0308 	and.w	r3, r3, #8
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d016      	beq.n	800b0ca <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d008      	beq.n	800b0b8 <tcp_input+0x52c>
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	6912      	ldr	r2, [r2, #16]
 800b0b0:	f06f 010d 	mvn.w	r1, #13
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b0b8:	69f9      	ldr	r1, [r7, #28]
 800b0ba:	4889      	ldr	r0, [pc, #548]	; (800b2e0 <tcp_input+0x754>)
 800b0bc:	f7ff fc4c 	bl	800a958 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800b0c0:	69f9      	ldr	r1, [r7, #28]
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	f7fd fbc2 	bl	800884c <memp_free>
 800b0c8:	e0bf      	b.n	800b24a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b0ce:	4b85      	ldr	r3, [pc, #532]	; (800b2e4 <tcp_input+0x758>)
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d01b      	beq.n	800b10e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b0d6:	4b83      	ldr	r3, [pc, #524]	; (800b2e4 <tcp_input+0x758>)
 800b0d8:	881b      	ldrh	r3, [r3, #0]
 800b0da:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d009      	beq.n	800b0f8 <tcp_input+0x56c>
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0e8:	69fa      	ldr	r2, [r7, #28]
 800b0ea:	6910      	ldr	r0, [r2, #16]
 800b0ec:	89fa      	ldrh	r2, [r7, #14]
 800b0ee:	69f9      	ldr	r1, [r7, #28]
 800b0f0:	4798      	blx	r3
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	74fb      	strb	r3, [r7, #19]
 800b0f6:	e001      	b.n	800b0fc <tcp_input+0x570>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b0fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b100:	f113 0f0d 	cmn.w	r3, #13
 800b104:	f000 8098 	beq.w	800b238 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b108:	4b76      	ldr	r3, [pc, #472]	; (800b2e4 <tcp_input+0x758>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b10e:	69f8      	ldr	r0, [r7, #28]
 800b110:	f000 f900 	bl	800b314 <tcp_input_delayed_close>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	f040 8090 	bne.w	800b23c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b11c:	4b72      	ldr	r3, [pc, #456]	; (800b2e8 <tcp_input+0x75c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d041      	beq.n	800b1a8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d006      	beq.n	800b13a <tcp_input+0x5ae>
 800b12c:	4b6f      	ldr	r3, [pc, #444]	; (800b2ec <tcp_input+0x760>)
 800b12e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b132:	496f      	ldr	r1, [pc, #444]	; (800b2f0 <tcp_input+0x764>)
 800b134:	486f      	ldr	r0, [pc, #444]	; (800b2f4 <tcp_input+0x768>)
 800b136:	f006 feb1 	bl	8011e9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	7e9b      	ldrb	r3, [r3, #26]
 800b13e:	f003 0310 	and.w	r3, r3, #16
 800b142:	2b00      	cmp	r3, #0
 800b144:	d008      	beq.n	800b158 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b146:	4b68      	ldr	r3, [pc, #416]	; (800b2e8 <tcp_input+0x75c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe f8e6 	bl	800931c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b150:	69f8      	ldr	r0, [r7, #28]
 800b152:	f7fe fdd5 	bl	8009d00 <tcp_abort>
            goto aborted;
 800b156:	e078      	b.n	800b24a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00c      	beq.n	800b17c <tcp_input+0x5f0>
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	6918      	ldr	r0, [r3, #16]
 800b16c:	4b5e      	ldr	r3, [pc, #376]	; (800b2e8 <tcp_input+0x75c>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	2300      	movs	r3, #0
 800b172:	69f9      	ldr	r1, [r7, #28]
 800b174:	47a0      	blx	r4
 800b176:	4603      	mov	r3, r0
 800b178:	74fb      	strb	r3, [r7, #19]
 800b17a:	e008      	b.n	800b18e <tcp_input+0x602>
 800b17c:	4b5a      	ldr	r3, [pc, #360]	; (800b2e8 <tcp_input+0x75c>)
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	2300      	movs	r3, #0
 800b182:	69f9      	ldr	r1, [r7, #28]
 800b184:	2000      	movs	r0, #0
 800b186:	f7ff fa44 	bl	800a612 <tcp_recv_null>
 800b18a:	4603      	mov	r3, r0
 800b18c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b18e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b192:	f113 0f0d 	cmn.w	r3, #13
 800b196:	d053      	beq.n	800b240 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b1a0:	4b51      	ldr	r3, [pc, #324]	; (800b2e8 <tcp_input+0x75c>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b1a8:	4b4c      	ldr	r3, [pc, #304]	; (800b2dc <tcp_input+0x750>)
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	f003 0320 	and.w	r3, r3, #32
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d030      	beq.n	800b216 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c0:	7b5a      	ldrb	r2, [r3, #13]
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c6:	f042 0220 	orr.w	r2, r2, #32
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	735a      	strb	r2, [r3, #13]
 800b1ce:	e022      	b.n	800b216 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b1d8:	d005      	beq.n	800b1e6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1de:	3301      	adds	r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <tcp_input+0x67c>
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	6918      	ldr	r0, [r3, #16]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	69f9      	ldr	r1, [r7, #28]
 800b200:	47a0      	blx	r4
 800b202:	4603      	mov	r3, r0
 800b204:	74fb      	strb	r3, [r7, #19]
 800b206:	e001      	b.n	800b20c <tcp_input+0x680>
 800b208:	2300      	movs	r3, #0
 800b20a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b20c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b210:	f113 0f0d 	cmn.w	r3, #13
 800b214:	d016      	beq.n	800b244 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b216:	4b30      	ldr	r3, [pc, #192]	; (800b2d8 <tcp_input+0x74c>)
 800b218:	2200      	movs	r2, #0
 800b21a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b21c:	69f8      	ldr	r0, [r7, #28]
 800b21e:	f000 f879 	bl	800b314 <tcp_input_delayed_close>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10f      	bne.n	800b248 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b228:	69f8      	ldr	r0, [r7, #28]
 800b22a:	f002 f963 	bl	800d4f4 <tcp_output>
 800b22e:	e00c      	b.n	800b24a <tcp_input+0x6be>
        goto aborted;
 800b230:	bf00      	nop
 800b232:	e00a      	b.n	800b24a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b234:	bf00      	nop
 800b236:	e008      	b.n	800b24a <tcp_input+0x6be>
              goto aborted;
 800b238:	bf00      	nop
 800b23a:	e006      	b.n	800b24a <tcp_input+0x6be>
          goto aborted;
 800b23c:	bf00      	nop
 800b23e:	e004      	b.n	800b24a <tcp_input+0x6be>
            goto aborted;
 800b240:	bf00      	nop
 800b242:	e002      	b.n	800b24a <tcp_input+0x6be>
              goto aborted;
 800b244:	bf00      	nop
 800b246:	e000      	b.n	800b24a <tcp_input+0x6be>
          goto aborted;
 800b248:	bf00      	nop
    tcp_input_pcb = NULL;
 800b24a:	4b23      	ldr	r3, [pc, #140]	; (800b2d8 <tcp_input+0x74c>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b250:	4b25      	ldr	r3, [pc, #148]	; (800b2e8 <tcp_input+0x75c>)
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800b256:	4b28      	ldr	r3, [pc, #160]	; (800b2f8 <tcp_input+0x76c>)
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d037      	beq.n	800b2ce <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800b25e:	4b26      	ldr	r3, [pc, #152]	; (800b2f8 <tcp_input+0x76c>)
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe f85a 	bl	800931c <pbuf_free>
      inseg.p = NULL;
 800b268:	4b23      	ldr	r3, [pc, #140]	; (800b2f8 <tcp_input+0x76c>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b26e:	e02e      	b.n	800b2ce <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b270:	4b22      	ldr	r3, [pc, #136]	; (800b2fc <tcp_input+0x770>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	899b      	ldrh	r3, [r3, #12]
 800b276:	b29b      	uxth	r3, r3
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fc fea7 	bl	8007fcc <lwip_htons>
 800b27e:	4603      	mov	r3, r0
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	2b00      	cmp	r3, #0
 800b286:	d115      	bne.n	800b2b4 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b288:	4b1d      	ldr	r3, [pc, #116]	; (800b300 <tcp_input+0x774>)
 800b28a:	6818      	ldr	r0, [r3, #0]
 800b28c:	4b1d      	ldr	r3, [pc, #116]	; (800b304 <tcp_input+0x778>)
 800b28e:	881b      	ldrh	r3, [r3, #0]
 800b290:	461a      	mov	r2, r3
 800b292:	4b1d      	ldr	r3, [pc, #116]	; (800b308 <tcp_input+0x77c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b298:	4b18      	ldr	r3, [pc, #96]	; (800b2fc <tcp_input+0x770>)
 800b29a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b29c:	885b      	ldrh	r3, [r3, #2]
 800b29e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2a0:	4a16      	ldr	r2, [pc, #88]	; (800b2fc <tcp_input+0x770>)
 800b2a2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2a4:	8812      	ldrh	r2, [r2, #0]
 800b2a6:	b292      	uxth	r2, r2
 800b2a8:	9201      	str	r2, [sp, #4]
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	4b17      	ldr	r3, [pc, #92]	; (800b30c <tcp_input+0x780>)
 800b2ae:	4a18      	ldr	r2, [pc, #96]	; (800b310 <tcp_input+0x784>)
 800b2b0:	f002 fbaa 	bl	800da08 <tcp_rst>
    pbuf_free(p);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7fe f831 	bl	800931c <pbuf_free>
  return;
 800b2ba:	e008      	b.n	800b2ce <tcp_input+0x742>
    goto dropped;
 800b2bc:	bf00      	nop
 800b2be:	e002      	b.n	800b2c6 <tcp_input+0x73a>
dropped:
 800b2c0:	bf00      	nop
 800b2c2:	e000      	b.n	800b2c6 <tcp_input+0x73a>
      goto dropped;
 800b2c4:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7fe f828 	bl	800931c <pbuf_free>
 800b2cc:	e000      	b.n	800b2d0 <tcp_input+0x744>
  return;
 800b2ce:	bf00      	nop
}
 800b2d0:	3724      	adds	r7, #36	; 0x24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd90      	pop	{r4, r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	24005038 	.word	0x24005038
 800b2dc:	240019cd 	.word	0x240019cd
 800b2e0:	24005024 	.word	0x24005024
 800b2e4:	240019c8 	.word	0x240019c8
 800b2e8:	240019d0 	.word	0x240019d0
 800b2ec:	08013970 	.word	0x08013970
 800b2f0:	08013b0c 	.word	0x08013b0c
 800b2f4:	080139b4 	.word	0x080139b4
 800b2f8:	240019a0 	.word	0x240019a0
 800b2fc:	240019b0 	.word	0x240019b0
 800b300:	240019c4 	.word	0x240019c4
 800b304:	240019ca 	.word	0x240019ca
 800b308:	240019c0 	.word	0x240019c0
 800b30c:	24001b04 	.word	0x24001b04
 800b310:	24001b08 	.word	0x24001b08

0800b314 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800b31c:	4b14      	ldr	r3, [pc, #80]	; (800b370 <tcp_input_delayed_close+0x5c>)
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01d      	beq.n	800b364 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7e9b      	ldrb	r3, [r3, #26]
 800b32c:	f003 0310 	and.w	r3, r3, #16
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10d      	bne.n	800b350 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d008      	beq.n	800b350 <tcp_input_delayed_close+0x3c>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	6912      	ldr	r2, [r2, #16]
 800b348:	f06f 010e 	mvn.w	r1, #14
 800b34c:	4610      	mov	r0, r2
 800b34e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4808      	ldr	r0, [pc, #32]	; (800b374 <tcp_input_delayed_close+0x60>)
 800b354:	f7ff fb00 	bl	800a958 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	2001      	movs	r0, #1
 800b35c:	f7fd fa76 	bl	800884c <memp_free>
    return 1;
 800b360:	2301      	movs	r3, #1
 800b362:	e000      	b.n	800b366 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	240019cd 	.word	0x240019cd
 800b374:	24005024 	.word	0x24005024

0800b378 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af02      	add	r7, sp, #8
 800b37e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b380:	4b64      	ldr	r3, [pc, #400]	; (800b514 <tcp_listen_input+0x19c>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f040 80bc 	bne.w	800b506 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b38e:	4b61      	ldr	r3, [pc, #388]	; (800b514 <tcp_listen_input+0x19c>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	f003 0310 	and.w	r3, r3, #16
 800b396:	2b00      	cmp	r3, #0
 800b398:	d016      	beq.n	800b3c8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b39a:	4b5f      	ldr	r3, [pc, #380]	; (800b518 <tcp_listen_input+0x1a0>)
 800b39c:	6818      	ldr	r0, [r3, #0]
 800b39e:	4b5f      	ldr	r3, [pc, #380]	; (800b51c <tcp_listen_input+0x1a4>)
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	4b5e      	ldr	r3, [pc, #376]	; (800b520 <tcp_listen_input+0x1a8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3aa:	4b5e      	ldr	r3, [pc, #376]	; (800b524 <tcp_listen_input+0x1ac>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3ae:	885b      	ldrh	r3, [r3, #2]
 800b3b0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3b2:	4a5c      	ldr	r2, [pc, #368]	; (800b524 <tcp_listen_input+0x1ac>)
 800b3b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3b6:	8812      	ldrh	r2, [r2, #0]
 800b3b8:	b292      	uxth	r2, r2
 800b3ba:	9201      	str	r2, [sp, #4]
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	4b5a      	ldr	r3, [pc, #360]	; (800b528 <tcp_listen_input+0x1b0>)
 800b3c0:	4a5a      	ldr	r2, [pc, #360]	; (800b52c <tcp_listen_input+0x1b4>)
 800b3c2:	f002 fb21 	bl	800da08 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b3c6:	e0a0      	b.n	800b50a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800b3c8:	4b52      	ldr	r3, [pc, #328]	; (800b514 <tcp_listen_input+0x19c>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 0302 	and.w	r3, r3, #2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 809a 	beq.w	800b50a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	7d5b      	ldrb	r3, [r3, #21]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff f9f8 	bl	800a7d0 <tcp_alloc>
 800b3e0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d111      	bne.n	800b40c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00a      	beq.n	800b406 <tcp_listen_input+0x8e>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6910      	ldr	r0, [r2, #16]
 800b3f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	4798      	blx	r3
 800b400:	4603      	mov	r3, r0
 800b402:	73bb      	strb	r3, [r7, #14]
      return;
 800b404:	e082      	b.n	800b50c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b406:	23f0      	movs	r3, #240	; 0xf0
 800b408:	73bb      	strb	r3, [r7, #14]
      return;
 800b40a:	e07f      	b.n	800b50c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b40c:	4b48      	ldr	r3, [pc, #288]	; (800b530 <tcp_listen_input+0x1b8>)
 800b40e:	695a      	ldr	r2, [r3, #20]
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b414:	4b46      	ldr	r3, [pc, #280]	; (800b530 <tcp_listen_input+0x1b8>)
 800b416:	691a      	ldr	r2, [r3, #16]
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8ada      	ldrh	r2, [r3, #22]
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b424:	4b3f      	ldr	r3, [pc, #252]	; (800b524 <tcp_listen_input+0x1ac>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2203      	movs	r2, #3
 800b434:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b436:	4b3a      	ldr	r3, [pc, #232]	; (800b520 <tcp_listen_input+0x1a8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b448:	6978      	ldr	r0, [r7, #20]
 800b44a:	f7ff fb01 	bl	800aa50 <tcp_next_iss>
 800b44e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b468:	4b2d      	ldr	r3, [pc, #180]	; (800b520 <tcp_listen_input+0x1a8>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	1e5a      	subs	r2, r3, #1
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7a1b      	ldrb	r3, [r3, #8]
 800b484:	f003 030c 	and.w	r3, r3, #12
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b48e:	4b29      	ldr	r3, [pc, #164]	; (800b534 <tcp_listen_input+0x1bc>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	60da      	str	r2, [r3, #12]
 800b496:	4a27      	ldr	r2, [pc, #156]	; (800b534 <tcp_listen_input+0x1bc>)
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	f002 fd06 	bl	800deac <tcp_timer_needed>
 800b4a0:	4b25      	ldr	r3, [pc, #148]	; (800b538 <tcp_listen_input+0x1c0>)
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b4a6:	6978      	ldr	r0, [r7, #20]
 800b4a8:	f001 fd14 	bl	800ced4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b4ac:	4b1d      	ldr	r3, [pc, #116]	; (800b524 <tcp_listen_input+0x1ac>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	89db      	ldrh	r3, [r3, #14]
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	f7ff fad5 	bl	800aa80 <tcp_eff_send_mss_impl>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	461a      	mov	r2, r3
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b4de:	2112      	movs	r1, #18
 800b4e0:	6978      	ldr	r0, [r7, #20]
 800b4e2:	f001 feaf 	bl	800d244 <tcp_enqueue_flags>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d004      	beq.n	800b4fc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	6978      	ldr	r0, [r7, #20]
 800b4f6:	f7fe fb51 	bl	8009b9c <tcp_abandon>
      return;
 800b4fa:	e007      	b.n	800b50c <tcp_listen_input+0x194>
    tcp_output(npcb);
 800b4fc:	6978      	ldr	r0, [r7, #20]
 800b4fe:	f001 fff9 	bl	800d4f4 <tcp_output>
  return;
 800b502:	bf00      	nop
 800b504:	e001      	b.n	800b50a <tcp_listen_input+0x192>
    return;
 800b506:	bf00      	nop
 800b508:	e000      	b.n	800b50c <tcp_listen_input+0x194>
  return;
 800b50a:	bf00      	nop
}
 800b50c:	3718      	adds	r7, #24
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	240019cc 	.word	0x240019cc
 800b518:	240019c4 	.word	0x240019c4
 800b51c:	240019ca 	.word	0x240019ca
 800b520:	240019c0 	.word	0x240019c0
 800b524:	240019b0 	.word	0x240019b0
 800b528:	24001b04 	.word	0x24001b04
 800b52c:	24001b08 	.word	0x24001b08
 800b530:	24001af4 	.word	0x24001af4
 800b534:	24005024 	.word	0x24005024
 800b538:	24005020 	.word	0x24005020

0800b53c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af02      	add	r7, sp, #8
 800b542:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b544:	4b29      	ldr	r3, [pc, #164]	; (800b5ec <tcp_timewait_input+0xb0>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d147      	bne.n	800b5e0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b550:	4b26      	ldr	r3, [pc, #152]	; (800b5ec <tcp_timewait_input+0xb0>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	f003 0302 	and.w	r3, r3, #2
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d027      	beq.n	800b5ac <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b55c:	4b24      	ldr	r3, [pc, #144]	; (800b5f0 <tcp_timewait_input+0xb4>)
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	db2a      	blt.n	800b5c0 <tcp_timewait_input+0x84>
 800b56a:	4b21      	ldr	r3, [pc, #132]	; (800b5f0 <tcp_timewait_input+0xb4>)
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b576:	440b      	add	r3, r1
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	dc20      	bgt.n	800b5c0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b57e:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <tcp_timewait_input+0xb8>)
 800b580:	6818      	ldr	r0, [r3, #0]
 800b582:	4b1d      	ldr	r3, [pc, #116]	; (800b5f8 <tcp_timewait_input+0xbc>)
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	461a      	mov	r2, r3
 800b588:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <tcp_timewait_input+0xb4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b58e:	4b1b      	ldr	r3, [pc, #108]	; (800b5fc <tcp_timewait_input+0xc0>)
 800b590:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b592:	885b      	ldrh	r3, [r3, #2]
 800b594:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b596:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <tcp_timewait_input+0xc0>)
 800b598:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b59a:	8812      	ldrh	r2, [r2, #0]
 800b59c:	b292      	uxth	r2, r2
 800b59e:	9201      	str	r2, [sp, #4]
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4b17      	ldr	r3, [pc, #92]	; (800b600 <tcp_timewait_input+0xc4>)
 800b5a4:	4a17      	ldr	r2, [pc, #92]	; (800b604 <tcp_timewait_input+0xc8>)
 800b5a6:	f002 fa2f 	bl	800da08 <tcp_rst>
      return;
 800b5aa:	e01c      	b.n	800b5e6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <tcp_timewait_input+0xb0>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b5b8:	4b13      	ldr	r3, [pc, #76]	; (800b608 <tcp_timewait_input+0xcc>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <tcp_timewait_input+0xbc>)
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00d      	beq.n	800b5e4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	7e9b      	ldrb	r3, [r3, #26]
 800b5cc:	f043 0302 	orr.w	r3, r3, #2
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 ff8c 	bl	800d4f4 <tcp_output>
  }
  return;
 800b5dc:	bf00      	nop
 800b5de:	e001      	b.n	800b5e4 <tcp_timewait_input+0xa8>
    return;
 800b5e0:	bf00      	nop
 800b5e2:	e000      	b.n	800b5e6 <tcp_timewait_input+0xaa>
  return;
 800b5e4:	bf00      	nop
}
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	240019cc 	.word	0x240019cc
 800b5f0:	240019c0 	.word	0x240019c0
 800b5f4:	240019c4 	.word	0x240019c4
 800b5f8:	240019ca 	.word	0x240019ca
 800b5fc:	240019b0 	.word	0x240019b0
 800b600:	24001b04 	.word	0x24001b04
 800b604:	24001b08 	.word	0x24001b08
 800b608:	24005028 	.word	0x24005028

0800b60c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08a      	sub	sp, #40	; 0x28
 800b610:	af02      	add	r7, sp, #8
 800b612:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b614:	2300      	movs	r3, #0
 800b616:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b61c:	4ba4      	ldr	r3, [pc, #656]	; (800b8b0 <tcp_process+0x2a4>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	f003 0304 	and.w	r3, r3, #4
 800b624:	2b00      	cmp	r3, #0
 800b626:	d04e      	beq.n	800b6c6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	7d1b      	ldrb	r3, [r3, #20]
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d108      	bne.n	800b642 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b634:	4b9f      	ldr	r3, [pc, #636]	; (800b8b4 <tcp_process+0x2a8>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d123      	bne.n	800b684 <tcp_process+0x78>
        acceptable = 1;
 800b63c:	2301      	movs	r3, #1
 800b63e:	76fb      	strb	r3, [r7, #27]
 800b640:	e020      	b.n	800b684 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b646:	4b9c      	ldr	r3, [pc, #624]	; (800b8b8 <tcp_process+0x2ac>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d102      	bne.n	800b654 <tcp_process+0x48>
        acceptable = 1;
 800b64e:	2301      	movs	r3, #1
 800b650:	76fb      	strb	r3, [r7, #27]
 800b652:	e017      	b.n	800b684 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b654:	4b98      	ldr	r3, [pc, #608]	; (800b8b8 <tcp_process+0x2ac>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	db10      	blt.n	800b684 <tcp_process+0x78>
 800b662:	4b95      	ldr	r3, [pc, #596]	; (800b8b8 <tcp_process+0x2ac>)
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	6879      	ldr	r1, [r7, #4]
 800b66c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b66e:	440b      	add	r3, r1
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc06      	bgt.n	800b684 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	7e9b      	ldrb	r3, [r3, #26]
 800b67a:	f043 0302 	orr.w	r3, r3, #2
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b684:	7efb      	ldrb	r3, [r7, #27]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d01b      	beq.n	800b6c2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7d1b      	ldrb	r3, [r3, #20]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d106      	bne.n	800b6a0 <tcp_process+0x94>
 800b692:	4b8a      	ldr	r3, [pc, #552]	; (800b8bc <tcp_process+0x2b0>)
 800b694:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b698:	4989      	ldr	r1, [pc, #548]	; (800b8c0 <tcp_process+0x2b4>)
 800b69a:	488a      	ldr	r0, [pc, #552]	; (800b8c4 <tcp_process+0x2b8>)
 800b69c:	f006 fbfe 	bl	8011e9c <iprintf>
      recv_flags |= TF_RESET;
 800b6a0:	4b89      	ldr	r3, [pc, #548]	; (800b8c8 <tcp_process+0x2bc>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f043 0308 	orr.w	r3, r3, #8
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	4b87      	ldr	r3, [pc, #540]	; (800b8c8 <tcp_process+0x2bc>)
 800b6ac:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	7e9b      	ldrb	r3, [r3, #26]
 800b6b2:	f023 0301 	bic.w	r3, r3, #1
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800b6bc:	f06f 030d 	mvn.w	r3, #13
 800b6c0:	e34d      	b.n	800bd5e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e34b      	b.n	800bd5e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b6c6:	4b7a      	ldr	r3, [pc, #488]	; (800b8b0 <tcp_process+0x2a4>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	f003 0302 	and.w	r3, r3, #2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d010      	beq.n	800b6f4 <tcp_process+0xe8>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	7d1b      	ldrb	r3, [r3, #20]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d00c      	beq.n	800b6f4 <tcp_process+0xe8>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7d1b      	ldrb	r3, [r3, #20]
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d008      	beq.n	800b6f4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7e9b      	ldrb	r3, [r3, #26]
 800b6e6:	f043 0302 	orr.w	r3, r3, #2
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	e334      	b.n	800bd5e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7e9b      	ldrb	r3, [r3, #26]
 800b6f8:	f003 0310 	and.w	r3, r3, #16
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d103      	bne.n	800b708 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b700:	4b72      	ldr	r3, [pc, #456]	; (800b8cc <tcp_process+0x2c0>)
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 fbdf 	bl	800ced4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	7d1b      	ldrb	r3, [r3, #20]
 800b71a:	3b02      	subs	r3, #2
 800b71c:	2b07      	cmp	r3, #7
 800b71e:	f200 830e 	bhi.w	800bd3e <tcp_process+0x732>
 800b722:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <tcp_process+0x11c>)
 800b724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b728:	0800b749 	.word	0x0800b749
 800b72c:	0800b941 	.word	0x0800b941
 800b730:	0800ba99 	.word	0x0800ba99
 800b734:	0800bac3 	.word	0x0800bac3
 800b738:	0800bbed 	.word	0x0800bbed
 800b73c:	0800ba99 	.word	0x0800ba99
 800b740:	0800bc79 	.word	0x0800bc79
 800b744:	0800bd09 	.word	0x0800bd09
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b748:	4b59      	ldr	r3, [pc, #356]	; (800b8b0 <tcp_process+0x2a4>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	f003 0310 	and.w	r3, r3, #16
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 80cb 	beq.w	800b8ec <tcp_process+0x2e0>
 800b756:	4b56      	ldr	r3, [pc, #344]	; (800b8b0 <tcp_process+0x2a4>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 80c4 	beq.w	800b8ec <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	4b52      	ldr	r3, [pc, #328]	; (800b8b4 <tcp_process+0x2a8>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	f040 80bc 	bne.w	800b8ec <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800b774:	4b50      	ldr	r3, [pc, #320]	; (800b8b8 <tcp_process+0x2ac>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800b786:	4b4b      	ldr	r3, [pc, #300]	; (800b8b4 <tcp_process+0x2a8>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800b78e:	4b50      	ldr	r3, [pc, #320]	; (800b8d0 <tcp_process+0x2c4>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	89db      	ldrh	r3, [r3, #14]
 800b794:	b29a      	uxth	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b7a8:	4b43      	ldr	r3, [pc, #268]	; (800b8b8 <tcp_process+0x2ac>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	1e5a      	subs	r2, r3, #1
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2204      	movs	r2, #4
 800b7b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	f7ff f95c 	bl	800aa80 <tcp_eff_send_mss_impl>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	f241 121c 	movw	r2, #4380	; 0x111c
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	bf38      	it	cc
 800b7de:	461a      	movcc	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	bf28      	it	cs
 800b7ea:	4613      	movcs	r3, r2
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <tcp_process+0x200>
 800b7fe:	4b2f      	ldr	r3, [pc, #188]	; (800b8bc <tcp_process+0x2b0>)
 800b800:	f240 321a 	movw	r2, #794	; 0x31a
 800b804:	4933      	ldr	r1, [pc, #204]	; (800b8d4 <tcp_process+0x2c8>)
 800b806:	482f      	ldr	r0, [pc, #188]	; (800b8c4 <tcp_process+0x2b8>)
 800b808:	f006 fb48 	bl	8011e9c <iprintf>
      --pcb->snd_queuelen;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b812:	3b01      	subs	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b820:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d111      	bne.n	800b84c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b82c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d106      	bne.n	800b842 <tcp_process+0x236>
 800b834:	4b21      	ldr	r3, [pc, #132]	; (800b8bc <tcp_process+0x2b0>)
 800b836:	f240 3222 	movw	r2, #802	; 0x322
 800b83a:	4927      	ldr	r1, [pc, #156]	; (800b8d8 <tcp_process+0x2cc>)
 800b83c:	4821      	ldr	r0, [pc, #132]	; (800b8c4 <tcp_process+0x2b8>)
 800b83e:	f006 fb2d 	bl	8011e9c <iprintf>
        pcb->unsent = rseg->next;
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	669a      	str	r2, [r3, #104]	; 0x68
 800b84a:	e003      	b.n	800b854 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800b854:	69f8      	ldr	r0, [r7, #28]
 800b856:	f7fe fea8 	bl	800a5aa <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d104      	bne.n	800b86c <tcp_process+0x260>
        pcb->rtime = -1;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b868:	861a      	strh	r2, [r3, #48]	; 0x30
 800b86a:	e006      	b.n	800b87a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00a      	beq.n	800b89a <tcp_process+0x28e>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	6910      	ldr	r0, [r2, #16]
 800b88e:	2200      	movs	r2, #0
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	4798      	blx	r3
 800b894:	4603      	mov	r3, r0
 800b896:	76bb      	strb	r3, [r7, #26]
 800b898:	e001      	b.n	800b89e <tcp_process+0x292>
 800b89a:	2300      	movs	r3, #0
 800b89c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800b89e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b8a2:	f113 0f0d 	cmn.w	r3, #13
 800b8a6:	d119      	bne.n	800b8dc <tcp_process+0x2d0>
        return ERR_ABRT;
 800b8a8:	f06f 030c 	mvn.w	r3, #12
 800b8ac:	e257      	b.n	800bd5e <tcp_process+0x752>
 800b8ae:	bf00      	nop
 800b8b0:	240019cc 	.word	0x240019cc
 800b8b4:	240019c4 	.word	0x240019c4
 800b8b8:	240019c0 	.word	0x240019c0
 800b8bc:	08013970 	.word	0x08013970
 800b8c0:	08013b28 	.word	0x08013b28
 800b8c4:	080139b4 	.word	0x080139b4
 800b8c8:	240019cd 	.word	0x240019cd
 800b8cc:	24005028 	.word	0x24005028
 800b8d0:	240019b0 	.word	0x240019b0
 800b8d4:	08013b48 	.word	0x08013b48
 800b8d8:	08013b60 	.word	0x08013b60
      }
      tcp_ack_now(pcb);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	7e9b      	ldrb	r3, [r3, #26]
 800b8e0:	f043 0302 	orr.w	r3, r3, #2
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800b8ea:	e22a      	b.n	800bd42 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800b8ec:	4b9f      	ldr	r3, [pc, #636]	; (800bb6c <tcp_process+0x560>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	f003 0310 	and.w	r3, r3, #16
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 8224 	beq.w	800bd42 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8fa:	4b9d      	ldr	r3, [pc, #628]	; (800bb70 <tcp_process+0x564>)
 800b8fc:	6818      	ldr	r0, [r3, #0]
 800b8fe:	4b9d      	ldr	r3, [pc, #628]	; (800bb74 <tcp_process+0x568>)
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	4b9c      	ldr	r3, [pc, #624]	; (800bb78 <tcp_process+0x56c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b90a:	4b9c      	ldr	r3, [pc, #624]	; (800bb7c <tcp_process+0x570>)
 800b90c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b90e:	885b      	ldrh	r3, [r3, #2]
 800b910:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b912:	4a9a      	ldr	r2, [pc, #616]	; (800bb7c <tcp_process+0x570>)
 800b914:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b916:	8812      	ldrh	r2, [r2, #0]
 800b918:	b292      	uxth	r2, r2
 800b91a:	9201      	str	r2, [sp, #4]
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	4b98      	ldr	r3, [pc, #608]	; (800bb80 <tcp_process+0x574>)
 800b920:	4a98      	ldr	r2, [pc, #608]	; (800bb84 <tcp_process+0x578>)
 800b922:	f002 f871 	bl	800da08 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b92c:	2b05      	cmp	r3, #5
 800b92e:	f200 8208 	bhi.w	800bd42 <tcp_process+0x736>
        pcb->rtime = 0;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f002 f8db 	bl	800daf4 <tcp_rexmit_rto>
    break;
 800b93e:	e200      	b.n	800bd42 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800b940:	4b8a      	ldr	r3, [pc, #552]	; (800bb6c <tcp_process+0x560>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	f003 0310 	and.w	r3, r3, #16
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 8091 	beq.w	800ba70 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b94e:	4b88      	ldr	r3, [pc, #544]	; (800bb70 <tcp_process+0x564>)
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	3b01      	subs	r3, #1
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	db71      	blt.n	800ba42 <tcp_process+0x436>
 800b95e:	4b84      	ldr	r3, [pc, #528]	; (800bb70 <tcp_process+0x564>)
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	dc6a      	bgt.n	800ba42 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2204      	movs	r2, #4
 800b970:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00b      	beq.n	800b992 <tcp_process+0x386>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d106      	bne.n	800b992 <tcp_process+0x386>
 800b984:	4b80      	ldr	r3, [pc, #512]	; (800bb88 <tcp_process+0x57c>)
 800b986:	f240 3251 	movw	r2, #849	; 0x351
 800b98a:	4980      	ldr	r1, [pc, #512]	; (800bb8c <tcp_process+0x580>)
 800b98c:	4880      	ldr	r0, [pc, #512]	; (800bb90 <tcp_process+0x584>)
 800b98e:	f006 fa85 	bl	8011e9c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b996:	2b00      	cmp	r3, #0
 800b998:	d102      	bne.n	800b9a0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800b99a:	23fa      	movs	r3, #250	; 0xfa
 800b99c:	76bb      	strb	r3, [r7, #26]
 800b99e:	e011      	b.n	800b9c4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00a      	beq.n	800b9c0 <tcp_process+0x3b4>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	6910      	ldr	r0, [r2, #16]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4798      	blx	r3
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	76bb      	strb	r3, [r7, #26]
 800b9be:	e001      	b.n	800b9c4 <tcp_process+0x3b8>
 800b9c0:	23f0      	movs	r3, #240	; 0xf0
 800b9c2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800b9c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00a      	beq.n	800b9e2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800b9cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9d0:	f113 0f0d 	cmn.w	r3, #13
 800b9d4:	d002      	beq.n	800b9dc <tcp_process+0x3d0>
            tcp_abort(pcb);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7fe f992 	bl	8009d00 <tcp_abort>
          }
          return ERR_ABRT;
 800b9dc:	f06f 030c 	mvn.w	r3, #12
 800b9e0:	e1bd      	b.n	800bd5e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa42 	bl	800be6c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800b9e8:	4b6a      	ldr	r3, [pc, #424]	; (800bb94 <tcp_process+0x588>)
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d005      	beq.n	800b9fc <tcp_process+0x3f0>
          recv_acked--;
 800b9f0:	4b68      	ldr	r3, [pc, #416]	; (800bb94 <tcp_process+0x588>)
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	4b66      	ldr	r3, [pc, #408]	; (800bb94 <tcp_process+0x588>)
 800b9fa:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	f241 121c 	movw	r2, #4380	; 0x111c
 800ba06:	429a      	cmp	r2, r3
 800ba08:	bf38      	it	cc
 800ba0a:	461a      	movcc	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4293      	cmp	r3, r2
 800ba14:	bf28      	it	cs
 800ba16:	4613      	movcs	r3, r2
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800ba20:	4b5d      	ldr	r3, [pc, #372]	; (800bb98 <tcp_process+0x58c>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 0320 	and.w	r3, r3, #32
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d034      	beq.n	800ba96 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	7e9b      	ldrb	r3, [r3, #26]
 800ba30:	f043 0302 	orr.w	r3, r3, #2
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2207      	movs	r2, #7
 800ba3e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ba40:	e029      	b.n	800ba96 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba42:	4b4b      	ldr	r3, [pc, #300]	; (800bb70 <tcp_process+0x564>)
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	4b4b      	ldr	r3, [pc, #300]	; (800bb74 <tcp_process+0x568>)
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4b4a      	ldr	r3, [pc, #296]	; (800bb78 <tcp_process+0x56c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba52:	4b4a      	ldr	r3, [pc, #296]	; (800bb7c <tcp_process+0x570>)
 800ba54:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba56:	885b      	ldrh	r3, [r3, #2]
 800ba58:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba5a:	4a48      	ldr	r2, [pc, #288]	; (800bb7c <tcp_process+0x570>)
 800ba5c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba5e:	8812      	ldrh	r2, [r2, #0]
 800ba60:	b292      	uxth	r2, r2
 800ba62:	9201      	str	r2, [sp, #4]
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	4b46      	ldr	r3, [pc, #280]	; (800bb80 <tcp_process+0x574>)
 800ba68:	4a46      	ldr	r2, [pc, #280]	; (800bb84 <tcp_process+0x578>)
 800ba6a:	f001 ffcd 	bl	800da08 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ba6e:	e16a      	b.n	800bd46 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ba70:	4b3e      	ldr	r3, [pc, #248]	; (800bb6c <tcp_process+0x560>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	f003 0302 	and.w	r3, r3, #2
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 8164 	beq.w	800bd46 <tcp_process+0x73a>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba82:	1e5a      	subs	r2, r3, #1
 800ba84:	4b3c      	ldr	r3, [pc, #240]	; (800bb78 <tcp_process+0x56c>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	f040 815c 	bne.w	800bd46 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f002 f866 	bl	800db60 <tcp_rexmit>
    break;
 800ba94:	e157      	b.n	800bd46 <tcp_process+0x73a>
 800ba96:	e156      	b.n	800bd46 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f9e7 	bl	800be6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ba9e:	4b3e      	ldr	r3, [pc, #248]	; (800bb98 <tcp_process+0x58c>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	f003 0320 	and.w	r3, r3, #32
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 814f 	beq.w	800bd4a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	7e9b      	ldrb	r3, [r3, #26]
 800bab0:	f043 0302 	orr.w	r3, r3, #2
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2207      	movs	r2, #7
 800babe:	751a      	strb	r2, [r3, #20]
    }
    break;
 800bac0:	e143      	b.n	800bd4a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f9d2 	bl	800be6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800bac8:	4b33      	ldr	r3, [pc, #204]	; (800bb98 <tcp_process+0x58c>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d074      	beq.n	800bbbe <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bad4:	4b25      	ldr	r3, [pc, #148]	; (800bb6c <tcp_process+0x560>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f003 0310 	and.w	r3, r3, #16
 800badc:	2b00      	cmp	r3, #0
 800bade:	d063      	beq.n	800bba8 <tcp_process+0x59c>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bae4:	4b22      	ldr	r3, [pc, #136]	; (800bb70 <tcp_process+0x564>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d15d      	bne.n	800bba8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d159      	bne.n	800bba8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	7e9b      	ldrb	r3, [r3, #26]
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7fe fee6 	bl	800a8d4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb08:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <tcp_process+0x590>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d105      	bne.n	800bb1e <tcp_process+0x512>
 800bb12:	4b22      	ldr	r3, [pc, #136]	; (800bb9c <tcp_process+0x590>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	4a20      	ldr	r2, [pc, #128]	; (800bb9c <tcp_process+0x590>)
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	e013      	b.n	800bb46 <tcp_process+0x53a>
 800bb1e:	4b1f      	ldr	r3, [pc, #124]	; (800bb9c <tcp_process+0x590>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	617b      	str	r3, [r7, #20]
 800bb24:	e00c      	b.n	800bb40 <tcp_process+0x534>
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d104      	bne.n	800bb3a <tcp_process+0x52e>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68da      	ldr	r2, [r3, #12]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	60da      	str	r2, [r3, #12]
 800bb38:	e005      	b.n	800bb46 <tcp_process+0x53a>
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1ef      	bne.n	800bb26 <tcp_process+0x51a>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	60da      	str	r2, [r3, #12]
 800bb4c:	4b14      	ldr	r3, [pc, #80]	; (800bba0 <tcp_process+0x594>)
 800bb4e:	2201      	movs	r2, #1
 800bb50:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	220a      	movs	r2, #10
 800bb56:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb58:	4b12      	ldr	r3, [pc, #72]	; (800bba4 <tcp_process+0x598>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	60da      	str	r2, [r3, #12]
 800bb60:	4a10      	ldr	r2, [pc, #64]	; (800bba4 <tcp_process+0x598>)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	f002 f9a1 	bl	800deac <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800bb6a:	e0f0      	b.n	800bd4e <tcp_process+0x742>
 800bb6c:	240019cc 	.word	0x240019cc
 800bb70:	240019c4 	.word	0x240019c4
 800bb74:	240019ca 	.word	0x240019ca
 800bb78:	240019c0 	.word	0x240019c0
 800bb7c:	240019b0 	.word	0x240019b0
 800bb80:	24001b04 	.word	0x24001b04
 800bb84:	24001b08 	.word	0x24001b08
 800bb88:	08013970 	.word	0x08013970
 800bb8c:	08013b74 	.word	0x08013b74
 800bb90:	080139b4 	.word	0x080139b4
 800bb94:	240019c8 	.word	0x240019c8
 800bb98:	240019cd 	.word	0x240019cd
 800bb9c:	24005024 	.word	0x24005024
 800bba0:	24005020 	.word	0x24005020
 800bba4:	24005034 	.word	0x24005034
        tcp_ack_now(pcb);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7e9b      	ldrb	r3, [r3, #26]
 800bbac:	f043 0302 	orr.w	r3, r3, #2
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2208      	movs	r2, #8
 800bbba:	751a      	strb	r2, [r3, #20]
    break;
 800bbbc:	e0c7      	b.n	800bd4e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bbbe:	4b6a      	ldr	r3, [pc, #424]	; (800bd68 <tcp_process+0x75c>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	f003 0310 	and.w	r3, r3, #16
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 80c1 	beq.w	800bd4e <tcp_process+0x742>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbd0:	4b66      	ldr	r3, [pc, #408]	; (800bd6c <tcp_process+0x760>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	f040 80ba 	bne.w	800bd4e <tcp_process+0x742>
               pcb->unsent == NULL) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f040 80b5 	bne.w	800bd4e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2206      	movs	r2, #6
 800bbe8:	751a      	strb	r2, [r3, #20]
    break;
 800bbea:	e0b0      	b.n	800bd4e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f93d 	bl	800be6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800bbf2:	4b5f      	ldr	r3, [pc, #380]	; (800bd70 <tcp_process+0x764>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	f003 0320 	and.w	r3, r3, #32
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 80a9 	beq.w	800bd52 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7e9b      	ldrb	r3, [r3, #26]
 800bc04:	f043 0302 	orr.w	r3, r3, #2
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7fe fe60 	bl	800a8d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bc14:	4b57      	ldr	r3, [pc, #348]	; (800bd74 <tcp_process+0x768>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d105      	bne.n	800bc2a <tcp_process+0x61e>
 800bc1e:	4b55      	ldr	r3, [pc, #340]	; (800bd74 <tcp_process+0x768>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	4a53      	ldr	r2, [pc, #332]	; (800bd74 <tcp_process+0x768>)
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	e013      	b.n	800bc52 <tcp_process+0x646>
 800bc2a:	4b52      	ldr	r3, [pc, #328]	; (800bd74 <tcp_process+0x768>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	613b      	str	r3, [r7, #16]
 800bc30:	e00c      	b.n	800bc4c <tcp_process+0x640>
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d104      	bne.n	800bc46 <tcp_process+0x63a>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	68da      	ldr	r2, [r3, #12]
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	60da      	str	r2, [r3, #12]
 800bc44:	e005      	b.n	800bc52 <tcp_process+0x646>
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1ef      	bne.n	800bc32 <tcp_process+0x626>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	60da      	str	r2, [r3, #12]
 800bc58:	4b47      	ldr	r3, [pc, #284]	; (800bd78 <tcp_process+0x76c>)
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	220a      	movs	r2, #10
 800bc62:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800bc64:	4b45      	ldr	r3, [pc, #276]	; (800bd7c <tcp_process+0x770>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	60da      	str	r2, [r3, #12]
 800bc6c:	4a43      	ldr	r2, [pc, #268]	; (800bd7c <tcp_process+0x770>)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6013      	str	r3, [r2, #0]
 800bc72:	f002 f91b 	bl	800deac <tcp_timer_needed>
    }
    break;
 800bc76:	e06c      	b.n	800bd52 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f8f7 	bl	800be6c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bc7e:	4b3a      	ldr	r3, [pc, #232]	; (800bd68 <tcp_process+0x75c>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	f003 0310 	and.w	r3, r3, #16
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d065      	beq.n	800bd56 <tcp_process+0x74a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc8e:	4b37      	ldr	r3, [pc, #220]	; (800bd6c <tcp_process+0x760>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d15f      	bne.n	800bd56 <tcp_process+0x74a>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d15b      	bne.n	800bd56 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7fe fe18 	bl	800a8d4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bca4:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <tcp_process+0x768>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d105      	bne.n	800bcba <tcp_process+0x6ae>
 800bcae:	4b31      	ldr	r3, [pc, #196]	; (800bd74 <tcp_process+0x768>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	4a2f      	ldr	r2, [pc, #188]	; (800bd74 <tcp_process+0x768>)
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	e013      	b.n	800bce2 <tcp_process+0x6d6>
 800bcba:	4b2e      	ldr	r3, [pc, #184]	; (800bd74 <tcp_process+0x768>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	e00c      	b.n	800bcdc <tcp_process+0x6d0>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d104      	bne.n	800bcd6 <tcp_process+0x6ca>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68da      	ldr	r2, [r3, #12]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	60da      	str	r2, [r3, #12]
 800bcd4:	e005      	b.n	800bce2 <tcp_process+0x6d6>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1ef      	bne.n	800bcc2 <tcp_process+0x6b6>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	60da      	str	r2, [r3, #12]
 800bce8:	4b23      	ldr	r3, [pc, #140]	; (800bd78 <tcp_process+0x76c>)
 800bcea:	2201      	movs	r2, #1
 800bcec:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	220a      	movs	r2, #10
 800bcf2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800bcf4:	4b21      	ldr	r3, [pc, #132]	; (800bd7c <tcp_process+0x770>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	60da      	str	r2, [r3, #12]
 800bcfc:	4a1f      	ldr	r2, [pc, #124]	; (800bd7c <tcp_process+0x770>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6013      	str	r3, [r2, #0]
 800bd02:	f002 f8d3 	bl	800deac <tcp_timer_needed>
    }
    break;
 800bd06:	e026      	b.n	800bd56 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f8af 	bl	800be6c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bd0e:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <tcp_process+0x75c>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	f003 0310 	and.w	r3, r3, #16
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d01f      	beq.n	800bd5a <tcp_process+0x74e>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd1e:	4b13      	ldr	r3, [pc, #76]	; (800bd6c <tcp_process+0x760>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d119      	bne.n	800bd5a <tcp_process+0x74e>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d115      	bne.n	800bd5a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800bd2e:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <tcp_process+0x764>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	f043 0310 	orr.w	r3, r3, #16
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	4b0d      	ldr	r3, [pc, #52]	; (800bd70 <tcp_process+0x764>)
 800bd3a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bd3c:	e00d      	b.n	800bd5a <tcp_process+0x74e>
  default:
    break;
 800bd3e:	bf00      	nop
 800bd40:	e00c      	b.n	800bd5c <tcp_process+0x750>
    break;
 800bd42:	bf00      	nop
 800bd44:	e00a      	b.n	800bd5c <tcp_process+0x750>
    break;
 800bd46:	bf00      	nop
 800bd48:	e008      	b.n	800bd5c <tcp_process+0x750>
    break;
 800bd4a:	bf00      	nop
 800bd4c:	e006      	b.n	800bd5c <tcp_process+0x750>
    break;
 800bd4e:	bf00      	nop
 800bd50:	e004      	b.n	800bd5c <tcp_process+0x750>
    break;
 800bd52:	bf00      	nop
 800bd54:	e002      	b.n	800bd5c <tcp_process+0x750>
    break;
 800bd56:	bf00      	nop
 800bd58:	e000      	b.n	800bd5c <tcp_process+0x750>
    break;
 800bd5a:	bf00      	nop
  }
  return ERR_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3720      	adds	r7, #32
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	240019cc 	.word	0x240019cc
 800bd6c:	240019c4 	.word	0x240019c4
 800bd70:	240019cd 	.word	0x240019cd
 800bd74:	24005024 	.word	0x24005024
 800bd78:	24005020 	.word	0x24005020
 800bd7c:	24005034 	.word	0x24005034

0800bd80 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	899b      	ldrh	r3, [r3, #12]
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fc f91a 	bl	8007fcc <lwip_htons>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d027      	beq.n	800bdf2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bda2:	6838      	ldr	r0, [r7, #0]
 800bda4:	f7fe fbed 	bl	800a582 <tcp_segs_free>
    next = NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	603b      	str	r3, [r7, #0]
 800bdac:	e055      	b.n	800be5a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	899b      	ldrh	r3, [r3, #12]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fc f908 	bl	8007fcc <lwip_htons>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00d      	beq.n	800bde2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	899b      	ldrh	r3, [r3, #12]
 800bdcc:	b29c      	uxth	r4, r3
 800bdce:	2001      	movs	r0, #1
 800bdd0:	f7fc f8fc 	bl	8007fcc <lwip_htons>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	4322      	orrs	r2, r4
 800bdde:	b292      	uxth	r2, r2
 800bde0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7fe fbdc 	bl	800a5aa <tcp_seg_free>
    while (next &&
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00e      	beq.n	800be16 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	891b      	ldrh	r3, [r3, #8]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	; (800be68 <tcp_oos_insert_segment+0xe8>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	441a      	add	r2, r3
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	8909      	ldrh	r1, [r1, #8]
 800be0e:	440b      	add	r3, r1
 800be10:	1ad3      	subs	r3, r2, r3
    while (next &&
 800be12:	2b00      	cmp	r3, #0
 800be14:	dacb      	bge.n	800bdae <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01e      	beq.n	800be5a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	891b      	ldrh	r3, [r3, #8]
 800be20:	461a      	mov	r2, r3
 800be22:	4b11      	ldr	r3, [pc, #68]	; (800be68 <tcp_oos_insert_segment+0xe8>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	441a      	add	r2, r3
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800be30:	2b00      	cmp	r3, #0
 800be32:	dd12      	ble.n	800be5a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	4b0a      	ldr	r3, [pc, #40]	; (800be68 <tcp_oos_insert_segment+0xe8>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	b29b      	uxth	r3, r3
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	891b      	ldrh	r3, [r3, #8]
 800be52:	4619      	mov	r1, r3
 800be54:	4610      	mov	r0, r2
 800be56:	f7fd f8ed 	bl	8009034 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	601a      	str	r2, [r3, #0]
}
 800be60:	bf00      	nop
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	bd90      	pop	{r4, r7, pc}
 800be68:	240019c0 	.word	0x240019c0

0800be6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800be6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be6e:	b08d      	sub	sp, #52	; 0x34
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7d1b      	ldrb	r3, [r3, #20]
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	d806      	bhi.n	800be8e <tcp_receive+0x22>
 800be80:	4ba6      	ldr	r3, [pc, #664]	; (800c11c <tcp_receive+0x2b0>)
 800be82:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800be86:	49a6      	ldr	r1, [pc, #664]	; (800c120 <tcp_receive+0x2b4>)
 800be88:	48a6      	ldr	r0, [pc, #664]	; (800c124 <tcp_receive+0x2b8>)
 800be8a:	f006 f807 	bl	8011e9c <iprintf>

  if (flags & TCP_ACK) {
 800be8e:	4ba6      	ldr	r3, [pc, #664]	; (800c128 <tcp_receive+0x2bc>)
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	f003 0310 	and.w	r3, r3, #16
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 82bf 	beq.w	800c41a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bea2:	461a      	mov	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea8:	4413      	add	r3, r2
 800beaa:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800beb0:	4b9e      	ldr	r3, [pc, #632]	; (800c12c <tcp_receive+0x2c0>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	db1b      	blt.n	800bef2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bebe:	4b9b      	ldr	r3, [pc, #620]	; (800c12c <tcp_receive+0x2c0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d106      	bne.n	800bed4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beca:	4b99      	ldr	r3, [pc, #612]	; (800c130 <tcp_receive+0x2c4>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	db0e      	blt.n	800bef2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bed8:	4b95      	ldr	r3, [pc, #596]	; (800c130 <tcp_receive+0x2c4>)
 800beda:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bedc:	429a      	cmp	r2, r3
 800bede:	d141      	bne.n	800bf64 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bee0:	4b94      	ldr	r3, [pc, #592]	; (800c134 <tcp_receive+0x2c8>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	89db      	ldrh	r3, [r3, #14]
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800beee:	429a      	cmp	r2, r3
 800bef0:	d938      	bls.n	800bf64 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bef2:	4b90      	ldr	r3, [pc, #576]	; (800c134 <tcp_receive+0x2c8>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	89db      	ldrh	r3, [r3, #14]
 800bef8:	b29a      	uxth	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d205      	bcs.n	800bf1c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800bf1c:	4b83      	ldr	r3, [pc, #524]	; (800c12c <tcp_receive+0x2c0>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800bf24:	4b82      	ldr	r3, [pc, #520]	; (800c130 <tcp_receive+0x2c4>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10d      	bne.n	800bf52 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d111      	bne.n	800bf64 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800bf50:	e008      	b.n	800bf64 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bf64:	4b72      	ldr	r3, [pc, #456]	; (800c130 <tcp_receive+0x2c4>)
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	dc53      	bgt.n	800c01a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800bf72:	4b71      	ldr	r3, [pc, #452]	; (800c138 <tcp_receive+0x2cc>)
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d146      	bne.n	800c008 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800bf84:	4413      	add	r3, r2
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d13d      	bne.n	800c008 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	db38      	blt.n	800c008 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf9a:	4b65      	ldr	r3, [pc, #404]	; (800c130 <tcp_receive+0x2c4>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d132      	bne.n	800c008 <tcp_receive+0x19c>
              found_dupack = 1;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfac:	2bff      	cmp	r3, #255	; 0xff
 800bfae:	d007      	beq.n	800bfc0 <tcp_receive+0x154>
                ++pcb->dupacks;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d916      	bls.n	800bff8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfd4:	4413      	add	r3, r2
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d912      	bls.n	800c008 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfec:	4413      	add	r3, r2
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bff6:	e007      	b.n	800c008 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bffe:	2b03      	cmp	r3, #3
 800c000:	d102      	bne.n	800c008 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 fdfc 	bl	800dc00 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f040 8169 	bne.w	800c2e2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c018:	e163      	b.n	800c2e2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c01a:	4b45      	ldr	r3, [pc, #276]	; (800c130 <tcp_receive+0x2c4>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	2b00      	cmp	r3, #0
 800c028:	f2c0 8107 	blt.w	800c23a <tcp_receive+0x3ce>
 800c02c:	4b40      	ldr	r3, [pc, #256]	; (800c130 <tcp_receive+0x2c4>)
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	f300 80ff 	bgt.w	800c23a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7e9b      	ldrb	r3, [r3, #26]
 800c040:	f003 0304 	and.w	r3, r3, #4
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00c      	beq.n	800c062 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7e9b      	ldrb	r3, [r3, #26]
 800c04c:	f023 0304 	bic.w	r3, r3, #4
 800c050:	b2da      	uxtb	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c070:	10db      	asrs	r3, r3, #3
 800c072:	b21b      	sxth	r3, r3
 800c074:	b29a      	uxth	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	4413      	add	r3, r2
 800c080:	b29b      	uxth	r3, r3
 800c082:	b21a      	sxth	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c092:	4b27      	ldr	r3, [pc, #156]	; (800c130 <tcp_receive+0x2c4>)
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	7d1b      	ldrb	r3, [r3, #20]
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	f240 8094 	bls.w	800c1cc <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d216      	bcs.n	800c0e2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0be:	4413      	add	r3, r2
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d97f      	bls.n	800c1cc <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0d6:	4413      	add	r3, r2
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c0e0:	e074      	b.n	800c1cc <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0f2:	fb03 f301 	mul.w	r3, r3, r1
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800c0fc:	fb93 f3f1 	sdiv	r3, r3, r1
 800c100:	b29b      	uxth	r3, r3
 800c102:	4413      	add	r3, r2
 800c104:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c10c:	8a7a      	ldrh	r2, [r7, #18]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d95c      	bls.n	800c1cc <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	8a7a      	ldrh	r2, [r7, #18]
 800c116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c11a:	e057      	b.n	800c1cc <tcp_receive+0x360>
 800c11c:	08013970 	.word	0x08013970
 800c120:	08013b94 	.word	0x08013b94
 800c124:	080139b4 	.word	0x080139b4
 800c128:	240019cc 	.word	0x240019cc
 800c12c:	240019c0 	.word	0x240019c0
 800c130:	240019c4 	.word	0x240019c4
 800c134:	240019b0 	.word	0x240019b0
 800c138:	240019ca 	.word	0x240019ca
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c140:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	4618      	mov	r0, r3
 800c158:	f7fd f974 	bl	8009444 <pbuf_clen>
 800c15c:	4603      	mov	r3, r0
 800c15e:	429c      	cmp	r4, r3
 800c160:	d206      	bcs.n	800c170 <tcp_receive+0x304>
 800c162:	4b70      	ldr	r3, [pc, #448]	; (800c324 <tcp_receive+0x4b8>)
 800c164:	f240 429e 	movw	r2, #1182	; 0x49e
 800c168:	496f      	ldr	r1, [pc, #444]	; (800c328 <tcp_receive+0x4bc>)
 800c16a:	4870      	ldr	r0, [pc, #448]	; (800c32c <tcp_receive+0x4c0>)
 800c16c:	f005 fe96 	bl	8011e9c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	4618      	mov	r0, r3
 800c176:	f7fd f965 	bl	8009444 <pbuf_clen>
 800c17a:	4603      	mov	r3, r0
 800c17c:	461a      	mov	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c184:	1a9b      	subs	r3, r3, r2
 800c186:	b29a      	uxth	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800c18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c190:	891a      	ldrh	r2, [r3, #8]
 800c192:	4b67      	ldr	r3, [pc, #412]	; (800c330 <tcp_receive+0x4c4>)
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	4413      	add	r3, r2
 800c198:	b29a      	uxth	r2, r3
 800c19a:	4b65      	ldr	r3, [pc, #404]	; (800c330 <tcp_receive+0x4c4>)
 800c19c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800c19e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1a0:	f7fe fa03 	bl	800a5aa <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00e      	beq.n	800c1cc <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <tcp_receive+0x360>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d106      	bne.n	800c1cc <tcp_receive+0x360>
 800c1be:	4b59      	ldr	r3, [pc, #356]	; (800c324 <tcp_receive+0x4b8>)
 800c1c0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800c1c4:	495b      	ldr	r1, [pc, #364]	; (800c334 <tcp_receive+0x4c8>)
 800c1c6:	4859      	ldr	r0, [pc, #356]	; (800c32c <tcp_receive+0x4c0>)
 800c1c8:	f005 fe68 	bl	8011e9c <iprintf>
      while (pcb->unacked != NULL &&
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d022      	beq.n	800c21a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fb ff03 	bl	8007fe8 <lwip_htonl>
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1e8:	891b      	ldrh	r3, [r3, #8]
 800c1ea:	461d      	mov	r5, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	899b      	ldrh	r3, [r3, #12]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fb fee8 	bl	8007fcc <lwip_htons>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	f003 0303 	and.w	r3, r3, #3
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <tcp_receive+0x39e>
 800c206:	2301      	movs	r3, #1
 800c208:	e000      	b.n	800c20c <tcp_receive+0x3a0>
 800c20a:	2300      	movs	r3, #0
 800c20c:	442b      	add	r3, r5
 800c20e:	18e2      	adds	r2, r4, r3
 800c210:	4b49      	ldr	r3, [pc, #292]	; (800c338 <tcp_receive+0x4cc>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800c216:	2b00      	cmp	r3, #0
 800c218:	dd90      	ble.n	800c13c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c228:	861a      	strh	r2, [r3, #48]	; 0x30
 800c22a:	e002      	b.n	800c232 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	76da      	strb	r2, [r3, #27]
 800c238:	e002      	b.n	800c240 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 f8fe 	bl	800d43c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c240:	e04f      	b.n	800c2e2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c246:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c256:	2b00      	cmp	r3, #0
 800c258:	d103      	bne.n	800c262 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fd f8e9 	bl	8009444 <pbuf_clen>
 800c272:	4603      	mov	r3, r0
 800c274:	429c      	cmp	r4, r3
 800c276:	d206      	bcs.n	800c286 <tcp_receive+0x41a>
 800c278:	4b2a      	ldr	r3, [pc, #168]	; (800c324 <tcp_receive+0x4b8>)
 800c27a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c27e:	492a      	ldr	r1, [pc, #168]	; (800c328 <tcp_receive+0x4bc>)
 800c280:	482a      	ldr	r0, [pc, #168]	; (800c32c <tcp_receive+0x4c0>)
 800c282:	f005 fe0b 	bl	8011e9c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fd f8da 	bl	8009444 <pbuf_clen>
 800c290:	4603      	mov	r3, r0
 800c292:	461a      	mov	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	891a      	ldrh	r2, [r3, #8]
 800c2a8:	4b21      	ldr	r3, [pc, #132]	; (800c330 <tcp_receive+0x4c4>)
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	4b1f      	ldr	r3, [pc, #124]	; (800c330 <tcp_receive+0x4c4>)
 800c2b2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800c2b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2b6:	f7fe f978 	bl	800a5aa <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00e      	beq.n	800c2e2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <tcp_receive+0x476>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d106      	bne.n	800c2e2 <tcp_receive+0x476>
 800c2d4:	4b13      	ldr	r3, [pc, #76]	; (800c324 <tcp_receive+0x4b8>)
 800c2d6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800c2da:	4916      	ldr	r1, [pc, #88]	; (800c334 <tcp_receive+0x4c8>)
 800c2dc:	4813      	ldr	r0, [pc, #76]	; (800c32c <tcp_receive+0x4c0>)
 800c2de:	f005 fddd 	bl	8011e9c <iprintf>
    while (pcb->unsent != NULL &&
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d036      	beq.n	800c358 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c2ea:	4b13      	ldr	r3, [pc, #76]	; (800c338 <tcp_receive+0x4cc>)
 800c2ec:	681c      	ldr	r4, [r3, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fb fe76 	bl	8007fe8 <lwip_htonl>
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c302:	891b      	ldrh	r3, [r3, #8]
 800c304:	461e      	mov	r6, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	899b      	ldrh	r3, [r3, #12]
 800c30e:	b29b      	uxth	r3, r3
 800c310:	4618      	mov	r0, r3
 800c312:	f7fb fe5b 	bl	8007fcc <lwip_htons>
 800c316:	4603      	mov	r3, r0
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00d      	beq.n	800c33c <tcp_receive+0x4d0>
 800c320:	2301      	movs	r3, #1
 800c322:	e00c      	b.n	800c33e <tcp_receive+0x4d2>
 800c324:	08013970 	.word	0x08013970
 800c328:	08013bb0 	.word	0x08013bb0
 800c32c:	080139b4 	.word	0x080139b4
 800c330:	240019c8 	.word	0x240019c8
 800c334:	08013bd8 	.word	0x08013bd8
 800c338:	240019c4 	.word	0x240019c4
 800c33c:	2300      	movs	r3, #0
 800c33e:	4433      	add	r3, r6
 800c340:	442b      	add	r3, r5
 800c342:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800c344:	2b00      	cmp	r3, #0
 800c346:	db07      	blt.n	800c358 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c348:	4b8d      	ldr	r3, [pc, #564]	; (800c580 <tcp_receive+0x714>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	f77f af75 	ble.w	800c242 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c35e:	4b89      	ldr	r3, [pc, #548]	; (800c584 <tcp_receive+0x718>)
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	4413      	add	r3, r2
 800c364:	b29a      	uxth	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c370:	2b00      	cmp	r3, #0
 800c372:	d052      	beq.n	800c41a <tcp_receive+0x5ae>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c378:	4b81      	ldr	r3, [pc, #516]	; (800c580 <tcp_receive+0x714>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	da4b      	bge.n	800c41a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c382:	4b81      	ldr	r3, [pc, #516]	; (800c588 <tcp_receive+0x71c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	b29a      	uxth	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	b29b      	uxth	r3, r3
 800c392:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800c394:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c39c:	10db      	asrs	r3, r3, #3
 800c39e:	b21b      	sxth	r3, r3
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3b2:	4413      	add	r3, r2
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	b21a      	sxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c3bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	da03      	bge.n	800c3cc <tcp_receive+0x560>
        m = -m;
 800c3c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3c6:	425b      	negs	r3, r3
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800c3cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c3d4:	109b      	asrs	r3, r3, #2
 800c3d6:	b21b      	sxth	r3, r3
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3ea:	4413      	add	r3, r2
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	b21a      	sxth	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c3fa:	10db      	asrs	r3, r3, #3
 800c3fc:	b21b      	sxth	r3, r3
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c406:	b29b      	uxth	r3, r3
 800c408:	4413      	add	r3, r2
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	b21a      	sxth	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c41a:	4b5c      	ldr	r3, [pc, #368]	; (800c58c <tcp_receive+0x720>)
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f000 84f1 	beq.w	800ce06 <tcp_receive+0xf9a>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	7d1b      	ldrb	r3, [r3, #20]
 800c428:	2b06      	cmp	r3, #6
 800c42a:	f200 84ec 	bhi.w	800ce06 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c432:	4b57      	ldr	r3, [pc, #348]	; (800c590 <tcp_receive+0x724>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	3b01      	subs	r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f2c0 80b8 	blt.w	800c5b0 <tcp_receive+0x744>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c444:	4b51      	ldr	r3, [pc, #324]	; (800c58c <tcp_receive+0x720>)
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	4619      	mov	r1, r3
 800c44a:	4b51      	ldr	r3, [pc, #324]	; (800c590 <tcp_receive+0x724>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	440b      	add	r3, r1
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	3301      	adds	r3, #1
 800c454:	2b00      	cmp	r3, #0
 800c456:	f300 80ab 	bgt.w	800c5b0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c45a:	4b4e      	ldr	r3, [pc, #312]	; (800c594 <tcp_receive+0x728>)
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c464:	4b4a      	ldr	r3, [pc, #296]	; (800c590 <tcp_receive+0x724>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c46c:	4b49      	ldr	r3, [pc, #292]	; (800c594 <tcp_receive+0x728>)
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d106      	bne.n	800c482 <tcp_receive+0x616>
 800c474:	4b48      	ldr	r3, [pc, #288]	; (800c598 <tcp_receive+0x72c>)
 800c476:	f240 523c 	movw	r2, #1340	; 0x53c
 800c47a:	4948      	ldr	r1, [pc, #288]	; (800c59c <tcp_receive+0x730>)
 800c47c:	4848      	ldr	r0, [pc, #288]	; (800c5a0 <tcp_receive+0x734>)
 800c47e:	f005 fd0d 	bl	8011e9c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c488:	4293      	cmp	r3, r2
 800c48a:	dd06      	ble.n	800c49a <tcp_receive+0x62e>
 800c48c:	4b42      	ldr	r3, [pc, #264]	; (800c598 <tcp_receive+0x72c>)
 800c48e:	f240 523d 	movw	r2, #1341	; 0x53d
 800c492:	4944      	ldr	r1, [pc, #272]	; (800c5a4 <tcp_receive+0x738>)
 800c494:	4842      	ldr	r0, [pc, #264]	; (800c5a0 <tcp_receive+0x734>)
 800c496:	f005 fd01 	bl	8011e9c <iprintf>
      if (inseg.p->len < off) {
 800c49a:	4b3e      	ldr	r3, [pc, #248]	; (800c594 <tcp_receive+0x728>)
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	895b      	ldrh	r3, [r3, #10]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	dd3e      	ble.n	800c526 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c4a8:	4b3a      	ldr	r3, [pc, #232]	; (800c594 <tcp_receive+0x728>)
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	891b      	ldrh	r3, [r3, #8]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	dd06      	ble.n	800c4c4 <tcp_receive+0x658>
 800c4b6:	4b38      	ldr	r3, [pc, #224]	; (800c598 <tcp_receive+0x72c>)
 800c4b8:	f240 523f 	movw	r2, #1343	; 0x53f
 800c4bc:	493a      	ldr	r1, [pc, #232]	; (800c5a8 <tcp_receive+0x73c>)
 800c4be:	4838      	ldr	r0, [pc, #224]	; (800c5a0 <tcp_receive+0x734>)
 800c4c0:	f005 fcec 	bl	8011e9c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c4c4:	4b33      	ldr	r3, [pc, #204]	; (800c594 <tcp_receive+0x728>)
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	891a      	ldrh	r2, [r3, #8]
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800c4d2:	e00e      	b.n	800c4f2 <tcp_receive+0x686>
          off -= p->len;
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	895b      	ldrh	r3, [r3, #10]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	1a9b      	subs	r3, r3, r2
 800c4de:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	8a3a      	ldrh	r2, [r7, #16]
 800c4e4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	895b      	ldrh	r3, [r3, #10]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	dcea      	bgt.n	800c4d4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	b29b      	uxth	r3, r3
 800c502:	425b      	negs	r3, r3
 800c504:	b29b      	uxth	r3, r3
 800c506:	b21b      	sxth	r3, r3
 800c508:	4619      	mov	r1, r3
 800c50a:	69b8      	ldr	r0, [r7, #24]
 800c50c:	f7fc fee2 	bl	80092d4 <pbuf_header>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d01c      	beq.n	800c550 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c516:	4b20      	ldr	r3, [pc, #128]	; (800c598 <tcp_receive+0x72c>)
 800c518:	f240 524c 	movw	r2, #1356	; 0x54c
 800c51c:	4923      	ldr	r1, [pc, #140]	; (800c5ac <tcp_receive+0x740>)
 800c51e:	4820      	ldr	r0, [pc, #128]	; (800c5a0 <tcp_receive+0x734>)
 800c520:	f005 fcbc 	bl	8011e9c <iprintf>
 800c524:	e014      	b.n	800c550 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800c526:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <tcp_receive+0x728>)
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c52c:	b292      	uxth	r2, r2
 800c52e:	4252      	negs	r2, r2
 800c530:	b292      	uxth	r2, r2
 800c532:	b212      	sxth	r2, r2
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f7fc fecc 	bl	80092d4 <pbuf_header>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d006      	beq.n	800c550 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c542:	4b15      	ldr	r3, [pc, #84]	; (800c598 <tcp_receive+0x72c>)
 800c544:	f240 5251 	movw	r2, #1361	; 0x551
 800c548:	4918      	ldr	r1, [pc, #96]	; (800c5ac <tcp_receive+0x740>)
 800c54a:	4815      	ldr	r0, [pc, #84]	; (800c5a0 <tcp_receive+0x734>)
 800c54c:	f005 fca6 	bl	8011e9c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c550:	4b10      	ldr	r3, [pc, #64]	; (800c594 <tcp_receive+0x728>)
 800c552:	891a      	ldrh	r2, [r3, #8]
 800c554:	4b0e      	ldr	r3, [pc, #56]	; (800c590 <tcp_receive+0x724>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	b299      	uxth	r1, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55e:	b29b      	uxth	r3, r3
 800c560:	1acb      	subs	r3, r1, r3
 800c562:	b29b      	uxth	r3, r3
 800c564:	4413      	add	r3, r2
 800c566:	b29a      	uxth	r2, r3
 800c568:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <tcp_receive+0x728>)
 800c56a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	4a07      	ldr	r2, [pc, #28]	; (800c590 <tcp_receive+0x724>)
 800c572:	6013      	str	r3, [r2, #0]
 800c574:	4b07      	ldr	r3, [pc, #28]	; (800c594 <tcp_receive+0x728>)
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	4a05      	ldr	r2, [pc, #20]	; (800c590 <tcp_receive+0x724>)
 800c57a:	6812      	ldr	r2, [r2, #0]
 800c57c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c57e:	e025      	b.n	800c5cc <tcp_receive+0x760>
 800c580:	240019c4 	.word	0x240019c4
 800c584:	240019c8 	.word	0x240019c8
 800c588:	24005028 	.word	0x24005028
 800c58c:	240019ca 	.word	0x240019ca
 800c590:	240019c0 	.word	0x240019c0
 800c594:	240019a0 	.word	0x240019a0
 800c598:	08013970 	.word	0x08013970
 800c59c:	08013bf8 	.word	0x08013bf8
 800c5a0:	080139b4 	.word	0x080139b4
 800c5a4:	08013c08 	.word	0x08013c08
 800c5a8:	08013c18 	.word	0x08013c18
 800c5ac:	08013c28 	.word	0x08013c28
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c5b0:	4b87      	ldr	r3, [pc, #540]	; (800c7d0 <tcp_receive+0x964>)
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	1ad3      	subs	r3, r2, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da06      	bge.n	800c5cc <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7e9b      	ldrb	r3, [r3, #26]
 800c5c2:	f043 0302 	orr.w	r3, r3, #2
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c5cc:	4b80      	ldr	r3, [pc, #512]	; (800c7d0 <tcp_receive+0x964>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f2c0 8410 	blt.w	800cdfc <tcp_receive+0xf90>
 800c5dc:	4b7c      	ldr	r3, [pc, #496]	; (800c7d0 <tcp_receive+0x964>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e4:	6879      	ldr	r1, [r7, #4]
 800c5e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c5e8:	440b      	add	r3, r1
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f300 8404 	bgt.w	800cdfc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5f8:	4b75      	ldr	r3, [pc, #468]	; (800c7d0 <tcp_receive+0x964>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	f040 8287 	bne.w	800cb10 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c602:	4b74      	ldr	r3, [pc, #464]	; (800c7d4 <tcp_receive+0x968>)
 800c604:	891c      	ldrh	r4, [r3, #8]
 800c606:	4b73      	ldr	r3, [pc, #460]	; (800c7d4 <tcp_receive+0x968>)
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	899b      	ldrh	r3, [r3, #12]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fb fcdc 	bl	8007fcc <lwip_htons>
 800c614:	4603      	mov	r3, r0
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <tcp_receive+0x7b6>
 800c61e:	2301      	movs	r3, #1
 800c620:	e000      	b.n	800c624 <tcp_receive+0x7b8>
 800c622:	2300      	movs	r3, #0
 800c624:	4423      	add	r3, r4
 800c626:	b29a      	uxth	r2, r3
 800c628:	4b6b      	ldr	r3, [pc, #428]	; (800c7d8 <tcp_receive+0x96c>)
 800c62a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c630:	4b69      	ldr	r3, [pc, #420]	; (800c7d8 <tcp_receive+0x96c>)
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d26e      	bcs.n	800c716 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c638:	4b66      	ldr	r3, [pc, #408]	; (800c7d4 <tcp_receive+0x968>)
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	899b      	ldrh	r3, [r3, #12]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	4618      	mov	r0, r3
 800c642:	f7fb fcc3 	bl	8007fcc <lwip_htons>
 800c646:	4603      	mov	r3, r0
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d01b      	beq.n	800c688 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c650:	4b60      	ldr	r3, [pc, #384]	; (800c7d4 <tcp_receive+0x968>)
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	899b      	ldrh	r3, [r3, #12]
 800c656:	b29b      	uxth	r3, r3
 800c658:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c65c:	b29c      	uxth	r4, r3
 800c65e:	4b5d      	ldr	r3, [pc, #372]	; (800c7d4 <tcp_receive+0x968>)
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	899b      	ldrh	r3, [r3, #12]
 800c664:	b29b      	uxth	r3, r3
 800c666:	4618      	mov	r0, r3
 800c668:	f7fb fcb0 	bl	8007fcc <lwip_htons>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c672:	b29b      	uxth	r3, r3
 800c674:	4618      	mov	r0, r3
 800c676:	f7fb fca9 	bl	8007fcc <lwip_htons>
 800c67a:	4603      	mov	r3, r0
 800c67c:	461a      	mov	r2, r3
 800c67e:	4b55      	ldr	r3, [pc, #340]	; (800c7d4 <tcp_receive+0x968>)
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	4322      	orrs	r2, r4
 800c684:	b292      	uxth	r2, r2
 800c686:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c68c:	4b51      	ldr	r3, [pc, #324]	; (800c7d4 <tcp_receive+0x968>)
 800c68e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c690:	4b50      	ldr	r3, [pc, #320]	; (800c7d4 <tcp_receive+0x968>)
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	899b      	ldrh	r3, [r3, #12]
 800c696:	b29b      	uxth	r3, r3
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fb fc97 	bl	8007fcc <lwip_htons>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d005      	beq.n	800c6b4 <tcp_receive+0x848>
            inseg.len -= 1;
 800c6a8:	4b4a      	ldr	r3, [pc, #296]	; (800c7d4 <tcp_receive+0x968>)
 800c6aa:	891b      	ldrh	r3, [r3, #8]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	4b48      	ldr	r3, [pc, #288]	; (800c7d4 <tcp_receive+0x968>)
 800c6b2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c6b4:	4b47      	ldr	r3, [pc, #284]	; (800c7d4 <tcp_receive+0x968>)
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	4b46      	ldr	r3, [pc, #280]	; (800c7d4 <tcp_receive+0x968>)
 800c6ba:	891b      	ldrh	r3, [r3, #8]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4610      	mov	r0, r2
 800c6c0:	f7fc fcb8 	bl	8009034 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c6c4:	4b43      	ldr	r3, [pc, #268]	; (800c7d4 <tcp_receive+0x968>)
 800c6c6:	891c      	ldrh	r4, [r3, #8]
 800c6c8:	4b42      	ldr	r3, [pc, #264]	; (800c7d4 <tcp_receive+0x968>)
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	899b      	ldrh	r3, [r3, #12]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fb fc7b 	bl	8007fcc <lwip_htons>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f003 0303 	and.w	r3, r3, #3
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <tcp_receive+0x878>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e000      	b.n	800c6e6 <tcp_receive+0x87a>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	4423      	add	r3, r4
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	4b3b      	ldr	r3, [pc, #236]	; (800c7d8 <tcp_receive+0x96c>)
 800c6ec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c6ee:	4b3a      	ldr	r3, [pc, #232]	; (800c7d8 <tcp_receive+0x96c>)
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4b36      	ldr	r3, [pc, #216]	; (800c7d0 <tcp_receive+0x964>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	441a      	add	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c702:	440b      	add	r3, r1
 800c704:	429a      	cmp	r2, r3
 800c706:	d006      	beq.n	800c716 <tcp_receive+0x8aa>
 800c708:	4b34      	ldr	r3, [pc, #208]	; (800c7dc <tcp_receive+0x970>)
 800c70a:	f240 527f 	movw	r2, #1407	; 0x57f
 800c70e:	4934      	ldr	r1, [pc, #208]	; (800c7e0 <tcp_receive+0x974>)
 800c710:	4834      	ldr	r0, [pc, #208]	; (800c7e4 <tcp_receive+0x978>)
 800c712:	f005 fbc3 	bl	8011e9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 80e1 	beq.w	800c8e2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c720:	4b2c      	ldr	r3, [pc, #176]	; (800c7d4 <tcp_receive+0x968>)
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	899b      	ldrh	r3, [r3, #12]
 800c726:	b29b      	uxth	r3, r3
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fb fc4f 	bl	8007fcc <lwip_htons>
 800c72e:	4603      	mov	r3, r0
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d010      	beq.n	800c75a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c738:	e00a      	b.n	800c750 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800c74a:	68b8      	ldr	r0, [r7, #8]
 800c74c:	f7fd ff2d 	bl	800a5aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1f0      	bne.n	800c73a <tcp_receive+0x8ce>
 800c758:	e0c3      	b.n	800c8e2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c75e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c760:	e04f      	b.n	800c802 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	899b      	ldrh	r3, [r3, #12]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7fb fc2e 	bl	8007fcc <lwip_htons>
 800c770:	4603      	mov	r3, r0
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d03b      	beq.n	800c7f2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c77a:	4b16      	ldr	r3, [pc, #88]	; (800c7d4 <tcp_receive+0x968>)
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	899b      	ldrh	r3, [r3, #12]
 800c780:	b29b      	uxth	r3, r3
 800c782:	4618      	mov	r0, r3
 800c784:	f7fb fc22 	bl	8007fcc <lwip_htons>
 800c788:	4603      	mov	r3, r0
 800c78a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d12f      	bne.n	800c7f2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c792:	4b10      	ldr	r3, [pc, #64]	; (800c7d4 <tcp_receive+0x968>)
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	899b      	ldrh	r3, [r3, #12]
 800c798:	b29c      	uxth	r4, r3
 800c79a:	2001      	movs	r0, #1
 800c79c:	f7fb fc16 	bl	8007fcc <lwip_htons>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	4b0b      	ldr	r3, [pc, #44]	; (800c7d4 <tcp_receive+0x968>)
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	4322      	orrs	r2, r4
 800c7aa:	b292      	uxth	r2, r2
 800c7ac:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c7ae:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <tcp_receive+0x968>)
 800c7b0:	891c      	ldrh	r4, [r3, #8]
 800c7b2:	4b08      	ldr	r3, [pc, #32]	; (800c7d4 <tcp_receive+0x968>)
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	899b      	ldrh	r3, [r3, #12]
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fb fc06 	bl	8007fcc <lwip_htons>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	f003 0303 	and.w	r3, r3, #3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00e      	beq.n	800c7e8 <tcp_receive+0x97c>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e00d      	b.n	800c7ea <tcp_receive+0x97e>
 800c7ce:	bf00      	nop
 800c7d0:	240019c0 	.word	0x240019c0
 800c7d4:	240019a0 	.word	0x240019a0
 800c7d8:	240019ca 	.word	0x240019ca
 800c7dc:	08013970 	.word	0x08013970
 800c7e0:	08013c3c 	.word	0x08013c3c
 800c7e4:	080139b4 	.word	0x080139b4
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4423      	add	r3, r4
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	4b95      	ldr	r3, [pc, #596]	; (800ca44 <tcp_receive+0xbd8>)
 800c7f0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800c7fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7fe:	f7fd fed4 	bl	800a5aa <tcp_seg_free>
            while (next &&
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c808:	4b8e      	ldr	r3, [pc, #568]	; (800ca44 <tcp_receive+0xbd8>)
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	4b8e      	ldr	r3, [pc, #568]	; (800ca48 <tcp_receive+0xbdc>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	441a      	add	r2, r3
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c81c:	8909      	ldrh	r1, [r1, #8]
 800c81e:	440b      	add	r3, r1
 800c820:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c822:	2b00      	cmp	r3, #0
 800c824:	da9d      	bge.n	800c762 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d057      	beq.n	800c8dc <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800c82c:	4b85      	ldr	r3, [pc, #532]	; (800ca44 <tcp_receive+0xbd8>)
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	4b85      	ldr	r3, [pc, #532]	; (800ca48 <tcp_receive+0xbdc>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	441a      	add	r2, r3
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c840:	2b00      	cmp	r3, #0
 800c842:	dd4b      	ble.n	800c8dc <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	4b7e      	ldr	r3, [pc, #504]	; (800ca48 <tcp_receive+0xbdc>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	b29b      	uxth	r3, r3
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	b29a      	uxth	r2, r3
 800c856:	4b7d      	ldr	r3, [pc, #500]	; (800ca4c <tcp_receive+0xbe0>)
 800c858:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c85a:	4b7c      	ldr	r3, [pc, #496]	; (800ca4c <tcp_receive+0xbe0>)
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	899b      	ldrh	r3, [r3, #12]
 800c860:	b29b      	uxth	r3, r3
 800c862:	4618      	mov	r0, r3
 800c864:	f7fb fbb2 	bl	8007fcc <lwip_htons>
 800c868:	4603      	mov	r3, r0
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <tcp_receive+0xa12>
                inseg.len -= 1;
 800c872:	4b76      	ldr	r3, [pc, #472]	; (800ca4c <tcp_receive+0xbe0>)
 800c874:	891b      	ldrh	r3, [r3, #8]
 800c876:	3b01      	subs	r3, #1
 800c878:	b29a      	uxth	r2, r3
 800c87a:	4b74      	ldr	r3, [pc, #464]	; (800ca4c <tcp_receive+0xbe0>)
 800c87c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c87e:	4b73      	ldr	r3, [pc, #460]	; (800ca4c <tcp_receive+0xbe0>)
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	4b72      	ldr	r3, [pc, #456]	; (800ca4c <tcp_receive+0xbe0>)
 800c884:	891b      	ldrh	r3, [r3, #8]
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fc fbd3 	bl	8009034 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c88e:	4b6f      	ldr	r3, [pc, #444]	; (800ca4c <tcp_receive+0xbe0>)
 800c890:	891c      	ldrh	r4, [r3, #8]
 800c892:	4b6e      	ldr	r3, [pc, #440]	; (800ca4c <tcp_receive+0xbe0>)
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	899b      	ldrh	r3, [r3, #12]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fb fb96 	bl	8007fcc <lwip_htons>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	f003 0303 	and.w	r3, r3, #3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <tcp_receive+0xa42>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <tcp_receive+0xa44>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4423      	add	r3, r4
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	4b63      	ldr	r3, [pc, #396]	; (800ca44 <tcp_receive+0xbd8>)
 800c8b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c8b8:	4b62      	ldr	r3, [pc, #392]	; (800ca44 <tcp_receive+0xbd8>)
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	4b62      	ldr	r3, [pc, #392]	; (800ca48 <tcp_receive+0xbdc>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	441a      	add	r2, r3
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d006      	beq.n	800c8dc <tcp_receive+0xa70>
 800c8ce:	4b60      	ldr	r3, [pc, #384]	; (800ca50 <tcp_receive+0xbe4>)
 800c8d0:	f240 52af 	movw	r2, #1455	; 0x5af
 800c8d4:	495f      	ldr	r1, [pc, #380]	; (800ca54 <tcp_receive+0xbe8>)
 800c8d6:	4860      	ldr	r0, [pc, #384]	; (800ca58 <tcp_receive+0xbec>)
 800c8d8:	f005 fae0 	bl	8011e9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8e0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c8e2:	4b58      	ldr	r3, [pc, #352]	; (800ca44 <tcp_receive+0xbd8>)
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4b57      	ldr	r3, [pc, #348]	; (800ca48 <tcp_receive+0xbdc>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	441a      	add	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8f6:	4b53      	ldr	r3, [pc, #332]	; (800ca44 <tcp_receive+0xbd8>)
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d206      	bcs.n	800c90c <tcp_receive+0xaa0>
 800c8fe:	4b54      	ldr	r3, [pc, #336]	; (800ca50 <tcp_receive+0xbe4>)
 800c900:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c904:	4955      	ldr	r1, [pc, #340]	; (800ca5c <tcp_receive+0xbf0>)
 800c906:	4854      	ldr	r0, [pc, #336]	; (800ca58 <tcp_receive+0xbec>)
 800c908:	f005 fac8 	bl	8011e9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c910:	4b4c      	ldr	r3, [pc, #304]	; (800ca44 <tcp_receive+0xbd8>)
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	b29a      	uxth	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7fd f9fb 	bl	8009d18 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c922:	4b4a      	ldr	r3, [pc, #296]	; (800ca4c <tcp_receive+0xbe0>)
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	891b      	ldrh	r3, [r3, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d006      	beq.n	800c93a <tcp_receive+0xace>
          recv_data = inseg.p;
 800c92c:	4b47      	ldr	r3, [pc, #284]	; (800ca4c <tcp_receive+0xbe0>)
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	4a4b      	ldr	r2, [pc, #300]	; (800ca60 <tcp_receive+0xbf4>)
 800c932:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c934:	4b45      	ldr	r3, [pc, #276]	; (800ca4c <tcp_receive+0xbe0>)
 800c936:	2200      	movs	r2, #0
 800c938:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c93a:	4b44      	ldr	r3, [pc, #272]	; (800ca4c <tcp_receive+0xbe0>)
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	899b      	ldrh	r3, [r3, #12]
 800c940:	b29b      	uxth	r3, r3
 800c942:	4618      	mov	r0, r3
 800c944:	f7fb fb42 	bl	8007fcc <lwip_htons>
 800c948:	4603      	mov	r3, r0
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f000 80b4 	beq.w	800cabc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c954:	4b43      	ldr	r3, [pc, #268]	; (800ca64 <tcp_receive+0xbf8>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	f043 0320 	orr.w	r3, r3, #32
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	4b41      	ldr	r3, [pc, #260]	; (800ca64 <tcp_receive+0xbf8>)
 800c960:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c962:	e0ab      	b.n	800cabc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c968:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	4a35      	ldr	r2, [pc, #212]	; (800ca48 <tcp_receive+0xbdc>)
 800c974:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	891b      	ldrh	r3, [r3, #8]
 800c97a:	461c      	mov	r4, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	899b      	ldrh	r3, [r3, #12]
 800c982:	b29b      	uxth	r3, r3
 800c984:	4618      	mov	r0, r3
 800c986:	f7fb fb21 	bl	8007fcc <lwip_htons>
 800c98a:	4603      	mov	r3, r0
 800c98c:	f003 0303 	and.w	r3, r3, #3
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <tcp_receive+0xb2c>
 800c994:	2301      	movs	r3, #1
 800c996:	e000      	b.n	800c99a <tcp_receive+0xb2e>
 800c998:	2300      	movs	r3, #0
 800c99a:	191a      	adds	r2, r3, r4
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a0:	441a      	add	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9aa:	461c      	mov	r4, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	891b      	ldrh	r3, [r3, #8]
 800c9b0:	461d      	mov	r5, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	899b      	ldrh	r3, [r3, #12]
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fb fb06 	bl	8007fcc <lwip_htons>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f003 0303 	and.w	r3, r3, #3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <tcp_receive+0xb62>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e000      	b.n	800c9d0 <tcp_receive+0xb64>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	442b      	add	r3, r5
 800c9d2:	429c      	cmp	r4, r3
 800c9d4:	d206      	bcs.n	800c9e4 <tcp_receive+0xb78>
 800c9d6:	4b1e      	ldr	r3, [pc, #120]	; (800ca50 <tcp_receive+0xbe4>)
 800c9d8:	f240 52de 	movw	r2, #1502	; 0x5de
 800c9dc:	4922      	ldr	r1, [pc, #136]	; (800ca68 <tcp_receive+0xbfc>)
 800c9de:	481e      	ldr	r0, [pc, #120]	; (800ca58 <tcp_receive+0xbec>)
 800c9e0:	f005 fa5c 	bl	8011e9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	891b      	ldrh	r3, [r3, #8]
 800c9e8:	461c      	mov	r4, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	899b      	ldrh	r3, [r3, #12]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fb faea 	bl	8007fcc <lwip_htons>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	f003 0303 	and.w	r3, r3, #3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <tcp_receive+0xb9a>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e000      	b.n	800ca08 <tcp_receive+0xb9c>
 800ca06:	2300      	movs	r3, #0
 800ca08:	1919      	adds	r1, r3, r4
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca0e:	b28b      	uxth	r3, r1
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7fd f97d 	bl	8009d18 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	891b      	ldrh	r3, [r3, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d028      	beq.n	800ca7a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <tcp_receive+0xbf4>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d01d      	beq.n	800ca6c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800ca30:	4b0b      	ldr	r3, [pc, #44]	; (800ca60 <tcp_receive+0xbf4>)
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	4619      	mov	r1, r3
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	f7fc fd3c 	bl	80094b8 <pbuf_cat>
 800ca40:	e018      	b.n	800ca74 <tcp_receive+0xc08>
 800ca42:	bf00      	nop
 800ca44:	240019ca 	.word	0x240019ca
 800ca48:	240019c0 	.word	0x240019c0
 800ca4c:	240019a0 	.word	0x240019a0
 800ca50:	08013970 	.word	0x08013970
 800ca54:	08013c74 	.word	0x08013c74
 800ca58:	080139b4 	.word	0x080139b4
 800ca5c:	08013cb0 	.word	0x08013cb0
 800ca60:	240019d0 	.word	0x240019d0
 800ca64:	240019cd 	.word	0x240019cd
 800ca68:	08013cd0 	.word	0x08013cd0
            } else {
              recv_data = cseg->p;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	4a71      	ldr	r2, [pc, #452]	; (800cc38 <tcp_receive+0xdcc>)
 800ca72:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	899b      	ldrh	r3, [r3, #12]
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fb faa2 	bl	8007fcc <lwip_htons>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00d      	beq.n	800caae <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ca92:	4b6a      	ldr	r3, [pc, #424]	; (800cc3c <tcp_receive+0xdd0>)
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	f043 0320 	orr.w	r3, r3, #32
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	4b67      	ldr	r3, [pc, #412]	; (800cc3c <tcp_receive+0xdd0>)
 800ca9e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	7d1b      	ldrb	r3, [r3, #20]
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	d102      	bne.n	800caae <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2207      	movs	r2, #7
 800caac:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7fd fd77 	bl	800a5aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d008      	beq.n	800cad6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cad0:	429a      	cmp	r2, r3
 800cad2:	f43f af47 	beq.w	800c964 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7e9b      	ldrb	r3, [r3, #26]
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00e      	beq.n	800cb00 <tcp_receive+0xc94>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7e9b      	ldrb	r3, [r3, #26]
 800cae6:	f023 0301 	bic.w	r3, r3, #1
 800caea:	b2da      	uxtb	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	769a      	strb	r2, [r3, #26]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	7e9b      	ldrb	r3, [r3, #26]
 800caf4:	f043 0302 	orr.w	r3, r3, #2
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cafe:	e181      	b.n	800ce04 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7e9b      	ldrb	r3, [r3, #26]
 800cb04:	f043 0301 	orr.w	r3, r3, #1
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cb0e:	e179      	b.n	800ce04 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 fc93 	bl	800d43c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d106      	bne.n	800cb2c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cb1e:	4848      	ldr	r0, [pc, #288]	; (800cc40 <tcp_receive+0xdd4>)
 800cb20:	f7fd fd5b 	bl	800a5da <tcp_seg_copy>
 800cb24:	4602      	mov	r2, r0
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800cb2a:	e16b      	b.n	800ce04 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb36:	e150      	b.n	800cdda <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	4b41      	ldr	r3, [pc, #260]	; (800cc44 <tcp_receive+0xdd8>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d11d      	bne.n	800cb82 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cb46:	4b3e      	ldr	r3, [pc, #248]	; (800cc40 <tcp_receive+0xdd4>)
 800cb48:	891a      	ldrh	r2, [r3, #8]
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	891b      	ldrh	r3, [r3, #8]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	f240 8148 	bls.w	800cde4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800cb54:	483a      	ldr	r0, [pc, #232]	; (800cc40 <tcp_receive+0xdd4>)
 800cb56:	f7fd fd40 	bl	800a5da <tcp_seg_copy>
 800cb5a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 8142 	beq.w	800cde8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800cb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d003      	beq.n	800cb72 <tcp_receive+0xd06>
                    prev->next = cseg;
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	601a      	str	r2, [r3, #0]
 800cb70:	e002      	b.n	800cb78 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cb78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f7ff f900 	bl	800bd80 <tcp_oos_insert_segment>
                }
                break;
 800cb80:	e132      	b.n	800cde8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d117      	bne.n	800cbb8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cb88:	4b2e      	ldr	r3, [pc, #184]	; (800cc44 <tcp_receive+0xdd8>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	da57      	bge.n	800cc48 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800cb98:	4829      	ldr	r0, [pc, #164]	; (800cc40 <tcp_receive+0xdd4>)
 800cb9a:	f7fd fd1e 	bl	800a5da <tcp_seg_copy>
 800cb9e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 8122 	beq.w	800cdec <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800cbae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff f8e5 	bl	800bd80 <tcp_oos_insert_segment>
                  }
                  break;
 800cbb6:	e119      	b.n	800cdec <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800cbb8:	4b22      	ldr	r3, [pc, #136]	; (800cc44 <tcp_receive+0xdd8>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	db3e      	blt.n	800cc48 <tcp_receive+0xddc>
 800cbca:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <tcp_receive+0xdd8>)
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dc35      	bgt.n	800cc48 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800cbdc:	4818      	ldr	r0, [pc, #96]	; (800cc40 <tcp_receive+0xdd4>)
 800cbde:	f7fd fcfc 	bl	800a5da <tcp_seg_copy>
 800cbe2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 8102 	beq.w	800cdf0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf4:	8912      	ldrh	r2, [r2, #8]
 800cbf6:	441a      	add	r2, r3
 800cbf8:	4b12      	ldr	r3, [pc, #72]	; (800cc44 <tcp_receive+0xdd8>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	dd12      	ble.n	800cc28 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cc02:	4b10      	ldr	r3, [pc, #64]	; (800cc44 <tcp_receive+0xdd8>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1e:	891b      	ldrh	r3, [r3, #8]
 800cc20:	4619      	mov	r1, r3
 800cc22:	4610      	mov	r0, r2
 800cc24:	f7fc fa06 	bl	8009034 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cc2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff f8a5 	bl	800bd80 <tcp_oos_insert_segment>
                  }
                  break;
 800cc36:	e0db      	b.n	800cdf0 <tcp_receive+0xf84>
 800cc38:	240019d0 	.word	0x240019d0
 800cc3c:	240019cd 	.word	0x240019cd
 800cc40:	240019a0 	.word	0x240019a0
 800cc44:	240019c0 	.word	0x240019c0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f040 80bf 	bne.w	800cdd0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cc52:	4b7c      	ldr	r3, [pc, #496]	; (800ce44 <tcp_receive+0xfd8>)
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f340 80b6 	ble.w	800cdd0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	899b      	ldrh	r3, [r3, #12]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fb f9ad 	bl	8007fcc <lwip_htons>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f040 80bb 	bne.w	800cdf4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cc7e:	4872      	ldr	r0, [pc, #456]	; (800ce48 <tcp_receive+0xfdc>)
 800cc80:	f7fd fcab 	bl	800a5da <tcp_seg_copy>
 800cc84:	4602      	mov	r2, r0
 800cc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc88:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 80b2 	beq.w	800cdf8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc9c:	8912      	ldrh	r2, [r2, #8]
 800cc9e:	441a      	add	r2, r3
 800cca0:	4b68      	ldr	r3, [pc, #416]	; (800ce44 <tcp_receive+0xfd8>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	dd12      	ble.n	800ccd0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ccaa:	4b66      	ldr	r3, [pc, #408]	; (800ce44 <tcp_receive+0xfd8>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	891b      	ldrh	r3, [r3, #8]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4610      	mov	r0, r2
 800cccc:	f7fc f9b2 	bl	8009034 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ccd0:	4b5e      	ldr	r3, [pc, #376]	; (800ce4c <tcp_receive+0xfe0>)
 800ccd2:	881b      	ldrh	r3, [r3, #0]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	4b5b      	ldr	r3, [pc, #364]	; (800ce44 <tcp_receive+0xfd8>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	441a      	add	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce0:	6879      	ldr	r1, [r7, #4]
 800cce2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cce4:	440b      	add	r3, r1
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f340 8085 	ble.w	800cdf8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	899b      	ldrh	r3, [r3, #12]
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fb f967 	bl	8007fcc <lwip_htons>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d01e      	beq.n	800cd46 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	899b      	ldrh	r3, [r3, #12]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd16:	b29c      	uxth	r4, r3
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	899b      	ldrh	r3, [r3, #12]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fb f952 	bl	8007fcc <lwip_htons>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fb f94b 	bl	8007fcc <lwip_htons>
 800cd36:	4603      	mov	r3, r0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	4322      	orrs	r2, r4
 800cd42:	b292      	uxth	r2, r2
 800cd44:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd50:	4413      	add	r3, r2
 800cd52:	b299      	uxth	r1, r3
 800cd54:	4b3b      	ldr	r3, [pc, #236]	; (800ce44 <tcp_receive+0xfd8>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	1a8a      	subs	r2, r1, r2
 800cd60:	b292      	uxth	r2, r2
 800cd62:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	685a      	ldr	r2, [r3, #4]
 800cd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	891b      	ldrh	r3, [r3, #8]
 800cd70:	4619      	mov	r1, r3
 800cd72:	4610      	mov	r0, r2
 800cd74:	f7fc f95e 	bl	8009034 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	891c      	ldrh	r4, [r3, #8]
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	899b      	ldrh	r3, [r3, #12]
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fb f91f 	bl	8007fcc <lwip_htons>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f003 0303 	and.w	r3, r3, #3
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <tcp_receive+0xf30>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e000      	b.n	800cd9e <tcp_receive+0xf32>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4423      	add	r3, r4
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	4b2a      	ldr	r3, [pc, #168]	; (800ce4c <tcp_receive+0xfe0>)
 800cda4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cda6:	4b29      	ldr	r3, [pc, #164]	; (800ce4c <tcp_receive+0xfe0>)
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	4b25      	ldr	r3, [pc, #148]	; (800ce44 <tcp_receive+0xfd8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	441a      	add	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdba:	440b      	add	r3, r1
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d01b      	beq.n	800cdf8 <tcp_receive+0xf8c>
 800cdc0:	4b23      	ldr	r3, [pc, #140]	; (800ce50 <tcp_receive+0xfe4>)
 800cdc2:	f240 627b 	movw	r2, #1659	; 0x67b
 800cdc6:	4923      	ldr	r1, [pc, #140]	; (800ce54 <tcp_receive+0xfe8>)
 800cdc8:	4823      	ldr	r0, [pc, #140]	; (800ce58 <tcp_receive+0xfec>)
 800cdca:	f005 f867 	bl	8011e9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cdce:	e013      	b.n	800cdf8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f47f aeab 	bne.w	800cb38 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800cde2:	e00f      	b.n	800ce04 <tcp_receive+0xf98>
                break;
 800cde4:	bf00      	nop
 800cde6:	e00d      	b.n	800ce04 <tcp_receive+0xf98>
                break;
 800cde8:	bf00      	nop
 800cdea:	e00b      	b.n	800ce04 <tcp_receive+0xf98>
                  break;
 800cdec:	bf00      	nop
 800cdee:	e009      	b.n	800ce04 <tcp_receive+0xf98>
                  break;
 800cdf0:	bf00      	nop
 800cdf2:	e007      	b.n	800ce04 <tcp_receive+0xf98>
                  break;
 800cdf4:	bf00      	nop
 800cdf6:	e005      	b.n	800ce04 <tcp_receive+0xf98>
                break;
 800cdf8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800cdfa:	e003      	b.n	800ce04 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 fb1d 	bl	800d43c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ce02:	e01a      	b.n	800ce3a <tcp_receive+0xfce>
 800ce04:	e019      	b.n	800ce3a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <tcp_receive+0xfd8>)
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	db0a      	blt.n	800ce2a <tcp_receive+0xfbe>
 800ce14:	4b0b      	ldr	r3, [pc, #44]	; (800ce44 <tcp_receive+0xfd8>)
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce20:	440b      	add	r3, r1
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	3301      	adds	r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	dd07      	ble.n	800ce3a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7e9b      	ldrb	r3, [r3, #26]
 800ce2e:	f043 0302 	orr.w	r3, r3, #2
 800ce32:	b2da      	uxtb	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800ce38:	e7ff      	b.n	800ce3a <tcp_receive+0xfce>
 800ce3a:	bf00      	nop
 800ce3c:	3734      	adds	r7, #52	; 0x34
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce42:	bf00      	nop
 800ce44:	240019c0 	.word	0x240019c0
 800ce48:	240019a0 	.word	0x240019a0
 800ce4c:	240019ca 	.word	0x240019ca
 800ce50:	08013970 	.word	0x08013970
 800ce54:	08013c3c 	.word	0x08013c3c
 800ce58:	080139b4 	.word	0x080139b4

0800ce5c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ce62:	4b18      	ldr	r3, [pc, #96]	; (800cec4 <tcp_getoptbyte+0x68>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d005      	beq.n	800ce76 <tcp_getoptbyte+0x1a>
 800ce6a:	4b17      	ldr	r3, [pc, #92]	; (800cec8 <tcp_getoptbyte+0x6c>)
 800ce6c:	881a      	ldrh	r2, [r3, #0]
 800ce6e:	4b17      	ldr	r3, [pc, #92]	; (800cecc <tcp_getoptbyte+0x70>)
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d20e      	bcs.n	800ce94 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ce76:	4b16      	ldr	r3, [pc, #88]	; (800ced0 <tcp_getoptbyte+0x74>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3314      	adds	r3, #20
 800ce7c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800ce7e:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <tcp_getoptbyte+0x6c>)
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	b291      	uxth	r1, r2
 800ce86:	4a10      	ldr	r2, [pc, #64]	; (800cec8 <tcp_getoptbyte+0x6c>)
 800ce88:	8011      	strh	r1, [r2, #0]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	4413      	add	r3, r2
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	e010      	b.n	800ceb6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ce94:	4b0c      	ldr	r3, [pc, #48]	; (800cec8 <tcp_getoptbyte+0x6c>)
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	b291      	uxth	r1, r2
 800ce9c:	4a0a      	ldr	r2, [pc, #40]	; (800cec8 <tcp_getoptbyte+0x6c>)
 800ce9e:	8011      	strh	r1, [r2, #0]
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <tcp_getoptbyte+0x70>)
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800ceac:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <tcp_getoptbyte+0x68>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	240019b8 	.word	0x240019b8
 800cec8:	240019bc 	.word	0x240019bc
 800cecc:	240019b6 	.word	0x240019b6
 800ced0:	240019b0 	.word	0x240019b0

0800ced4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cedc:	4b2d      	ldr	r3, [pc, #180]	; (800cf94 <tcp_parseopt+0xc0>)
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d053      	beq.n	800cf8c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cee4:	4b2c      	ldr	r3, [pc, #176]	; (800cf98 <tcp_parseopt+0xc4>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	801a      	strh	r2, [r3, #0]
 800ceea:	e043      	b.n	800cf74 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800ceec:	f7ff ffb6 	bl	800ce5c <tcp_getoptbyte>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d03c      	beq.n	800cf74 <tcp_parseopt+0xa0>
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d002      	beq.n	800cf04 <tcp_parseopt+0x30>
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d03f      	beq.n	800cf82 <tcp_parseopt+0xae>
 800cf02:	e026      	b.n	800cf52 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cf04:	f7ff ffaa 	bl	800ce5c <tcp_getoptbyte>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b04      	cmp	r3, #4
 800cf0c:	d13b      	bne.n	800cf86 <tcp_parseopt+0xb2>
 800cf0e:	4b22      	ldr	r3, [pc, #136]	; (800cf98 <tcp_parseopt+0xc4>)
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	3302      	adds	r3, #2
 800cf14:	4a1f      	ldr	r2, [pc, #124]	; (800cf94 <tcp_parseopt+0xc0>)
 800cf16:	8812      	ldrh	r2, [r2, #0]
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	dc34      	bgt.n	800cf86 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800cf1c:	f7ff ff9e 	bl	800ce5c <tcp_getoptbyte>
 800cf20:	4603      	mov	r3, r0
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	021b      	lsls	r3, r3, #8
 800cf26:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800cf28:	f7ff ff98 	bl	800ce5c <tcp_getoptbyte>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	89bb      	ldrh	r3, [r7, #12]
 800cf32:	4313      	orrs	r3, r2
 800cf34:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cf36:	89bb      	ldrh	r3, [r7, #12]
 800cf38:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cf3c:	d804      	bhi.n	800cf48 <tcp_parseopt+0x74>
 800cf3e:	89bb      	ldrh	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <tcp_parseopt+0x74>
 800cf44:	89ba      	ldrh	r2, [r7, #12]
 800cf46:	e001      	b.n	800cf4c <tcp_parseopt+0x78>
 800cf48:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800cf50:	e010      	b.n	800cf74 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800cf52:	f7ff ff83 	bl	800ce5c <tcp_getoptbyte>
 800cf56:	4603      	mov	r3, r0
 800cf58:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800cf5a:	7afb      	ldrb	r3, [r7, #11]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d914      	bls.n	800cf8a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800cf60:	7afb      	ldrb	r3, [r7, #11]
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <tcp_parseopt+0xc4>)
 800cf66:	881b      	ldrh	r3, [r3, #0]
 800cf68:	4413      	add	r3, r2
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	3b02      	subs	r3, #2
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <tcp_parseopt+0xc4>)
 800cf72:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cf74:	4b08      	ldr	r3, [pc, #32]	; (800cf98 <tcp_parseopt+0xc4>)
 800cf76:	881a      	ldrh	r2, [r3, #0]
 800cf78:	4b06      	ldr	r3, [pc, #24]	; (800cf94 <tcp_parseopt+0xc0>)
 800cf7a:	881b      	ldrh	r3, [r3, #0]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d3b5      	bcc.n	800ceec <tcp_parseopt+0x18>
 800cf80:	e004      	b.n	800cf8c <tcp_parseopt+0xb8>
        return;
 800cf82:	bf00      	nop
 800cf84:	e002      	b.n	800cf8c <tcp_parseopt+0xb8>
          return;
 800cf86:	bf00      	nop
 800cf88:	e000      	b.n	800cf8c <tcp_parseopt+0xb8>
          return;
 800cf8a:	bf00      	nop
      }
    }
  }
}
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	240019b4 	.word	0x240019b4
 800cf98:	240019bc 	.word	0x240019bc

0800cf9c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cfa0:	4b05      	ldr	r3, [pc, #20]	; (800cfb8 <tcp_trigger_input_pcb_close+0x1c>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	f043 0310 	orr.w	r3, r3, #16
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	4b03      	ldr	r3, [pc, #12]	; (800cfb8 <tcp_trigger_input_pcb_close+0x1c>)
 800cfac:	701a      	strb	r2, [r3, #0]
}
 800cfae:	bf00      	nop
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	240019cd 	.word	0x240019cd

0800cfbc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b086      	sub	sp, #24
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	607b      	str	r3, [r7, #4]
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	817b      	strh	r3, [r7, #10]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cfce:	897a      	ldrh	r2, [r7, #10]
 800cfd0:	893b      	ldrh	r3, [r7, #8]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	3314      	adds	r3, #20
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	2200      	movs	r2, #0
 800cfdc:	4619      	mov	r1, r3
 800cfde:	2001      	movs	r0, #1
 800cfe0:	f7fb fe2a 	bl	8008c38 <pbuf_alloc>
 800cfe4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d057      	beq.n	800d09c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	895b      	ldrh	r3, [r3, #10]
 800cff0:	461a      	mov	r2, r3
 800cff2:	897b      	ldrh	r3, [r7, #10]
 800cff4:	3314      	adds	r3, #20
 800cff6:	429a      	cmp	r2, r3
 800cff8:	da05      	bge.n	800d006 <tcp_output_alloc_header+0x4a>
 800cffa:	4b2b      	ldr	r3, [pc, #172]	; (800d0a8 <tcp_output_alloc_header+0xec>)
 800cffc:	2273      	movs	r2, #115	; 0x73
 800cffe:	492b      	ldr	r1, [pc, #172]	; (800d0ac <tcp_output_alloc_header+0xf0>)
 800d000:	482b      	ldr	r0, [pc, #172]	; (800d0b0 <tcp_output_alloc_header+0xf4>)
 800d002:	f004 ff4b 	bl	8011e9c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	8adb      	ldrh	r3, [r3, #22]
 800d010:	4618      	mov	r0, r3
 800d012:	f7fa ffdb 	bl	8007fcc <lwip_htons>
 800d016:	4603      	mov	r3, r0
 800d018:	461a      	mov	r2, r3
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	8b1b      	ldrh	r3, [r3, #24]
 800d022:	4618      	mov	r0, r3
 800d024:	f7fa ffd2 	bl	8007fcc <lwip_htons>
 800d028:	4603      	mov	r3, r0
 800d02a:	461a      	mov	r2, r3
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fa ffd4 	bl	8007fe8 <lwip_htonl>
 800d040:	4602      	mov	r2, r0
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800d046:	897b      	ldrh	r3, [r7, #10]
 800d048:	089b      	lsrs	r3, r3, #2
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	3305      	adds	r3, #5
 800d04e:	b29b      	uxth	r3, r3
 800d050:	031b      	lsls	r3, r3, #12
 800d052:	b29b      	uxth	r3, r3
 800d054:	f043 0310 	orr.w	r3, r3, #16
 800d058:	b29b      	uxth	r3, r3
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fa ffb6 	bl	8007fcc <lwip_htons>
 800d060:	4603      	mov	r3, r0
 800d062:	461a      	mov	r2, r3
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7fa ffad 	bl	8007fcc <lwip_htons>
 800d072:	4603      	mov	r3, r0
 800d074:	461a      	mov	r2, r3
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	2200      	movs	r2, #0
 800d07e:	741a      	strb	r2, [r3, #16]
 800d080:	2200      	movs	r2, #0
 800d082:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	2200      	movs	r2, #0
 800d088:	749a      	strb	r2, [r3, #18]
 800d08a:	2200      	movs	r2, #0
 800d08c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d096:	441a      	add	r2, r3
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d09c:	697b      	ldr	r3, [r7, #20]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3718      	adds	r7, #24
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	08013cf8 	.word	0x08013cf8
 800d0ac:	08013d2c 	.word	0x08013d2c
 800d0b0:	08013d5c 	.word	0x08013d5c

0800d0b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d0b4:	b590      	push	{r4, r7, lr}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d02d      	beq.n	800d120 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0c8:	60fb      	str	r3, [r7, #12]
 800d0ca:	e002      	b.n	800d0d2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1f8      	bne.n	800d0cc <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	899b      	ldrh	r3, [r3, #12]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fa ff72 	bl	8007fcc <lwip_htons>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	f003 0307 	and.w	r3, r3, #7
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d116      	bne.n	800d120 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	899b      	ldrh	r3, [r3, #12]
 800d0f8:	b29c      	uxth	r4, r3
 800d0fa:	2001      	movs	r0, #1
 800d0fc:	f7fa ff66 	bl	8007fcc <lwip_htons>
 800d100:	4603      	mov	r3, r0
 800d102:	461a      	mov	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	4322      	orrs	r2, r4
 800d10a:	b292      	uxth	r2, r2
 800d10c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7e9b      	ldrb	r3, [r3, #26]
 800d112:	f043 0320 	orr.w	r3, r3, #32
 800d116:	b2da      	uxtb	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	e004      	b.n	800d12a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d120:	2101      	movs	r1, #1
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f88e 	bl	800d244 <tcp_enqueue_flags>
 800d128:	4603      	mov	r3, r0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd90      	pop	{r4, r7, pc}
	...

0800d134 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	b087      	sub	sp, #28
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	603b      	str	r3, [r7, #0]
 800d140:	4613      	mov	r3, r2
 800d142:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	f003 0304 	and.w	r3, r3, #4
 800d150:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d152:	2003      	movs	r0, #3
 800d154:	f7fb fb0a 	bl	800876c <memp_malloc>
 800d158:	6138      	str	r0, [r7, #16]
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d104      	bne.n	800d16a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d160:	68b8      	ldr	r0, [r7, #8]
 800d162:	f7fc f8db 	bl	800931c <pbuf_free>
    return NULL;
 800d166:	2300      	movs	r3, #0
 800d168:	e061      	b.n	800d22e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d170:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	2200      	movs	r2, #0
 800d176:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	891a      	ldrh	r2, [r3, #8]
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	b29b      	uxth	r3, r3
 800d186:	429a      	cmp	r2, r3
 800d188:	d205      	bcs.n	800d196 <tcp_create_segment+0x62>
 800d18a:	4b2b      	ldr	r3, [pc, #172]	; (800d238 <tcp_create_segment+0x104>)
 800d18c:	22ba      	movs	r2, #186	; 0xba
 800d18e:	492b      	ldr	r1, [pc, #172]	; (800d23c <tcp_create_segment+0x108>)
 800d190:	482b      	ldr	r0, [pc, #172]	; (800d240 <tcp_create_segment+0x10c>)
 800d192:	f004 fe83 	bl	8011e9c <iprintf>
  seg->len = p->tot_len - optlen;
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	891a      	ldrh	r2, [r3, #8]
 800d19a:	7dfb      	ldrb	r3, [r7, #23]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800d1a6:	2114      	movs	r1, #20
 800d1a8:	68b8      	ldr	r0, [r7, #8]
 800d1aa:	f7fc f893 	bl	80092d4 <pbuf_header>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d004      	beq.n	800d1be <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d1b4:	6938      	ldr	r0, [r7, #16]
 800d1b6:	f7fd f9f8 	bl	800a5aa <tcp_seg_free>
    return NULL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	e037      	b.n	800d22e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	8ada      	ldrh	r2, [r3, #22]
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	68dc      	ldr	r4, [r3, #12]
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	f7fa fefb 	bl	8007fcc <lwip_htons>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	8b1a      	ldrh	r2, [r3, #24]
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	68dc      	ldr	r4, [r3, #12]
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	f7fa fef2 	bl	8007fcc <lwip_htons>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	68dc      	ldr	r4, [r3, #12]
 800d1f0:	6838      	ldr	r0, [r7, #0]
 800d1f2:	f7fa fef9 	bl	8007fe8 <lwip_htonl>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	089b      	lsrs	r3, r3, #2
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	b29b      	uxth	r3, r3
 800d202:	3305      	adds	r3, #5
 800d204:	b29b      	uxth	r3, r3
 800d206:	031b      	lsls	r3, r3, #12
 800d208:	b29a      	uxth	r2, r3
 800d20a:	79fb      	ldrb	r3, [r7, #7]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	4313      	orrs	r3, r2
 800d210:	b29a      	uxth	r2, r3
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	68dc      	ldr	r4, [r3, #12]
 800d216:	4610      	mov	r0, r2
 800d218:	f7fa fed8 	bl	8007fcc <lwip_htons>
 800d21c:	4603      	mov	r3, r0
 800d21e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	749a      	strb	r2, [r3, #18]
 800d228:	2200      	movs	r2, #0
 800d22a:	74da      	strb	r2, [r3, #19]
  return seg;
 800d22c:	693b      	ldr	r3, [r7, #16]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	371c      	adds	r7, #28
 800d232:	46bd      	mov	sp, r7
 800d234:	bd90      	pop	{r4, r7, pc}
 800d236:	bf00      	nop
 800d238:	08013cf8 	.word	0x08013cf8
 800d23c:	08013d84 	.word	0x08013d84
 800d240:	08013d5c 	.word	0x08013d5c

0800d244 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08a      	sub	sp, #40	; 0x28
 800d248:	af02      	add	r7, sp, #8
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d254:	2300      	movs	r3, #0
 800d256:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d258:	78fb      	ldrb	r3, [r7, #3]
 800d25a:	f003 0303 	and.w	r3, r3, #3
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <tcp_enqueue_flags+0x2c>
 800d262:	4b6f      	ldr	r3, [pc, #444]	; (800d420 <tcp_enqueue_flags+0x1dc>)
 800d264:	f240 321b 	movw	r2, #795	; 0x31b
 800d268:	496e      	ldr	r1, [pc, #440]	; (800d424 <tcp_enqueue_flags+0x1e0>)
 800d26a:	486f      	ldr	r0, [pc, #444]	; (800d428 <tcp_enqueue_flags+0x1e4>)
 800d26c:	f004 fe16 	bl	8011e9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d276:	2b08      	cmp	r3, #8
 800d278:	d806      	bhi.n	800d288 <tcp_enqueue_flags+0x44>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d280:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d284:	4293      	cmp	r3, r2
 800d286:	d90e      	bls.n	800d2a6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800d288:	78fb      	ldrb	r3, [r7, #3]
 800d28a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d109      	bne.n	800d2a6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	7e9b      	ldrb	r3, [r3, #26]
 800d296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d29a:	b2da      	uxtb	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2a4:	e0b7      	b.n	800d416 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800d2a6:	78fb      	ldrb	r3, [r7, #3]
 800d2a8:	f003 0302 	and.w	r3, r3, #2
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d2b4:	7ffb      	ldrb	r3, [r7, #31]
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	f003 0304 	and.w	r3, r3, #4
 800d2be:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d2c0:	7dfb      	ldrb	r3, [r7, #23]
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	f7fb fcb5 	bl	8008c38 <pbuf_alloc>
 800d2ce:	6138      	str	r0, [r7, #16]
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d109      	bne.n	800d2ea <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7e9b      	ldrb	r3, [r3, #26]
 800d2da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d2e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2e8:	e095      	b.n	800d416 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	895a      	ldrh	r2, [r3, #10]
 800d2ee:	7dfb      	ldrb	r3, [r7, #23]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d206      	bcs.n	800d304 <tcp_enqueue_flags+0xc0>
 800d2f6:	4b4a      	ldr	r3, [pc, #296]	; (800d420 <tcp_enqueue_flags+0x1dc>)
 800d2f8:	f240 3241 	movw	r2, #833	; 0x341
 800d2fc:	494b      	ldr	r1, [pc, #300]	; (800d42c <tcp_enqueue_flags+0x1e8>)
 800d2fe:	484a      	ldr	r0, [pc, #296]	; (800d428 <tcp_enqueue_flags+0x1e4>)
 800d300:	f004 fdcc 	bl	8011e9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800d308:	78fa      	ldrb	r2, [r7, #3]
 800d30a:	7ffb      	ldrb	r3, [r7, #31]
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	460b      	mov	r3, r1
 800d310:	6939      	ldr	r1, [r7, #16]
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff ff0e 	bl	800d134 <tcp_create_segment>
 800d318:	60f8      	str	r0, [r7, #12]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d109      	bne.n	800d334 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	7e9b      	ldrb	r3, [r3, #26]
 800d324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d32e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d332:	e070      	b.n	800d416 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	f003 0303 	and.w	r3, r3, #3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <tcp_enqueue_flags+0x10a>
 800d340:	4b37      	ldr	r3, [pc, #220]	; (800d420 <tcp_enqueue_flags+0x1dc>)
 800d342:	f240 3249 	movw	r2, #841	; 0x349
 800d346:	493a      	ldr	r1, [pc, #232]	; (800d430 <tcp_enqueue_flags+0x1ec>)
 800d348:	4837      	ldr	r0, [pc, #220]	; (800d428 <tcp_enqueue_flags+0x1e4>)
 800d34a:	f004 fda7 	bl	8011e9c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	891b      	ldrh	r3, [r3, #8]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d006      	beq.n	800d364 <tcp_enqueue_flags+0x120>
 800d356:	4b32      	ldr	r3, [pc, #200]	; (800d420 <tcp_enqueue_flags+0x1dc>)
 800d358:	f240 324a 	movw	r2, #842	; 0x34a
 800d35c:	4935      	ldr	r1, [pc, #212]	; (800d434 <tcp_enqueue_flags+0x1f0>)
 800d35e:	4832      	ldr	r0, [pc, #200]	; (800d428 <tcp_enqueue_flags+0x1e4>)
 800d360:	f004 fd9c 	bl	8011e9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d103      	bne.n	800d374 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	669a      	str	r2, [r3, #104]	; 0x68
 800d372:	e00d      	b.n	800d390 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d378:	61bb      	str	r3, [r7, #24]
 800d37a:	e002      	b.n	800d382 <tcp_enqueue_flags+0x13e>
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	61bb      	str	r3, [r7, #24]
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1f8      	bne.n	800d37c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d398:	78fb      	ldrb	r3, [r7, #3]
 800d39a:	f003 0302 	and.w	r3, r3, #2
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d104      	bne.n	800d3ac <tcp_enqueue_flags+0x168>
 800d3a2:	78fb      	ldrb	r3, [r7, #3]
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d004      	beq.n	800d3b6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d3b6:	78fb      	ldrb	r3, [r7, #3]
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d006      	beq.n	800d3ce <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	7e9b      	ldrb	r3, [r3, #26]
 800d3c4:	f043 0320 	orr.w	r3, r3, #32
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fc f836 	bl	8009444 <pbuf_clen>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	461a      	mov	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3e2:	4413      	add	r3, r2
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00e      	beq.n	800d414 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10a      	bne.n	800d414 <tcp_enqueue_flags+0x1d0>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d402:	2b00      	cmp	r3, #0
 800d404:	d106      	bne.n	800d414 <tcp_enqueue_flags+0x1d0>
 800d406:	4b06      	ldr	r3, [pc, #24]	; (800d420 <tcp_enqueue_flags+0x1dc>)
 800d408:	f240 326d 	movw	r2, #877	; 0x36d
 800d40c:	490a      	ldr	r1, [pc, #40]	; (800d438 <tcp_enqueue_flags+0x1f4>)
 800d40e:	4806      	ldr	r0, [pc, #24]	; (800d428 <tcp_enqueue_flags+0x1e4>)
 800d410:	f004 fd44 	bl	8011e9c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3720      	adds	r7, #32
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	08013cf8 	.word	0x08013cf8
 800d424:	08013ffc 	.word	0x08013ffc
 800d428:	08013d5c 	.word	0x08013d5c
 800d42c:	08014054 	.word	0x08014054
 800d430:	08014090 	.word	0x08014090
 800d434:	080140a8 	.word	0x080140a8
 800d438:	080140d4 	.word	0x080140d4

0800d43c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d43c:	b590      	push	{r4, r7, lr}
 800d43e:	b08b      	sub	sp, #44	; 0x2c
 800d440:	af04      	add	r7, sp, #16
 800d442:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d448:	7dbb      	ldrb	r3, [r7, #22]
 800d44a:	b29c      	uxth	r4, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d450:	4618      	mov	r0, r3
 800d452:	f7fa fdc9 	bl	8007fe8 <lwip_htonl>
 800d456:	4603      	mov	r3, r0
 800d458:	2200      	movs	r2, #0
 800d45a:	4621      	mov	r1, r4
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff fdad 	bl	800cfbc <tcp_output_alloc_header>
 800d462:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d109      	bne.n	800d47e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	7e9b      	ldrb	r3, [r3, #26]
 800d46e:	f043 0303 	orr.w	r3, r3, #3
 800d472:	b2da      	uxtb	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d478:	f06f 0301 	mvn.w	r3, #1
 800d47c:	e036      	b.n	800d4ec <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	3304      	adds	r3, #4
 800d482:	4618      	mov	r0, r3
 800d484:	f002 f98c 	bl	800f7a0 <ip4_route>
 800d488:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800d490:	23fc      	movs	r3, #252	; 0xfc
 800d492:	75fb      	strb	r3, [r7, #23]
 800d494:	e012      	b.n	800d4bc <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	1d18      	adds	r0, r3, #4
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	7a9c      	ldrb	r4, [r3, #10]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7a5b      	ldrb	r3, [r3, #9]
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	9202      	str	r2, [sp, #8]
 800d4a8:	2206      	movs	r2, #6
 800d4aa:	9201      	str	r2, [sp, #4]
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	4623      	mov	r3, r4
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	6938      	ldr	r0, [r7, #16]
 800d4b4:	f002 fb1c 	bl	800faf0 <ip4_output_if>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d4bc:	6938      	ldr	r0, [r7, #16]
 800d4be:	f7fb ff2d 	bl	800931c <pbuf_free>

  if (err != ERR_OK) {
 800d4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d007      	beq.n	800d4da <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7e9b      	ldrb	r3, [r3, #26]
 800d4ce:	f043 0303 	orr.w	r3, r3, #3
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	769a      	strb	r2, [r3, #26]
 800d4d8:	e006      	b.n	800d4e8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7e9b      	ldrb	r3, [r3, #26]
 800d4de:	f023 0303 	bic.w	r3, r3, #3
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800d4e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	371c      	adds	r7, #28
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd90      	pop	{r4, r7, pc}

0800d4f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d4f4:	b5b0      	push	{r4, r5, r7, lr}
 800d4f6:	b08a      	sub	sp, #40	; 0x28
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7d1b      	ldrb	r3, [r3, #20]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d106      	bne.n	800d512 <tcp_output+0x1e>
 800d504:	4b9b      	ldr	r3, [pc, #620]	; (800d774 <tcp_output+0x280>)
 800d506:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800d50a:	499b      	ldr	r1, [pc, #620]	; (800d778 <tcp_output+0x284>)
 800d50c:	489b      	ldr	r0, [pc, #620]	; (800d77c <tcp_output+0x288>)
 800d50e:	f004 fcc5 	bl	8011e9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d512:	4b9b      	ldr	r3, [pc, #620]	; (800d780 <tcp_output+0x28c>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d101      	bne.n	800d520 <tcp_output+0x2c>
    return ERR_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	e1cf      	b.n	800d8c0 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d203      	bcs.n	800d538 <tcp_output+0x44>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d536:	e002      	b.n	800d53e <tcp_output+0x4a>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d53e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d544:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	7e9b      	ldrb	r3, [r3, #26]
 800d54a:	f003 0302 	and.w	r3, r3, #2
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d017      	beq.n	800d582 <tcp_output+0x8e>
 800d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00f      	beq.n	800d578 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fa fd42 	bl	8007fe8 <lwip_htonl>
 800d564:	4602      	mov	r2, r0
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d56e:	8912      	ldrh	r2, [r2, #8]
 800d570:	4413      	add	r3, r2
     (seg == NULL ||
 800d572:	69ba      	ldr	r2, [r7, #24]
 800d574:	429a      	cmp	r2, r3
 800d576:	d204      	bcs.n	800d582 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7ff ff5f 	bl	800d43c <tcp_send_empty_ack>
 800d57e:	4603      	mov	r3, r0
 800d580:	e19e      	b.n	800d8c0 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d586:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d007      	beq.n	800d59e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800d58e:	e002      	b.n	800d596 <tcp_output+0xa2>
 800d590:	6a3b      	ldr	r3, [r7, #32]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	623b      	str	r3, [r7, #32]
 800d596:	6a3b      	ldr	r3, [r7, #32]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1f8      	bne.n	800d590 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f002 f8fc 	bl	800f7a0 <ip4_route>
 800d5a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d102      	bne.n	800d5b6 <tcp_output+0xc2>
    return ERR_RTE;
 800d5b0:	f06f 0303 	mvn.w	r3, #3
 800d5b4:	e184      	b.n	800d8c0 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <tcp_output+0xd0>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d111      	bne.n	800d5e8 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <tcp_output+0xdc>
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	e000      	b.n	800d5d2 <tcp_output+0xde>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <tcp_output+0xec>
      return ERR_RTE;
 800d5da:	f06f 0303 	mvn.w	r3, #3
 800d5de:	e16f      	b.n	800d8c0 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 813e 	beq.w	800d86c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fa fcf6 	bl	8007fe8 <lwip_htonl>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d606:	8912      	ldrh	r2, [r2, #8]
 800d608:	4413      	add	r3, r2
  if (seg != NULL &&
 800d60a:	69ba      	ldr	r2, [r7, #24]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	f080 812d 	bcs.w	800d86c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 8129 	beq.w	800d86c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d620:	461a      	mov	r2, r3
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	4293      	cmp	r3, r2
 800d626:	f040 8121 	bne.w	800d86c <tcp_output+0x378>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f040 811c 	bne.w	800d86c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f040 812b 	bne.w	800d896 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800d650:	e121      	b.n	800d896 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	899b      	ldrh	r3, [r3, #12]
 800d658:	b29b      	uxth	r3, r3
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fa fcb6 	bl	8007fcc <lwip_htons>
 800d660:	4603      	mov	r3, r0
 800d662:	f003 0304 	and.w	r3, r3, #4
 800d666:	2b00      	cmp	r3, #0
 800d668:	d006      	beq.n	800d678 <tcp_output+0x184>
 800d66a:	4b42      	ldr	r3, [pc, #264]	; (800d774 <tcp_output+0x280>)
 800d66c:	f240 4246 	movw	r2, #1094	; 0x446
 800d670:	4944      	ldr	r1, [pc, #272]	; (800d784 <tcp_output+0x290>)
 800d672:	4842      	ldr	r0, [pc, #264]	; (800d77c <tcp_output+0x288>)
 800d674:	f004 fc12 	bl	8011e9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01f      	beq.n	800d6c0 <tcp_output+0x1cc>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	7e9b      	ldrb	r3, [r3, #26]
 800d684:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d119      	bne.n	800d6c0 <tcp_output+0x1cc>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00b      	beq.n	800d6ac <tcp_output+0x1b8>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d110      	bne.n	800d6c0 <tcp_output+0x1cc>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6a2:	891a      	ldrh	r2, [r3, #8]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d209      	bcs.n	800d6c0 <tcp_output+0x1cc>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d004      	beq.n	800d6c0 <tcp_output+0x1cc>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6bc:	2b08      	cmp	r3, #8
 800d6be:	d901      	bls.n	800d6c4 <tcp_output+0x1d0>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e000      	b.n	800d6c6 <tcp_output+0x1d2>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7e9b      	ldrb	r3, [r3, #26]
 800d6ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 80e1 	beq.w	800d89a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	7d1b      	ldrb	r3, [r3, #20]
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d00d      	beq.n	800d6fc <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	899b      	ldrh	r3, [r3, #12]
 800d6e6:	b29c      	uxth	r4, r3
 800d6e8:	2010      	movs	r0, #16
 800d6ea:	f7fa fc6f 	bl	8007fcc <lwip_htons>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	4322      	orrs	r2, r4
 800d6f8:	b292      	uxth	r2, r2
 800d6fa:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	6879      	ldr	r1, [r7, #4]
 800d700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d702:	f000 f8e1 	bl	800d8c8 <tcp_output_segment>
 800d706:	4603      	mov	r3, r0
 800d708:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d009      	beq.n	800d726 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	7e9b      	ldrb	r3, [r3, #26]
 800d716:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	769a      	strb	r2, [r3, #26]
      return err;
 800d720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d724:	e0cc      	b.n	800d8c0 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	7d1b      	ldrb	r3, [r3, #20]
 800d732:	2b02      	cmp	r3, #2
 800d734:	d006      	beq.n	800d744 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7e9b      	ldrb	r3, [r3, #26]
 800d73a:	f023 0303 	bic.w	r3, r3, #3
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fa fc4c 	bl	8007fe8 <lwip_htonl>
 800d750:	4604      	mov	r4, r0
 800d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d754:	891b      	ldrh	r3, [r3, #8]
 800d756:	461d      	mov	r5, r3
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	899b      	ldrh	r3, [r3, #12]
 800d75e:	b29b      	uxth	r3, r3
 800d760:	4618      	mov	r0, r3
 800d762:	f7fa fc33 	bl	8007fcc <lwip_htons>
 800d766:	4603      	mov	r3, r0
 800d768:	f003 0303 	and.w	r3, r3, #3
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00b      	beq.n	800d788 <tcp_output+0x294>
 800d770:	2301      	movs	r3, #1
 800d772:	e00a      	b.n	800d78a <tcp_output+0x296>
 800d774:	08013cf8 	.word	0x08013cf8
 800d778:	080140fc 	.word	0x080140fc
 800d77c:	08013d5c 	.word	0x08013d5c
 800d780:	24005038 	.word	0x24005038
 800d784:	08014124 	.word	0x08014124
 800d788:	2300      	movs	r3, #0
 800d78a:	442b      	add	r3, r5
 800d78c:	4423      	add	r3, r4
 800d78e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	da02      	bge.n	800d7a2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a4:	891b      	ldrh	r3, [r3, #8]
 800d7a6:	461c      	mov	r4, r3
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	899b      	ldrh	r3, [r3, #12]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fa fc0b 	bl	8007fcc <lwip_htons>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	f003 0303 	and.w	r3, r3, #3
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <tcp_output+0x2d0>
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e000      	b.n	800d7c6 <tcp_output+0x2d2>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	4423      	add	r3, r4
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d049      	beq.n	800d860 <tcp_output+0x36c>
      seg->next = NULL;
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7de:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	623b      	str	r3, [r7, #32]
 800d7e4:	e03f      	b.n	800d866 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fa fbfb 	bl	8007fe8 <lwip_htonl>
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fa fbf4 	bl	8007fe8 <lwip_htonl>
 800d800:	4603      	mov	r3, r0
 800d802:	1ae3      	subs	r3, r4, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	da24      	bge.n	800d852 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	336c      	adds	r3, #108	; 0x6c
 800d80c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d80e:	e002      	b.n	800d816 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d011      	beq.n	800d842 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	4618      	mov	r0, r3
 800d828:	f7fa fbde 	bl	8007fe8 <lwip_htonl>
 800d82c:	4604      	mov	r4, r0
 800d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	4618      	mov	r0, r3
 800d836:	f7fa fbd7 	bl	8007fe8 <lwip_htonl>
 800d83a:	4603      	mov	r3, r0
 800d83c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dbe6      	blt.n	800d810 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	e009      	b.n	800d866 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d852:	6a3b      	ldr	r3, [r7, #32]
 800d854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d856:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	623b      	str	r3, [r7, #32]
 800d85e:	e002      	b.n	800d866 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d862:	f7fc fea2 	bl	800a5aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d86a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d015      	beq.n	800d89e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fa fbb5 	bl	8007fe8 <lwip_htonl>
 800d87e:	4602      	mov	r2, r0
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d888:	8912      	ldrh	r2, [r2, #8]
 800d88a:	4413      	add	r3, r2
  while (seg != NULL &&
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	429a      	cmp	r2, r3
 800d890:	f4bf aedf 	bcs.w	800d652 <tcp_output+0x15e>
  }
output_done:
 800d894:	e003      	b.n	800d89e <tcp_output+0x3aa>
    goto output_done;
 800d896:	bf00      	nop
 800d898:	e002      	b.n	800d8a0 <tcp_output+0x3ac>
      break;
 800d89a:	bf00      	nop
 800d89c:	e000      	b.n	800d8a0 <tcp_output+0x3ac>
output_done:
 800d89e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d103      	bne.n	800d8b0 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	7e9b      	ldrb	r3, [r3, #26]
 800d8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800d8be:	2300      	movs	r3, #0
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3728      	adds	r7, #40	; 0x28
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bdb0      	pop	{r4, r5, r7, pc}

0800d8c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d8c8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ca:	b08c      	sub	sp, #48	; 0x30
 800d8cc:	af04      	add	r7, sp, #16
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	89db      	ldrh	r3, [r3, #14]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d001      	beq.n	800d8e2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e08b      	b.n	800d9fa <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	68dc      	ldr	r4, [r3, #12]
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fa fb7c 	bl	8007fe8 <lwip_htonl>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	68dc      	ldr	r4, [r3, #12]
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	f7fa fb65 	bl	8007fcc <lwip_htons>
 800d902:	4603      	mov	r3, r0
 800d904:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d90e:	441a      	add	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	3314      	adds	r3, #20
 800d91a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	7a9b      	ldrb	r3, [r3, #10]
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d014      	beq.n	800d952 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	3304      	adds	r3, #4
 800d92c:	4619      	mov	r1, r3
 800d92e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d932:	f7fd f8a5 	bl	800aa80 <tcp_eff_send_mss_impl>
 800d936:	4603      	mov	r3, r0
 800d938:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d93a:	8b7b      	ldrh	r3, [r7, #26]
 800d93c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d940:	4618      	mov	r0, r3
 800d942:	f7fa fb51 	bl	8007fe8 <lwip_htonl>
 800d946:	4602      	mov	r2, r0
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	3304      	adds	r3, #4
 800d950:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d958:	2b00      	cmp	r3, #0
 800d95a:	da02      	bge.n	800d962 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	2200      	movs	r2, #0
 800d960:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10c      	bne.n	800d984 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800d96a:	4b26      	ldr	r3, [pc, #152]	; (800da04 <tcp_output_segment+0x13c>)
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fa fb35 	bl	8007fe8 <lwip_htonl>
 800d97e:	4602      	mov	r2, r0
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	461a      	mov	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	8959      	ldrh	r1, [r3, #10]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	8b3a      	ldrh	r2, [r7, #24]
 800d9a0:	1a8a      	subs	r2, r1, r2
 800d9a2:	b292      	uxth	r2, r2
 800d9a4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	8919      	ldrh	r1, [r3, #8]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	8b3a      	ldrh	r2, [r7, #24]
 800d9b2:	1a8a      	subs	r2, r1, r2
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	68d2      	ldr	r2, [r2, #12]
 800d9c0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	741a      	strb	r2, [r3, #16]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6858      	ldr	r0, [r3, #4]
 800d9d2:	68b9      	ldr	r1, [r7, #8]
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	1d1c      	adds	r4, r3, #4
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	7a9d      	ldrb	r5, [r3, #10]
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	7a5b      	ldrb	r3, [r3, #9]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	9202      	str	r2, [sp, #8]
 800d9e4:	2206      	movs	r2, #6
 800d9e6:	9201      	str	r2, [sp, #4]
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	462b      	mov	r3, r5
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	f002 f87f 	bl	800faf0 <ip4_output_if>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800d9f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3720      	adds	r7, #32
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bdb0      	pop	{r4, r5, r7, pc}
 800da02:	bf00      	nop
 800da04:	24005028 	.word	0x24005028

0800da08 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08c      	sub	sp, #48	; 0x30
 800da0c:	af04      	add	r7, sp, #16
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
 800da14:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800da16:	2200      	movs	r2, #0
 800da18:	2114      	movs	r1, #20
 800da1a:	2001      	movs	r0, #1
 800da1c:	f7fb f90c 	bl	8008c38 <pbuf_alloc>
 800da20:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d05b      	beq.n	800dae0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	895b      	ldrh	r3, [r3, #10]
 800da2c:	2b13      	cmp	r3, #19
 800da2e:	d806      	bhi.n	800da3e <tcp_rst+0x36>
 800da30:	4b2d      	ldr	r3, [pc, #180]	; (800dae8 <tcp_rst+0xe0>)
 800da32:	f240 524d 	movw	r2, #1357	; 0x54d
 800da36:	492d      	ldr	r1, [pc, #180]	; (800daec <tcp_rst+0xe4>)
 800da38:	482d      	ldr	r0, [pc, #180]	; (800daf0 <tcp_rst+0xe8>)
 800da3a:	f004 fa2f 	bl	8011e9c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800da44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da46:	4618      	mov	r0, r3
 800da48:	f7fa fac0 	bl	8007fcc <lwip_htons>
 800da4c:	4603      	mov	r3, r0
 800da4e:	461a      	mov	r2, r3
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800da54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da56:	4618      	mov	r0, r3
 800da58:	f7fa fab8 	bl	8007fcc <lwip_htons>
 800da5c:	4603      	mov	r3, r0
 800da5e:	461a      	mov	r2, r3
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7fa fabf 	bl	8007fe8 <lwip_htonl>
 800da6a:	4602      	mov	r2, r0
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800da70:	68b8      	ldr	r0, [r7, #8]
 800da72:	f7fa fab9 	bl	8007fe8 <lwip_htonl>
 800da76:	4602      	mov	r2, r0
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800da7c:	f245 0014 	movw	r0, #20500	; 0x5014
 800da80:	f7fa faa4 	bl	8007fcc <lwip_htons>
 800da84:	4603      	mov	r3, r0
 800da86:	461a      	mov	r2, r3
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	2200      	movs	r2, #0
 800da90:	f042 0208 	orr.w	r2, r2, #8
 800da94:	739a      	strb	r2, [r3, #14]
 800da96:	2200      	movs	r2, #0
 800da98:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800da9c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	2200      	movs	r2, #0
 800daa2:	741a      	strb	r2, [r3, #16]
 800daa4:	2200      	movs	r2, #0
 800daa6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	2200      	movs	r2, #0
 800daac:	749a      	strb	r2, [r3, #18]
 800daae:	2200      	movs	r2, #0
 800dab0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800dab2:	6838      	ldr	r0, [r7, #0]
 800dab4:	f001 fe74 	bl	800f7a0 <ip4_route>
 800dab8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00b      	beq.n	800dad8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	9302      	str	r3, [sp, #8]
 800dac4:	2306      	movs	r3, #6
 800dac6:	9301      	str	r3, [sp, #4]
 800dac8:	2300      	movs	r3, #0
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	23ff      	movs	r3, #255	; 0xff
 800dace:	683a      	ldr	r2, [r7, #0]
 800dad0:	6879      	ldr	r1, [r7, #4]
 800dad2:	69f8      	ldr	r0, [r7, #28]
 800dad4:	f002 f80c 	bl	800faf0 <ip4_output_if>
  }
  pbuf_free(p);
 800dad8:	69f8      	ldr	r0, [r7, #28]
 800dada:	f7fb fc1f 	bl	800931c <pbuf_free>
 800dade:	e000      	b.n	800dae2 <tcp_rst+0xda>
    return;
 800dae0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dae2:	3720      	adds	r7, #32
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	08013cf8 	.word	0x08013cf8
 800daec:	08013d2c 	.word	0x08013d2c
 800daf0:	08013d5c 	.word	0x08013d5c

0800daf4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db00:	2b00      	cmp	r3, #0
 800db02:	d029      	beq.n	800db58 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db08:	60fb      	str	r3, [r7, #12]
 800db0a:	e002      	b.n	800db12 <tcp_rexmit_rto+0x1e>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1f8      	bne.n	800db0c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db36:	2bff      	cmp	r3, #255	; 0xff
 800db38:	d007      	beq.n	800db4a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db40:	3301      	adds	r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff fccf 	bl	800d4f4 <tcp_output>
 800db56:	e000      	b.n	800db5a <tcp_rexmit_rto+0x66>
    return;
 800db58:	bf00      	nop
}
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800db60:	b590      	push	{r4, r7, lr}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d043      	beq.n	800dbf8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db74:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	3368      	adds	r3, #104	; 0x68
 800db82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800db84:	e002      	b.n	800db8c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d011      	beq.n	800dbb8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fa fa23 	bl	8007fe8 <lwip_htonl>
 800dba2:	4604      	mov	r4, r0
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fa fa1c 	bl	8007fe8 <lwip_htonl>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	dbe6      	blt.n	800db86 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d103      	bne.n	800dbd6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dbdc:	2bff      	cmp	r3, #255	; 0xff
 800dbde:	d007      	beq.n	800dbf0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	635a      	str	r2, [r3, #52]	; 0x34
 800dbf6:	e000      	b.n	800dbfa <tcp_rexmit+0x9a>
    return;
 800dbf8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd90      	pop	{r4, r7, pc}

0800dc00 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d04c      	beq.n	800dcaa <tcp_rexmit_fast+0xaa>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	7e9b      	ldrb	r3, [r3, #26]
 800dc14:	f003 0304 	and.w	r3, r3, #4
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d146      	bne.n	800dcaa <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ff9f 	bl	800db60 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d208      	bcs.n	800dc44 <tcp_rexmit_fast+0x44>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	da00      	bge.n	800dc3e <tcp_rexmit_fast+0x3e>
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	105b      	asrs	r3, r3, #1
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	e007      	b.n	800dc54 <tcp_rexmit_fast+0x54>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	da00      	bge.n	800dc50 <tcp_rexmit_fast+0x50>
 800dc4e:	3301      	adds	r3, #1
 800dc50:	105b      	asrs	r3, r3, #1
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dc60:	461a      	mov	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc66:	005b      	lsls	r3, r3, #1
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d206      	bcs.n	800dc7a <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc84:	4619      	mov	r1, r3
 800dc86:	0049      	lsls	r1, r1, #1
 800dc88:	440b      	add	r3, r1
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	4413      	add	r3, r2
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	7e9b      	ldrb	r3, [r3, #26]
 800dc9a:	f043 0304 	orr.w	r3, r3, #4
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800dcaa:	bf00      	nop
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b08a      	sub	sp, #40	; 0x28
 800dcb6:	af04      	add	r7, sp, #16
 800dcb8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fa f991 	bl	8007fe8 <lwip_htonl>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2200      	movs	r2, #0
 800dcca:	2100      	movs	r1, #0
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7ff f975 	bl	800cfbc <tcp_output_alloc_header>
 800dcd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d102      	bne.n	800dce0 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dcda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcde:	e021      	b.n	800dd24 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	3304      	adds	r3, #4
 800dce4:	4618      	mov	r0, r3
 800dce6:	f001 fd5b 	bl	800f7a0 <ip4_route>
 800dcea:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d102      	bne.n	800dcf8 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800dcf2:	23fc      	movs	r3, #252	; 0xfc
 800dcf4:	75fb      	strb	r3, [r7, #23]
 800dcf6:	e010      	b.n	800dd1a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800dcf8:	6879      	ldr	r1, [r7, #4]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	1d1a      	adds	r2, r3, #4
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	7a98      	ldrb	r0, [r3, #10]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	9302      	str	r3, [sp, #8]
 800dd06:	2306      	movs	r3, #6
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	4603      	mov	r3, r0
 800dd10:	6938      	ldr	r0, [r7, #16]
 800dd12:	f001 feed 	bl	800faf0 <ip4_output_if>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800dd1a:	6938      	ldr	r0, [r7, #16]
 800dd1c:	f7fb fafe 	bl	800931c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dd20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dd2c:	b590      	push	{r4, r7, lr}
 800dd2e:	b08f      	sub	sp, #60	; 0x3c
 800dd30:	af04      	add	r7, sp, #16
 800dd32:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd38:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d102      	bne.n	800dd46 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd44:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d101      	bne.n	800dd50 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e085      	b.n	800de5c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dd50:	6a3b      	ldr	r3, [r7, #32]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	899b      	ldrh	r3, [r3, #12]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fa f937 	bl	8007fcc <lwip_htons>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d005      	beq.n	800dd74 <tcp_zero_window_probe+0x48>
 800dd68:	6a3b      	ldr	r3, [r7, #32]
 800dd6a:	891b      	ldrh	r3, [r3, #8]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <tcp_zero_window_probe+0x48>
 800dd70:	2301      	movs	r3, #1
 800dd72:	e000      	b.n	800dd76 <tcp_zero_window_probe+0x4a>
 800dd74:	2300      	movs	r3, #0
 800dd76:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dd78:	7ffb      	ldrb	r3, [r7, #31]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	bf0c      	ite	eq
 800dd7e:	2301      	moveq	r3, #1
 800dd80:	2300      	movne	r3, #0
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	8bba      	ldrh	r2, [r7, #28]
 800dd8e:	2100      	movs	r1, #0
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff f913 	bl	800cfbc <tcp_output_alloc_header>
 800dd96:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d102      	bne.n	800dda4 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dd9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dda2:	e05b      	b.n	800de5c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ddaa:	7ffb      	ldrb	r3, [r7, #31]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00e      	beq.n	800ddce <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	899b      	ldrh	r3, [r3, #12]
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ddba:	b29c      	uxth	r4, r3
 800ddbc:	2011      	movs	r0, #17
 800ddbe:	f7fa f905 	bl	8007fcc <lwip_htons>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	4323      	orrs	r3, r4
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	819a      	strh	r2, [r3, #12]
 800ddcc:	e010      	b.n	800ddf0 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	3314      	adds	r3, #20
 800ddd4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	6858      	ldr	r0, [r3, #4]
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	891a      	ldrh	r2, [r3, #8]
 800dde0:	6a3b      	ldr	r3, [r7, #32]
 800dde2:	891b      	ldrh	r3, [r3, #8]
 800dde4:	1ad3      	subs	r3, r2, r3
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	2201      	movs	r2, #1
 800ddea:	6939      	ldr	r1, [r7, #16]
 800ddec:	f7fb fc86 	bl	80096fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fa f8f6 	bl	8007fe8 <lwip_htonl>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	3301      	adds	r3, #1
 800de00:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da02      	bge.n	800de14 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3304      	adds	r3, #4
 800de18:	4618      	mov	r0, r3
 800de1a:	f001 fcc1 	bl	800f7a0 <ip4_route>
 800de1e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d103      	bne.n	800de2e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800de26:	23fc      	movs	r3, #252	; 0xfc
 800de28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de2c:	e011      	b.n	800de52 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	1d1a      	adds	r2, r3, #4
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7a98      	ldrb	r0, [r3, #10]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	9302      	str	r3, [sp, #8]
 800de3c:	2306      	movs	r3, #6
 800de3e:	9301      	str	r3, [sp, #4]
 800de40:	2300      	movs	r3, #0
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	4603      	mov	r3, r0
 800de46:	69b8      	ldr	r0, [r7, #24]
 800de48:	f001 fe52 	bl	800faf0 <ip4_output_if>
 800de4c:	4603      	mov	r3, r0
 800de4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800de52:	69b8      	ldr	r0, [r7, #24]
 800de54:	f7fb fa62 	bl	800931c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800de58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	372c      	adds	r7, #44	; 0x2c
 800de60:	46bd      	mov	sp, r7
 800de62:	bd90      	pop	{r4, r7, pc}

0800de64 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800de6c:	f7fb fcc8 	bl	8009800 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800de70:	4b0a      	ldr	r3, [pc, #40]	; (800de9c <tcpip_tcp_timer+0x38>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d103      	bne.n	800de80 <tcpip_tcp_timer+0x1c>
 800de78:	4b09      	ldr	r3, [pc, #36]	; (800dea0 <tcpip_tcp_timer+0x3c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d005      	beq.n	800de8c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800de80:	2200      	movs	r2, #0
 800de82:	4908      	ldr	r1, [pc, #32]	; (800dea4 <tcpip_tcp_timer+0x40>)
 800de84:	20fa      	movs	r0, #250	; 0xfa
 800de86:	f000 f86f 	bl	800df68 <sys_timeout>
 800de8a:	e002      	b.n	800de92 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800de8c:	4b06      	ldr	r3, [pc, #24]	; (800dea8 <tcpip_tcp_timer+0x44>)
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]
  }
}
 800de92:	bf00      	nop
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	24005024 	.word	0x24005024
 800dea0:	24005034 	.word	0x24005034
 800dea4:	0800de65 	.word	0x0800de65
 800dea8:	240019dc 	.word	0x240019dc

0800deac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800deb0:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <tcp_timer_needed+0x30>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10f      	bne.n	800ded8 <tcp_timer_needed+0x2c>
 800deb8:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <tcp_timer_needed+0x34>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d103      	bne.n	800dec8 <tcp_timer_needed+0x1c>
 800dec0:	4b08      	ldr	r3, [pc, #32]	; (800dee4 <tcp_timer_needed+0x38>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d007      	beq.n	800ded8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dec8:	4b04      	ldr	r3, [pc, #16]	; (800dedc <tcp_timer_needed+0x30>)
 800deca:	2201      	movs	r2, #1
 800decc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dece:	2200      	movs	r2, #0
 800ded0:	4905      	ldr	r1, [pc, #20]	; (800dee8 <tcp_timer_needed+0x3c>)
 800ded2:	20fa      	movs	r0, #250	; 0xfa
 800ded4:	f000 f848 	bl	800df68 <sys_timeout>
  }
}
 800ded8:	bf00      	nop
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	240019dc 	.word	0x240019dc
 800dee0:	24005024 	.word	0x24005024
 800dee4:	24005034 	.word	0x24005034
 800dee8:	0800de65 	.word	0x0800de65

0800deec <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	4903      	ldr	r1, [pc, #12]	; (800df14 <cyclic_timer+0x28>)
 800df06:	4618      	mov	r0, r3
 800df08:	f000 f82e 	bl	800df68 <sys_timeout>
}
 800df0c:	bf00      	nop
 800df0e:	3710      	adds	r7, #16
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	0800deed 	.word	0x0800deed

0800df18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df1e:	2301      	movs	r3, #1
 800df20:	607b      	str	r3, [r7, #4]
 800df22:	e00e      	b.n	800df42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800df24:	4a0d      	ldr	r2, [pc, #52]	; (800df5c <sys_timeouts_init+0x44>)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	00db      	lsls	r3, r3, #3
 800df30:	4a0a      	ldr	r2, [pc, #40]	; (800df5c <sys_timeouts_init+0x44>)
 800df32:	4413      	add	r3, r2
 800df34:	461a      	mov	r2, r3
 800df36:	490a      	ldr	r1, [pc, #40]	; (800df60 <sys_timeouts_init+0x48>)
 800df38:	f000 f816 	bl	800df68 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3301      	adds	r3, #1
 800df40:	607b      	str	r3, [r7, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b02      	cmp	r3, #2
 800df46:	d9ed      	bls.n	800df24 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800df48:	f003 f868 	bl	801101c <sys_now>
 800df4c:	4602      	mov	r2, r0
 800df4e:	4b05      	ldr	r3, [pc, #20]	; (800df64 <sys_timeouts_init+0x4c>)
 800df50:	601a      	str	r2, [r3, #0]
}
 800df52:	bf00      	nop
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	080149f4 	.word	0x080149f4
 800df60:	0800deed 	.word	0x0800deed
 800df64:	240019d8 	.word	0x240019d8

0800df68 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800df74:	2006      	movs	r0, #6
 800df76:	f7fa fbf9 	bl	800876c <memp_malloc>
 800df7a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10a      	bne.n	800df98 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2b00      	cmp	r3, #0
 800df86:	f040 8084 	bne.w	800e092 <sys_timeout+0x12a>
 800df8a:	4b44      	ldr	r3, [pc, #272]	; (800e09c <sys_timeout+0x134>)
 800df8c:	22d4      	movs	r2, #212	; 0xd4
 800df8e:	4944      	ldr	r1, [pc, #272]	; (800e0a0 <sys_timeout+0x138>)
 800df90:	4844      	ldr	r0, [pc, #272]	; (800e0a4 <sys_timeout+0x13c>)
 800df92:	f003 ff83 	bl	8011e9c <iprintf>
    return;
 800df96:	e07c      	b.n	800e092 <sys_timeout+0x12a>
  }

  now = sys_now();
 800df98:	f003 f840 	bl	801101c <sys_now>
 800df9c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800df9e:	4b42      	ldr	r3, [pc, #264]	; (800e0a8 <sys_timeout+0x140>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d105      	bne.n	800dfb2 <sys_timeout+0x4a>
    diff = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800dfaa:	4a40      	ldr	r2, [pc, #256]	; (800e0ac <sys_timeout+0x144>)
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	e004      	b.n	800dfbc <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800dfb2:	4b3e      	ldr	r3, [pc, #248]	; (800e0ac <sys_timeout+0x144>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	693a      	ldr	r2, [r7, #16]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	441a      	add	r2, r3
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dfd8:	4b33      	ldr	r3, [pc, #204]	; (800e0a8 <sys_timeout+0x140>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d103      	bne.n	800dfe8 <sys_timeout+0x80>
    next_timeout = timeout;
 800dfe0:	4a31      	ldr	r2, [pc, #196]	; (800e0a8 <sys_timeout+0x140>)
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	6013      	str	r3, [r2, #0]
    return;
 800dfe6:	e055      	b.n	800e094 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800dfe8:	4b2f      	ldr	r3, [pc, #188]	; (800e0a8 <sys_timeout+0x140>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d20f      	bcs.n	800e014 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800dff4:	4b2c      	ldr	r3, [pc, #176]	; (800e0a8 <sys_timeout+0x140>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6859      	ldr	r1, [r3, #4]
 800dffa:	4b2b      	ldr	r3, [pc, #172]	; (800e0a8 <sys_timeout+0x140>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	1a8a      	subs	r2, r1, r2
 800e002:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800e004:	4b28      	ldr	r3, [pc, #160]	; (800e0a8 <sys_timeout+0x140>)
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e00c:	4a26      	ldr	r2, [pc, #152]	; (800e0a8 <sys_timeout+0x140>)
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	e03f      	b.n	800e094 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e014:	4b24      	ldr	r3, [pc, #144]	; (800e0a8 <sys_timeout+0x140>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	61fb      	str	r3, [r7, #28]
 800e01a:	e036      	b.n	800e08a <sys_timeout+0x122>
      timeout->time -= t->time;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	685a      	ldr	r2, [r3, #4]
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	1ad2      	subs	r2, r2, r3
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d006      	beq.n	800e040 <sys_timeout+0xd8>
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	685a      	ldr	r2, [r3, #4]
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d921      	bls.n	800e084 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d009      	beq.n	800e05c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6859      	ldr	r1, [r3, #4]
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	1a8a      	subs	r2, r1, r2
 800e058:	605a      	str	r2, [r3, #4]
 800e05a:	e00b      	b.n	800e074 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	429a      	cmp	r2, r3
 800e064:	d206      	bcs.n	800e074 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800e066:	4b10      	ldr	r3, [pc, #64]	; (800e0a8 <sys_timeout+0x140>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	685a      	ldr	r2, [r3, #4]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	441a      	add	r2, r3
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	601a      	str	r2, [r3, #0]
        break;
 800e082:	e007      	b.n	800e094 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	61fb      	str	r3, [r7, #28]
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1c5      	bne.n	800e01c <sys_timeout+0xb4>
 800e090:	e000      	b.n	800e094 <sys_timeout+0x12c>
    return;
 800e092:	bf00      	nop
      }
    }
  }
}
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	0801413c 	.word	0x0801413c
 800e0a0:	08014170 	.word	0x08014170
 800e0a4:	080141b0 	.word	0x080141b0
 800e0a8:	240019d4 	.word	0x240019d4
 800e0ac:	240019d8 	.word	0x240019d8

0800e0b0 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800e0b6:	4b24      	ldr	r3, [pc, #144]	; (800e148 <sys_check_timeouts+0x98>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d040      	beq.n	800e140 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800e0be:	f002 ffad 	bl	801101c <sys_now>
 800e0c2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800e0c4:	4b21      	ldr	r3, [pc, #132]	; (800e14c <sys_check_timeouts+0x9c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	1ad3      	subs	r3, r2, r3
 800e0cc:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800e0ce:	4b20      	ldr	r3, [pc, #128]	; (800e150 <sys_check_timeouts+0xa0>)
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <sys_check_timeouts+0x2c>
 800e0d8:	f7fa fd7e 	bl	8008bd8 <pbuf_free_ooseq>
      had_one = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800e0e0:	4b19      	ldr	r3, [pc, #100]	; (800e148 <sys_check_timeouts+0x98>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d026      	beq.n	800e13a <sys_check_timeouts+0x8a>
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	697a      	ldr	r2, [r7, #20]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d321      	bcc.n	800e13a <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	4b13      	ldr	r3, [pc, #76]	; (800e14c <sys_check_timeouts+0x9c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4413      	add	r3, r2
 800e104:	4a11      	ldr	r2, [pc, #68]	; (800e14c <sys_check_timeouts+0x9c>)
 800e106:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4a0c      	ldr	r2, [pc, #48]	; (800e148 <sys_check_timeouts+0x98>)
 800e118:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e126:	68b9      	ldr	r1, [r7, #8]
 800e128:	2006      	movs	r0, #6
 800e12a:	f7fa fb8f 	bl	800884c <memp_free>
        if (handler != NULL) {
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6838      	ldr	r0, [r7, #0]
 800e138:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800e13a:	7cfb      	ldrb	r3, [r7, #19]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1c6      	bne.n	800e0ce <sys_check_timeouts+0x1e>
  }
}
 800e140:	bf00      	nop
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	240019d4 	.word	0x240019d4
 800e14c:	240019d8 	.word	0x240019d8
 800e150:	2400501c 	.word	0x2400501c

0800e154 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e154:	b480      	push	{r7}
 800e156:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800e158:	bf00      	nop
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
	...

0800e164 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e16e:	4b17      	ldr	r3, [pc, #92]	; (800e1cc <udp_new_port+0x68>)
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	1c5a      	adds	r2, r3, #1
 800e174:	b291      	uxth	r1, r2
 800e176:	4a15      	ldr	r2, [pc, #84]	; (800e1cc <udp_new_port+0x68>)
 800e178:	8011      	strh	r1, [r2, #0]
 800e17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e17e:	4293      	cmp	r3, r2
 800e180:	d103      	bne.n	800e18a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e182:	4b12      	ldr	r3, [pc, #72]	; (800e1cc <udp_new_port+0x68>)
 800e184:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e188:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e18a:	4b11      	ldr	r3, [pc, #68]	; (800e1d0 <udp_new_port+0x6c>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	e011      	b.n	800e1b6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	8a5a      	ldrh	r2, [r3, #18]
 800e196:	4b0d      	ldr	r3, [pc, #52]	; (800e1cc <udp_new_port+0x68>)
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d108      	bne.n	800e1b0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e19e:	88fb      	ldrh	r3, [r7, #6]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	80fb      	strh	r3, [r7, #6]
 800e1a4:	88fb      	ldrh	r3, [r7, #6]
 800e1a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1aa:	d3e0      	bcc.n	800e16e <udp_new_port+0xa>
        return 0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	e007      	b.n	800e1c0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	603b      	str	r3, [r7, #0]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1ea      	bne.n	800e192 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e1bc:	4b03      	ldr	r3, [pc, #12]	; (800e1cc <udp_new_port+0x68>)
 800e1be:	881b      	ldrh	r3, [r3, #0]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	2400000c 	.word	0x2400000c
 800e1d0:	2400503c 	.word	0x2400503c

0800e1d4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d018      	beq.n	800e21a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d013      	beq.n	800e216 <udp_input_local_match+0x42>
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00f      	beq.n	800e216 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e1f6:	4b14      	ldr	r3, [pc, #80]	; (800e248 <udp_input_local_match+0x74>)
 800e1f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1fe:	d00a      	beq.n	800e216 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	4b10      	ldr	r3, [pc, #64]	; (800e248 <udp_input_local_match+0x74>)
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	405a      	eors	r2, r3
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	3308      	adds	r3, #8
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e212:	2b00      	cmp	r3, #0
 800e214:	d110      	bne.n	800e238 <udp_input_local_match+0x64>
          return 1;
 800e216:	2301      	movs	r3, #1
 800e218:	e00f      	b.n	800e23a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d009      	beq.n	800e234 <udp_input_local_match+0x60>
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d005      	beq.n	800e234 <udp_input_local_match+0x60>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	4b06      	ldr	r3, [pc, #24]	; (800e248 <udp_input_local_match+0x74>)
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	429a      	cmp	r2, r3
 800e232:	d101      	bne.n	800e238 <udp_input_local_match+0x64>
      return 1;
 800e234:	2301      	movs	r3, #1
 800e236:	e000      	b.n	800e23a <udp_input_local_match+0x66>
    }
  }

  return 0;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	24001af4 	.word	0x24001af4

0800e24c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e24c:	b590      	push	{r4, r7, lr}
 800e24e:	b08d      	sub	sp, #52	; 0x34
 800e250:	af02      	add	r7, sp, #8
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e256:	2300      	movs	r3, #0
 800e258:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	895b      	ldrh	r3, [r3, #10]
 800e25e:	2b07      	cmp	r3, #7
 800e260:	d803      	bhi.n	800e26a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7fb f85a 	bl	800931c <pbuf_free>
    goto end;
 800e268:	e0c6      	b.n	800e3f8 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e270:	4b63      	ldr	r3, [pc, #396]	; (800e400 <udp_input+0x1b4>)
 800e272:	695a      	ldr	r2, [r3, #20]
 800e274:	4b62      	ldr	r3, [pc, #392]	; (800e400 <udp_input+0x1b4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4619      	mov	r1, r3
 800e27a:	4610      	mov	r0, r2
 800e27c:	f001 fd0a 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800e280:	4603      	mov	r3, r0
 800e282:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	881b      	ldrh	r3, [r3, #0]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f9 fe9e 	bl	8007fcc <lwip_htons>
 800e290:	4603      	mov	r3, r0
 800e292:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	885b      	ldrh	r3, [r3, #2]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7f9 fe96 	bl	8007fcc <lwip_htons>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2b0:	4b54      	ldr	r3, [pc, #336]	; (800e404 <udp_input+0x1b8>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e2b6:	e03b      	b.n	800e330 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	8a5b      	ldrh	r3, [r3, #18]
 800e2bc:	89fa      	ldrh	r2, [r7, #14]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d131      	bne.n	800e326 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e2c2:	7cfb      	ldrb	r3, [r7, #19]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2ca:	f7ff ff83 	bl	800e1d4 <udp_input_local_match>
 800e2ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d028      	beq.n	800e326 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	7c1b      	ldrb	r3, [r3, #16]
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d104      	bne.n	800e2ea <udp_input+0x9e>
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	8a9b      	ldrh	r3, [r3, #20]
 800e2ee:	8a3a      	ldrh	r2, [r7, #16]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d118      	bne.n	800e326 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d005      	beq.n	800e308 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	4b3f      	ldr	r3, [pc, #252]	; (800e400 <udp_input+0x1b4>)
 800e302:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e304:	429a      	cmp	r2, r3
 800e306:	d10e      	bne.n	800e326 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d014      	beq.n	800e338 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e316:	4b3b      	ldr	r3, [pc, #236]	; (800e404 <udp_input+0x1b8>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e31e:	4a39      	ldr	r2, [pc, #228]	; (800e404 <udp_input+0x1b8>)
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e324:	e008      	b.n	800e338 <udp_input+0xec>
      }
    }

    prev = pcb;
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	627b      	str	r3, [r7, #36]	; 0x24
 800e330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1c0      	bne.n	800e2b8 <udp_input+0x6c>
 800e336:	e000      	b.n	800e33a <udp_input+0xee>
        break;
 800e338:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <udp_input+0xf8>
    pcb = uncon_pcb;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <udp_input+0x104>
    for_us = 1;
 800e34a:	2301      	movs	r3, #1
 800e34c:	76fb      	strb	r3, [r7, #27]
 800e34e:	e00a      	b.n	800e366 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	3304      	adds	r3, #4
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4b2a      	ldr	r3, [pc, #168]	; (800e400 <udp_input+0x1b4>)
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	bf0c      	ite	eq
 800e35e:	2301      	moveq	r3, #1
 800e360:	2300      	movne	r3, #0
 800e362:	b2db      	uxtb	r3, r3
 800e364:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e366:	7efb      	ldrb	r3, [r7, #27]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d042      	beq.n	800e3f2 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800e36c:	f06f 0107 	mvn.w	r1, #7
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7fa ffaf 	bl	80092d4 <pbuf_header>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00a      	beq.n	800e392 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800e37c:	4b22      	ldr	r3, [pc, #136]	; (800e408 <udp_input+0x1bc>)
 800e37e:	f240 1255 	movw	r2, #341	; 0x155
 800e382:	4922      	ldr	r1, [pc, #136]	; (800e40c <udp_input+0x1c0>)
 800e384:	4822      	ldr	r0, [pc, #136]	; (800e410 <udp_input+0x1c4>)
 800e386:	f003 fd89 	bl	8011e9c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7fa ffc6 	bl	800931c <pbuf_free>
      goto end;
 800e390:	e032      	b.n	800e3f8 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	2b00      	cmp	r3, #0
 800e396:	d012      	beq.n	800e3be <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00a      	beq.n	800e3b6 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	699c      	ldr	r4, [r3, #24]
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	69d8      	ldr	r0, [r3, #28]
 800e3a8:	8a3b      	ldrh	r3, [r7, #16]
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	4b19      	ldr	r3, [pc, #100]	; (800e414 <udp_input+0x1c8>)
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e3b4:	e021      	b.n	800e3fa <udp_input+0x1ae>
        pbuf_free(p);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7fa ffb0 	bl	800931c <pbuf_free>
        goto end;
 800e3bc:	e01c      	b.n	800e3f8 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e3be:	7cfb      	ldrb	r3, [r7, #19]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d112      	bne.n	800e3ea <udp_input+0x19e>
 800e3c4:	4b0e      	ldr	r3, [pc, #56]	; (800e400 <udp_input+0x1b4>)
 800e3c6:	695b      	ldr	r3, [r3, #20]
 800e3c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3cc:	2be0      	cmp	r3, #224	; 0xe0
 800e3ce:	d00c      	beq.n	800e3ea <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e3d0:	4b0b      	ldr	r3, [pc, #44]	; (800e400 <udp_input+0x1b4>)
 800e3d2:	899b      	ldrh	r3, [r3, #12]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	b21b      	sxth	r3, r3
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7fa ff8b 	bl	80092f8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e3e2:	2103      	movs	r1, #3
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f001 f953 	bl	800f690 <icmp_dest_unreach>
      pbuf_free(p);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7fa ff96 	bl	800931c <pbuf_free>
  return;
 800e3f0:	e003      	b.n	800e3fa <udp_input+0x1ae>
    pbuf_free(p);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7fa ff92 	bl	800931c <pbuf_free>
  return;
 800e3f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e3fa:	372c      	adds	r7, #44	; 0x2c
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd90      	pop	{r4, r7, pc}
 800e400:	24001af4 	.word	0x24001af4
 800e404:	2400503c 	.word	0x2400503c
 800e408:	080141d8 	.word	0x080141d8
 800e40c:	08014208 	.word	0x08014208
 800e410:	0801421c 	.word	0x0801421c
 800e414:	24001b04 	.word	0x24001b04

0800e418 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	4613      	mov	r3, r2
 800e424:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e42c:	4b30      	ldr	r3, [pc, #192]	; (800e4f0 <udp_bind+0xd8>)
 800e42e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <udp_bind+0x24>
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <udp_bind+0x2a>
    return ERR_VAL;
 800e43c:	f06f 0305 	mvn.w	r3, #5
 800e440:	e052      	b.n	800e4e8 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e446:	4b2b      	ldr	r3, [pc, #172]	; (800e4f4 <udp_bind+0xdc>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	617b      	str	r3, [r7, #20]
 800e44c:	e009      	b.n	800e462 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	429a      	cmp	r2, r3
 800e454:	d102      	bne.n	800e45c <udp_bind+0x44>
      rebind = 1;
 800e456:	2301      	movs	r3, #1
 800e458:	74fb      	strb	r3, [r7, #19]
      break;
 800e45a:	e005      	b.n	800e468 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	617b      	str	r3, [r7, #20]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1f2      	bne.n	800e44e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800e468:	88fb      	ldrh	r3, [r7, #6]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d109      	bne.n	800e482 <udp_bind+0x6a>
    port = udp_new_port();
 800e46e:	f7ff fe79 	bl	800e164 <udp_new_port>
 800e472:	4603      	mov	r3, r0
 800e474:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e476:	88fb      	ldrh	r3, [r7, #6]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d11e      	bne.n	800e4ba <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e47c:	f06f 0307 	mvn.w	r3, #7
 800e480:	e032      	b.n	800e4e8 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e482:	4b1c      	ldr	r3, [pc, #112]	; (800e4f4 <udp_bind+0xdc>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	617b      	str	r3, [r7, #20]
 800e488:	e014      	b.n	800e4b4 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d00d      	beq.n	800e4ae <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	8a5b      	ldrh	r3, [r3, #18]
 800e496:	88fa      	ldrh	r2, [r7, #6]
 800e498:	429a      	cmp	r2, r3
 800e49a:	d108      	bne.n	800e4ae <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d102      	bne.n	800e4ae <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e4a8:	f06f 0307 	mvn.w	r3, #7
 800e4ac:	e01c      	b.n	800e4e8 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	617b      	str	r3, [r7, #20]
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1e7      	bne.n	800e48a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d002      	beq.n	800e4c6 <udp_bind+0xae>
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	e000      	b.n	800e4c8 <udp_bind+0xb0>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	88fa      	ldrh	r2, [r7, #6]
 800e4d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e4d2:	7cfb      	ldrb	r3, [r7, #19]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d106      	bne.n	800e4e6 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e4d8:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <udp_bind+0xdc>)
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e4e0:	4a04      	ldr	r2, [pc, #16]	; (800e4f4 <udp_bind+0xdc>)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	08014a0c 	.word	0x08014a0c
 800e4f4:	2400503c 	.word	0x2400503c

0800e4f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b086      	sub	sp, #24
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	4613      	mov	r3, r2
 800e504:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <udp_connect+0x1a>
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d102      	bne.n	800e518 <udp_connect+0x20>
    return ERR_VAL;
 800e512:	f06f 0305 	mvn.w	r3, #5
 800e516:	e03e      	b.n	800e596 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	8a5b      	ldrh	r3, [r3, #18]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10f      	bne.n	800e540 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e520:	68f9      	ldr	r1, [r7, #12]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	8a5b      	ldrh	r3, [r3, #18]
 800e526:	461a      	mov	r2, r3
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f7ff ff75 	bl	800e418 <udp_bind>
 800e52e:	4603      	mov	r3, r0
 800e530:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d002      	beq.n	800e540 <udp_connect+0x48>
      return err;
 800e53a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e53e:	e02a      	b.n	800e596 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <udp_connect+0x54>
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	e000      	b.n	800e54e <udp_connect+0x56>
 800e54c:	2300      	movs	r3, #0
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	88fa      	ldrh	r2, [r7, #6]
 800e556:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	7c1b      	ldrb	r3, [r3, #16]
 800e55c:	f043 0304 	orr.w	r3, r3, #4
 800e560:	b2da      	uxtb	r2, r3
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e566:	4b0e      	ldr	r3, [pc, #56]	; (800e5a0 <udp_connect+0xa8>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	617b      	str	r3, [r7, #20]
 800e56c:	e008      	b.n	800e580 <udp_connect+0x88>
    if (pcb == ipcb) {
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	429a      	cmp	r2, r3
 800e574:	d101      	bne.n	800e57a <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	e00d      	b.n	800e596 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	617b      	str	r3, [r7, #20]
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d1f3      	bne.n	800e56e <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e586:	4b06      	ldr	r3, [pc, #24]	; (800e5a0 <udp_connect+0xa8>)
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e58e:	4a04      	ldr	r2, [pc, #16]	; (800e5a0 <udp_connect+0xa8>)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	2400503c 	.word	0x2400503c

0800e5a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	61da      	str	r2, [r3, #28]
}
 800e5bc:	bf00      	nop
 800e5be:	3714      	adds	r7, #20
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	f7fa f8cc 	bl	800876c <memp_malloc>
 800e5d4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d007      	beq.n	800e5ec <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e5dc:	2220      	movs	r2, #32
 800e5de:	2100      	movs	r1, #0
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f003 fc53 	bl	8011e8c <memset>
    pcb->ttl = UDP_TTL;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	22ff      	movs	r2, #255	; 0xff
 800e5ea:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e5ec:	687b      	ldr	r3, [r7, #4]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
	...

0800e5f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d01e      	beq.n	800e646 <udp_netif_ip_addr_changed+0x4e>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01a      	beq.n	800e646 <udp_netif_ip_addr_changed+0x4e>
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d017      	beq.n	800e646 <udp_netif_ip_addr_changed+0x4e>
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d013      	beq.n	800e646 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e61e:	4b0d      	ldr	r3, [pc, #52]	; (800e654 <udp_netif_ip_addr_changed+0x5c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	e00c      	b.n	800e640 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d103      	bne.n	800e63a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1ef      	bne.n	800e626 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e646:	bf00      	nop
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	2400503c 	.word	0x2400503c

0800e658 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e660:	4915      	ldr	r1, [pc, #84]	; (800e6b8 <etharp_free_entry+0x60>)
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	4613      	mov	r3, r2
 800e666:	005b      	lsls	r3, r3, #1
 800e668:	4413      	add	r3, r2
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	440b      	add	r3, r1
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d013      	beq.n	800e69c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e674:	4910      	ldr	r1, [pc, #64]	; (800e6b8 <etharp_free_entry+0x60>)
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	4613      	mov	r3, r2
 800e67a:	005b      	lsls	r3, r3, #1
 800e67c:	4413      	add	r3, r2
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	440b      	add	r3, r1
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4618      	mov	r0, r3
 800e686:	f7fa fe49 	bl	800931c <pbuf_free>
    arp_table[i].q = NULL;
 800e68a:	490b      	ldr	r1, [pc, #44]	; (800e6b8 <etharp_free_entry+0x60>)
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	4613      	mov	r3, r2
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	4413      	add	r3, r2
 800e694:	00db      	lsls	r3, r3, #3
 800e696:	440b      	add	r3, r1
 800e698:	2200      	movs	r2, #0
 800e69a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e69c:	4906      	ldr	r1, [pc, #24]	; (800e6b8 <etharp_free_entry+0x60>)
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	4413      	add	r3, r2
 800e6a6:	00db      	lsls	r3, r3, #3
 800e6a8:	440b      	add	r3, r1
 800e6aa:	3314      	adds	r3, #20
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	240019e0 	.word	0x240019e0

0800e6bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	71fb      	strb	r3, [r7, #7]
 800e6c6:	e096      	b.n	800e7f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e6c8:	79fa      	ldrb	r2, [r7, #7]
 800e6ca:	494f      	ldr	r1, [pc, #316]	; (800e808 <etharp_tmr+0x14c>)
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	005b      	lsls	r3, r3, #1
 800e6d0:	4413      	add	r3, r2
 800e6d2:	00db      	lsls	r3, r3, #3
 800e6d4:	440b      	add	r3, r1
 800e6d6:	3314      	adds	r3, #20
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800e6dc:	79bb      	ldrb	r3, [r7, #6]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f000 8086 	beq.w	800e7f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800e6e4:	79fa      	ldrb	r2, [r7, #7]
 800e6e6:	4948      	ldr	r1, [pc, #288]	; (800e808 <etharp_tmr+0x14c>)
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	4413      	add	r3, r2
 800e6ee:	00db      	lsls	r3, r3, #3
 800e6f0:	440b      	add	r3, r1
 800e6f2:	3312      	adds	r3, #18
 800e6f4:	881b      	ldrh	r3, [r3, #0]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	b298      	uxth	r0, r3
 800e6fa:	4943      	ldr	r1, [pc, #268]	; (800e808 <etharp_tmr+0x14c>)
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	4413      	add	r3, r2
 800e702:	00db      	lsls	r3, r3, #3
 800e704:	440b      	add	r3, r1
 800e706:	3312      	adds	r3, #18
 800e708:	4602      	mov	r2, r0
 800e70a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e70c:	79fa      	ldrb	r2, [r7, #7]
 800e70e:	493e      	ldr	r1, [pc, #248]	; (800e808 <etharp_tmr+0x14c>)
 800e710:	4613      	mov	r3, r2
 800e712:	005b      	lsls	r3, r3, #1
 800e714:	4413      	add	r3, r2
 800e716:	00db      	lsls	r3, r3, #3
 800e718:	440b      	add	r3, r1
 800e71a:	3312      	adds	r3, #18
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e722:	d215      	bcs.n	800e750 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e724:	79fa      	ldrb	r2, [r7, #7]
 800e726:	4938      	ldr	r1, [pc, #224]	; (800e808 <etharp_tmr+0x14c>)
 800e728:	4613      	mov	r3, r2
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	4413      	add	r3, r2
 800e72e:	00db      	lsls	r3, r3, #3
 800e730:	440b      	add	r3, r1
 800e732:	3314      	adds	r3, #20
 800e734:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e736:	2b01      	cmp	r3, #1
 800e738:	d10f      	bne.n	800e75a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e73a:	79fa      	ldrb	r2, [r7, #7]
 800e73c:	4932      	ldr	r1, [pc, #200]	; (800e808 <etharp_tmr+0x14c>)
 800e73e:	4613      	mov	r3, r2
 800e740:	005b      	lsls	r3, r3, #1
 800e742:	4413      	add	r3, r2
 800e744:	00db      	lsls	r3, r3, #3
 800e746:	440b      	add	r3, r1
 800e748:	3312      	adds	r3, #18
 800e74a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e74c:	2b04      	cmp	r3, #4
 800e74e:	d904      	bls.n	800e75a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	4618      	mov	r0, r3
 800e754:	f7ff ff80 	bl	800e658 <etharp_free_entry>
 800e758:	e04a      	b.n	800e7f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e75a:	79fa      	ldrb	r2, [r7, #7]
 800e75c:	492a      	ldr	r1, [pc, #168]	; (800e808 <etharp_tmr+0x14c>)
 800e75e:	4613      	mov	r3, r2
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	4413      	add	r3, r2
 800e764:	00db      	lsls	r3, r3, #3
 800e766:	440b      	add	r3, r1
 800e768:	3314      	adds	r3, #20
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	2b03      	cmp	r3, #3
 800e76e:	d10a      	bne.n	800e786 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e770:	79fa      	ldrb	r2, [r7, #7]
 800e772:	4925      	ldr	r1, [pc, #148]	; (800e808 <etharp_tmr+0x14c>)
 800e774:	4613      	mov	r3, r2
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	4413      	add	r3, r2
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	440b      	add	r3, r1
 800e77e:	3314      	adds	r3, #20
 800e780:	2204      	movs	r2, #4
 800e782:	701a      	strb	r2, [r3, #0]
 800e784:	e034      	b.n	800e7f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e786:	79fa      	ldrb	r2, [r7, #7]
 800e788:	491f      	ldr	r1, [pc, #124]	; (800e808 <etharp_tmr+0x14c>)
 800e78a:	4613      	mov	r3, r2
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	4413      	add	r3, r2
 800e790:	00db      	lsls	r3, r3, #3
 800e792:	440b      	add	r3, r1
 800e794:	3314      	adds	r3, #20
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b04      	cmp	r3, #4
 800e79a:	d10a      	bne.n	800e7b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e79c:	79fa      	ldrb	r2, [r7, #7]
 800e79e:	491a      	ldr	r1, [pc, #104]	; (800e808 <etharp_tmr+0x14c>)
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	440b      	add	r3, r1
 800e7aa:	3314      	adds	r3, #20
 800e7ac:	2202      	movs	r2, #2
 800e7ae:	701a      	strb	r2, [r3, #0]
 800e7b0:	e01e      	b.n	800e7f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e7b2:	79fa      	ldrb	r2, [r7, #7]
 800e7b4:	4914      	ldr	r1, [pc, #80]	; (800e808 <etharp_tmr+0x14c>)
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	4413      	add	r3, r2
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	440b      	add	r3, r1
 800e7c0:	3314      	adds	r3, #20
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d113      	bne.n	800e7f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e7c8:	79fa      	ldrb	r2, [r7, #7]
 800e7ca:	490f      	ldr	r1, [pc, #60]	; (800e808 <etharp_tmr+0x14c>)
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	4413      	add	r3, r2
 800e7d2:	00db      	lsls	r3, r3, #3
 800e7d4:	440b      	add	r3, r1
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	6818      	ldr	r0, [r3, #0]
 800e7da:	79fa      	ldrb	r2, [r7, #7]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	005b      	lsls	r3, r3, #1
 800e7e0:	4413      	add	r3, r2
 800e7e2:	00db      	lsls	r3, r3, #3
 800e7e4:	4a08      	ldr	r2, [pc, #32]	; (800e808 <etharp_tmr+0x14c>)
 800e7e6:	4413      	add	r3, r2
 800e7e8:	3304      	adds	r3, #4
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	f000 fe38 	bl	800f460 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e7f0:	79fb      	ldrb	r3, [r7, #7]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	71fb      	strb	r3, [r7, #7]
 800e7f6:	79fb      	ldrb	r3, [r7, #7]
 800e7f8:	2b09      	cmp	r3, #9
 800e7fa:	f67f af65 	bls.w	800e6c8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e7fe:	bf00      	nop
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	240019e0 	.word	0x240019e0

0800e80c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b088      	sub	sp, #32
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	460b      	mov	r3, r1
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e81a:	230a      	movs	r3, #10
 800e81c:	77fb      	strb	r3, [r7, #31]
 800e81e:	230a      	movs	r3, #10
 800e820:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800e822:	230a      	movs	r3, #10
 800e824:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800e826:	2300      	movs	r3, #0
 800e828:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800e82a:	230a      	movs	r3, #10
 800e82c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	833b      	strh	r3, [r7, #24]
 800e832:	2300      	movs	r3, #0
 800e834:	82fb      	strh	r3, [r7, #22]
 800e836:	2300      	movs	r3, #0
 800e838:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e83a:	2300      	movs	r3, #0
 800e83c:	773b      	strb	r3, [r7, #28]
 800e83e:	e093      	b.n	800e968 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800e840:	7f3a      	ldrb	r2, [r7, #28]
 800e842:	4990      	ldr	r1, [pc, #576]	; (800ea84 <etharp_find_entry+0x278>)
 800e844:	4613      	mov	r3, r2
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	4413      	add	r3, r2
 800e84a:	00db      	lsls	r3, r3, #3
 800e84c:	440b      	add	r3, r1
 800e84e:	3314      	adds	r3, #20
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e854:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e858:	2b0a      	cmp	r3, #10
 800e85a:	d105      	bne.n	800e868 <etharp_find_entry+0x5c>
 800e85c:	7cfb      	ldrb	r3, [r7, #19]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d102      	bne.n	800e868 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800e862:	7f3b      	ldrb	r3, [r7, #28]
 800e864:	777b      	strb	r3, [r7, #29]
 800e866:	e07c      	b.n	800e962 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e868:	7cfb      	ldrb	r3, [r7, #19]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d079      	beq.n	800e962 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e86e:	7cfb      	ldrb	r3, [r7, #19]
 800e870:	2b01      	cmp	r3, #1
 800e872:	d009      	beq.n	800e888 <etharp_find_entry+0x7c>
 800e874:	7cfb      	ldrb	r3, [r7, #19]
 800e876:	2b01      	cmp	r3, #1
 800e878:	d806      	bhi.n	800e888 <etharp_find_entry+0x7c>
 800e87a:	4b83      	ldr	r3, [pc, #524]	; (800ea88 <etharp_find_entry+0x27c>)
 800e87c:	f44f 7293 	mov.w	r2, #294	; 0x126
 800e880:	4982      	ldr	r1, [pc, #520]	; (800ea8c <etharp_find_entry+0x280>)
 800e882:	4883      	ldr	r0, [pc, #524]	; (800ea90 <etharp_find_entry+0x284>)
 800e884:	f003 fb0a 	bl	8011e9c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00f      	beq.n	800e8ae <etharp_find_entry+0xa2>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	6819      	ldr	r1, [r3, #0]
 800e892:	7f3a      	ldrb	r2, [r7, #28]
 800e894:	487b      	ldr	r0, [pc, #492]	; (800ea84 <etharp_find_entry+0x278>)
 800e896:	4613      	mov	r3, r2
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	4413      	add	r3, r2
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	4403      	add	r3, r0
 800e8a0:	3304      	adds	r3, #4
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4299      	cmp	r1, r3
 800e8a6:	d102      	bne.n	800e8ae <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e8a8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e8ac:	e0e5      	b.n	800ea7a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e8ae:	7cfb      	ldrb	r3, [r7, #19]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d13b      	bne.n	800e92c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e8b4:	7f3a      	ldrb	r2, [r7, #28]
 800e8b6:	4973      	ldr	r1, [pc, #460]	; (800ea84 <etharp_find_entry+0x278>)
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	005b      	lsls	r3, r3, #1
 800e8bc:	4413      	add	r3, r2
 800e8be:	00db      	lsls	r3, r3, #3
 800e8c0:	440b      	add	r3, r1
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d018      	beq.n	800e8fa <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800e8c8:	7f3a      	ldrb	r2, [r7, #28]
 800e8ca:	496e      	ldr	r1, [pc, #440]	; (800ea84 <etharp_find_entry+0x278>)
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	4413      	add	r3, r2
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	440b      	add	r3, r1
 800e8d6:	3312      	adds	r3, #18
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	8b3a      	ldrh	r2, [r7, #24]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d840      	bhi.n	800e962 <etharp_find_entry+0x156>
            old_queue = i;
 800e8e0:	7f3b      	ldrb	r3, [r7, #28]
 800e8e2:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800e8e4:	7f3a      	ldrb	r2, [r7, #28]
 800e8e6:	4967      	ldr	r1, [pc, #412]	; (800ea84 <etharp_find_entry+0x278>)
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	4413      	add	r3, r2
 800e8ee:	00db      	lsls	r3, r3, #3
 800e8f0:	440b      	add	r3, r1
 800e8f2:	3312      	adds	r3, #18
 800e8f4:	881b      	ldrh	r3, [r3, #0]
 800e8f6:	833b      	strh	r3, [r7, #24]
 800e8f8:	e033      	b.n	800e962 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e8fa:	7f3a      	ldrb	r2, [r7, #28]
 800e8fc:	4961      	ldr	r1, [pc, #388]	; (800ea84 <etharp_find_entry+0x278>)
 800e8fe:	4613      	mov	r3, r2
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	4413      	add	r3, r2
 800e904:	00db      	lsls	r3, r3, #3
 800e906:	440b      	add	r3, r1
 800e908:	3312      	adds	r3, #18
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	8afa      	ldrh	r2, [r7, #22]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d827      	bhi.n	800e962 <etharp_find_entry+0x156>
            old_pending = i;
 800e912:	7f3b      	ldrb	r3, [r7, #28]
 800e914:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800e916:	7f3a      	ldrb	r2, [r7, #28]
 800e918:	495a      	ldr	r1, [pc, #360]	; (800ea84 <etharp_find_entry+0x278>)
 800e91a:	4613      	mov	r3, r2
 800e91c:	005b      	lsls	r3, r3, #1
 800e91e:	4413      	add	r3, r2
 800e920:	00db      	lsls	r3, r3, #3
 800e922:	440b      	add	r3, r1
 800e924:	3312      	adds	r3, #18
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	82fb      	strh	r3, [r7, #22]
 800e92a:	e01a      	b.n	800e962 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e92c:	7cfb      	ldrb	r3, [r7, #19]
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d917      	bls.n	800e962 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e932:	7f3a      	ldrb	r2, [r7, #28]
 800e934:	4953      	ldr	r1, [pc, #332]	; (800ea84 <etharp_find_entry+0x278>)
 800e936:	4613      	mov	r3, r2
 800e938:	005b      	lsls	r3, r3, #1
 800e93a:	4413      	add	r3, r2
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	440b      	add	r3, r1
 800e940:	3312      	adds	r3, #18
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	8aba      	ldrh	r2, [r7, #20]
 800e946:	429a      	cmp	r2, r3
 800e948:	d80b      	bhi.n	800e962 <etharp_find_entry+0x156>
            old_stable = i;
 800e94a:	7f3b      	ldrb	r3, [r7, #28]
 800e94c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800e94e:	7f3a      	ldrb	r2, [r7, #28]
 800e950:	494c      	ldr	r1, [pc, #304]	; (800ea84 <etharp_find_entry+0x278>)
 800e952:	4613      	mov	r3, r2
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	4413      	add	r3, r2
 800e958:	00db      	lsls	r3, r3, #3
 800e95a:	440b      	add	r3, r1
 800e95c:	3312      	adds	r3, #18
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e962:	7f3b      	ldrb	r3, [r7, #28]
 800e964:	3301      	adds	r3, #1
 800e966:	773b      	strb	r3, [r7, #28]
 800e968:	7f3b      	ldrb	r3, [r7, #28]
 800e96a:	2b09      	cmp	r3, #9
 800e96c:	f67f af68 	bls.w	800e840 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e970:	7afb      	ldrb	r3, [r7, #11]
 800e972:	f003 0302 	and.w	r3, r3, #2
 800e976:	2b00      	cmp	r3, #0
 800e978:	d108      	bne.n	800e98c <etharp_find_entry+0x180>
 800e97a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e97e:	2b0a      	cmp	r3, #10
 800e980:	d107      	bne.n	800e992 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e982:	7afb      	ldrb	r3, [r7, #11]
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d102      	bne.n	800e992 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800e98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e990:	e073      	b.n	800ea7a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e992:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e996:	2b09      	cmp	r3, #9
 800e998:	dc02      	bgt.n	800e9a0 <etharp_find_entry+0x194>
    i = empty;
 800e99a:	7f7b      	ldrb	r3, [r7, #29]
 800e99c:	773b      	strb	r3, [r7, #28]
 800e99e:	e036      	b.n	800ea0e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e9a0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e9a4:	2b09      	cmp	r3, #9
 800e9a6:	dc13      	bgt.n	800e9d0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800e9a8:	7fbb      	ldrb	r3, [r7, #30]
 800e9aa:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e9ac:	7f3a      	ldrb	r2, [r7, #28]
 800e9ae:	4935      	ldr	r1, [pc, #212]	; (800ea84 <etharp_find_entry+0x278>)
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	005b      	lsls	r3, r3, #1
 800e9b4:	4413      	add	r3, r2
 800e9b6:	00db      	lsls	r3, r3, #3
 800e9b8:	440b      	add	r3, r1
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d018      	beq.n	800e9f2 <etharp_find_entry+0x1e6>
 800e9c0:	4b31      	ldr	r3, [pc, #196]	; (800ea88 <etharp_find_entry+0x27c>)
 800e9c2:	f240 126f 	movw	r2, #367	; 0x16f
 800e9c6:	4933      	ldr	r1, [pc, #204]	; (800ea94 <etharp_find_entry+0x288>)
 800e9c8:	4831      	ldr	r0, [pc, #196]	; (800ea90 <etharp_find_entry+0x284>)
 800e9ca:	f003 fa67 	bl	8011e9c <iprintf>
 800e9ce:	e010      	b.n	800e9f2 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e9d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9d4:	2b09      	cmp	r3, #9
 800e9d6:	dc02      	bgt.n	800e9de <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800e9d8:	7ffb      	ldrb	r3, [r7, #31]
 800e9da:	773b      	strb	r3, [r7, #28]
 800e9dc:	e009      	b.n	800e9f2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e9de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e9e2:	2b09      	cmp	r3, #9
 800e9e4:	dc02      	bgt.n	800e9ec <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e9e6:	7efb      	ldrb	r3, [r7, #27]
 800e9e8:	773b      	strb	r3, [r7, #28]
 800e9ea:	e002      	b.n	800e9f2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800e9ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9f0:	e043      	b.n	800ea7a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e9f2:	7f3b      	ldrb	r3, [r7, #28]
 800e9f4:	2b09      	cmp	r3, #9
 800e9f6:	d906      	bls.n	800ea06 <etharp_find_entry+0x1fa>
 800e9f8:	4b23      	ldr	r3, [pc, #140]	; (800ea88 <etharp_find_entry+0x27c>)
 800e9fa:	f240 1281 	movw	r2, #385	; 0x181
 800e9fe:	4926      	ldr	r1, [pc, #152]	; (800ea98 <etharp_find_entry+0x28c>)
 800ea00:	4823      	ldr	r0, [pc, #140]	; (800ea90 <etharp_find_entry+0x284>)
 800ea02:	f003 fa4b 	bl	8011e9c <iprintf>
    etharp_free_entry(i);
 800ea06:	7f3b      	ldrb	r3, [r7, #28]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff fe25 	bl	800e658 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea0e:	7f3b      	ldrb	r3, [r7, #28]
 800ea10:	2b09      	cmp	r3, #9
 800ea12:	d906      	bls.n	800ea22 <etharp_find_entry+0x216>
 800ea14:	4b1c      	ldr	r3, [pc, #112]	; (800ea88 <etharp_find_entry+0x27c>)
 800ea16:	f240 1285 	movw	r2, #389	; 0x185
 800ea1a:	491f      	ldr	r1, [pc, #124]	; (800ea98 <etharp_find_entry+0x28c>)
 800ea1c:	481c      	ldr	r0, [pc, #112]	; (800ea90 <etharp_find_entry+0x284>)
 800ea1e:	f003 fa3d 	bl	8011e9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ea22:	7f3a      	ldrb	r2, [r7, #28]
 800ea24:	4917      	ldr	r1, [pc, #92]	; (800ea84 <etharp_find_entry+0x278>)
 800ea26:	4613      	mov	r3, r2
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	4413      	add	r3, r2
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	440b      	add	r3, r1
 800ea30:	3314      	adds	r3, #20
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d006      	beq.n	800ea46 <etharp_find_entry+0x23a>
 800ea38:	4b13      	ldr	r3, [pc, #76]	; (800ea88 <etharp_find_entry+0x27c>)
 800ea3a:	f240 1287 	movw	r2, #391	; 0x187
 800ea3e:	4917      	ldr	r1, [pc, #92]	; (800ea9c <etharp_find_entry+0x290>)
 800ea40:	4813      	ldr	r0, [pc, #76]	; (800ea90 <etharp_find_entry+0x284>)
 800ea42:	f003 fa2b 	bl	8011e9c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00a      	beq.n	800ea62 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ea4c:	7f3a      	ldrb	r2, [r7, #28]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6819      	ldr	r1, [r3, #0]
 800ea52:	480c      	ldr	r0, [pc, #48]	; (800ea84 <etharp_find_entry+0x278>)
 800ea54:	4613      	mov	r3, r2
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	4413      	add	r3, r2
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	4403      	add	r3, r0
 800ea5e:	3304      	adds	r3, #4
 800ea60:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ea62:	7f3a      	ldrb	r2, [r7, #28]
 800ea64:	4907      	ldr	r1, [pc, #28]	; (800ea84 <etharp_find_entry+0x278>)
 800ea66:	4613      	mov	r3, r2
 800ea68:	005b      	lsls	r3, r3, #1
 800ea6a:	4413      	add	r3, r2
 800ea6c:	00db      	lsls	r3, r3, #3
 800ea6e:	440b      	add	r3, r1
 800ea70:	3312      	adds	r3, #18
 800ea72:	2200      	movs	r2, #0
 800ea74:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800ea76:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3720      	adds	r7, #32
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	240019e0 	.word	0x240019e0
 800ea88:	08014274 	.word	0x08014274
 800ea8c:	080142ac 	.word	0x080142ac
 800ea90:	080142ec 	.word	0x080142ec
 800ea94:	08014314 	.word	0x08014314
 800ea98:	0801432c 	.word	0x0801432c
 800ea9c:	08014340 	.word	0x08014340

0800eaa0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af02      	add	r7, sp, #8
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eab4:	2b06      	cmp	r3, #6
 800eab6:	d006      	beq.n	800eac6 <etharp_update_arp_entry+0x26>
 800eab8:	4b48      	ldr	r3, [pc, #288]	; (800ebdc <etharp_update_arp_entry+0x13c>)
 800eaba:	f240 12ab 	movw	r2, #427	; 0x1ab
 800eabe:	4948      	ldr	r1, [pc, #288]	; (800ebe0 <etharp_update_arp_entry+0x140>)
 800eac0:	4848      	ldr	r0, [pc, #288]	; (800ebe4 <etharp_update_arp_entry+0x144>)
 800eac2:	f003 f9eb 	bl	8011e9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d012      	beq.n	800eaf2 <etharp_update_arp_entry+0x52>
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d00e      	beq.n	800eaf2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	68f9      	ldr	r1, [r7, #12]
 800eada:	4618      	mov	r0, r3
 800eadc:	f001 f8da 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800eae0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d105      	bne.n	800eaf2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eaee:	2be0      	cmp	r3, #224	; 0xe0
 800eaf0:	d102      	bne.n	800eaf8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eaf2:	f06f 030f 	mvn.w	r3, #15
 800eaf6:	e06c      	b.n	800ebd2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eaf8:	78fb      	ldrb	r3, [r7, #3]
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	4619      	mov	r1, r3
 800eafe:	68b8      	ldr	r0, [r7, #8]
 800eb00:	f7ff fe84 	bl	800e80c <etharp_find_entry>
 800eb04:	4603      	mov	r3, r0
 800eb06:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	da02      	bge.n	800eb16 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eb10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb14:	e05d      	b.n	800ebd2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eb16:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800eb1a:	4933      	ldr	r1, [pc, #204]	; (800ebe8 <etharp_update_arp_entry+0x148>)
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	005b      	lsls	r3, r3, #1
 800eb20:	4413      	add	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	440b      	add	r3, r1
 800eb26:	3314      	adds	r3, #20
 800eb28:	2202      	movs	r2, #2
 800eb2a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800eb2c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800eb30:	492d      	ldr	r1, [pc, #180]	; (800ebe8 <etharp_update_arp_entry+0x148>)
 800eb32:	4613      	mov	r3, r2
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	4413      	add	r3, r2
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	440b      	add	r3, r1
 800eb3c:	3308      	adds	r3, #8
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800eb42:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800eb46:	4613      	mov	r3, r2
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	4413      	add	r3, r2
 800eb4c:	00db      	lsls	r3, r3, #3
 800eb4e:	3308      	adds	r3, #8
 800eb50:	4a25      	ldr	r2, [pc, #148]	; (800ebe8 <etharp_update_arp_entry+0x148>)
 800eb52:	4413      	add	r3, r2
 800eb54:	3304      	adds	r3, #4
 800eb56:	2206      	movs	r2, #6
 800eb58:	6879      	ldr	r1, [r7, #4]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f003 f98b 	bl	8011e76 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800eb60:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800eb64:	4920      	ldr	r1, [pc, #128]	; (800ebe8 <etharp_update_arp_entry+0x148>)
 800eb66:	4613      	mov	r3, r2
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	4413      	add	r3, r2
 800eb6c:	00db      	lsls	r3, r3, #3
 800eb6e:	440b      	add	r3, r1
 800eb70:	3312      	adds	r3, #18
 800eb72:	2200      	movs	r2, #0
 800eb74:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800eb76:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800eb7a:	491b      	ldr	r1, [pc, #108]	; (800ebe8 <etharp_update_arp_entry+0x148>)
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	005b      	lsls	r3, r3, #1
 800eb80:	4413      	add	r3, r2
 800eb82:	00db      	lsls	r3, r3, #3
 800eb84:	440b      	add	r3, r1
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d021      	beq.n	800ebd0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800eb8c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800eb90:	4915      	ldr	r1, [pc, #84]	; (800ebe8 <etharp_update_arp_entry+0x148>)
 800eb92:	4613      	mov	r3, r2
 800eb94:	005b      	lsls	r3, r3, #1
 800eb96:	4413      	add	r3, r2
 800eb98:	00db      	lsls	r3, r3, #3
 800eb9a:	440b      	add	r3, r1
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800eba0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800eba4:	4910      	ldr	r1, [pc, #64]	; (800ebe8 <etharp_update_arp_entry+0x148>)
 800eba6:	4613      	mov	r3, r2
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	4413      	add	r3, r2
 800ebac:	00db      	lsls	r3, r3, #3
 800ebae:	440b      	add	r3, r1
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800ebba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6939      	ldr	r1, [r7, #16]
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f001 ff07 	bl	80109d8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ebca:	6938      	ldr	r0, [r7, #16]
 800ebcc:	f7fa fba6 	bl	800931c <pbuf_free>
  }
  return ERR_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	08014274 	.word	0x08014274
 800ebe0:	0801436c 	.word	0x0801436c
 800ebe4:	080142ec 	.word	0x080142ec
 800ebe8:	240019e0 	.word	0x240019e0

0800ebec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	73fb      	strb	r3, [r7, #15]
 800ebf8:	e01f      	b.n	800ec3a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800ebfa:	7bfa      	ldrb	r2, [r7, #15]
 800ebfc:	4912      	ldr	r1, [pc, #72]	; (800ec48 <etharp_cleanup_netif+0x5c>)
 800ebfe:	4613      	mov	r3, r2
 800ec00:	005b      	lsls	r3, r3, #1
 800ec02:	4413      	add	r3, r2
 800ec04:	00db      	lsls	r3, r3, #3
 800ec06:	440b      	add	r3, r1
 800ec08:	3314      	adds	r3, #20
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ec0e:	7bbb      	ldrb	r3, [r7, #14]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00f      	beq.n	800ec34 <etharp_cleanup_netif+0x48>
 800ec14:	7bfa      	ldrb	r2, [r7, #15]
 800ec16:	490c      	ldr	r1, [pc, #48]	; (800ec48 <etharp_cleanup_netif+0x5c>)
 800ec18:	4613      	mov	r3, r2
 800ec1a:	005b      	lsls	r3, r3, #1
 800ec1c:	4413      	add	r3, r2
 800ec1e:	00db      	lsls	r3, r3, #3
 800ec20:	440b      	add	r3, r1
 800ec22:	3308      	adds	r3, #8
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d103      	bne.n	800ec34 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff fd12 	bl	800e658 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
 800ec36:	3301      	adds	r3, #1
 800ec38:	73fb      	strb	r3, [r7, #15]
 800ec3a:	7bfb      	ldrb	r3, [r7, #15]
 800ec3c:	2b09      	cmp	r3, #9
 800ec3e:	d9dc      	bls.n	800ebfa <etharp_cleanup_netif+0xe>
    }
  }
}
 800ec40:	bf00      	nop
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	240019e0 	.word	0x240019e0

0800ec4c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ec4c:	b5b0      	push	{r4, r5, r7, lr}
 800ec4e:	b08a      	sub	sp, #40	; 0x28
 800ec50:	af04      	add	r7, sp, #16
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d107      	bne.n	800ec6c <etharp_input+0x20>
 800ec5c:	4b3d      	ldr	r3, [pc, #244]	; (800ed54 <etharp_input+0x108>)
 800ec5e:	f44f 7222 	mov.w	r2, #648	; 0x288
 800ec62:	493d      	ldr	r1, [pc, #244]	; (800ed58 <etharp_input+0x10c>)
 800ec64:	483d      	ldr	r0, [pc, #244]	; (800ed5c <etharp_input+0x110>)
 800ec66:	f003 f919 	bl	8011e9c <iprintf>
 800ec6a:	e06f      	b.n	800ed4c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec7c:	d10c      	bne.n	800ec98 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800ec82:	2b06      	cmp	r3, #6
 800ec84:	d108      	bne.n	800ec98 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ec8a:	2b04      	cmp	r3, #4
 800ec8c:	d104      	bne.n	800ec98 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	885b      	ldrh	r3, [r3, #2]
 800ec92:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ec94:	2b08      	cmp	r3, #8
 800ec96:	d003      	beq.n	800eca0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7fa fb3f 	bl	800931c <pbuf_free>
    return;
 800ec9e:	e055      	b.n	800ed4c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	330e      	adds	r3, #14
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	3318      	adds	r3, #24
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d102      	bne.n	800ecc0 <etharp_input+0x74>
    for_us = 0;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	75fb      	strb	r3, [r7, #23]
 800ecbe:	e009      	b.n	800ecd4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ecc0:	68ba      	ldr	r2, [r7, #8]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	bf0c      	ite	eq
 800eccc:	2301      	moveq	r3, #1
 800ecce:	2300      	movne	r3, #0
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	f103 0208 	add.w	r2, r3, #8
 800ecda:	7dfb      	ldrb	r3, [r7, #23]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d001      	beq.n	800ece4 <etharp_input+0x98>
 800ece0:	2301      	movs	r3, #1
 800ece2:	e000      	b.n	800ece6 <etharp_input+0x9a>
 800ece4:	2302      	movs	r3, #2
 800ece6:	f107 010c 	add.w	r1, r7, #12
 800ecea:	6838      	ldr	r0, [r7, #0]
 800ecec:	f7ff fed8 	bl	800eaa0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	88db      	ldrh	r3, [r3, #6]
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecfa:	d003      	beq.n	800ed04 <etharp_input+0xb8>
 800ecfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed00:	d01e      	beq.n	800ed40 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800ed02:	e020      	b.n	800ed46 <etharp_input+0xfa>
    if (for_us) {
 800ed04:	7dfb      	ldrb	r3, [r7, #23]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d01c      	beq.n	800ed44 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800ed20:	693a      	ldr	r2, [r7, #16]
 800ed22:	3208      	adds	r2, #8
      etharp_raw(netif,
 800ed24:	2102      	movs	r1, #2
 800ed26:	9103      	str	r1, [sp, #12]
 800ed28:	f107 010c 	add.w	r1, r7, #12
 800ed2c:	9102      	str	r1, [sp, #8]
 800ed2e:	9201      	str	r2, [sp, #4]
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	462b      	mov	r3, r5
 800ed34:	4622      	mov	r2, r4
 800ed36:	4601      	mov	r1, r0
 800ed38:	6838      	ldr	r0, [r7, #0]
 800ed3a:	f000 fae3 	bl	800f304 <etharp_raw>
    break;
 800ed3e:	e001      	b.n	800ed44 <etharp_input+0xf8>
    break;
 800ed40:	bf00      	nop
 800ed42:	e000      	b.n	800ed46 <etharp_input+0xfa>
    break;
 800ed44:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7fa fae8 	bl	800931c <pbuf_free>
}
 800ed4c:	3718      	adds	r7, #24
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bdb0      	pop	{r4, r5, r7, pc}
 800ed52:	bf00      	nop
 800ed54:	08014274 	.word	0x08014274
 800ed58:	080143c4 	.word	0x080143c4
 800ed5c:	080142ec 	.word	0x080142ec

0800ed60 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af02      	add	r7, sp, #8
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ed6e:	79fa      	ldrb	r2, [r7, #7]
 800ed70:	4944      	ldr	r1, [pc, #272]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800ed72:	4613      	mov	r3, r2
 800ed74:	005b      	lsls	r3, r3, #1
 800ed76:	4413      	add	r3, r2
 800ed78:	00db      	lsls	r3, r3, #3
 800ed7a:	440b      	add	r3, r1
 800ed7c:	3314      	adds	r3, #20
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d806      	bhi.n	800ed92 <etharp_output_to_arp_index+0x32>
 800ed84:	4b40      	ldr	r3, [pc, #256]	; (800ee88 <etharp_output_to_arp_index+0x128>)
 800ed86:	f240 22ed 	movw	r2, #749	; 0x2ed
 800ed8a:	4940      	ldr	r1, [pc, #256]	; (800ee8c <etharp_output_to_arp_index+0x12c>)
 800ed8c:	4840      	ldr	r0, [pc, #256]	; (800ee90 <etharp_output_to_arp_index+0x130>)
 800ed8e:	f003 f885 	bl	8011e9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ed92:	79fa      	ldrb	r2, [r7, #7]
 800ed94:	493b      	ldr	r1, [pc, #236]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800ed96:	4613      	mov	r3, r2
 800ed98:	005b      	lsls	r3, r3, #1
 800ed9a:	4413      	add	r3, r2
 800ed9c:	00db      	lsls	r3, r3, #3
 800ed9e:	440b      	add	r3, r1
 800eda0:	3314      	adds	r3, #20
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d153      	bne.n	800ee50 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800eda8:	79fa      	ldrb	r2, [r7, #7]
 800edaa:	4936      	ldr	r1, [pc, #216]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800edac:	4613      	mov	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	4413      	add	r3, r2
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	440b      	add	r3, r1
 800edb6:	3312      	adds	r3, #18
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800edbe:	d919      	bls.n	800edf4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800edc0:	79fa      	ldrb	r2, [r7, #7]
 800edc2:	4613      	mov	r3, r2
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	4413      	add	r3, r2
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	4a2e      	ldr	r2, [pc, #184]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800edcc:	4413      	add	r3, r2
 800edce:	3304      	adds	r3, #4
 800edd0:	4619      	mov	r1, r3
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f000 fb44 	bl	800f460 <etharp_request>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d138      	bne.n	800ee50 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800edde:	79fa      	ldrb	r2, [r7, #7]
 800ede0:	4928      	ldr	r1, [pc, #160]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	00db      	lsls	r3, r3, #3
 800edea:	440b      	add	r3, r1
 800edec:	3314      	adds	r3, #20
 800edee:	2203      	movs	r2, #3
 800edf0:	701a      	strb	r2, [r3, #0]
 800edf2:	e02d      	b.n	800ee50 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800edf4:	79fa      	ldrb	r2, [r7, #7]
 800edf6:	4923      	ldr	r1, [pc, #140]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800edf8:	4613      	mov	r3, r2
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	4413      	add	r3, r2
 800edfe:	00db      	lsls	r3, r3, #3
 800ee00:	440b      	add	r3, r1
 800ee02:	3312      	adds	r3, #18
 800ee04:	881b      	ldrh	r3, [r3, #0]
 800ee06:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ee0a:	d321      	bcc.n	800ee50 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ee0c:	79fa      	ldrb	r2, [r7, #7]
 800ee0e:	4613      	mov	r3, r2
 800ee10:	005b      	lsls	r3, r3, #1
 800ee12:	4413      	add	r3, r2
 800ee14:	00db      	lsls	r3, r3, #3
 800ee16:	4a1b      	ldr	r2, [pc, #108]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800ee18:	4413      	add	r3, r2
 800ee1a:	1d19      	adds	r1, r3, #4
 800ee1c:	79fa      	ldrb	r2, [r7, #7]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	005b      	lsls	r3, r3, #1
 800ee22:	4413      	add	r3, r2
 800ee24:	00db      	lsls	r3, r3, #3
 800ee26:	3308      	adds	r3, #8
 800ee28:	4a16      	ldr	r2, [pc, #88]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800ee2a:	4413      	add	r3, r2
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	461a      	mov	r2, r3
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	f000 faf3 	bl	800f41c <etharp_request_dst>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d109      	bne.n	800ee50 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee3c:	79fa      	ldrb	r2, [r7, #7]
 800ee3e:	4911      	ldr	r1, [pc, #68]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800ee40:	4613      	mov	r3, r2
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	4413      	add	r3, r2
 800ee46:	00db      	lsls	r3, r3, #3
 800ee48:	440b      	add	r3, r1
 800ee4a:	3314      	adds	r3, #20
 800ee4c:	2203      	movs	r2, #3
 800ee4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800ee56:	79fa      	ldrb	r2, [r7, #7]
 800ee58:	4613      	mov	r3, r2
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	4413      	add	r3, r2
 800ee5e:	00db      	lsls	r3, r3, #3
 800ee60:	3308      	adds	r3, #8
 800ee62:	4a08      	ldr	r2, [pc, #32]	; (800ee84 <etharp_output_to_arp_index+0x124>)
 800ee64:	4413      	add	r3, r2
 800ee66:	1d1a      	adds	r2, r3, #4
 800ee68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	460a      	mov	r2, r1
 800ee72:	68b9      	ldr	r1, [r7, #8]
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f001 fdaf 	bl	80109d8 <ethernet_output>
 800ee7a:	4603      	mov	r3, r0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	240019e0 	.word	0x240019e0
 800ee88:	08014274 	.word	0x08014274
 800ee8c:	080143e4 	.word	0x080143e4
 800ee90:	080142ec 	.word	0x080142ec

0800ee94 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b08a      	sub	sp, #40	; 0x28
 800ee98:	af02      	add	r7, sp, #8
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d106      	bne.n	800eeb8 <etharp_output+0x24>
 800eeaa:	4b69      	ldr	r3, [pc, #420]	; (800f050 <etharp_output+0x1bc>)
 800eeac:	f240 321b 	movw	r2, #795	; 0x31b
 800eeb0:	4968      	ldr	r1, [pc, #416]	; (800f054 <etharp_output+0x1c0>)
 800eeb2:	4869      	ldr	r0, [pc, #420]	; (800f058 <etharp_output+0x1c4>)
 800eeb4:	f002 fff2 	bl	8011e9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d106      	bne.n	800eecc <etharp_output+0x38>
 800eebe:	4b64      	ldr	r3, [pc, #400]	; (800f050 <etharp_output+0x1bc>)
 800eec0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800eec4:	4965      	ldr	r1, [pc, #404]	; (800f05c <etharp_output+0x1c8>)
 800eec6:	4864      	ldr	r0, [pc, #400]	; (800f058 <etharp_output+0x1c4>)
 800eec8:	f002 ffe8 	bl	8011e9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <etharp_output+0x4c>
 800eed2:	4b5f      	ldr	r3, [pc, #380]	; (800f050 <etharp_output+0x1bc>)
 800eed4:	f240 321d 	movw	r2, #797	; 0x31d
 800eed8:	4961      	ldr	r1, [pc, #388]	; (800f060 <etharp_output+0x1cc>)
 800eeda:	485f      	ldr	r0, [pc, #380]	; (800f058 <etharp_output+0x1c4>)
 800eedc:	f002 ffde 	bl	8011e9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	68f9      	ldr	r1, [r7, #12]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f000 fed4 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800eef2:	4b5c      	ldr	r3, [pc, #368]	; (800f064 <etharp_output+0x1d0>)
 800eef4:	61fb      	str	r3, [r7, #28]
 800eef6:	e09b      	b.n	800f030 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef00:	2be0      	cmp	r3, #224	; 0xe0
 800ef02:	d118      	bne.n	800ef36 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ef04:	2301      	movs	r3, #1
 800ef06:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ef0c:	235e      	movs	r3, #94	; 0x5e
 800ef0e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3301      	adds	r3, #1
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3302      	adds	r3, #2
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3303      	adds	r3, #3
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ef2e:	f107 0310 	add.w	r3, r7, #16
 800ef32:	61fb      	str	r3, [r7, #28]
 800ef34:	e07c      	b.n	800f030 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	405a      	eors	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3308      	adds	r3, #8
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4013      	ands	r3, r2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d012      	beq.n	800ef74 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef54:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d00b      	beq.n	800ef74 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	330c      	adds	r3, #12
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d003      	beq.n	800ef6e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	330c      	adds	r3, #12
 800ef6a:	61bb      	str	r3, [r7, #24]
 800ef6c:	e002      	b.n	800ef74 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ef6e:	f06f 0303 	mvn.w	r3, #3
 800ef72:	e069      	b.n	800f048 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ef74:	4b3c      	ldr	r3, [pc, #240]	; (800f068 <etharp_output+0x1d4>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4a3c      	ldr	r2, [pc, #240]	; (800f06c <etharp_output+0x1d8>)
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	005b      	lsls	r3, r3, #1
 800ef80:	440b      	add	r3, r1
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	4413      	add	r3, r2
 800ef86:	3314      	adds	r3, #20
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d917      	bls.n	800efbe <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	4b35      	ldr	r3, [pc, #212]	; (800f068 <etharp_output+0x1d4>)
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	4618      	mov	r0, r3
 800ef98:	4934      	ldr	r1, [pc, #208]	; (800f06c <etharp_output+0x1d8>)
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	005b      	lsls	r3, r3, #1
 800ef9e:	4403      	add	r3, r0
 800efa0:	00db      	lsls	r3, r3, #3
 800efa2:	440b      	add	r3, r1
 800efa4:	3304      	adds	r3, #4
 800efa6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d108      	bne.n	800efbe <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800efac:	4b2e      	ldr	r3, [pc, #184]	; (800f068 <etharp_output+0x1d4>)
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	461a      	mov	r2, r3
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f7ff fed3 	bl	800ed60 <etharp_output_to_arp_index>
 800efba:	4603      	mov	r3, r0
 800efbc:	e044      	b.n	800f048 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800efbe:	2300      	movs	r3, #0
 800efc0:	75fb      	strb	r3, [r7, #23]
 800efc2:	e02a      	b.n	800f01a <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800efc4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800efc8:	4928      	ldr	r1, [pc, #160]	; (800f06c <etharp_output+0x1d8>)
 800efca:	4613      	mov	r3, r2
 800efcc:	005b      	lsls	r3, r3, #1
 800efce:	4413      	add	r3, r2
 800efd0:	00db      	lsls	r3, r3, #3
 800efd2:	440b      	add	r3, r1
 800efd4:	3314      	adds	r3, #20
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d918      	bls.n	800f00e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	6819      	ldr	r1, [r3, #0]
 800efe0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800efe4:	4821      	ldr	r0, [pc, #132]	; (800f06c <etharp_output+0x1d8>)
 800efe6:	4613      	mov	r3, r2
 800efe8:	005b      	lsls	r3, r3, #1
 800efea:	4413      	add	r3, r2
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	4403      	add	r3, r0
 800eff0:	3304      	adds	r3, #4
 800eff2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800eff4:	4299      	cmp	r1, r3
 800eff6:	d10a      	bne.n	800f00e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800eff8:	7dfa      	ldrb	r2, [r7, #23]
 800effa:	4b1b      	ldr	r3, [pc, #108]	; (800f068 <etharp_output+0x1d4>)
 800effc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800effe:	7dfb      	ldrb	r3, [r7, #23]
 800f000:	461a      	mov	r2, r3
 800f002:	68b9      	ldr	r1, [r7, #8]
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f7ff feab 	bl	800ed60 <etharp_output_to_arp_index>
 800f00a:	4603      	mov	r3, r0
 800f00c:	e01c      	b.n	800f048 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f00e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f012:	b2db      	uxtb	r3, r3
 800f014:	3301      	adds	r3, #1
 800f016:	b2db      	uxtb	r3, r3
 800f018:	75fb      	strb	r3, [r7, #23]
 800f01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f01e:	2b09      	cmp	r3, #9
 800f020:	ddd0      	ble.n	800efc4 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	69b9      	ldr	r1, [r7, #24]
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f000 f822 	bl	800f070 <etharp_query>
 800f02c:	4603      	mov	r3, r0
 800f02e:	e00b      	b.n	800f048 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f103 0225 	add.w	r2, r3, #37	; 0x25
 800f036:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	68b9      	ldr	r1, [r7, #8]
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f001 fcc9 	bl	80109d8 <ethernet_output>
 800f046:	4603      	mov	r3, r0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3720      	adds	r7, #32
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	08014274 	.word	0x08014274
 800f054:	080143c4 	.word	0x080143c4
 800f058:	080142ec 	.word	0x080142ec
 800f05c:	08014414 	.word	0x08014414
 800f060:	080143b4 	.word	0x080143b4
 800f064:	08014a10 	.word	0x08014a10
 800f068:	24001ad0 	.word	0x24001ad0
 800f06c:	240019e0 	.word	0x240019e0

0800f070 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08c      	sub	sp, #48	; 0x30
 800f074:	af02      	add	r7, sp, #8
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	3325      	adds	r3, #37	; 0x25
 800f080:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f082:	23ff      	movs	r3, #255	; 0xff
 800f084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f088:	2300      	movs	r3, #0
 800f08a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	68f9      	ldr	r1, [r7, #12]
 800f092:	4618      	mov	r0, r3
 800f094:	f000 fdfe 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d10c      	bne.n	800f0b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0a6:	2be0      	cmp	r3, #224	; 0xe0
 800f0a8:	d006      	beq.n	800f0b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f0b8:	f06f 030f 	mvn.w	r3, #15
 800f0bc:	e10f      	b.n	800f2de <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	68b8      	ldr	r0, [r7, #8]
 800f0c4:	f7ff fba2 	bl	800e80c <etharp_find_entry>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800f0cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	da02      	bge.n	800f0da <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800f0d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f0d8:	e101      	b.n	800f2de <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f0da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f0de:	4982      	ldr	r1, [pc, #520]	; (800f2e8 <etharp_query+0x278>)
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	005b      	lsls	r3, r3, #1
 800f0e4:	4413      	add	r3, r2
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	440b      	add	r3, r1
 800f0ea:	3314      	adds	r3, #20
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d117      	bne.n	800f122 <etharp_query+0xb2>
    is_new_entry = 1;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f0f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f0fa:	497b      	ldr	r1, [pc, #492]	; (800f2e8 <etharp_query+0x278>)
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	4413      	add	r3, r2
 800f102:	00db      	lsls	r3, r3, #3
 800f104:	440b      	add	r3, r1
 800f106:	3314      	adds	r3, #20
 800f108:	2201      	movs	r2, #1
 800f10a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f10c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f110:	4975      	ldr	r1, [pc, #468]	; (800f2e8 <etharp_query+0x278>)
 800f112:	4613      	mov	r3, r2
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	4413      	add	r3, r2
 800f118:	00db      	lsls	r3, r3, #3
 800f11a:	440b      	add	r3, r1
 800f11c:	3308      	adds	r3, #8
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f122:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f126:	4970      	ldr	r1, [pc, #448]	; (800f2e8 <etharp_query+0x278>)
 800f128:	4613      	mov	r3, r2
 800f12a:	005b      	lsls	r3, r3, #1
 800f12c:	4413      	add	r3, r2
 800f12e:	00db      	lsls	r3, r3, #3
 800f130:	440b      	add	r3, r1
 800f132:	3314      	adds	r3, #20
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d012      	beq.n	800f160 <etharp_query+0xf0>
 800f13a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f13e:	496a      	ldr	r1, [pc, #424]	; (800f2e8 <etharp_query+0x278>)
 800f140:	4613      	mov	r3, r2
 800f142:	005b      	lsls	r3, r3, #1
 800f144:	4413      	add	r3, r2
 800f146:	00db      	lsls	r3, r3, #3
 800f148:	440b      	add	r3, r1
 800f14a:	3314      	adds	r3, #20
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d806      	bhi.n	800f160 <etharp_query+0xf0>
 800f152:	4b66      	ldr	r3, [pc, #408]	; (800f2ec <etharp_query+0x27c>)
 800f154:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f158:	4965      	ldr	r1, [pc, #404]	; (800f2f0 <etharp_query+0x280>)
 800f15a:	4866      	ldr	r0, [pc, #408]	; (800f2f4 <etharp_query+0x284>)
 800f15c:	f002 fe9e 	bl	8011e9c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f160:	6a3b      	ldr	r3, [r7, #32]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d102      	bne.n	800f16c <etharp_query+0xfc>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d10c      	bne.n	800f186 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f000 f976 	bl	800f460 <etharp_request>
 800f174:	4603      	mov	r3, r0
 800f176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d102      	bne.n	800f186 <etharp_query+0x116>
      return result;
 800f180:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f184:	e0ab      	b.n	800f2de <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d106      	bne.n	800f19a <etharp_query+0x12a>
 800f18c:	4b57      	ldr	r3, [pc, #348]	; (800f2ec <etharp_query+0x27c>)
 800f18e:	f240 32db 	movw	r2, #987	; 0x3db
 800f192:	4959      	ldr	r1, [pc, #356]	; (800f2f8 <etharp_query+0x288>)
 800f194:	4857      	ldr	r0, [pc, #348]	; (800f2f4 <etharp_query+0x284>)
 800f196:	f002 fe81 	bl	8011e9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f19a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f19e:	4952      	ldr	r1, [pc, #328]	; (800f2e8 <etharp_query+0x278>)
 800f1a0:	4613      	mov	r3, r2
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	4413      	add	r3, r2
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	440b      	add	r3, r1
 800f1aa:	3314      	adds	r3, #20
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d919      	bls.n	800f1e6 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800f1b2:	7cfa      	ldrb	r2, [r7, #19]
 800f1b4:	4b51      	ldr	r3, [pc, #324]	; (800f2fc <etharp_query+0x28c>)
 800f1b6:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f1b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	005b      	lsls	r3, r3, #1
 800f1c0:	4413      	add	r3, r2
 800f1c2:	00db      	lsls	r3, r3, #3
 800f1c4:	3308      	adds	r3, #8
 800f1c6:	4a48      	ldr	r2, [pc, #288]	; (800f2e8 <etharp_query+0x278>)
 800f1c8:	4413      	add	r3, r2
 800f1ca:	1d1a      	adds	r2, r3, #4
 800f1cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	4613      	mov	r3, r2
 800f1d4:	697a      	ldr	r2, [r7, #20]
 800f1d6:	6879      	ldr	r1, [r7, #4]
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f001 fbfd 	bl	80109d8 <ethernet_output>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1e4:	e079      	b.n	800f2da <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f1e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f1ea:	493f      	ldr	r1, [pc, #252]	; (800f2e8 <etharp_query+0x278>)
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	440b      	add	r3, r1
 800f1f6:	3314      	adds	r3, #20
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d16d      	bne.n	800f2da <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f206:	e01a      	b.n	800f23e <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	895a      	ldrh	r2, [r3, #10]
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	891b      	ldrh	r3, [r3, #8]
 800f210:	429a      	cmp	r2, r3
 800f212:	d10a      	bne.n	800f22a <etharp_query+0x1ba>
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d006      	beq.n	800f22a <etharp_query+0x1ba>
 800f21c:	4b33      	ldr	r3, [pc, #204]	; (800f2ec <etharp_query+0x27c>)
 800f21e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800f222:	4937      	ldr	r1, [pc, #220]	; (800f300 <etharp_query+0x290>)
 800f224:	4833      	ldr	r0, [pc, #204]	; (800f2f4 <etharp_query+0x284>)
 800f226:	f002 fe39 	bl	8011e9c <iprintf>
      if (p->type != PBUF_ROM) {
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	7b1b      	ldrb	r3, [r3, #12]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d002      	beq.n	800f238 <etharp_query+0x1c8>
        copy_needed = 1;
 800f232:	2301      	movs	r3, #1
 800f234:	61bb      	str	r3, [r7, #24]
        break;
 800f236:	e005      	b.n	800f244 <etharp_query+0x1d4>
      }
      p = p->next;
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1e1      	bne.n	800f208 <etharp_query+0x198>
    }
    if (copy_needed) {
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d017      	beq.n	800f27a <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	891b      	ldrh	r3, [r3, #8]
 800f24e:	2200      	movs	r2, #0
 800f250:	4619      	mov	r1, r3
 800f252:	2002      	movs	r0, #2
 800f254:	f7f9 fcf0 	bl	8008c38 <pbuf_alloc>
 800f258:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d011      	beq.n	800f284 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800f260:	6879      	ldr	r1, [r7, #4]
 800f262:	69f8      	ldr	r0, [r7, #28]
 800f264:	f7fa f97e 	bl	8009564 <pbuf_copy>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00a      	beq.n	800f284 <etharp_query+0x214>
          pbuf_free(p);
 800f26e:	69f8      	ldr	r0, [r7, #28]
 800f270:	f7fa f854 	bl	800931c <pbuf_free>
          p = NULL;
 800f274:	2300      	movs	r3, #0
 800f276:	61fb      	str	r3, [r7, #28]
 800f278:	e004      	b.n	800f284 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f27e:	69f8      	ldr	r0, [r7, #28]
 800f280:	f7fa f8f8 	bl	8009474 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d024      	beq.n	800f2d4 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f28a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f28e:	4916      	ldr	r1, [pc, #88]	; (800f2e8 <etharp_query+0x278>)
 800f290:	4613      	mov	r3, r2
 800f292:	005b      	lsls	r3, r3, #1
 800f294:	4413      	add	r3, r2
 800f296:	00db      	lsls	r3, r3, #3
 800f298:	440b      	add	r3, r1
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00b      	beq.n	800f2b8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800f2a0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f2a4:	4910      	ldr	r1, [pc, #64]	; (800f2e8 <etharp_query+0x278>)
 800f2a6:	4613      	mov	r3, r2
 800f2a8:	005b      	lsls	r3, r3, #1
 800f2aa:	4413      	add	r3, r2
 800f2ac:	00db      	lsls	r3, r3, #3
 800f2ae:	440b      	add	r3, r1
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fa f832 	bl	800931c <pbuf_free>
      }
      arp_table[i].q = p;
 800f2b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800f2bc:	490a      	ldr	r1, [pc, #40]	; (800f2e8 <etharp_query+0x278>)
 800f2be:	4613      	mov	r3, r2
 800f2c0:	005b      	lsls	r3, r3, #1
 800f2c2:	4413      	add	r3, r2
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	440b      	add	r3, r1
 800f2c8:	69fa      	ldr	r2, [r7, #28]
 800f2ca:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f2d2:	e002      	b.n	800f2da <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f2d4:	23ff      	movs	r3, #255	; 0xff
 800f2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f2da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3728      	adds	r7, #40	; 0x28
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	240019e0 	.word	0x240019e0
 800f2ec:	08014274 	.word	0x08014274
 800f2f0:	08014420 	.word	0x08014420
 800f2f4:	080142ec 	.word	0x080142ec
 800f2f8:	08014414 	.word	0x08014414
 800f2fc:	24001ad0 	.word	0x24001ad0
 800f300:	08014448 	.word	0x08014448

0800f304 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b08a      	sub	sp, #40	; 0x28
 800f308:	af02      	add	r7, sp, #8
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
 800f310:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <etharp_raw+0x26>
 800f31c:	4b3a      	ldr	r3, [pc, #232]	; (800f408 <etharp_raw+0x104>)
 800f31e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800f322:	493a      	ldr	r1, [pc, #232]	; (800f40c <etharp_raw+0x108>)
 800f324:	483a      	ldr	r0, [pc, #232]	; (800f410 <etharp_raw+0x10c>)
 800f326:	f002 fdb9 	bl	8011e9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f32a:	2200      	movs	r2, #0
 800f32c:	211c      	movs	r1, #28
 800f32e:	2002      	movs	r0, #2
 800f330:	f7f9 fc82 	bl	8008c38 <pbuf_alloc>
 800f334:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d102      	bne.n	800f342 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f340:	e05d      	b.n	800f3fe <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	895b      	ldrh	r3, [r3, #10]
 800f346:	2b1b      	cmp	r3, #27
 800f348:	d806      	bhi.n	800f358 <etharp_raw+0x54>
 800f34a:	4b2f      	ldr	r3, [pc, #188]	; (800f408 <etharp_raw+0x104>)
 800f34c:	f240 4264 	movw	r2, #1124	; 0x464
 800f350:	4930      	ldr	r1, [pc, #192]	; (800f414 <etharp_raw+0x110>)
 800f352:	482f      	ldr	r0, [pc, #188]	; (800f410 <etharp_raw+0x10c>)
 800f354:	f002 fda2 	bl	8011e9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f35e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f360:	4618      	mov	r0, r3
 800f362:	f7f8 fe33 	bl	8007fcc <lwip_htons>
 800f366:	4603      	mov	r3, r0
 800f368:	461a      	mov	r2, r3
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f374:	2b06      	cmp	r3, #6
 800f376:	d006      	beq.n	800f386 <etharp_raw+0x82>
 800f378:	4b23      	ldr	r3, [pc, #140]	; (800f408 <etharp_raw+0x104>)
 800f37a:	f240 426b 	movw	r2, #1131	; 0x46b
 800f37e:	4926      	ldr	r1, [pc, #152]	; (800f418 <etharp_raw+0x114>)
 800f380:	4823      	ldr	r0, [pc, #140]	; (800f410 <etharp_raw+0x10c>)
 800f382:	f002 fd8b 	bl	8011e9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	3308      	adds	r3, #8
 800f38a:	2206      	movs	r2, #6
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	4618      	mov	r0, r3
 800f390:	f002 fd71 	bl	8011e76 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	3312      	adds	r3, #18
 800f398:	2206      	movs	r2, #6
 800f39a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f39c:	4618      	mov	r0, r3
 800f39e:	f002 fd6a 	bl	8011e76 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	330e      	adds	r3, #14
 800f3a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3a8:	6812      	ldr	r2, [r2, #0]
 800f3aa:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	3318      	adds	r3, #24
 800f3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3b2:	6812      	ldr	r2, [r2, #0]
 800f3b4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	701a      	strb	r2, [r3, #0]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f042 0201 	orr.w	r2, r2, #1
 800f3c2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f042 0208 	orr.w	r2, r2, #8
 800f3cc:	709a      	strb	r2, [r3, #2]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	2206      	movs	r2, #6
 800f3d6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2204      	movs	r2, #4
 800f3dc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f3de:	f640 0306 	movw	r3, #2054	; 0x806
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	69b9      	ldr	r1, [r7, #24]
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f001 faf4 	bl	80109d8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f3f0:	69b8      	ldr	r0, [r7, #24]
 800f3f2:	f7f9 ff93 	bl	800931c <pbuf_free>
  p = NULL;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f3fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3720      	adds	r7, #32
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	08014274 	.word	0x08014274
 800f40c:	080143c4 	.word	0x080143c4
 800f410:	080142ec 	.word	0x080142ec
 800f414:	08014464 	.word	0x08014464
 800f418:	08014498 	.word	0x08014498

0800f41c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b088      	sub	sp, #32
 800f420:	af04      	add	r7, sp, #16
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f438:	2201      	movs	r2, #1
 800f43a:	9203      	str	r2, [sp, #12]
 800f43c:	68ba      	ldr	r2, [r7, #8]
 800f43e:	9202      	str	r2, [sp, #8]
 800f440:	4a06      	ldr	r2, [pc, #24]	; (800f45c <etharp_request_dst+0x40>)
 800f442:	9201      	str	r2, [sp, #4]
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	4603      	mov	r3, r0
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f7ff ff5a 	bl	800f304 <etharp_raw>
 800f450:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f452:	4618      	mov	r0, r3
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	08014a18 	.word	0x08014a18

0800f460 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f46a:	4a05      	ldr	r2, [pc, #20]	; (800f480 <etharp_request+0x20>)
 800f46c:	6839      	ldr	r1, [r7, #0]
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7ff ffd4 	bl	800f41c <etharp_request_dst>
 800f474:	4603      	mov	r3, r0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	08014a10 	.word	0x08014a10

0800f484 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b08e      	sub	sp, #56	; 0x38
 800f488:	af04      	add	r7, sp, #16
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f48e:	4b7a      	ldr	r3, [pc, #488]	; (800f678 <icmp_input+0x1f4>)
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800f494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	f003 030f 	and.w	r3, r3, #15
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f4a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4a6:	2b13      	cmp	r3, #19
 800f4a8:	f240 80d1 	bls.w	800f64e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	895b      	ldrh	r3, [r3, #10]
 800f4b0:	2b03      	cmp	r3, #3
 800f4b2:	f240 80ce 	bls.w	800f652 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f4c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f000 80bb 	beq.w	800f640 <icmp_input+0x1bc>
 800f4ca:	2b08      	cmp	r3, #8
 800f4cc:	f040 80bb 	bne.w	800f646 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800f4d0:	4b6a      	ldr	r3, [pc, #424]	; (800f67c <icmp_input+0x1f8>)
 800f4d2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f4d4:	4b68      	ldr	r3, [pc, #416]	; (800f678 <icmp_input+0x1f4>)
 800f4d6:	695b      	ldr	r3, [r3, #20]
 800f4d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4dc:	2be0      	cmp	r3, #224	; 0xe0
 800f4de:	f000 80bf 	beq.w	800f660 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f4e2:	4b65      	ldr	r3, [pc, #404]	; (800f678 <icmp_input+0x1f4>)
 800f4e4:	695a      	ldr	r2, [r3, #20]
 800f4e6:	4b64      	ldr	r3, [pc, #400]	; (800f678 <icmp_input+0x1f4>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	f000 fbd1 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f040 80b5 	bne.w	800f664 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	891b      	ldrh	r3, [r3, #8]
 800f4fe:	2b07      	cmp	r3, #7
 800f500:	f240 80a9 	bls.w	800f656 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800f504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f506:	330e      	adds	r3, #14
 800f508:	b29b      	uxth	r3, r3
 800f50a:	b21b      	sxth	r3, r3
 800f50c:	4619      	mov	r1, r3
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7f9 fee0 	bl	80092d4 <pbuf_header>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d046      	beq.n	800f5a8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	891a      	ldrh	r2, [r3, #8]
 800f51e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f520:	4413      	add	r3, r2
 800f522:	b29b      	uxth	r3, r3
 800f524:	2200      	movs	r2, #0
 800f526:	4619      	mov	r1, r3
 800f528:	2002      	movs	r0, #2
 800f52a:	f7f9 fb85 	bl	8008c38 <pbuf_alloc>
 800f52e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	2b00      	cmp	r3, #0
 800f534:	f000 8098 	beq.w	800f668 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	895b      	ldrh	r3, [r3, #10]
 800f53c:	461a      	mov	r2, r3
 800f53e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f540:	3308      	adds	r3, #8
 800f542:	429a      	cmp	r2, r3
 800f544:	d203      	bcs.n	800f54e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800f546:	69b8      	ldr	r0, [r7, #24]
 800f548:	f7f9 fee8 	bl	800931c <pbuf_free>
        goto icmperr;
 800f54c:	e08d      	b.n	800f66a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f556:	4618      	mov	r0, r3
 800f558:	f002 fc8d 	bl	8011e76 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800f55c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f55e:	425b      	negs	r3, r3
 800f560:	b29b      	uxth	r3, r3
 800f562:	b21b      	sxth	r3, r3
 800f564:	4619      	mov	r1, r3
 800f566:	69b8      	ldr	r0, [r7, #24]
 800f568:	f7f9 feb4 	bl	80092d4 <pbuf_header>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d009      	beq.n	800f586 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f572:	4b43      	ldr	r3, [pc, #268]	; (800f680 <icmp_input+0x1fc>)
 800f574:	22af      	movs	r2, #175	; 0xaf
 800f576:	4943      	ldr	r1, [pc, #268]	; (800f684 <icmp_input+0x200>)
 800f578:	4843      	ldr	r0, [pc, #268]	; (800f688 <icmp_input+0x204>)
 800f57a:	f002 fc8f 	bl	8011e9c <iprintf>
        pbuf_free(r);
 800f57e:	69b8      	ldr	r0, [r7, #24]
 800f580:	f7f9 fecc 	bl	800931c <pbuf_free>
        goto icmperr;
 800f584:	e071      	b.n	800f66a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800f586:	6879      	ldr	r1, [r7, #4]
 800f588:	69b8      	ldr	r0, [r7, #24]
 800f58a:	f7f9 ffeb 	bl	8009564 <pbuf_copy>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d003      	beq.n	800f59c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800f594:	69b8      	ldr	r0, [r7, #24]
 800f596:	f7f9 fec1 	bl	800931c <pbuf_free>
        goto icmperr;
 800f59a:	e066      	b.n	800f66a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7f9 febd 	bl	800931c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	607b      	str	r3, [r7, #4]
 800f5a6:	e015      	b.n	800f5d4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800f5a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5aa:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800f5ae:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800f5b2:	33f2      	adds	r3, #242	; 0xf2
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	b21b      	sxth	r3, r3
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f7f9 fe8a 	bl	80092d4 <pbuf_header>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d006      	beq.n	800f5d4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f5c6:	4b2e      	ldr	r3, [pc, #184]	; (800f680 <icmp_input+0x1fc>)
 800f5c8:	22c0      	movs	r2, #192	; 0xc0
 800f5ca:	4930      	ldr	r1, [pc, #192]	; (800f68c <icmp_input+0x208>)
 800f5cc:	482e      	ldr	r0, [pc, #184]	; (800f688 <icmp_input+0x204>)
 800f5ce:	f002 fc65 	bl	8011e9c <iprintf>
        goto icmperr;
 800f5d2:	e04a      	b.n	800f66a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800f5da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7f9 fe77 	bl	80092d4 <pbuf_header>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d12b      	bne.n	800f644 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f5fa:	4b1f      	ldr	r3, [pc, #124]	; (800f678 <icmp_input+0x1f4>)
 800f5fc:	691a      	ldr	r2, [r3, #16]
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2200      	movs	r2, #0
 800f606:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	2200      	movs	r2, #0
 800f60c:	709a      	strb	r2, [r3, #2]
 800f60e:	2200      	movs	r2, #0
 800f610:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	22ff      	movs	r2, #255	; 0xff
 800f616:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	2200      	movs	r2, #0
 800f61c:	729a      	strb	r2, [r3, #10]
 800f61e:	2200      	movs	r2, #0
 800f620:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	9302      	str	r3, [sp, #8]
 800f626:	2301      	movs	r3, #1
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	2300      	movs	r3, #0
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	23ff      	movs	r3, #255	; 0xff
 800f630:	2200      	movs	r2, #0
 800f632:	69f9      	ldr	r1, [r7, #28]
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 fa5b 	bl	800faf0 <ip4_output_if>
 800f63a:	4603      	mov	r3, r0
 800f63c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800f63e:	e001      	b.n	800f644 <icmp_input+0x1c0>
    break;
 800f640:	bf00      	nop
 800f642:	e000      	b.n	800f646 <icmp_input+0x1c2>
    break;
 800f644:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f7f9 fe68 	bl	800931c <pbuf_free>
  return;
 800f64c:	e011      	b.n	800f672 <icmp_input+0x1ee>
    goto lenerr;
 800f64e:	bf00      	nop
 800f650:	e002      	b.n	800f658 <icmp_input+0x1d4>
    goto lenerr;
 800f652:	bf00      	nop
 800f654:	e000      	b.n	800f658 <icmp_input+0x1d4>
      goto lenerr;
 800f656:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7f9 fe5f 	bl	800931c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f65e:	e008      	b.n	800f672 <icmp_input+0x1ee>
      goto icmperr;
 800f660:	bf00      	nop
 800f662:	e002      	b.n	800f66a <icmp_input+0x1e6>
      goto icmperr;
 800f664:	bf00      	nop
 800f666:	e000      	b.n	800f66a <icmp_input+0x1e6>
        goto icmperr;
 800f668:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f7f9 fe56 	bl	800931c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f670:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f672:	3728      	adds	r7, #40	; 0x28
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	24001af4 	.word	0x24001af4
 800f67c:	24001b08 	.word	0x24001b08
 800f680:	080144dc 	.word	0x080144dc
 800f684:	08014514 	.word	0x08014514
 800f688:	0801454c 	.word	0x0801454c
 800f68c:	08014574 	.word	0x08014574

0800f690 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	460b      	mov	r3, r1
 800f69a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f69c:	78fb      	ldrb	r3, [r7, #3]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	2103      	movs	r1, #3
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f814 	bl	800f6d0 <icmp_send_response>
}
 800f6a8:	bf00      	nop
 800f6aa:	3708      	adds	r7, #8
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f6bc:	78fb      	ldrb	r3, [r7, #3]
 800f6be:	461a      	mov	r2, r3
 800f6c0:	210b      	movs	r1, #11
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f804 	bl	800f6d0 <icmp_send_response>
}
 800f6c8:	bf00      	nop
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b08c      	sub	sp, #48	; 0x30
 800f6d4:	af04      	add	r7, sp, #16
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	70fb      	strb	r3, [r7, #3]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2124      	movs	r1, #36	; 0x24
 800f6e4:	2001      	movs	r0, #1
 800f6e6:	f7f9 faa7 	bl	8008c38 <pbuf_alloc>
 800f6ea:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d04c      	beq.n	800f78c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	895b      	ldrh	r3, [r3, #10]
 800f6f6:	2b23      	cmp	r3, #35	; 0x23
 800f6f8:	d806      	bhi.n	800f708 <icmp_send_response+0x38>
 800f6fa:	4b26      	ldr	r3, [pc, #152]	; (800f794 <icmp_send_response+0xc4>)
 800f6fc:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800f700:	4925      	ldr	r1, [pc, #148]	; (800f798 <icmp_send_response+0xc8>)
 800f702:	4826      	ldr	r0, [pc, #152]	; (800f79c <icmp_send_response+0xcc>)
 800f704:	f002 fbca 	bl	8011e9c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	78fa      	ldrb	r2, [r7, #3]
 800f718:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	78ba      	ldrb	r2, [r7, #2]
 800f71e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2200      	movs	r2, #0
 800f724:	711a      	strb	r2, [r3, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	2200      	movs	r2, #0
 800f72e:	719a      	strb	r2, [r3, #6]
 800f730:	2200      	movs	r2, #0
 800f732:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	f103 0008 	add.w	r0, r3, #8
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	221c      	movs	r2, #28
 800f742:	4619      	mov	r1, r3
 800f744:	f002 fb97 	bl	8011e76 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f74e:	f107 030c 	add.w	r3, r7, #12
 800f752:	4618      	mov	r0, r3
 800f754:	f000 f824 	bl	800f7a0 <ip4_route>
 800f758:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d011      	beq.n	800f784 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	2200      	movs	r2, #0
 800f764:	709a      	strb	r2, [r3, #2]
 800f766:	2200      	movs	r2, #0
 800f768:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f76a:	f107 020c 	add.w	r2, r7, #12
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	9302      	str	r3, [sp, #8]
 800f772:	2301      	movs	r3, #1
 800f774:	9301      	str	r3, [sp, #4]
 800f776:	2300      	movs	r3, #0
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	23ff      	movs	r3, #255	; 0xff
 800f77c:	2100      	movs	r1, #0
 800f77e:	69f8      	ldr	r0, [r7, #28]
 800f780:	f000 f9b6 	bl	800faf0 <ip4_output_if>
  }
  pbuf_free(q);
 800f784:	69f8      	ldr	r0, [r7, #28]
 800f786:	f7f9 fdc9 	bl	800931c <pbuf_free>
 800f78a:	e000      	b.n	800f78e <icmp_send_response+0xbe>
    return;
 800f78c:	bf00      	nop
}
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	080144dc 	.word	0x080144dc
 800f798:	080145a8 	.word	0x080145a8
 800f79c:	0801454c 	.word	0x0801454c

0800f7a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f7a8:	4b30      	ldr	r3, [pc, #192]	; (800f86c <ip4_route+0xcc>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	60fb      	str	r3, [r7, #12]
 800f7ae:	e036      	b.n	800f81e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f7b6:	f003 0301 	and.w	r3, r3, #1
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d02b      	beq.n	800f818 <ip4_route+0x78>
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f7c6:	089b      	lsrs	r3, r3, #2
 800f7c8:	f003 0301 	and.w	r3, r3, #1
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d022      	beq.n	800f818 <ip4_route+0x78>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	3304      	adds	r3, #4
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d01d      	beq.n	800f818 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	3304      	adds	r3, #4
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	405a      	eors	r2, r3
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d101      	bne.n	800f7f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	e033      	b.n	800f860 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f7fe:	f003 0302 	and.w	r3, r3, #2
 800f802:	2b00      	cmp	r3, #0
 800f804:	d108      	bne.n	800f818 <ip4_route+0x78>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	330c      	adds	r3, #12
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	429a      	cmp	r2, r3
 800f812:	d101      	bne.n	800f818 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	e023      	b.n	800f860 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1c5      	bne.n	800f7b0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f824:	4b12      	ldr	r3, [pc, #72]	; (800f870 <ip4_route+0xd0>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d015      	beq.n	800f858 <ip4_route+0xb8>
 800f82c:	4b10      	ldr	r3, [pc, #64]	; (800f870 <ip4_route+0xd0>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f834:	f003 0301 	and.w	r3, r3, #1
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00d      	beq.n	800f858 <ip4_route+0xb8>
 800f83c:	4b0c      	ldr	r3, [pc, #48]	; (800f870 <ip4_route+0xd0>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f844:	f003 0304 	and.w	r3, r3, #4
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d005      	beq.n	800f858 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800f84c:	4b08      	ldr	r3, [pc, #32]	; (800f870 <ip4_route+0xd0>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3304      	adds	r3, #4
 800f852:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f854:	2b00      	cmp	r3, #0
 800f856:	d101      	bne.n	800f85c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f858:	2300      	movs	r3, #0
 800f85a:	e001      	b.n	800f860 <ip4_route+0xc0>
  }

  return netif_default;
 800f85c:	4b04      	ldr	r3, [pc, #16]	; (800f870 <ip4_route+0xd0>)
 800f85e:	681b      	ldr	r3, [r3, #0]
}
 800f860:	4618      	mov	r0, r3
 800f862:	3714      	adds	r7, #20
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	24005014 	.word	0x24005014
 800f870:	24005018 	.word	0x24005018

0800f874 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b086      	sub	sp, #24
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	091b      	lsrs	r3, r3, #4
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	2b04      	cmp	r3, #4
 800f88e:	d004      	beq.n	800f89a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7f9 fd43 	bl	800931c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f896:	2300      	movs	r3, #0
 800f898:	e122      	b.n	800fae0 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	f003 030f 	and.w	r3, r3, #15
 800f8a4:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800f8a6:	897b      	ldrh	r3, [r7, #10]
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	885b      	ldrh	r3, [r3, #2]
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f8 fb8a 	bl	8007fcc <lwip_htons>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	891b      	ldrh	r3, [r3, #8]
 800f8c0:	893a      	ldrh	r2, [r7, #8]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d204      	bcs.n	800f8d0 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800f8c6:	893b      	ldrh	r3, [r7, #8]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7f9 fbb2 	bl	8009034 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	895b      	ldrh	r3, [r3, #10]
 800f8d4:	897a      	ldrh	r2, [r7, #10]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d807      	bhi.n	800f8ea <ip4_input+0x76>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	891b      	ldrh	r3, [r3, #8]
 800f8de:	893a      	ldrh	r2, [r7, #8]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d802      	bhi.n	800f8ea <ip4_input+0x76>
 800f8e4:	897b      	ldrh	r3, [r7, #10]
 800f8e6:	2b13      	cmp	r3, #19
 800f8e8:	d804      	bhi.n	800f8f4 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7f9 fd16 	bl	800931c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	e0f5      	b.n	800fae0 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	691b      	ldr	r3, [r3, #16]
 800f8f8:	4a7b      	ldr	r2, [pc, #492]	; (800fae8 <ip4_input+0x274>)
 800f8fa:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	4a79      	ldr	r2, [pc, #484]	; (800fae8 <ip4_input+0x274>)
 800f902:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f904:	4b78      	ldr	r3, [pc, #480]	; (800fae8 <ip4_input+0x274>)
 800f906:	695b      	ldr	r3, [r3, #20]
 800f908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f90c:	2be0      	cmp	r3, #224	; 0xe0
 800f90e:	d112      	bne.n	800f936 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f916:	f003 0301 	and.w	r3, r3, #1
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d007      	beq.n	800f930 <ip4_input+0xbc>
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	3304      	adds	r3, #4
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d002      	beq.n	800f930 <ip4_input+0xbc>
      netif = inp;
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	613b      	str	r3, [r7, #16]
 800f92e:	e041      	b.n	800f9b4 <ip4_input+0x140>
    } else {
      netif = NULL;
 800f930:	2300      	movs	r3, #0
 800f932:	613b      	str	r3, [r7, #16]
 800f934:	e03e      	b.n	800f9b4 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800f936:	2301      	movs	r3, #1
 800f938:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f944:	f003 0301 	and.w	r3, r3, #1
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d014      	beq.n	800f978 <ip4_input+0x104>
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	3304      	adds	r3, #4
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00f      	beq.n	800f978 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f958:	4b63      	ldr	r3, [pc, #396]	; (800fae8 <ip4_input+0x274>)
 800f95a:	695a      	ldr	r2, [r3, #20]
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	3304      	adds	r3, #4
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	429a      	cmp	r2, r3
 800f964:	d026      	beq.n	800f9b4 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f966:	4b60      	ldr	r3, [pc, #384]	; (800fae8 <ip4_input+0x274>)
 800f968:	695b      	ldr	r3, [r3, #20]
 800f96a:	6939      	ldr	r1, [r7, #16]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f000 f991 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800f972:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f974:	2b00      	cmp	r3, #0
 800f976:	d11d      	bne.n	800f9b4 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00d      	beq.n	800f99a <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800f97e:	4b5a      	ldr	r3, [pc, #360]	; (800fae8 <ip4_input+0x274>)
 800f980:	695b      	ldr	r3, [r3, #20]
 800f982:	b2db      	uxtb	r3, r3
 800f984:	2b7f      	cmp	r3, #127	; 0x7f
 800f986:	d102      	bne.n	800f98e <ip4_input+0x11a>
          netif = NULL;
 800f988:	2300      	movs	r3, #0
 800f98a:	613b      	str	r3, [r7, #16]
          break;
 800f98c:	e012      	b.n	800f9b4 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800f98e:	2300      	movs	r3, #0
 800f990:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800f992:	4b56      	ldr	r3, [pc, #344]	; (800faec <ip4_input+0x278>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	613b      	str	r3, [r7, #16]
 800f998:	e002      	b.n	800f9a0 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d102      	bne.n	800f9ae <ip4_input+0x13a>
        netif = netif->next;
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d1c4      	bne.n	800f93e <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f9b4:	4b4c      	ldr	r3, [pc, #304]	; (800fae8 <ip4_input+0x274>)
 800f9b6:	691b      	ldr	r3, [r3, #16]
 800f9b8:	6839      	ldr	r1, [r7, #0]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f000 f96a 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d105      	bne.n	800f9d2 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f9c6:	4b48      	ldr	r3, [pc, #288]	; (800fae8 <ip4_input+0x274>)
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f9ce:	2be0      	cmp	r3, #224	; 0xe0
 800f9d0:	d104      	bne.n	800f9dc <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7f9 fca2 	bl	800931c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	e081      	b.n	800fae0 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d104      	bne.n	800f9ec <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7f9 fc9a 	bl	800931c <pbuf_free>
    return ERR_OK;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	e079      	b.n	800fae0 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	88db      	ldrh	r3, [r3, #6]
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f9f8:	4013      	ands	r3, r2
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00b      	beq.n	800fa16 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fc8e 	bl	8010320 <ip4_reass>
 800fa04:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d101      	bne.n	800fa10 <ip4_input+0x19c>
      return ERR_OK;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	e067      	b.n	800fae0 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fa16:	4a34      	ldr	r2, [pc, #208]	; (800fae8 <ip4_input+0x274>)
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fa1c:	4a32      	ldr	r2, [pc, #200]	; (800fae8 <ip4_input+0x274>)
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fa22:	4a31      	ldr	r2, [pc, #196]	; (800fae8 <ip4_input+0x274>)
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	f003 030f 	and.w	r3, r3, #15
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	4b2b      	ldr	r3, [pc, #172]	; (800fae8 <ip4_input+0x274>)
 800fa3a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800fa3c:	897b      	ldrh	r3, [r7, #10]
 800fa3e:	425b      	negs	r3, r3
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	b21b      	sxth	r3, r3
 800fa44:	4619      	mov	r1, r3
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f7f9 fc44 	bl	80092d4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	7a5b      	ldrb	r3, [r3, #9]
 800fa50:	2b06      	cmp	r3, #6
 800fa52:	d009      	beq.n	800fa68 <ip4_input+0x1f4>
 800fa54:	2b11      	cmp	r3, #17
 800fa56:	d002      	beq.n	800fa5e <ip4_input+0x1ea>
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d00a      	beq.n	800fa72 <ip4_input+0x1fe>
 800fa5c:	e00e      	b.n	800fa7c <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7fe fbf3 	bl	800e24c <udp_input>
      break;
 800fa66:	e028      	b.n	800faba <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800fa68:	6839      	ldr	r1, [r7, #0]
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f7fb f88e 	bl	800ab8c <tcp_input>
      break;
 800fa70:	e023      	b.n	800faba <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800fa72:	6839      	ldr	r1, [r7, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7ff fd05 	bl	800f484 <icmp_input>
      break;
 800fa7a:	e01e      	b.n	800faba <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fa7c:	4b1a      	ldr	r3, [pc, #104]	; (800fae8 <ip4_input+0x274>)
 800fa7e:	695b      	ldr	r3, [r3, #20]
 800fa80:	6939      	ldr	r1, [r7, #16]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 f906 	bl	800fc94 <ip4_addr_isbroadcast_u32>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d112      	bne.n	800fab4 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa8e:	4b16      	ldr	r3, [pc, #88]	; (800fae8 <ip4_input+0x274>)
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fa96:	2be0      	cmp	r3, #224	; 0xe0
 800fa98:	d00c      	beq.n	800fab4 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800fa9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7f9 fc29 	bl	80092f8 <pbuf_header_force>
        p->payload = iphdr;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	697a      	ldr	r2, [r7, #20]
 800faaa:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800faac:	2102      	movs	r1, #2
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff fdee 	bl	800f690 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7f9 fc31 	bl	800931c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800faba:	4b0b      	ldr	r3, [pc, #44]	; (800fae8 <ip4_input+0x274>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fac0:	4b09      	ldr	r3, [pc, #36]	; (800fae8 <ip4_input+0x274>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fac6:	4b08      	ldr	r3, [pc, #32]	; (800fae8 <ip4_input+0x274>)
 800fac8:	2200      	movs	r2, #0
 800faca:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800facc:	4b06      	ldr	r3, [pc, #24]	; (800fae8 <ip4_input+0x274>)
 800face:	2200      	movs	r2, #0
 800fad0:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fad2:	4b05      	ldr	r3, [pc, #20]	; (800fae8 <ip4_input+0x274>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fad8:	4b03      	ldr	r3, [pc, #12]	; (800fae8 <ip4_input+0x274>)
 800fada:	2200      	movs	r2, #0
 800fadc:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	24001af4 	.word	0x24001af4
 800faec:	24005014 	.word	0x24005014

0800faf0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b08a      	sub	sp, #40	; 0x28
 800faf4:	af04      	add	r7, sp, #16
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d009      	beq.n	800fb1c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d003      	beq.n	800fb16 <ip4_output_if+0x26>
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d102      	bne.n	800fb1c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb18:	3304      	adds	r3, #4
 800fb1a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fb1c:	78fa      	ldrb	r2, [r7, #3]
 800fb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb20:	9302      	str	r3, [sp, #8]
 800fb22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb26:	9301      	str	r3, [sp, #4]
 800fb28:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	4613      	mov	r3, r2
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	6979      	ldr	r1, [r7, #20]
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f000 f805 	bl	800fb44 <ip4_output_if_src>
 800fb3a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3718      	adds	r7, #24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b088      	sub	sp, #32
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	607a      	str	r2, [r7, #4]
 800fb50:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	89db      	ldrh	r3, [r3, #14]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d006      	beq.n	800fb68 <ip4_output_if_src+0x24>
 800fb5a:	4b48      	ldr	r3, [pc, #288]	; (800fc7c <ip4_output_if_src+0x138>)
 800fb5c:	f240 3233 	movw	r2, #819	; 0x333
 800fb60:	4947      	ldr	r1, [pc, #284]	; (800fc80 <ip4_output_if_src+0x13c>)
 800fb62:	4848      	ldr	r0, [pc, #288]	; (800fc84 <ip4_output_if_src+0x140>)
 800fb64:	f002 f99a 	bl	8011e9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d060      	beq.n	800fc30 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fb6e:	2314      	movs	r3, #20
 800fb70:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800fb72:	2114      	movs	r1, #20
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7f9 fbad 	bl	80092d4 <pbuf_header>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d002      	beq.n	800fb86 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fb80:	f06f 0301 	mvn.w	r3, #1
 800fb84:	e075      	b.n	800fc72 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	895b      	ldrh	r3, [r3, #10]
 800fb90:	2b13      	cmp	r3, #19
 800fb92:	d806      	bhi.n	800fba2 <ip4_output_if_src+0x5e>
 800fb94:	4b39      	ldr	r3, [pc, #228]	; (800fc7c <ip4_output_if_src+0x138>)
 800fb96:	f240 3261 	movw	r2, #865	; 0x361
 800fb9a:	493b      	ldr	r1, [pc, #236]	; (800fc88 <ip4_output_if_src+0x144>)
 800fb9c:	4839      	ldr	r0, [pc, #228]	; (800fc84 <ip4_output_if_src+0x140>)
 800fb9e:	f002 f97d 	bl	8011e9c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	78fa      	ldrb	r2, [r7, #3]
 800fba6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fbae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fbb8:	8b7b      	ldrh	r3, [r7, #26]
 800fbba:	089b      	lsrs	r3, r3, #2
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fbd0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	891b      	ldrh	r3, [r3, #8]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7f8 f9f8 	bl	8007fcc <lwip_htons>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	461a      	mov	r2, r3
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	719a      	strb	r2, [r3, #6]
 800fbea:	2200      	movs	r2, #0
 800fbec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fbee:	4b27      	ldr	r3, [pc, #156]	; (800fc8c <ip4_output_if_src+0x148>)
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7f8 f9ea 	bl	8007fcc <lwip_htons>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fc00:	4b22      	ldr	r3, [pc, #136]	; (800fc8c <ip4_output_if_src+0x148>)
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	3301      	adds	r3, #1
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	4b20      	ldr	r3, [pc, #128]	; (800fc8c <ip4_output_if_src+0x148>)
 800fc0a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d104      	bne.n	800fc1c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fc12:	4b1f      	ldr	r3, [pc, #124]	; (800fc90 <ip4_output_if_src+0x14c>)
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	60da      	str	r2, [r3, #12]
 800fc1a:	e003      	b.n	800fc24 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	2200      	movs	r2, #0
 800fc28:	729a      	strb	r2, [r3, #10]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	72da      	strb	r2, [r3, #11]
 800fc2e:	e008      	b.n	800fc42 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	691b      	ldr	r3, [r3, #16]
 800fc3a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fc3c:	f107 0314 	add.w	r3, r7, #20
 800fc40:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc44:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00c      	beq.n	800fc64 <ip4_output_if_src+0x120>
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	891a      	ldrh	r2, [r3, #8]
 800fc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc50:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d906      	bls.n	800fc64 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f000 fd0a 	bl	8010674 <ip4_frag>
 800fc60:	4603      	mov	r3, r0
 800fc62:	e006      	b.n	800fc72 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc66:	695b      	ldr	r3, [r3, #20]
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	68f9      	ldr	r1, [r7, #12]
 800fc6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc6e:	4798      	blx	r3
 800fc70:	4603      	mov	r3, r0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3720      	adds	r7, #32
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	080145d4 	.word	0x080145d4
 800fc80:	08014608 	.word	0x08014608
 800fc84:	08014614 	.word	0x08014614
 800fc88:	0801463c 	.word	0x0801463c
 800fc8c:	24001ad2 	.word	0x24001ad2
 800fc90:	08014a0c 	.word	0x08014a0c

0800fc94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b085      	sub	sp, #20
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fca8:	d002      	beq.n	800fcb0 <ip4_addr_isbroadcast_u32+0x1c>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d101      	bne.n	800fcb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e02a      	b.n	800fd0a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fcba:	f003 0302 	and.w	r3, r3, #2
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d101      	bne.n	800fcc6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	e021      	b.n	800fd0a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	3304      	adds	r3, #4
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d101      	bne.n	800fcd6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	e019      	b.n	800fd0a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fcd6:	68fa      	ldr	r2, [r7, #12]
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	3304      	adds	r3, #4
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	405a      	eors	r2, r3
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	3308      	adds	r3, #8
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4013      	ands	r3, r2
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d10d      	bne.n	800fd08 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	3308      	adds	r3, #8
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	43da      	mvns	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	3308      	adds	r3, #8
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d101      	bne.n	800fd08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e000      	b.n	800fd0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fd08:	2300      	movs	r3, #0
  }
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3714      	adds	r7, #20
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
	...

0800fd18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fd22:	4b12      	ldr	r3, [pc, #72]	; (800fd6c <ip_reass_tmr+0x54>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fd28:	e018      	b.n	800fd5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	7fdb      	ldrb	r3, [r3, #31]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00b      	beq.n	800fd4a <ip_reass_tmr+0x32>
      r->timer--;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	7fdb      	ldrb	r3, [r3, #31]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	b2da      	uxtb	r2, r3
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60fb      	str	r3, [r7, #12]
 800fd48:	e008      	b.n	800fd5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f80a 	bl	800fd70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1e3      	bne.n	800fd2a <ip_reass_tmr+0x12>
     }
   }
}
 800fd62:	bf00      	nop
 800fd64:	3710      	adds	r7, #16
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	24001ad4 	.word	0x24001ad4

0800fd70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fd7e:	683a      	ldr	r2, [r7, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d105      	bne.n	800fd92 <ip_reass_free_complete_datagram+0x22>
 800fd86:	4b45      	ldr	r3, [pc, #276]	; (800fe9c <ip_reass_free_complete_datagram+0x12c>)
 800fd88:	22ab      	movs	r2, #171	; 0xab
 800fd8a:	4945      	ldr	r1, [pc, #276]	; (800fea0 <ip_reass_free_complete_datagram+0x130>)
 800fd8c:	4845      	ldr	r0, [pc, #276]	; (800fea4 <ip_reass_free_complete_datagram+0x134>)
 800fd8e:	f002 f885 	bl	8011e9c <iprintf>
  if (prev != NULL) {
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00a      	beq.n	800fdae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d005      	beq.n	800fdae <ip_reass_free_complete_datagram+0x3e>
 800fda2:	4b3e      	ldr	r3, [pc, #248]	; (800fe9c <ip_reass_free_complete_datagram+0x12c>)
 800fda4:	22ad      	movs	r2, #173	; 0xad
 800fda6:	4940      	ldr	r1, [pc, #256]	; (800fea8 <ip_reass_free_complete_datagram+0x138>)
 800fda8:	483e      	ldr	r0, [pc, #248]	; (800fea4 <ip_reass_free_complete_datagram+0x134>)
 800fdaa:	f002 f877 	bl	8011e9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	889b      	ldrh	r3, [r3, #4]
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d12a      	bne.n	800fe16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	6858      	ldr	r0, [r3, #4]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	3308      	adds	r3, #8
 800fdd6:	2214      	movs	r2, #20
 800fdd8:	4619      	mov	r1, r3
 800fdda:	f002 f84c 	bl	8011e76 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fdde:	2101      	movs	r1, #1
 800fde0:	69b8      	ldr	r0, [r7, #24]
 800fde2:	f7ff fc65 	bl	800f6b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fde6:	69b8      	ldr	r0, [r7, #24]
 800fde8:	f7f9 fb2c 	bl	8009444 <pbuf_clen>
 800fdec:	4603      	mov	r3, r0
 800fdee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fdf0:	8bfa      	ldrh	r2, [r7, #30]
 800fdf2:	8a7b      	ldrh	r3, [r7, #18]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdfa:	db05      	blt.n	800fe08 <ip_reass_free_complete_datagram+0x98>
 800fdfc:	4b27      	ldr	r3, [pc, #156]	; (800fe9c <ip_reass_free_complete_datagram+0x12c>)
 800fdfe:	22bc      	movs	r2, #188	; 0xbc
 800fe00:	492a      	ldr	r1, [pc, #168]	; (800feac <ip_reass_free_complete_datagram+0x13c>)
 800fe02:	4828      	ldr	r0, [pc, #160]	; (800fea4 <ip_reass_free_complete_datagram+0x134>)
 800fe04:	f002 f84a 	bl	8011e9c <iprintf>
    pbufs_freed += clen;
 800fe08:	8bfa      	ldrh	r2, [r7, #30]
 800fe0a:	8a7b      	ldrh	r3, [r7, #18]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fe10:	69b8      	ldr	r0, [r7, #24]
 800fe12:	f7f9 fa83 	bl	800931c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fe1c:	e01f      	b.n	800fe5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fe2e:	68f8      	ldr	r0, [r7, #12]
 800fe30:	f7f9 fb08 	bl	8009444 <pbuf_clen>
 800fe34:	4603      	mov	r3, r0
 800fe36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fe38:	8bfa      	ldrh	r2, [r7, #30]
 800fe3a:	8a7b      	ldrh	r3, [r7, #18]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe42:	db05      	blt.n	800fe50 <ip_reass_free_complete_datagram+0xe0>
 800fe44:	4b15      	ldr	r3, [pc, #84]	; (800fe9c <ip_reass_free_complete_datagram+0x12c>)
 800fe46:	22cc      	movs	r2, #204	; 0xcc
 800fe48:	4918      	ldr	r1, [pc, #96]	; (800feac <ip_reass_free_complete_datagram+0x13c>)
 800fe4a:	4816      	ldr	r0, [pc, #88]	; (800fea4 <ip_reass_free_complete_datagram+0x134>)
 800fe4c:	f002 f826 	bl	8011e9c <iprintf>
    pbufs_freed += clen;
 800fe50:	8bfa      	ldrh	r2, [r7, #30]
 800fe52:	8a7b      	ldrh	r3, [r7, #18]
 800fe54:	4413      	add	r3, r2
 800fe56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f7f9 fa5f 	bl	800931c <pbuf_free>
  while (p != NULL) {
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1dc      	bne.n	800fe1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 f8c2 	bl	800fff0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800fe6c:	4b10      	ldr	r3, [pc, #64]	; (800feb0 <ip_reass_free_complete_datagram+0x140>)
 800fe6e:	881b      	ldrh	r3, [r3, #0]
 800fe70:	8bfa      	ldrh	r2, [r7, #30]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d905      	bls.n	800fe82 <ip_reass_free_complete_datagram+0x112>
 800fe76:	4b09      	ldr	r3, [pc, #36]	; (800fe9c <ip_reass_free_complete_datagram+0x12c>)
 800fe78:	22d2      	movs	r2, #210	; 0xd2
 800fe7a:	490e      	ldr	r1, [pc, #56]	; (800feb4 <ip_reass_free_complete_datagram+0x144>)
 800fe7c:	4809      	ldr	r0, [pc, #36]	; (800fea4 <ip_reass_free_complete_datagram+0x134>)
 800fe7e:	f002 f80d 	bl	8011e9c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800fe82:	4b0b      	ldr	r3, [pc, #44]	; (800feb0 <ip_reass_free_complete_datagram+0x140>)
 800fe84:	881a      	ldrh	r2, [r3, #0]
 800fe86:	8bfb      	ldrh	r3, [r7, #30]
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	4b08      	ldr	r3, [pc, #32]	; (800feb0 <ip_reass_free_complete_datagram+0x140>)
 800fe8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800fe90:	8bfb      	ldrh	r3, [r7, #30]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3720      	adds	r7, #32
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	0801466c 	.word	0x0801466c
 800fea0:	080146a8 	.word	0x080146a8
 800fea4:	080146b4 	.word	0x080146b4
 800fea8:	080146dc 	.word	0x080146dc
 800feac:	080146f0 	.word	0x080146f0
 800feb0:	24001ad8 	.word	0x24001ad8
 800feb4:	08014710 	.word	0x08014710

0800feb8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b08a      	sub	sp, #40	; 0x28
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fec2:	2300      	movs	r3, #0
 800fec4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800feca:	2300      	movs	r3, #0
 800fecc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fece:	2300      	movs	r3, #0
 800fed0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fed2:	2300      	movs	r3, #0
 800fed4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fed6:	4b28      	ldr	r3, [pc, #160]	; (800ff78 <ip_reass_remove_oldest_datagram+0xc0>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fedc:	e030      	b.n	800ff40 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee0:	695a      	ldr	r2, [r3, #20]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d10c      	bne.n	800ff04 <ip_reass_remove_oldest_datagram+0x4c>
 800feea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feec:	699a      	ldr	r2, [r3, #24]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d106      	bne.n	800ff04 <ip_reass_remove_oldest_datagram+0x4c>
 800fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef8:	899a      	ldrh	r2, [r3, #12]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	889b      	ldrh	r3, [r3, #4]
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d014      	beq.n	800ff2e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	3301      	adds	r3, #1
 800ff08:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d104      	bne.n	800ff1a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	61bb      	str	r3, [r7, #24]
 800ff18:	e009      	b.n	800ff2e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1c:	7fda      	ldrb	r2, [r3, #31]
 800ff1e:	6a3b      	ldr	r3, [r7, #32]
 800ff20:	7fdb      	ldrb	r3, [r3, #31]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d803      	bhi.n	800ff2e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ff26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff28:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ff2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d001      	beq.n	800ff3a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ff36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff38:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1cb      	bne.n	800fede <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ff46:	6a3b      	ldr	r3, [r7, #32]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d008      	beq.n	800ff5e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ff4c:	69b9      	ldr	r1, [r7, #24]
 800ff4e:	6a38      	ldr	r0, [r7, #32]
 800ff50:	f7ff ff0e 	bl	800fd70 <ip_reass_free_complete_datagram>
 800ff54:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ff56:	697a      	ldr	r2, [r7, #20]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ff5e:	697a      	ldr	r2, [r7, #20]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	da02      	bge.n	800ff6c <ip_reass_remove_oldest_datagram+0xb4>
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	dcac      	bgt.n	800fec6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ff6c:	697b      	ldr	r3, [r7, #20]
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3728      	adds	r7, #40	; 0x28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	24001ad4 	.word	0x24001ad4

0800ff7c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ff86:	2004      	movs	r0, #4
 800ff88:	f7f8 fbf0 	bl	800876c <memp_malloc>
 800ff8c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d110      	bne.n	800ffb6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ff94:	6839      	ldr	r1, [r7, #0]
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7ff ff8e 	bl	800feb8 <ip_reass_remove_oldest_datagram>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	dc03      	bgt.n	800ffac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ffa4:	2004      	movs	r0, #4
 800ffa6:	f7f8 fbe1 	bl	800876c <memp_malloc>
 800ffaa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d101      	bne.n	800ffb6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	e016      	b.n	800ffe4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ffb6:	2220      	movs	r2, #32
 800ffb8:	2100      	movs	r1, #0
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f001 ff66 	bl	8011e8c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2203      	movs	r2, #3
 800ffc4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ffc6:	4b09      	ldr	r3, [pc, #36]	; (800ffec <ip_reass_enqueue_new_datagram+0x70>)
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ffce:	4a07      	ldr	r2, [pc, #28]	; (800ffec <ip_reass_enqueue_new_datagram+0x70>)
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	3308      	adds	r3, #8
 800ffd8:	2214      	movs	r2, #20
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f001 ff4a 	bl	8011e76 <memcpy>
  return ipr;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3710      	adds	r7, #16
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	24001ad4 	.word	0x24001ad4

0800fff0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fffa:	4b10      	ldr	r3, [pc, #64]	; (801003c <ip_reass_dequeue_datagram+0x4c>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	429a      	cmp	r2, r3
 8010002:	d104      	bne.n	801000e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	4a0c      	ldr	r2, [pc, #48]	; (801003c <ip_reass_dequeue_datagram+0x4c>)
 801000a:	6013      	str	r3, [r2, #0]
 801000c:	e00d      	b.n	801002a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d106      	bne.n	8010022 <ip_reass_dequeue_datagram+0x32>
 8010014:	4b0a      	ldr	r3, [pc, #40]	; (8010040 <ip_reass_dequeue_datagram+0x50>)
 8010016:	f240 1245 	movw	r2, #325	; 0x145
 801001a:	490a      	ldr	r1, [pc, #40]	; (8010044 <ip_reass_dequeue_datagram+0x54>)
 801001c:	480a      	ldr	r0, [pc, #40]	; (8010048 <ip_reass_dequeue_datagram+0x58>)
 801001e:	f001 ff3d 	bl	8011e9c <iprintf>
    prev->next = ipr->next;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801002a:	6879      	ldr	r1, [r7, #4]
 801002c:	2004      	movs	r0, #4
 801002e:	f7f8 fc0d 	bl	800884c <memp_free>
}
 8010032:	bf00      	nop
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	24001ad4 	.word	0x24001ad4
 8010040:	0801466c 	.word	0x0801466c
 8010044:	0801472c 	.word	0x0801472c
 8010048:	080146b4 	.word	0x080146b4

0801004c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b08c      	sub	sp, #48	; 0x30
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8010058:	2300      	movs	r3, #0
 801005a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801005c:	2301      	movs	r3, #1
 801005e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	885b      	ldrh	r3, [r3, #2]
 801006a:	b29b      	uxth	r3, r3
 801006c:	4618      	mov	r0, r3
 801006e:	f7f7 ffad 	bl	8007fcc <lwip_htons>
 8010072:	4603      	mov	r3, r0
 8010074:	461a      	mov	r2, r3
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	b29b      	uxth	r3, r3
 801007c:	f003 030f 	and.w	r3, r3, #15
 8010080:	b29b      	uxth	r3, r3
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	b29b      	uxth	r3, r3
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	88db      	ldrh	r3, [r3, #6]
 801008e:	b29b      	uxth	r3, r3
 8010090:	4618      	mov	r0, r3
 8010092:	f7f7 ff9b 	bl	8007fcc <lwip_htons>
 8010096:	4603      	mov	r3, r0
 8010098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801009c:	b29b      	uxth	r3, r3
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80100a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100aa:	2200      	movs	r2, #0
 80100ac:	701a      	strb	r2, [r3, #0]
 80100ae:	2200      	movs	r2, #0
 80100b0:	705a      	strb	r2, [r3, #1]
 80100b2:	2200      	movs	r2, #0
 80100b4:	709a      	strb	r2, [r3, #2]
 80100b6:	2200      	movs	r2, #0
 80100b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80100ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100bc:	8b3a      	ldrh	r2, [r7, #24]
 80100be:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80100c0:	8b3a      	ldrh	r2, [r7, #24]
 80100c2:	8b7b      	ldrh	r3, [r7, #26]
 80100c4:	4413      	add	r3, r2
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ca:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	627b      	str	r3, [r7, #36]	; 0x24
 80100d2:	e061      	b.n	8010198 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80100da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100dc:	889b      	ldrh	r3, [r3, #4]
 80100de:	b29a      	uxth	r2, r3
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	889b      	ldrh	r3, [r3, #4]
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d232      	bcs.n	8010150 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80100ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100ee:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d01f      	beq.n	8010136 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80100f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f8:	889b      	ldrh	r3, [r3, #4]
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100fe:	88db      	ldrh	r3, [r3, #6]
 8010100:	b29b      	uxth	r3, r3
 8010102:	429a      	cmp	r2, r3
 8010104:	f0c0 80e3 	bcc.w	80102ce <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8010108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010a:	88db      	ldrh	r3, [r3, #6]
 801010c:	b29a      	uxth	r2, r3
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	889b      	ldrh	r3, [r3, #4]
 8010112:	b29b      	uxth	r3, r3
 8010114:	429a      	cmp	r2, r3
 8010116:	f200 80da 	bhi.w	80102ce <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801011a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011c:	68ba      	ldr	r2, [r7, #8]
 801011e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010122:	88db      	ldrh	r3, [r3, #6]
 8010124:	b29a      	uxth	r2, r3
 8010126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010128:	889b      	ldrh	r3, [r3, #4]
 801012a:	b29b      	uxth	r3, r3
 801012c:	429a      	cmp	r2, r3
 801012e:	d037      	beq.n	80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010130:	2300      	movs	r3, #0
 8010132:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010134:	e034      	b.n	80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8010136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010138:	88db      	ldrh	r3, [r3, #6]
 801013a:	b29a      	uxth	r2, r3
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	889b      	ldrh	r3, [r3, #4]
 8010140:	b29b      	uxth	r3, r3
 8010142:	429a      	cmp	r2, r3
 8010144:	f200 80c5 	bhi.w	80102d2 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	605a      	str	r2, [r3, #4]
      break;
 801014e:	e027      	b.n	80101a0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	889b      	ldrh	r3, [r3, #4]
 8010154:	b29a      	uxth	r2, r3
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	889b      	ldrh	r3, [r3, #4]
 801015a:	b29b      	uxth	r3, r3
 801015c:	429a      	cmp	r2, r3
 801015e:	f000 80ba 	beq.w	80102d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010164:	889b      	ldrh	r3, [r3, #4]
 8010166:	b29a      	uxth	r2, r3
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	88db      	ldrh	r3, [r3, #6]
 801016c:	b29b      	uxth	r3, r3
 801016e:	429a      	cmp	r2, r3
 8010170:	f0c0 80b3 	bcc.w	80102da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010176:	2b00      	cmp	r3, #0
 8010178:	d009      	beq.n	801018e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801017a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017c:	88db      	ldrh	r3, [r3, #6]
 801017e:	b29a      	uxth	r2, r3
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	889b      	ldrh	r3, [r3, #4]
 8010184:	b29b      	uxth	r3, r3
 8010186:	429a      	cmp	r2, r3
 8010188:	d001      	beq.n	801018e <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	2b00      	cmp	r3, #0
 801019c:	d19a      	bne.n	80100d4 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801019e:	e000      	b.n	80101a2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80101a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d12d      	bne.n	8010204 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80101a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d01c      	beq.n	80101e8 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80101ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b0:	88db      	ldrh	r3, [r3, #6]
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b6:	889b      	ldrh	r3, [r3, #4]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d906      	bls.n	80101cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80101be:	4b51      	ldr	r3, [pc, #324]	; (8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80101c0:	f240 12ab 	movw	r2, #427	; 0x1ab
 80101c4:	4950      	ldr	r1, [pc, #320]	; (8010308 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80101c6:	4851      	ldr	r0, [pc, #324]	; (801030c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80101c8:	f001 fe68 	bl	8011e9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80101cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80101d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d4:	88db      	ldrh	r3, [r3, #6]
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101da:	889b      	ldrh	r3, [r3, #4]
 80101dc:	b29b      	uxth	r3, r3
 80101de:	429a      	cmp	r2, r3
 80101e0:	d010      	beq.n	8010204 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	623b      	str	r3, [r7, #32]
 80101e6:	e00d      	b.n	8010204 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d006      	beq.n	80101fe <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80101f0:	4b44      	ldr	r3, [pc, #272]	; (8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80101f2:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80101f6:	4946      	ldr	r1, [pc, #280]	; (8010310 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80101f8:	4844      	ldr	r0, [pc, #272]	; (801030c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80101fa:	f001 fe4f 	bl	8011e9c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	68ba      	ldr	r2, [r7, #8]
 8010202:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d105      	bne.n	8010216 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	7f9b      	ldrb	r3, [r3, #30]
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	d059      	beq.n	80102ca <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8010216:	6a3b      	ldr	r3, [r7, #32]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d04f      	beq.n	80102bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d006      	beq.n	8010232 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	889b      	ldrh	r3, [r3, #4]
 801022c:	b29b      	uxth	r3, r3
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010232:	2300      	movs	r3, #0
 8010234:	623b      	str	r3, [r7, #32]
 8010236:	e041      	b.n	80102bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801023c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010242:	e012      	b.n	801026a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8010244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801024a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024c:	88db      	ldrh	r3, [r3, #6]
 801024e:	b29a      	uxth	r2, r3
 8010250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010252:	889b      	ldrh	r3, [r3, #4]
 8010254:	b29b      	uxth	r3, r3
 8010256:	429a      	cmp	r2, r3
 8010258:	d002      	beq.n	8010260 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801025a:	2300      	movs	r3, #0
 801025c:	623b      	str	r3, [r7, #32]
            break;
 801025e:	e007      	b.n	8010270 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8010260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010262:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1e9      	bne.n	8010244 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010270:	6a3b      	ldr	r3, [r7, #32]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d022      	beq.n	80102bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d106      	bne.n	801028c <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801027e:	4b21      	ldr	r3, [pc, #132]	; (8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8010280:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8010284:	4923      	ldr	r1, [pc, #140]	; (8010314 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010286:	4821      	ldr	r0, [pc, #132]	; (801030c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010288:	f001 fe08 	bl	8011e9c <iprintf>
          LWIP_ASSERT("sanity check",
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010294:	429a      	cmp	r2, r3
 8010296:	d106      	bne.n	80102a6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8010298:	4b1a      	ldr	r3, [pc, #104]	; (8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801029a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801029e:	491d      	ldr	r1, [pc, #116]	; (8010314 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80102a0:	481a      	ldr	r0, [pc, #104]	; (801030c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80102a2:	f001 fdfb 	bl	8011e9c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d006      	beq.n	80102bc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80102ae:	4b15      	ldr	r3, [pc, #84]	; (8010304 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80102b0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80102b4:	4918      	ldr	r1, [pc, #96]	; (8010318 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80102b6:	4815      	ldr	r0, [pc, #84]	; (801030c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80102b8:	f001 fdf0 	bl	8011e9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80102bc:	6a3b      	ldr	r3, [r7, #32]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	bf14      	ite	ne
 80102c2:	2301      	movne	r3, #1
 80102c4:	2300      	moveq	r3, #0
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	e018      	b.n	80102fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80102ca:	2300      	movs	r3, #0
 80102cc:	e016      	b.n	80102fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80102ce:	bf00      	nop
 80102d0:	e004      	b.n	80102dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80102d2:	bf00      	nop
 80102d4:	e002      	b.n	80102dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80102d6:	bf00      	nop
 80102d8:	e000      	b.n	80102dc <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80102da:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80102dc:	68b8      	ldr	r0, [r7, #8]
 80102de:	f7f9 f8b1 	bl	8009444 <pbuf_clen>
 80102e2:	4603      	mov	r3, r0
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b0d      	ldr	r3, [pc, #52]	; (801031c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80102e8:	881b      	ldrh	r3, [r3, #0]
 80102ea:	1a9b      	subs	r3, r3, r2
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	4b0b      	ldr	r3, [pc, #44]	; (801031c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80102f0:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80102f2:	68b8      	ldr	r0, [r7, #8]
 80102f4:	f7f9 f812 	bl	800931c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80102f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3730      	adds	r7, #48	; 0x30
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	0801466c 	.word	0x0801466c
 8010308:	08014748 	.word	0x08014748
 801030c:	080146b4 	.word	0x080146b4
 8010310:	08014768 	.word	0x08014768
 8010314:	080147a0 	.word	0x080147a0
 8010318:	080147b0 	.word	0x080147b0
 801031c:	24001ad8 	.word	0x24001ad8

08010320 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b08e      	sub	sp, #56	; 0x38
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801032e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	f003 030f 	and.w	r3, r3, #15
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	2b14      	cmp	r3, #20
 801033a:	f040 8131 	bne.w	80105a0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801033e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010340:	88db      	ldrh	r3, [r3, #6]
 8010342:	b29b      	uxth	r3, r3
 8010344:	4618      	mov	r0, r3
 8010346:	f7f7 fe41 	bl	8007fcc <lwip_htons>
 801034a:	4603      	mov	r3, r0
 801034c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010350:	b29b      	uxth	r3, r3
 8010352:	00db      	lsls	r3, r3, #3
 8010354:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8010356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010358:	885b      	ldrh	r3, [r3, #2]
 801035a:	b29b      	uxth	r3, r3
 801035c:	4618      	mov	r0, r3
 801035e:	f7f7 fe35 	bl	8007fcc <lwip_htons>
 8010362:	4603      	mov	r3, r0
 8010364:	461a      	mov	r2, r3
 8010366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	b29b      	uxth	r3, r3
 801036c:	f003 030f 	and.w	r3, r3, #15
 8010370:	b29b      	uxth	r3, r3
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	b29b      	uxth	r3, r3
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7f9 f862 	bl	8009444 <pbuf_clen>
 8010380:	4603      	mov	r3, r0
 8010382:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010384:	4b8d      	ldr	r3, [pc, #564]	; (80105bc <ip4_reass+0x29c>)
 8010386:	881b      	ldrh	r3, [r3, #0]
 8010388:	461a      	mov	r2, r3
 801038a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801038c:	4413      	add	r3, r2
 801038e:	2b0a      	cmp	r3, #10
 8010390:	dd10      	ble.n	80103b4 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010394:	4619      	mov	r1, r3
 8010396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010398:	f7ff fd8e 	bl	800feb8 <ip_reass_remove_oldest_datagram>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 8100 	beq.w	80105a4 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80103a4:	4b85      	ldr	r3, [pc, #532]	; (80105bc <ip4_reass+0x29c>)
 80103a6:	881b      	ldrh	r3, [r3, #0]
 80103a8:	461a      	mov	r2, r3
 80103aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103ac:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80103ae:	2b0a      	cmp	r3, #10
 80103b0:	f300 80f8 	bgt.w	80105a4 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80103b4:	4b82      	ldr	r3, [pc, #520]	; (80105c0 <ip4_reass+0x2a0>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	633b      	str	r3, [r7, #48]	; 0x30
 80103ba:	e015      	b.n	80103e8 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80103bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103be:	695a      	ldr	r2, [r3, #20]
 80103c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d10c      	bne.n	80103e2 <ip4_reass+0xc2>
 80103c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ca:	699a      	ldr	r2, [r3, #24]
 80103cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d106      	bne.n	80103e2 <ip4_reass+0xc2>
 80103d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d6:	899a      	ldrh	r2, [r3, #12]
 80103d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103da:	889b      	ldrh	r3, [r3, #4]
 80103dc:	b29b      	uxth	r3, r3
 80103de:	429a      	cmp	r2, r3
 80103e0:	d006      	beq.n	80103f0 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80103e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	633b      	str	r3, [r7, #48]	; 0x30
 80103e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d1e6      	bne.n	80103bc <ip4_reass+0x9c>
 80103ee:	e000      	b.n	80103f2 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80103f0:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80103f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d109      	bne.n	801040c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80103f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103fa:	4619      	mov	r1, r3
 80103fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103fe:	f7ff fdbd 	bl	800ff7c <ip_reass_enqueue_new_datagram>
 8010402:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010406:	2b00      	cmp	r3, #0
 8010408:	d11c      	bne.n	8010444 <ip4_reass+0x124>
      goto nullreturn;
 801040a:	e0ce      	b.n	80105aa <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801040c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040e:	88db      	ldrh	r3, [r3, #6]
 8010410:	b29b      	uxth	r3, r3
 8010412:	4618      	mov	r0, r3
 8010414:	f7f7 fdda 	bl	8007fcc <lwip_htons>
 8010418:	4603      	mov	r3, r0
 801041a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801041e:	2b00      	cmp	r3, #0
 8010420:	d110      	bne.n	8010444 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010424:	89db      	ldrh	r3, [r3, #14]
 8010426:	4618      	mov	r0, r3
 8010428:	f7f7 fdd0 	bl	8007fcc <lwip_htons>
 801042c:	4603      	mov	r3, r0
 801042e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010432:	2b00      	cmp	r3, #0
 8010434:	d006      	beq.n	8010444 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	3308      	adds	r3, #8
 801043a:	2214      	movs	r2, #20
 801043c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801043e:	4618      	mov	r0, r3
 8010440:	f001 fd19 	bl	8011e76 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010446:	88db      	ldrh	r3, [r3, #6]
 8010448:	b29b      	uxth	r3, r3
 801044a:	f003 0320 	and.w	r3, r3, #32
 801044e:	2b00      	cmp	r3, #0
 8010450:	bf0c      	ite	eq
 8010452:	2301      	moveq	r3, #1
 8010454:	2300      	movne	r3, #0
 8010456:	b2db      	uxtb	r3, r3
 8010458:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00e      	beq.n	801047e <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8010460:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010464:	4413      	add	r3, r2
 8010466:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010468:	8b7a      	ldrh	r2, [r7, #26]
 801046a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801046c:	429a      	cmp	r2, r3
 801046e:	f0c0 8099 	bcc.w	80105a4 <ip4_reass+0x284>
 8010472:	8b7b      	ldrh	r3, [r7, #26]
 8010474:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010478:	4293      	cmp	r3, r2
 801047a:	f200 8093 	bhi.w	80105a4 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801047e:	69fa      	ldr	r2, [r7, #28]
 8010480:	6879      	ldr	r1, [r7, #4]
 8010482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010484:	f7ff fde2 	bl	801004c <ip_reass_chain_frag_into_datagram_and_validate>
 8010488:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010490:	f000 808a 	beq.w	80105a8 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010494:	4b49      	ldr	r3, [pc, #292]	; (80105bc <ip4_reass+0x29c>)
 8010496:	881a      	ldrh	r2, [r3, #0]
 8010498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801049a:	4413      	add	r3, r2
 801049c:	b29a      	uxth	r2, r3
 801049e:	4b47      	ldr	r3, [pc, #284]	; (80105bc <ip4_reass+0x29c>)
 80104a0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d00d      	beq.n	80104c4 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80104a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80104aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104ac:	4413      	add	r3, r2
 80104ae:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80104b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b2:	8a7a      	ldrh	r2, [r7, #18]
 80104b4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	7f9b      	ldrb	r3, [r3, #30]
 80104ba:	f043 0301 	orr.w	r3, r3, #1
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c2:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d168      	bne.n	801059c <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80104ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104cc:	8b9b      	ldrh	r3, [r3, #28]
 80104ce:	3314      	adds	r3, #20
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d4:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80104e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80104e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ea:	3308      	adds	r3, #8
 80104ec:	2214      	movs	r2, #20
 80104ee:	4619      	mov	r1, r3
 80104f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104f2:	f001 fcc0 	bl	8011e76 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80104f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f8:	8b9b      	ldrh	r3, [r3, #28]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7f7 fd66 	bl	8007fcc <lwip_htons>
 8010500:	4603      	mov	r3, r0
 8010502:	461a      	mov	r2, r3
 8010504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010506:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050a:	2200      	movs	r2, #0
 801050c:	719a      	strb	r2, [r3, #6]
 801050e:	2200      	movs	r2, #0
 8010510:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010514:	2200      	movs	r2, #0
 8010516:	729a      	strb	r2, [r3, #10]
 8010518:	2200      	movs	r2, #0
 801051a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801051c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010522:	e00e      	b.n	8010542 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8010524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801052a:	f06f 0113 	mvn.w	r1, #19
 801052e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010530:	f7f8 fed0 	bl	80092d4 <pbuf_header>
      pbuf_cat(p, r);
 8010534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7f8 ffbe 	bl	80094b8 <pbuf_cat>
      r = iprh->next_pbuf;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010544:	2b00      	cmp	r3, #0
 8010546:	d1ed      	bne.n	8010524 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010548:	4b1d      	ldr	r3, [pc, #116]	; (80105c0 <ip4_reass+0x2a0>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801054e:	429a      	cmp	r2, r3
 8010550:	d102      	bne.n	8010558 <ip4_reass+0x238>
      ipr_prev = NULL;
 8010552:	2300      	movs	r3, #0
 8010554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010556:	e010      	b.n	801057a <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010558:	4b19      	ldr	r3, [pc, #100]	; (80105c0 <ip4_reass+0x2a0>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801055e:	e007      	b.n	8010570 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8010560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010566:	429a      	cmp	r2, r3
 8010568:	d006      	beq.n	8010578 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	2b00      	cmp	r3, #0
 8010574:	d1f4      	bne.n	8010560 <ip4_reass+0x240>
 8010576:	e000      	b.n	801057a <ip4_reass+0x25a>
          break;
 8010578:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801057a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801057c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801057e:	f7ff fd37 	bl	800fff0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7f8 ff5e 	bl	8009444 <pbuf_clen>
 8010588:	4603      	mov	r3, r0
 801058a:	461a      	mov	r2, r3
 801058c:	4b0b      	ldr	r3, [pc, #44]	; (80105bc <ip4_reass+0x29c>)
 801058e:	881b      	ldrh	r3, [r3, #0]
 8010590:	1a9b      	subs	r3, r3, r2
 8010592:	b29a      	uxth	r2, r3
 8010594:	4b09      	ldr	r3, [pc, #36]	; (80105bc <ip4_reass+0x29c>)
 8010596:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	e00a      	b.n	80105b2 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801059c:	2300      	movs	r3, #0
 801059e:	e008      	b.n	80105b2 <ip4_reass+0x292>
    goto nullreturn;
 80105a0:	bf00      	nop
 80105a2:	e002      	b.n	80105aa <ip4_reass+0x28a>

nullreturn:
 80105a4:	bf00      	nop
 80105a6:	e000      	b.n	80105aa <ip4_reass+0x28a>
    goto nullreturn;
 80105a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7f8 feb6 	bl	800931c <pbuf_free>
  return NULL;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3738      	adds	r7, #56	; 0x38
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	24001ad8 	.word	0x24001ad8
 80105c0:	24001ad4 	.word	0x24001ad4

080105c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80105c8:	2005      	movs	r0, #5
 80105ca:	f7f8 f8cf 	bl	800876c <memp_malloc>
 80105ce:	4603      	mov	r3, r0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d106      	bne.n	80105f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80105e2:	4b07      	ldr	r3, [pc, #28]	; (8010600 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80105e4:	f240 22ae 	movw	r2, #686	; 0x2ae
 80105e8:	4906      	ldr	r1, [pc, #24]	; (8010604 <ip_frag_free_pbuf_custom_ref+0x30>)
 80105ea:	4807      	ldr	r0, [pc, #28]	; (8010608 <ip_frag_free_pbuf_custom_ref+0x34>)
 80105ec:	f001 fc56 	bl	8011e9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80105f0:	6879      	ldr	r1, [r7, #4]
 80105f2:	2005      	movs	r0, #5
 80105f4:	f7f8 f92a 	bl	800884c <memp_free>
}
 80105f8:	bf00      	nop
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	0801466c 	.word	0x0801466c
 8010604:	080147d4 	.word	0x080147d4
 8010608:	080146b4 	.word	0x080146b4

0801060c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d106      	bne.n	801062c <ipfrag_free_pbuf_custom+0x20>
 801061e:	4b11      	ldr	r3, [pc, #68]	; (8010664 <ipfrag_free_pbuf_custom+0x58>)
 8010620:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8010624:	4910      	ldr	r1, [pc, #64]	; (8010668 <ipfrag_free_pbuf_custom+0x5c>)
 8010626:	4811      	ldr	r0, [pc, #68]	; (801066c <ipfrag_free_pbuf_custom+0x60>)
 8010628:	f001 fc38 	bl	8011e9c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	429a      	cmp	r2, r3
 8010632:	d006      	beq.n	8010642 <ipfrag_free_pbuf_custom+0x36>
 8010634:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <ipfrag_free_pbuf_custom+0x58>)
 8010636:	f240 22b9 	movw	r2, #697	; 0x2b9
 801063a:	490d      	ldr	r1, [pc, #52]	; (8010670 <ipfrag_free_pbuf_custom+0x64>)
 801063c:	480b      	ldr	r0, [pc, #44]	; (801066c <ipfrag_free_pbuf_custom+0x60>)
 801063e:	f001 fc2d 	bl	8011e9c <iprintf>
  if (pcr->original != NULL) {
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	695b      	ldr	r3, [r3, #20]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d004      	beq.n	8010654 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	4618      	mov	r0, r3
 8010650:	f7f8 fe64 	bl	800931c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010654:	68f8      	ldr	r0, [r7, #12]
 8010656:	f7ff ffbd 	bl	80105d4 <ip_frag_free_pbuf_custom_ref>
}
 801065a:	bf00      	nop
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	0801466c 	.word	0x0801466c
 8010668:	080147e0 	.word	0x080147e0
 801066c:	080146b4 	.word	0x080146b4
 8010670:	080147ec 	.word	0x080147ec

08010674 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b092      	sub	sp, #72	; 0x48
 8010678:	af02      	add	r7, sp, #8
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010680:	2300      	movs	r3, #0
 8010682:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010688:	3b14      	subs	r3, #20
 801068a:	2b00      	cmp	r3, #0
 801068c:	da00      	bge.n	8010690 <ip4_frag+0x1c>
 801068e:	3307      	adds	r3, #7
 8010690:	10db      	asrs	r3, r3, #3
 8010692:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010694:	2314      	movs	r3, #20
 8010696:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80106a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	f003 030f 	and.w	r3, r3, #15
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	2b14      	cmp	r3, #20
 80106ae:	d009      	beq.n	80106c4 <ip4_frag+0x50>
 80106b0:	4b79      	ldr	r3, [pc, #484]	; (8010898 <ip4_frag+0x224>)
 80106b2:	f240 22e1 	movw	r2, #737	; 0x2e1
 80106b6:	4979      	ldr	r1, [pc, #484]	; (801089c <ip4_frag+0x228>)
 80106b8:	4879      	ldr	r0, [pc, #484]	; (80108a0 <ip4_frag+0x22c>)
 80106ba:	f001 fbef 	bl	8011e9c <iprintf>
 80106be:	f06f 0305 	mvn.w	r3, #5
 80106c2:	e0e5      	b.n	8010890 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	88db      	ldrh	r3, [r3, #6]
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7f7 fc7e 	bl	8007fcc <lwip_htons>
 80106d0:	4603      	mov	r3, r0
 80106d2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80106d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80106d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106da:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80106dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80106de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d009      	beq.n	80106fa <ip4_frag+0x86>
 80106e6:	4b6c      	ldr	r3, [pc, #432]	; (8010898 <ip4_frag+0x224>)
 80106e8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80106ec:	496d      	ldr	r1, [pc, #436]	; (80108a4 <ip4_frag+0x230>)
 80106ee:	486c      	ldr	r0, [pc, #432]	; (80108a0 <ip4_frag+0x22c>)
 80106f0:	f001 fbd4 	bl	8011e9c <iprintf>
 80106f4:	f06f 0305 	mvn.w	r3, #5
 80106f8:	e0ca      	b.n	8010890 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	891b      	ldrh	r3, [r3, #8]
 80106fe:	3b14      	subs	r3, #20
 8010700:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8010702:	e0bc      	b.n	801087e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8010704:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010706:	00da      	lsls	r2, r3, #3
 8010708:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801070a:	4293      	cmp	r3, r2
 801070c:	bfa8      	it	ge
 801070e:	4613      	movge	r3, r2
 8010710:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010712:	2200      	movs	r2, #0
 8010714:	2114      	movs	r1, #20
 8010716:	2002      	movs	r0, #2
 8010718:	f7f8 fa8e 	bl	8008c38 <pbuf_alloc>
 801071c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801071e:	6a3b      	ldr	r3, [r7, #32]
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 80b2 	beq.w	801088a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	895b      	ldrh	r3, [r3, #10]
 801072a:	2b13      	cmp	r3, #19
 801072c:	d806      	bhi.n	801073c <ip4_frag+0xc8>
 801072e:	4b5a      	ldr	r3, [pc, #360]	; (8010898 <ip4_frag+0x224>)
 8010730:	f240 3209 	movw	r2, #777	; 0x309
 8010734:	495c      	ldr	r1, [pc, #368]	; (80108a8 <ip4_frag+0x234>)
 8010736:	485a      	ldr	r0, [pc, #360]	; (80108a0 <ip4_frag+0x22c>)
 8010738:	f001 fbb0 	bl	8011e9c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	2214      	movs	r2, #20
 8010742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010744:	4618      	mov	r0, r3
 8010746:	f001 fb96 	bl	8011e76 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801074a:	6a3b      	ldr	r3, [r7, #32]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8010750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010752:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8010754:	e04f      	b.n	80107f6 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	895a      	ldrh	r2, [r3, #10]
 801075a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010760:	8b7a      	ldrh	r2, [r7, #26]
 8010762:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010764:	4293      	cmp	r3, r2
 8010766:	bf28      	it	cs
 8010768:	4613      	movcs	r3, r2
 801076a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801076c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801076e:	2b00      	cmp	r3, #0
 8010770:	d105      	bne.n	801077e <ip4_frag+0x10a>
        poff = 0;
 8010772:	2300      	movs	r3, #0
 8010774:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	60fb      	str	r3, [r7, #12]
        continue;
 801077c:	e03b      	b.n	80107f6 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801077e:	f7ff ff21 	bl	80105c4 <ip_frag_alloc_pbuf_custom_ref>
 8010782:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d103      	bne.n	8010792 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801078a:	6a38      	ldr	r0, [r7, #32]
 801078c:	f7f8 fdc6 	bl	800931c <pbuf_free>
        goto memerr;
 8010790:	e07c      	b.n	801088c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010792:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801079a:	4413      	add	r3, r2
 801079c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801079e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80107a0:	9201      	str	r2, [sp, #4]
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	4603      	mov	r3, r0
 80107a6:	2202      	movs	r2, #2
 80107a8:	2004      	movs	r0, #4
 80107aa:	f7f8 fbd9 	bl	8008f60 <pbuf_alloced_custom>
 80107ae:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d106      	bne.n	80107c4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80107b6:	6978      	ldr	r0, [r7, #20]
 80107b8:	f7ff ff0c 	bl	80105d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80107bc:	6a38      	ldr	r0, [r7, #32]
 80107be:	f7f8 fdad 	bl	800931c <pbuf_free>
        goto memerr;
 80107c2:	e063      	b.n	801088c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f7f8 fe55 	bl	8009474 <pbuf_ref>
      pcr->original = p;
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	4a36      	ldr	r2, [pc, #216]	; (80108ac <ip4_frag+0x238>)
 80107d4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80107d6:	6939      	ldr	r1, [r7, #16]
 80107d8:	6a38      	ldr	r0, [r7, #32]
 80107da:	f7f8 fe6d 	bl	80094b8 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80107de:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80107e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107e2:	1ad3      	subs	r3, r2, r3
 80107e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80107e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d004      	beq.n	80107f6 <ip4_frag+0x182>
        poff = 0;
 80107ec:	2300      	movs	r3, #0
 80107ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80107f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1ac      	bne.n	8010756 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80107fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80107fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010800:	4413      	add	r3, r2
 8010802:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010804:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801080a:	3b14      	subs	r3, #20
 801080c:	429a      	cmp	r2, r3
 801080e:	bfd4      	ite	le
 8010810:	2301      	movle	r3, #1
 8010812:	2300      	movgt	r3, #0
 8010814:	b2db      	uxtb	r3, r3
 8010816:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010818:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801081a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801081e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d103      	bne.n	801082e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8010826:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010828:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801082c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801082e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010830:	4618      	mov	r0, r3
 8010832:	f7f7 fbcb 	bl	8007fcc <lwip_htons>
 8010836:	4603      	mov	r3, r0
 8010838:	461a      	mov	r2, r3
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801083e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010840:	3314      	adds	r3, #20
 8010842:	b29b      	uxth	r3, r3
 8010844:	4618      	mov	r0, r3
 8010846:	f7f7 fbc1 	bl	8007fcc <lwip_htons>
 801084a:	4603      	mov	r3, r0
 801084c:	461a      	mov	r2, r3
 801084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010850:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010854:	2200      	movs	r2, #0
 8010856:	729a      	strb	r2, [r3, #10]
 8010858:	2200      	movs	r2, #0
 801085a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	695b      	ldr	r3, [r3, #20]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	6a39      	ldr	r1, [r7, #32]
 8010864:	68b8      	ldr	r0, [r7, #8]
 8010866:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010868:	6a38      	ldr	r0, [r7, #32]
 801086a:	f7f8 fd57 	bl	800931c <pbuf_free>
    left -= fragsize;
 801086e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010870:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8010876:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010878:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801087a:	4413      	add	r3, r2
 801087c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801087e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010880:	2b00      	cmp	r3, #0
 8010882:	f47f af3f 	bne.w	8010704 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010886:	2300      	movs	r3, #0
 8010888:	e002      	b.n	8010890 <ip4_frag+0x21c>
      goto memerr;
 801088a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801088c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010890:	4618      	mov	r0, r3
 8010892:	3740      	adds	r7, #64	; 0x40
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	0801466c 	.word	0x0801466c
 801089c:	080147f8 	.word	0x080147f8
 80108a0:	080146b4 	.word	0x080146b4
 80108a4:	08014820 	.word	0x08014820
 80108a8:	0801483c 	.word	0x0801483c
 80108ac:	0801060d 	.word	0x0801060d

080108b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b086      	sub	sp, #24
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80108ba:	230e      	movs	r3, #14
 80108bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	895b      	ldrh	r3, [r3, #10]
 80108c2:	2b0e      	cmp	r3, #14
 80108c4:	d977      	bls.n	80109b6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	7b1a      	ldrb	r2, [r3, #12]
 80108d0:	7b5b      	ldrb	r3, [r3, #13]
 80108d2:	021b      	lsls	r3, r3, #8
 80108d4:	4313      	orrs	r3, r2
 80108d6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d023      	beq.n	801092c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d10f      	bne.n	801090c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	785b      	ldrb	r3, [r3, #1]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d11b      	bne.n	801092c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80108f8:	2b5e      	cmp	r3, #94	; 0x5e
 80108fa:	d117      	bne.n	801092c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	7b5b      	ldrb	r3, [r3, #13]
 8010900:	f043 0310 	orr.w	r3, r3, #16
 8010904:	b2da      	uxtb	r2, r3
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	735a      	strb	r2, [r3, #13]
 801090a:	e00f      	b.n	801092c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	2206      	movs	r2, #6
 8010910:	4930      	ldr	r1, [pc, #192]	; (80109d4 <ethernet_input+0x124>)
 8010912:	4618      	mov	r0, r3
 8010914:	f001 faa0 	bl	8011e58 <memcmp>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d106      	bne.n	801092c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	7b5b      	ldrb	r3, [r3, #13]
 8010922:	f043 0308 	orr.w	r3, r3, #8
 8010926:	b2da      	uxtb	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801092c:	89fb      	ldrh	r3, [r7, #14]
 801092e:	2b08      	cmp	r3, #8
 8010930:	d003      	beq.n	801093a <ethernet_input+0x8a>
 8010932:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010936:	d01e      	beq.n	8010976 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010938:	e044      	b.n	80109c4 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010940:	f003 0308 	and.w	r3, r3, #8
 8010944:	2b00      	cmp	r3, #0
 8010946:	d038      	beq.n	80109ba <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	895b      	ldrh	r3, [r3, #10]
 801094c:	461a      	mov	r2, r3
 801094e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010952:	429a      	cmp	r2, r3
 8010954:	db33      	blt.n	80109be <ethernet_input+0x10e>
 8010956:	8afb      	ldrh	r3, [r7, #22]
 8010958:	425b      	negs	r3, r3
 801095a:	b29b      	uxth	r3, r3
 801095c:	b21b      	sxth	r3, r3
 801095e:	4619      	mov	r1, r3
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7f8 fcb7 	bl	80092d4 <pbuf_header>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d128      	bne.n	80109be <ethernet_input+0x10e>
        ip4_input(p, netif);
 801096c:	6839      	ldr	r1, [r7, #0]
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f7fe ff80 	bl	800f874 <ip4_input>
      break;
 8010974:	e01d      	b.n	80109b2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801097c:	f003 0308 	and.w	r3, r3, #8
 8010980:	2b00      	cmp	r3, #0
 8010982:	d01e      	beq.n	80109c2 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	895b      	ldrh	r3, [r3, #10]
 8010988:	461a      	mov	r2, r3
 801098a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801098e:	429a      	cmp	r2, r3
 8010990:	db15      	blt.n	80109be <ethernet_input+0x10e>
 8010992:	8afb      	ldrh	r3, [r7, #22]
 8010994:	425b      	negs	r3, r3
 8010996:	b29b      	uxth	r3, r3
 8010998:	b21b      	sxth	r3, r3
 801099a:	4619      	mov	r1, r3
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7f8 fc99 	bl	80092d4 <pbuf_header>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d10a      	bne.n	80109be <ethernet_input+0x10e>
        etharp_input(p, netif);
 80109a8:	6839      	ldr	r1, [r7, #0]
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7fe f94e 	bl	800ec4c <etharp_input>
      break;
 80109b0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80109b2:	2300      	movs	r3, #0
 80109b4:	e00a      	b.n	80109cc <ethernet_input+0x11c>
    goto free_and_return;
 80109b6:	bf00      	nop
 80109b8:	e004      	b.n	80109c4 <ethernet_input+0x114>
        goto free_and_return;
 80109ba:	bf00      	nop
 80109bc:	e002      	b.n	80109c4 <ethernet_input+0x114>

free_and_return:
 80109be:	bf00      	nop
 80109c0:	e000      	b.n	80109c4 <ethernet_input+0x114>
        goto free_and_return;
 80109c2:	bf00      	nop
  pbuf_free(p);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f7f8 fca9 	bl	800931c <pbuf_free>
  return ERR_OK;
 80109ca:	2300      	movs	r3, #0
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3718      	adds	r7, #24
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	08014a10 	.word	0x08014a10

080109d8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b086      	sub	sp, #24
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
 80109e4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80109e6:	8c3b      	ldrh	r3, [r7, #32]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7f7 faef 	bl	8007fcc <lwip_htons>
 80109ee:	4603      	mov	r3, r0
 80109f0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80109f2:	210e      	movs	r1, #14
 80109f4:	68b8      	ldr	r0, [r7, #8]
 80109f6:	f7f8 fc6d 	bl	80092d4 <pbuf_header>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d125      	bne.n	8010a4c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	8afa      	ldrh	r2, [r7, #22]
 8010a0a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	2206      	movs	r2, #6
 8010a10:	6839      	ldr	r1, [r7, #0]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f001 fa2f 	bl	8011e76 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	3306      	adds	r3, #6
 8010a1c:	2206      	movs	r2, #6
 8010a1e:	6879      	ldr	r1, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f001 fa28 	bl	8011e76 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010a2c:	2b06      	cmp	r3, #6
 8010a2e:	d006      	beq.n	8010a3e <ethernet_output+0x66>
 8010a30:	4b0a      	ldr	r3, [pc, #40]	; (8010a5c <ethernet_output+0x84>)
 8010a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010a36:	490a      	ldr	r1, [pc, #40]	; (8010a60 <ethernet_output+0x88>)
 8010a38:	480a      	ldr	r0, [pc, #40]	; (8010a64 <ethernet_output+0x8c>)
 8010a3a:	f001 fa2f 	bl	8011e9c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	699b      	ldr	r3, [r3, #24]
 8010a42:	68b9      	ldr	r1, [r7, #8]
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	4798      	blx	r3
 8010a48:	4603      	mov	r3, r0
 8010a4a:	e002      	b.n	8010a52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010a4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010a4e:	f06f 0301 	mvn.w	r3, #1
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3718      	adds	r7, #24
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	0801485c 	.word	0x0801485c
 8010a60:	08014894 	.word	0x08014894
 8010a64:	080148c8 	.word	0x080148c8

08010a68 <ethernet_link_status_updated>:
  * @brief  Notify the User about the nework interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
#else
//    BSP_LED_Off(LED1); todo PRE add LED status
//    BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  } 
}
 8010a70:	bf00      	nop
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <SCB_InvalidateDCache_by_Addr>:
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b087      	sub	sp, #28
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8010a8e:	2320      	movs	r3, #32
 8010a90:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010a92:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8010a96:	e00b      	b.n	8010ab0 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8010a98:	4a0c      	ldr	r2, [pc, #48]	; (8010acc <SCB_InvalidateDCache_by_Addr+0x50>)
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	693a      	ldr	r2, [r7, #16]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8010aa8:	697a      	ldr	r2, [r7, #20]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	dcf0      	bgt.n	8010a98 <SCB_InvalidateDCache_by_Addr+0x1c>
 8010ab6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010aba:	f3bf 8f6f 	isb	sy
}
 8010abe:	bf00      	nop
 8010ac0:	371c      	adds	r7, #28
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	e000ed00 	.word	0xe000ed00

08010ad0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b08e      	sub	sp, #56	; 0x38
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010adc:	2200      	movs	r2, #0
 8010ade:	601a      	str	r2, [r3, #0]
 8010ae0:	605a      	str	r2, [r3, #4]
 8010ae2:	609a      	str	r2, [r3, #8]
 8010ae4:	60da      	str	r2, [r3, #12]
 8010ae6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4a59      	ldr	r2, [pc, #356]	; (8010c54 <HAL_ETH_MspInit+0x184>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	f040 80ab 	bne.w	8010c4a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8010af4:	4b58      	ldr	r3, [pc, #352]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010afa:	4a57      	ldr	r2, [pc, #348]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010b04:	4b54      	ldr	r3, [pc, #336]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b0e:	623b      	str	r3, [r7, #32]
 8010b10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8010b12:	4b51      	ldr	r3, [pc, #324]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b18:	4a4f      	ldr	r2, [pc, #316]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010b22:	4b4d      	ldr	r3, [pc, #308]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b2c:	61fb      	str	r3, [r7, #28]
 8010b2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8010b30:	4b49      	ldr	r3, [pc, #292]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b36:	4a48      	ldr	r2, [pc, #288]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010b40:	4b45      	ldr	r3, [pc, #276]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b4a:	61bb      	str	r3, [r7, #24]
 8010b4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b4e:	4b42      	ldr	r3, [pc, #264]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b54:	4a40      	ldr	r2, [pc, #256]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b56:	f043 0304 	orr.w	r3, r3, #4
 8010b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010b5e:	4b3e      	ldr	r3, [pc, #248]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b64:	f003 0304 	and.w	r3, r3, #4
 8010b68:	617b      	str	r3, [r7, #20]
 8010b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b6c:	4b3a      	ldr	r3, [pc, #232]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b72:	4a39      	ldr	r2, [pc, #228]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b74:	f043 0301 	orr.w	r3, r3, #1
 8010b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010b7c:	4b36      	ldr	r3, [pc, #216]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b82:	f003 0301 	and.w	r3, r3, #1
 8010b86:	613b      	str	r3, [r7, #16]
 8010b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b8a:	4b33      	ldr	r3, [pc, #204]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b90:	4a31      	ldr	r2, [pc, #196]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b92:	f043 0302 	orr.w	r3, r3, #2
 8010b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010b9a:	4b2f      	ldr	r3, [pc, #188]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010ba0:	f003 0302 	and.w	r3, r3, #2
 8010ba4:	60fb      	str	r3, [r7, #12]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010ba8:	4b2b      	ldr	r3, [pc, #172]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010bae:	4a2a      	ldr	r2, [pc, #168]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010bb8:	4b27      	ldr	r3, [pc, #156]	; (8010c58 <HAL_ETH_MspInit+0x188>)
 8010bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bc2:	60bb      	str	r3, [r7, #8]
 8010bc4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8010bc6:	2332      	movs	r3, #50	; 0x32
 8010bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bca:	2302      	movs	r3, #2
 8010bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010bd6:	230b      	movs	r3, #11
 8010bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bde:	4619      	mov	r1, r3
 8010be0:	481e      	ldr	r0, [pc, #120]	; (8010c5c <HAL_ETH_MspInit+0x18c>)
 8010be2:	f7f1 fd55 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8010be6:	2386      	movs	r3, #134	; 0x86
 8010be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bea:	2302      	movs	r3, #2
 8010bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010bf6:	230b      	movs	r3, #11
 8010bf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bfe:	4619      	mov	r1, r3
 8010c00:	4817      	ldr	r0, [pc, #92]	; (8010c60 <HAL_ETH_MspInit+0x190>)
 8010c02:	f7f1 fd45 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8010c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c0c:	2302      	movs	r3, #2
 8010c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c10:	2300      	movs	r3, #0
 8010c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c14:	2300      	movs	r3, #0
 8010c16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010c18:	230b      	movs	r3, #11
 8010c1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8010c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c20:	4619      	mov	r1, r3
 8010c22:	4810      	ldr	r0, [pc, #64]	; (8010c64 <HAL_ETH_MspInit+0x194>)
 8010c24:	f7f1 fd34 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8010c28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8010c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c2e:	2302      	movs	r3, #2
 8010c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c32:	2300      	movs	r3, #0
 8010c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c36:	2300      	movs	r3, #0
 8010c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010c3a:	230b      	movs	r3, #11
 8010c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c42:	4619      	mov	r1, r3
 8010c44:	4808      	ldr	r0, [pc, #32]	; (8010c68 <HAL_ETH_MspInit+0x198>)
 8010c46:	f7f1 fd23 	bl	8002690 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8010c4a:	bf00      	nop
 8010c4c:	3738      	adds	r7, #56	; 0x38
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop
 8010c54:	40028000 	.word	0x40028000
 8010c58:	58024400 	.word	0x58024400
 8010c5c:	58020800 	.word	0x58020800
 8010c60:	58020000 	.word	0x58020000
 8010c64:	58020400 	.word	0x58020400
 8010c68:	58021800 	.word	0x58021800

08010c6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b086      	sub	sp, #24
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 8010c74:	2300      	movs	r3, #0
 8010c76:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8010c78:	4b4a      	ldr	r3, [pc, #296]	; (8010da4 <low_level_init+0x138>)
 8010c7a:	4a4b      	ldr	r2, [pc, #300]	; (8010da8 <low_level_init+0x13c>)
 8010c7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8010c82:	2380      	movs	r3, #128	; 0x80
 8010c84:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8010c86:	23e1      	movs	r3, #225	; 0xe1
 8010c88:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8010c92:	2300      	movs	r3, #0
 8010c94:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8010c96:	4a43      	ldr	r2, [pc, #268]	; (8010da4 <low_level_init+0x138>)
 8010c98:	f107 030c 	add.w	r3, r7, #12
 8010c9c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8010c9e:	4b41      	ldr	r3, [pc, #260]	; (8010da4 <low_level_init+0x138>)
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8010ca4:	4b3f      	ldr	r3, [pc, #252]	; (8010da4 <low_level_init+0x138>)
 8010ca6:	4a41      	ldr	r2, [pc, #260]	; (8010dac <low_level_init+0x140>)
 8010ca8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8010caa:	4b3e      	ldr	r3, [pc, #248]	; (8010da4 <low_level_init+0x138>)
 8010cac:	4a40      	ldr	r2, [pc, #256]	; (8010db0 <low_level_init+0x144>)
 8010cae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8010cb0:	4b3c      	ldr	r3, [pc, #240]	; (8010da4 <low_level_init+0x138>)
 8010cb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010cb6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010cb8:	483a      	ldr	r0, [pc, #232]	; (8010da4 <low_level_init+0x138>)
 8010cba:	f7ef fff5 	bl	8000ca8 <HAL_ETH_Init>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8010cc2:	2234      	movs	r2, #52	; 0x34
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	483b      	ldr	r0, [pc, #236]	; (8010db4 <low_level_init+0x148>)
 8010cc8:	f001 f8e0 	bl	8011e8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8010ccc:	4b39      	ldr	r3, [pc, #228]	; (8010db4 <low_level_init+0x148>)
 8010cce:	2221      	movs	r2, #33	; 0x21
 8010cd0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8010cd2:	4b38      	ldr	r3, [pc, #224]	; (8010db4 <low_level_init+0x148>)
 8010cd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010cd8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8010cda:	4b36      	ldr	r3, [pc, #216]	; (8010db4 <low_level_init+0x148>)
 8010cdc:	2200      	movs	r2, #0
 8010cde:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8010ce0:	4835      	ldr	r0, [pc, #212]	; (8010db8 <low_level_init+0x14c>)
 8010ce2:	f7f7 fcad 	bl	8008640 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2206      	movs	r2, #6
 8010cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010cee:	4b2d      	ldr	r3, [pc, #180]	; (8010da4 <low_level_init+0x138>)
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	781a      	ldrb	r2, [r3, #0]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010cfa:	4b2a      	ldr	r3, [pc, #168]	; (8010da4 <low_level_init+0x138>)
 8010cfc:	685b      	ldr	r3, [r3, #4]
 8010cfe:	785a      	ldrb	r2, [r3, #1]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010d06:	4b27      	ldr	r3, [pc, #156]	; (8010da4 <low_level_init+0x138>)
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	789a      	ldrb	r2, [r3, #2]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010d12:	4b24      	ldr	r3, [pc, #144]	; (8010da4 <low_level_init+0x138>)
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	78da      	ldrb	r2, [r3, #3]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8010d1e:	4b21      	ldr	r3, [pc, #132]	; (8010da4 <low_level_init+0x138>)
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	791a      	ldrb	r2, [r3, #4]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010d2a:	4b1e      	ldr	r3, [pc, #120]	; (8010da4 <low_level_init+0x138>)
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	795a      	ldrb	r2, [r3, #5]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010d3c:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010d44:	f043 030a 	orr.w	r3, r3, #10
 8010d48:	b2da      	uxtb	r2, r3
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8010d50:	2300      	movs	r3, #0
 8010d52:	617b      	str	r3, [r7, #20]
 8010d54:	e00e      	b.n	8010d74 <low_level_init+0x108>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8010d56:	697a      	ldr	r2, [r7, #20]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	005b      	lsls	r3, r3, #1
 8010d5c:	4413      	add	r3, r2
 8010d5e:	025b      	lsls	r3, r3, #9
 8010d60:	4a16      	ldr	r2, [pc, #88]	; (8010dbc <low_level_init+0x150>)
 8010d62:	441a      	add	r2, r3
 8010d64:	2300      	movs	r3, #0
 8010d66:	6979      	ldr	r1, [r7, #20]
 8010d68:	480e      	ldr	r0, [pc, #56]	; (8010da4 <low_level_init+0x138>)
 8010d6a:	f7f0 f877 	bl	8000e5c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	3301      	adds	r3, #1
 8010d72:	617b      	str	r3, [r7, #20]
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b03      	cmp	r3, #3
 8010d78:	d9ed      	bls.n	8010d56 <low_level_init+0xea>
      
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8010d7a:	4911      	ldr	r1, [pc, #68]	; (8010dc0 <low_level_init+0x154>)
 8010d7c:	4811      	ldr	r0, [pc, #68]	; (8010dc4 <low_level_init+0x158>)
 8010d7e:	f7ef fc7f 	bl	8000680 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8010d82:	4810      	ldr	r0, [pc, #64]	; (8010dc4 <low_level_init+0x158>)
 8010d84:	f7ef fcae 	bl	80006e4 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8010d88:	7cfb      	ldrb	r3, [r7, #19]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d103      	bne.n	8010d96 <low_level_init+0x12a>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 f99a 	bl	80110c8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8010d94:	e001      	b.n	8010d9a <low_level_init+0x12e>
    Error_Handler();
 8010d96:	f000 fd61 	bl	801185c <Error_Handler>
}
 8010d9a:	bf00      	nop
 8010d9c:	3718      	adds	r7, #24
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	2400512c 	.word	0x2400512c
 8010da8:	40028000 	.word	0x40028000
 8010dac:	240000f0 	.word	0x240000f0
 8010db0:	24000090 	.word	0x24000090
 8010db4:	2400519c 	.word	0x2400519c
 8010db8:	08014a20 	.word	0x08014a20
 8010dbc:	24000150 	.word	0x24000150
 8010dc0:	24000010 	.word	0x24000010
 8010dc4:	2400510c 	.word	0x2400510c

08010dc8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b092      	sub	sp, #72	; 0x48
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8010de0:	f107 0308 	add.w	r3, r7, #8
 8010de4:	2230      	movs	r2, #48	; 0x30
 8010de6:	2100      	movs	r1, #0
 8010de8:	4618      	mov	r0, r3
 8010dea:	f001 f84f 	bl	8011e8c <memset>
  
  for(q = p; q != NULL; q = q->next)
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010df2:	e04f      	b.n	8010e94 <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8010df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010df6:	2b03      	cmp	r3, #3
 8010df8:	d902      	bls.n	8010e00 <low_level_output+0x38>
      return ERR_IF;
 8010dfa:	f06f 030b 	mvn.w	r3, #11
 8010dfe:	e05a      	b.n	8010eb6 <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 8010e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e02:	6859      	ldr	r1, [r3, #4]
 8010e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e06:	4613      	mov	r3, r2
 8010e08:	005b      	lsls	r3, r3, #1
 8010e0a:	4413      	add	r3, r2
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010e12:	4413      	add	r3, r2
 8010e14:	3b40      	subs	r3, #64	; 0x40
 8010e16:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8010e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e1a:	895b      	ldrh	r3, [r3, #10]
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e20:	4613      	mov	r3, r2
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	4413      	add	r3, r2
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010e2c:	4413      	add	r3, r2
 8010e2e:	3b3c      	subs	r3, #60	; 0x3c
 8010e30:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 8010e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e34:	895b      	ldrh	r3, [r3, #10]
 8010e36:	461a      	mov	r2, r3
 8010e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e3a:	4413      	add	r3, r2
 8010e3c:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 8010e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d012      	beq.n	8010e6a <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8010e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e46:	1e5a      	subs	r2, r3, #1
 8010e48:	f107 0008 	add.w	r0, r7, #8
 8010e4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e4e:	460b      	mov	r3, r1
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	440b      	add	r3, r1
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	18c1      	adds	r1, r0, r3
 8010e58:	4613      	mov	r3, r2
 8010e5a:	005b      	lsls	r3, r3, #1
 8010e5c:	4413      	add	r3, r2
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010e64:	4413      	add	r3, r2
 8010e66:	3b38      	subs	r3, #56	; 0x38
 8010e68:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8010e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d10a      	bne.n	8010e88 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 8010e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e74:	4613      	mov	r3, r2
 8010e76:	005b      	lsls	r3, r3, #1
 8010e78:	4413      	add	r3, r2
 8010e7a:	009b      	lsls	r3, r3, #2
 8010e7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010e80:	4413      	add	r3, r2
 8010e82:	3b38      	subs	r3, #56	; 0x38
 8010e84:	2200      	movs	r2, #0
 8010e86:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 8010e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8010e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d1ac      	bne.n	8010df4 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 8010e9a:	4a09      	ldr	r2, [pc, #36]	; (8010ec0 <low_level_output+0xf8>)
 8010e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e9e:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8010ea0:	4a07      	ldr	r2, [pc, #28]	; (8010ec0 <low_level_output+0xf8>)
 8010ea2:	f107 0308 	add.w	r3, r7, #8
 8010ea6:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8010ea8:	2214      	movs	r2, #20
 8010eaa:	4905      	ldr	r1, [pc, #20]	; (8010ec0 <low_level_output+0xf8>)
 8010eac:	4805      	ldr	r0, [pc, #20]	; (8010ec4 <low_level_output+0xfc>)
 8010eae:	f7f0 f8c2 	bl	8001036 <HAL_ETH_Transmit>
  
  return errval;
 8010eb2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3748      	adds	r7, #72	; 0x48
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	2400519c 	.word	0x2400519c
 8010ec4:	2400512c 	.word	0x2400512c

08010ec8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b08a      	sub	sp, #40	; 0x28
 8010ecc:	af02      	add	r7, sp, #8
 8010ece:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  
  if (HAL_ETH_IsRxDataAvailable(&heth))
 8010ed8:	481a      	ldr	r0, [pc, #104]	; (8010f44 <low_level_input+0x7c>)
 8010eda:	f7f0 f938 	bl	800114e <HAL_ETH_IsRxDataAvailable>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d02a      	beq.n	8010f3a <low_level_input+0x72>
  {
    HAL_ETH_GetRxDataBuffer(&heth, &RxBuff);
 8010ee4:	f107 030c 	add.w	r3, r7, #12
 8010ee8:	4619      	mov	r1, r3
 8010eea:	4816      	ldr	r0, [pc, #88]	; (8010f44 <low_level_input+0x7c>)
 8010eec:	f7f0 fa0d 	bl	800130a <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8010ef0:	f107 0308 	add.w	r3, r7, #8
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	4813      	ldr	r0, [pc, #76]	; (8010f44 <low_level_input+0x7c>)
 8010ef8:	f7f0 faa5 	bl	8001446 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8010efc:	4811      	ldr	r0, [pc, #68]	; (8010f44 <low_level_input+0x7c>)
 8010efe:	f7f0 fad5 	bl	80014ac <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	4611      	mov	r1, r2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ff fdb7 	bl	8010a7c <SCB_InvalidateDCache_by_Addr>
#endif
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8010f0e:	480e      	ldr	r0, [pc, #56]	; (8010f48 <low_level_input+0x80>)
 8010f10:	f7f7 fc0a 	bl	8008728 <memp_malloc_pool>
 8010f14:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	4a0c      	ldr	r2, [pc, #48]	; (8010f4c <low_level_input+0x84>)
 8010f1a:	611a      	str	r2, [r3, #16]
    
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	b299      	uxth	r1, r3
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010f26:	9201      	str	r2, [sp, #4]
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	2202      	movs	r2, #2
 8010f2e:	2004      	movs	r0, #4
 8010f30:	f7f8 f816 	bl	8008f60 <pbuf_alloced_custom>
 8010f34:	61f8      	str	r0, [r7, #28]
    
    return p;
 8010f36:	69fb      	ldr	r3, [r7, #28]
 8010f38:	e000      	b.n	8010f3c <low_level_input+0x74>
  }
  else
  {
    return NULL;
 8010f3a:	2300      	movs	r3, #0
  }
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3720      	adds	r7, #32
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	2400512c 	.word	0x2400512c
 8010f48:	08014a20 	.word	0x08014a20
 8010f4c:	08010fed 	.word	0x08010fed

08010f50 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7ff ffb5 	bl	8010ec8 <low_level_input>
 8010f5e:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d010      	beq.n	8010f88 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	691b      	ldr	r3, [r3, #16]
 8010f6a:	6879      	ldr	r1, [r7, #4]
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	4798      	blx	r3
 8010f70:	4603      	mov	r3, r0
 8010f72:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8010f74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d006      	beq.n	8010f8a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8010f7c:	68f8      	ldr	r0, [r7, #12]
 8010f7e:	f7f8 f9cd 	bl	800931c <pbuf_free>
    p = NULL;    
 8010f82:	2300      	movs	r3, #0
 8010f84:	60fb      	str	r3, [r7, #12]
 8010f86:	e000      	b.n	8010f8a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8010f88:	bf00      	nop
  }
  
}
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d106      	bne.n	8010fac <ethernetif_init+0x1c>
 8010f9e:	4b0e      	ldr	r3, [pc, #56]	; (8010fd8 <ethernetif_init+0x48>)
 8010fa0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8010fa4:	490d      	ldr	r1, [pc, #52]	; (8010fdc <ethernetif_init+0x4c>)
 8010fa6:	480e      	ldr	r0, [pc, #56]	; (8010fe0 <ethernetif_init+0x50>)
 8010fa8:	f000 ff78 	bl	8011e9c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2273      	movs	r2, #115	; 0x73
 8010fb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2274      	movs	r2, #116	; 0x74
 8010fb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	4a09      	ldr	r2, [pc, #36]	; (8010fe4 <ethernetif_init+0x54>)
 8010fc0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4a08      	ldr	r2, [pc, #32]	; (8010fe8 <ethernetif_init+0x58>)
 8010fc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f7ff fe4f 	bl	8010c6c <low_level_init>

  return ERR_OK;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	080148f0 	.word	0x080148f0
 8010fdc:	08014904 	.word	0x08014904
 8010fe0:	08014914 	.word	0x08014914
 8010fe4:	0800ee95 	.word	0x0800ee95
 8010fe8:	08010dc9 	.word	0x08010dc9

08010fec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	685a      	ldr	r2, [r3, #4]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	891b      	ldrh	r3, [r3, #8]
 8011000:	4619      	mov	r1, r3
 8011002:	4610      	mov	r0, r2
 8011004:	f7ff fd3a 	bl	8010a7c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8011008:	68f9      	ldr	r1, [r7, #12]
 801100a:	4803      	ldr	r0, [pc, #12]	; (8011018 <pbuf_free_custom+0x2c>)
 801100c:	f7f7 fbfa 	bl	8008804 <memp_free_pool>
}
 8011010:	bf00      	nop
 8011012:	3710      	adds	r7, #16
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	08014a20 	.word	0x08014a20

0801101c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011020:	f7ef fd10 	bl	8000a44 <HAL_GetTick>
 8011024:	4603      	mov	r3, r0
}
 8011026:	4618      	mov	r0, r3
 8011028:	bd80      	pop	{r7, pc}
	...

0801102c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 801102c:	b580      	push	{r7, lr}
 801102e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8011030:	4802      	ldr	r0, [pc, #8]	; (801103c <ETH_PHY_IO_Init+0x10>)
 8011032:	f7f0 fd45 	bl	8001ac0 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8011036:	2300      	movs	r3, #0
}
 8011038:	4618      	mov	r0, r3
 801103a:	bd80      	pop	{r7, pc}
 801103c:	2400512c 	.word	0x2400512c

08011040 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8011040:	b480      	push	{r7}
 8011042:	af00      	add	r7, sp, #0
  return 0;
 8011044:	2300      	movs	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	60b9      	str	r1, [r7, #8]
 801105a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	68ba      	ldr	r2, [r7, #8]
 8011060:	68f9      	ldr	r1, [r7, #12]
 8011062:	4807      	ldr	r0, [pc, #28]	; (8011080 <ETH_PHY_IO_ReadReg+0x30>)
 8011064:	f7f0 fa96 	bl	8001594 <HAL_ETH_ReadPHYRegister>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d002      	beq.n	8011074 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011072:	e000      	b.n	8011076 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3710      	adds	r7, #16
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	2400512c 	.word	0x2400512c

08011084 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	68ba      	ldr	r2, [r7, #8]
 8011094:	68f9      	ldr	r1, [r7, #12]
 8011096:	4807      	ldr	r0, [pc, #28]	; (80110b4 <ETH_PHY_IO_WriteReg+0x30>)
 8011098:	f7f0 fad0 	bl	800163c <HAL_ETH_WritePHYRegister>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d002      	beq.n	80110a8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80110a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110a6:	e000      	b.n	80110aa <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 80110a8:	2300      	movs	r3, #0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	2400512c 	.word	0x2400512c

080110b8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80110bc:	f7ef fcc2 	bl	8000a44 <HAL_GetTick>
 80110c0:	4603      	mov	r3, r0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	bd80      	pop	{r7, pc}
	...

080110c8 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b0a0      	sub	sp, #128	; 0x80
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80110d4:	2300      	movs	r3, #0
 80110d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80110d8:	2300      	movs	r3, #0
 80110da:	677b      	str	r3, [r7, #116]	; 0x74
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80110dc:	483a      	ldr	r0, [pc, #232]	; (80111c8 <ethernet_link_check_state+0x100>)
 80110de:	f7ef fba8 	bl	8000832 <LAN8742_GetLinkState>
 80110e2:	4603      	mov	r3, r0
 80110e4:	673b      	str	r3, [r7, #112]	; 0x70
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80110ec:	089b      	lsrs	r3, r3, #2
 80110ee:	f003 0301 	and.w	r3, r3, #1
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d00c      	beq.n	8011112 <ethernet_link_check_state+0x4a>
 80110f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d809      	bhi.n	8011112 <ethernet_link_check_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 80110fe:	4833      	ldr	r0, [pc, #204]	; (80111cc <ethernet_link_check_state+0x104>)
 8011100:	f7ef ff49 	bl	8000f96 <HAL_ETH_Stop>
    netif_set_down(netif);
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7f7 fd07 	bl	8008b18 <netif_set_down>
    netif_set_link_down(netif);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f7f7 fd49 	bl	8008ba2 <netif_set_link_down>
 8011110:	e04c      	b.n	80111ac <ethernet_link_check_state+0xe4>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8011118:	f003 0304 	and.w	r3, r3, #4
 801111c:	2b00      	cmp	r3, #0
 801111e:	d145      	bne.n	80111ac <ethernet_link_check_state+0xe4>
 8011120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011122:	2b01      	cmp	r3, #1
 8011124:	d942      	bls.n	80111ac <ethernet_link_check_state+0xe4>
  {
    switch (PHYLinkState)
 8011126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011128:	3b02      	subs	r3, #2
 801112a:	2b03      	cmp	r3, #3
 801112c:	d82a      	bhi.n	8011184 <ethernet_link_check_state+0xbc>
 801112e:	a201      	add	r2, pc, #4	; (adr r2, 8011134 <ethernet_link_check_state+0x6c>)
 8011130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011134:	08011145 	.word	0x08011145
 8011138:	08011157 	.word	0x08011157
 801113c:	08011167 	.word	0x08011167
 8011140:	08011177 	.word	0x08011177
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8011144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011148:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801114a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801114e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011150:	2301      	movs	r3, #1
 8011152:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011154:	e017      	b.n	8011186 <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8011156:	2300      	movs	r3, #0
 8011158:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801115a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801115e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011160:	2301      	movs	r3, #1
 8011162:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011164:	e00f      	b.n	8011186 <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8011166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801116a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801116c:	2300      	movs	r3, #0
 801116e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011170:	2301      	movs	r3, #1
 8011172:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011174:	e007      	b.n	8011186 <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8011176:	2300      	movs	r3, #0
 8011178:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801117a:	2300      	movs	r3, #0
 801117c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801117e:	2301      	movs	r3, #1
 8011180:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011182:	e000      	b.n	8011186 <ethernet_link_check_state+0xbe>
    default:
      break;      
 8011184:	bf00      	nop
    }
    
    if(linkchanged)
 8011186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00f      	beq.n	80111ac <ethernet_link_check_state+0xe4>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 801118c:	f107 030c 	add.w	r3, r7, #12
 8011190:	4619      	mov	r1, r3
 8011192:	480e      	ldr	r0, [pc, #56]	; (80111cc <ethernet_link_check_state+0x104>)
 8011194:	f7f0 faa6 	bl	80016e4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8011198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801119a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801119c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801119e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80111a0:	f107 030c 	add.w	r3, r7, #12
 80111a4:	4619      	mov	r1, r3
 80111a6:	4809      	ldr	r0, [pc, #36]	; (80111cc <ethernet_link_check_state+0x104>)
 80111a8:	f7f0 fc70 	bl	8001a8c <HAL_ETH_SetMACConfig>
    }
  }
  HAL_ETH_Start(&heth);
 80111ac:	4807      	ldr	r0, [pc, #28]	; (80111cc <ethernet_link_check_state+0x104>)
 80111ae:	f7ef fe96 	bl	8000ede <HAL_ETH_Start>
  netif_set_up(netif);
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f7f7 fc6c 	bl	8008a90 <netif_set_up>
  netif_set_link_up(netif);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7f7 fccf 	bl	8008b5c <netif_set_link_up>

/* USER CODE BEGIN ETH link code for User BSP */ 
    
/* USER CODE END ETH link code for User BSP */

}
 80111be:	bf00      	nop
 80111c0:	3780      	adds	r7, #128	; 0x80
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	2400510c 	.word	0x2400510c
 80111cc:	2400512c 	.word	0x2400512c

080111d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b08c      	sub	sp, #48	; 0x30
 80111d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111d6:	f107 031c 	add.w	r3, r7, #28
 80111da:	2200      	movs	r2, #0
 80111dc:	601a      	str	r2, [r3, #0]
 80111de:	605a      	str	r2, [r3, #4]
 80111e0:	609a      	str	r2, [r3, #8]
 80111e2:	60da      	str	r2, [r3, #12]
 80111e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80111e6:	4b4f      	ldr	r3, [pc, #316]	; (8011324 <MX_GPIO_Init+0x154>)
 80111e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80111ec:	4a4d      	ldr	r2, [pc, #308]	; (8011324 <MX_GPIO_Init+0x154>)
 80111ee:	f043 0304 	orr.w	r3, r3, #4
 80111f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80111f6:	4b4b      	ldr	r3, [pc, #300]	; (8011324 <MX_GPIO_Init+0x154>)
 80111f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80111fc:	f003 0304 	and.w	r3, r3, #4
 8011200:	61bb      	str	r3, [r7, #24]
 8011202:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011204:	4b47      	ldr	r3, [pc, #284]	; (8011324 <MX_GPIO_Init+0x154>)
 8011206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801120a:	4a46      	ldr	r2, [pc, #280]	; (8011324 <MX_GPIO_Init+0x154>)
 801120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011214:	4b43      	ldr	r3, [pc, #268]	; (8011324 <MX_GPIO_Init+0x154>)
 8011216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801121e:	617b      	str	r3, [r7, #20]
 8011220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011222:	4b40      	ldr	r3, [pc, #256]	; (8011324 <MX_GPIO_Init+0x154>)
 8011224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011228:	4a3e      	ldr	r2, [pc, #248]	; (8011324 <MX_GPIO_Init+0x154>)
 801122a:	f043 0301 	orr.w	r3, r3, #1
 801122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011232:	4b3c      	ldr	r3, [pc, #240]	; (8011324 <MX_GPIO_Init+0x154>)
 8011234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011238:	f003 0301 	and.w	r3, r3, #1
 801123c:	613b      	str	r3, [r7, #16]
 801123e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011240:	4b38      	ldr	r3, [pc, #224]	; (8011324 <MX_GPIO_Init+0x154>)
 8011242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011246:	4a37      	ldr	r2, [pc, #220]	; (8011324 <MX_GPIO_Init+0x154>)
 8011248:	f043 0302 	orr.w	r3, r3, #2
 801124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011250:	4b34      	ldr	r3, [pc, #208]	; (8011324 <MX_GPIO_Init+0x154>)
 8011252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011256:	f003 0302 	and.w	r3, r3, #2
 801125a:	60fb      	str	r3, [r7, #12]
 801125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801125e:	4b31      	ldr	r3, [pc, #196]	; (8011324 <MX_GPIO_Init+0x154>)
 8011260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011264:	4a2f      	ldr	r2, [pc, #188]	; (8011324 <MX_GPIO_Init+0x154>)
 8011266:	f043 0308 	orr.w	r3, r3, #8
 801126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801126e:	4b2d      	ldr	r3, [pc, #180]	; (8011324 <MX_GPIO_Init+0x154>)
 8011270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011274:	f003 0308 	and.w	r3, r3, #8
 8011278:	60bb      	str	r3, [r7, #8]
 801127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801127c:	4b29      	ldr	r3, [pc, #164]	; (8011324 <MX_GPIO_Init+0x154>)
 801127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011282:	4a28      	ldr	r2, [pc, #160]	; (8011324 <MX_GPIO_Init+0x154>)
 8011284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801128c:	4b25      	ldr	r3, [pc, #148]	; (8011324 <MX_GPIO_Init+0x154>)
 801128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011296:	607b      	str	r3, [r7, #4]
 8011298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 801129a:	2200      	movs	r2, #0
 801129c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80112a0:	4821      	ldr	r0, [pc, #132]	; (8011328 <MX_GPIO_Init+0x158>)
 80112a2:	f7f1 fba5 	bl	80029f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80112a6:	2200      	movs	r2, #0
 80112a8:	2140      	movs	r1, #64	; 0x40
 80112aa:	4820      	ldr	r0, [pc, #128]	; (801132c <MX_GPIO_Init+0x15c>)
 80112ac:	f7f1 fba0 	bl	80029f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80112b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80112b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80112b6:	4b1e      	ldr	r3, [pc, #120]	; (8011330 <MX_GPIO_Init+0x160>)
 80112b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112ba:	2300      	movs	r3, #0
 80112bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80112be:	f107 031c 	add.w	r3, r7, #28
 80112c2:	4619      	mov	r1, r3
 80112c4:	481b      	ldr	r0, [pc, #108]	; (8011334 <MX_GPIO_Init+0x164>)
 80112c6:	f7f1 f9e3 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80112ca:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80112ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112d0:	2301      	movs	r3, #1
 80112d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112d4:	2300      	movs	r3, #0
 80112d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112d8:	2300      	movs	r3, #0
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80112dc:	f107 031c 	add.w	r3, r7, #28
 80112e0:	4619      	mov	r1, r3
 80112e2:	4811      	ldr	r0, [pc, #68]	; (8011328 <MX_GPIO_Init+0x158>)
 80112e4:	f7f1 f9d4 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80112e8:	2340      	movs	r3, #64	; 0x40
 80112ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112ec:	2301      	movs	r3, #1
 80112ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112f0:	2300      	movs	r3, #0
 80112f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112f4:	2300      	movs	r3, #0
 80112f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80112f8:	f107 031c 	add.w	r3, r7, #28
 80112fc:	4619      	mov	r1, r3
 80112fe:	480b      	ldr	r0, [pc, #44]	; (801132c <MX_GPIO_Init+0x15c>)
 8011300:	f7f1 f9c6 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8011304:	2380      	movs	r3, #128	; 0x80
 8011306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011308:	2300      	movs	r3, #0
 801130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801130c:	2300      	movs	r3, #0
 801130e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8011310:	f107 031c 	add.w	r3, r7, #28
 8011314:	4619      	mov	r1, r3
 8011316:	4805      	ldr	r0, [pc, #20]	; (801132c <MX_GPIO_Init+0x15c>)
 8011318:	f7f1 f9ba 	bl	8002690 <HAL_GPIO_Init>

}
 801131c:	bf00      	nop
 801131e:	3730      	adds	r7, #48	; 0x30
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	58024400 	.word	0x58024400
 8011328:	58020400 	.word	0x58020400
 801132c:	58021800 	.word	0x58021800
 8011330:	11110000 	.word	0x11110000
 8011334:	58020800 	.word	0x58020800

08011338 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 0;
 801133e:	4b8b      	ldr	r3, [pc, #556]	; (801156c <MX_LWIP_Init+0x234>)
 8011340:	2200      	movs	r2, #0
 8011342:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8011344:	4b89      	ldr	r3, [pc, #548]	; (801156c <MX_LWIP_Init+0x234>)
 8011346:	2200      	movs	r2, #0
 8011348:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 801134a:	4b88      	ldr	r3, [pc, #544]	; (801156c <MX_LWIP_Init+0x234>)
 801134c:	2200      	movs	r2, #0
 801134e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 0;
 8011350:	4b86      	ldr	r3, [pc, #536]	; (801156c <MX_LWIP_Init+0x234>)
 8011352:	2200      	movs	r2, #0
 8011354:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 8011356:	4b86      	ldr	r3, [pc, #536]	; (8011570 <MX_LWIP_Init+0x238>)
 8011358:	2200      	movs	r2, #0
 801135a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 801135c:	4b84      	ldr	r3, [pc, #528]	; (8011570 <MX_LWIP_Init+0x238>)
 801135e:	2200      	movs	r2, #0
 8011360:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8011362:	4b83      	ldr	r3, [pc, #524]	; (8011570 <MX_LWIP_Init+0x238>)
 8011364:	2200      	movs	r2, #0
 8011366:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8011368:	4b81      	ldr	r3, [pc, #516]	; (8011570 <MX_LWIP_Init+0x238>)
 801136a:	2200      	movs	r2, #0
 801136c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 801136e:	4b81      	ldr	r3, [pc, #516]	; (8011574 <MX_LWIP_Init+0x23c>)
 8011370:	2200      	movs	r2, #0
 8011372:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8011374:	4b7f      	ldr	r3, [pc, #508]	; (8011574 <MX_LWIP_Init+0x23c>)
 8011376:	2200      	movs	r2, #0
 8011378:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 801137a:	4b7e      	ldr	r3, [pc, #504]	; (8011574 <MX_LWIP_Init+0x23c>)
 801137c:	2200      	movs	r2, #0
 801137e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8011380:	4b7c      	ldr	r3, [pc, #496]	; (8011574 <MX_LWIP_Init+0x23c>)
 8011382:	2200      	movs	r2, #0
 8011384:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8011386:	f7f6 fe48 	bl	800801a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801138a:	4b78      	ldr	r3, [pc, #480]	; (801156c <MX_LWIP_Init+0x234>)
 801138c:	781b      	ldrb	r3, [r3, #0]
 801138e:	061a      	lsls	r2, r3, #24
 8011390:	4b76      	ldr	r3, [pc, #472]	; (801156c <MX_LWIP_Init+0x234>)
 8011392:	785b      	ldrb	r3, [r3, #1]
 8011394:	041b      	lsls	r3, r3, #16
 8011396:	431a      	orrs	r2, r3
 8011398:	4b74      	ldr	r3, [pc, #464]	; (801156c <MX_LWIP_Init+0x234>)
 801139a:	789b      	ldrb	r3, [r3, #2]
 801139c:	021b      	lsls	r3, r3, #8
 801139e:	4313      	orrs	r3, r2
 80113a0:	4a72      	ldr	r2, [pc, #456]	; (801156c <MX_LWIP_Init+0x234>)
 80113a2:	78d2      	ldrb	r2, [r2, #3]
 80113a4:	4313      	orrs	r3, r2
 80113a6:	061a      	lsls	r2, r3, #24
 80113a8:	4b70      	ldr	r3, [pc, #448]	; (801156c <MX_LWIP_Init+0x234>)
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	0619      	lsls	r1, r3, #24
 80113ae:	4b6f      	ldr	r3, [pc, #444]	; (801156c <MX_LWIP_Init+0x234>)
 80113b0:	785b      	ldrb	r3, [r3, #1]
 80113b2:	041b      	lsls	r3, r3, #16
 80113b4:	4319      	orrs	r1, r3
 80113b6:	4b6d      	ldr	r3, [pc, #436]	; (801156c <MX_LWIP_Init+0x234>)
 80113b8:	789b      	ldrb	r3, [r3, #2]
 80113ba:	021b      	lsls	r3, r3, #8
 80113bc:	430b      	orrs	r3, r1
 80113be:	496b      	ldr	r1, [pc, #428]	; (801156c <MX_LWIP_Init+0x234>)
 80113c0:	78c9      	ldrb	r1, [r1, #3]
 80113c2:	430b      	orrs	r3, r1
 80113c4:	021b      	lsls	r3, r3, #8
 80113c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80113ca:	431a      	orrs	r2, r3
 80113cc:	4b67      	ldr	r3, [pc, #412]	; (801156c <MX_LWIP_Init+0x234>)
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	0619      	lsls	r1, r3, #24
 80113d2:	4b66      	ldr	r3, [pc, #408]	; (801156c <MX_LWIP_Init+0x234>)
 80113d4:	785b      	ldrb	r3, [r3, #1]
 80113d6:	041b      	lsls	r3, r3, #16
 80113d8:	4319      	orrs	r1, r3
 80113da:	4b64      	ldr	r3, [pc, #400]	; (801156c <MX_LWIP_Init+0x234>)
 80113dc:	789b      	ldrb	r3, [r3, #2]
 80113de:	021b      	lsls	r3, r3, #8
 80113e0:	430b      	orrs	r3, r1
 80113e2:	4962      	ldr	r1, [pc, #392]	; (801156c <MX_LWIP_Init+0x234>)
 80113e4:	78c9      	ldrb	r1, [r1, #3]
 80113e6:	430b      	orrs	r3, r1
 80113e8:	0a1b      	lsrs	r3, r3, #8
 80113ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80113ee:	431a      	orrs	r2, r3
 80113f0:	4b5e      	ldr	r3, [pc, #376]	; (801156c <MX_LWIP_Init+0x234>)
 80113f2:	781b      	ldrb	r3, [r3, #0]
 80113f4:	0619      	lsls	r1, r3, #24
 80113f6:	4b5d      	ldr	r3, [pc, #372]	; (801156c <MX_LWIP_Init+0x234>)
 80113f8:	785b      	ldrb	r3, [r3, #1]
 80113fa:	041b      	lsls	r3, r3, #16
 80113fc:	4319      	orrs	r1, r3
 80113fe:	4b5b      	ldr	r3, [pc, #364]	; (801156c <MX_LWIP_Init+0x234>)
 8011400:	789b      	ldrb	r3, [r3, #2]
 8011402:	021b      	lsls	r3, r3, #8
 8011404:	430b      	orrs	r3, r1
 8011406:	4959      	ldr	r1, [pc, #356]	; (801156c <MX_LWIP_Init+0x234>)
 8011408:	78c9      	ldrb	r1, [r1, #3]
 801140a:	430b      	orrs	r3, r1
 801140c:	0e1b      	lsrs	r3, r3, #24
 801140e:	4313      	orrs	r3, r2
 8011410:	4a59      	ldr	r2, [pc, #356]	; (8011578 <MX_LWIP_Init+0x240>)
 8011412:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8011414:	4b56      	ldr	r3, [pc, #344]	; (8011570 <MX_LWIP_Init+0x238>)
 8011416:	781b      	ldrb	r3, [r3, #0]
 8011418:	061a      	lsls	r2, r3, #24
 801141a:	4b55      	ldr	r3, [pc, #340]	; (8011570 <MX_LWIP_Init+0x238>)
 801141c:	785b      	ldrb	r3, [r3, #1]
 801141e:	041b      	lsls	r3, r3, #16
 8011420:	431a      	orrs	r2, r3
 8011422:	4b53      	ldr	r3, [pc, #332]	; (8011570 <MX_LWIP_Init+0x238>)
 8011424:	789b      	ldrb	r3, [r3, #2]
 8011426:	021b      	lsls	r3, r3, #8
 8011428:	4313      	orrs	r3, r2
 801142a:	4a51      	ldr	r2, [pc, #324]	; (8011570 <MX_LWIP_Init+0x238>)
 801142c:	78d2      	ldrb	r2, [r2, #3]
 801142e:	4313      	orrs	r3, r2
 8011430:	061a      	lsls	r2, r3, #24
 8011432:	4b4f      	ldr	r3, [pc, #316]	; (8011570 <MX_LWIP_Init+0x238>)
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	0619      	lsls	r1, r3, #24
 8011438:	4b4d      	ldr	r3, [pc, #308]	; (8011570 <MX_LWIP_Init+0x238>)
 801143a:	785b      	ldrb	r3, [r3, #1]
 801143c:	041b      	lsls	r3, r3, #16
 801143e:	4319      	orrs	r1, r3
 8011440:	4b4b      	ldr	r3, [pc, #300]	; (8011570 <MX_LWIP_Init+0x238>)
 8011442:	789b      	ldrb	r3, [r3, #2]
 8011444:	021b      	lsls	r3, r3, #8
 8011446:	430b      	orrs	r3, r1
 8011448:	4949      	ldr	r1, [pc, #292]	; (8011570 <MX_LWIP_Init+0x238>)
 801144a:	78c9      	ldrb	r1, [r1, #3]
 801144c:	430b      	orrs	r3, r1
 801144e:	021b      	lsls	r3, r3, #8
 8011450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011454:	431a      	orrs	r2, r3
 8011456:	4b46      	ldr	r3, [pc, #280]	; (8011570 <MX_LWIP_Init+0x238>)
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	0619      	lsls	r1, r3, #24
 801145c:	4b44      	ldr	r3, [pc, #272]	; (8011570 <MX_LWIP_Init+0x238>)
 801145e:	785b      	ldrb	r3, [r3, #1]
 8011460:	041b      	lsls	r3, r3, #16
 8011462:	4319      	orrs	r1, r3
 8011464:	4b42      	ldr	r3, [pc, #264]	; (8011570 <MX_LWIP_Init+0x238>)
 8011466:	789b      	ldrb	r3, [r3, #2]
 8011468:	021b      	lsls	r3, r3, #8
 801146a:	430b      	orrs	r3, r1
 801146c:	4940      	ldr	r1, [pc, #256]	; (8011570 <MX_LWIP_Init+0x238>)
 801146e:	78c9      	ldrb	r1, [r1, #3]
 8011470:	430b      	orrs	r3, r1
 8011472:	0a1b      	lsrs	r3, r3, #8
 8011474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011478:	431a      	orrs	r2, r3
 801147a:	4b3d      	ldr	r3, [pc, #244]	; (8011570 <MX_LWIP_Init+0x238>)
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	0619      	lsls	r1, r3, #24
 8011480:	4b3b      	ldr	r3, [pc, #236]	; (8011570 <MX_LWIP_Init+0x238>)
 8011482:	785b      	ldrb	r3, [r3, #1]
 8011484:	041b      	lsls	r3, r3, #16
 8011486:	4319      	orrs	r1, r3
 8011488:	4b39      	ldr	r3, [pc, #228]	; (8011570 <MX_LWIP_Init+0x238>)
 801148a:	789b      	ldrb	r3, [r3, #2]
 801148c:	021b      	lsls	r3, r3, #8
 801148e:	430b      	orrs	r3, r1
 8011490:	4937      	ldr	r1, [pc, #220]	; (8011570 <MX_LWIP_Init+0x238>)
 8011492:	78c9      	ldrb	r1, [r1, #3]
 8011494:	430b      	orrs	r3, r1
 8011496:	0e1b      	lsrs	r3, r3, #24
 8011498:	4313      	orrs	r3, r2
 801149a:	4a38      	ldr	r2, [pc, #224]	; (801157c <MX_LWIP_Init+0x244>)
 801149c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801149e:	4b35      	ldr	r3, [pc, #212]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	061a      	lsls	r2, r3, #24
 80114a4:	4b33      	ldr	r3, [pc, #204]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114a6:	785b      	ldrb	r3, [r3, #1]
 80114a8:	041b      	lsls	r3, r3, #16
 80114aa:	431a      	orrs	r2, r3
 80114ac:	4b31      	ldr	r3, [pc, #196]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114ae:	789b      	ldrb	r3, [r3, #2]
 80114b0:	021b      	lsls	r3, r3, #8
 80114b2:	4313      	orrs	r3, r2
 80114b4:	4a2f      	ldr	r2, [pc, #188]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114b6:	78d2      	ldrb	r2, [r2, #3]
 80114b8:	4313      	orrs	r3, r2
 80114ba:	061a      	lsls	r2, r3, #24
 80114bc:	4b2d      	ldr	r3, [pc, #180]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	0619      	lsls	r1, r3, #24
 80114c2:	4b2c      	ldr	r3, [pc, #176]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114c4:	785b      	ldrb	r3, [r3, #1]
 80114c6:	041b      	lsls	r3, r3, #16
 80114c8:	4319      	orrs	r1, r3
 80114ca:	4b2a      	ldr	r3, [pc, #168]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114cc:	789b      	ldrb	r3, [r3, #2]
 80114ce:	021b      	lsls	r3, r3, #8
 80114d0:	430b      	orrs	r3, r1
 80114d2:	4928      	ldr	r1, [pc, #160]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114d4:	78c9      	ldrb	r1, [r1, #3]
 80114d6:	430b      	orrs	r3, r1
 80114d8:	021b      	lsls	r3, r3, #8
 80114da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80114de:	431a      	orrs	r2, r3
 80114e0:	4b24      	ldr	r3, [pc, #144]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	0619      	lsls	r1, r3, #24
 80114e6:	4b23      	ldr	r3, [pc, #140]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114e8:	785b      	ldrb	r3, [r3, #1]
 80114ea:	041b      	lsls	r3, r3, #16
 80114ec:	4319      	orrs	r1, r3
 80114ee:	4b21      	ldr	r3, [pc, #132]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114f0:	789b      	ldrb	r3, [r3, #2]
 80114f2:	021b      	lsls	r3, r3, #8
 80114f4:	430b      	orrs	r3, r1
 80114f6:	491f      	ldr	r1, [pc, #124]	; (8011574 <MX_LWIP_Init+0x23c>)
 80114f8:	78c9      	ldrb	r1, [r1, #3]
 80114fa:	430b      	orrs	r3, r1
 80114fc:	0a1b      	lsrs	r3, r3, #8
 80114fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011502:	431a      	orrs	r2, r3
 8011504:	4b1b      	ldr	r3, [pc, #108]	; (8011574 <MX_LWIP_Init+0x23c>)
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	0619      	lsls	r1, r3, #24
 801150a:	4b1a      	ldr	r3, [pc, #104]	; (8011574 <MX_LWIP_Init+0x23c>)
 801150c:	785b      	ldrb	r3, [r3, #1]
 801150e:	041b      	lsls	r3, r3, #16
 8011510:	4319      	orrs	r1, r3
 8011512:	4b18      	ldr	r3, [pc, #96]	; (8011574 <MX_LWIP_Init+0x23c>)
 8011514:	789b      	ldrb	r3, [r3, #2]
 8011516:	021b      	lsls	r3, r3, #8
 8011518:	430b      	orrs	r3, r1
 801151a:	4916      	ldr	r1, [pc, #88]	; (8011574 <MX_LWIP_Init+0x23c>)
 801151c:	78c9      	ldrb	r1, [r1, #3]
 801151e:	430b      	orrs	r3, r1
 8011520:	0e1b      	lsrs	r3, r3, #24
 8011522:	4313      	orrs	r3, r2
 8011524:	4a16      	ldr	r2, [pc, #88]	; (8011580 <MX_LWIP_Init+0x248>)
 8011526:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8011528:	4b16      	ldr	r3, [pc, #88]	; (8011584 <MX_LWIP_Init+0x24c>)
 801152a:	9302      	str	r3, [sp, #8]
 801152c:	4b16      	ldr	r3, [pc, #88]	; (8011588 <MX_LWIP_Init+0x250>)
 801152e:	9301      	str	r3, [sp, #4]
 8011530:	2300      	movs	r3, #0
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	4b12      	ldr	r3, [pc, #72]	; (8011580 <MX_LWIP_Init+0x248>)
 8011536:	4a11      	ldr	r2, [pc, #68]	; (801157c <MX_LWIP_Init+0x244>)
 8011538:	490f      	ldr	r1, [pc, #60]	; (8011578 <MX_LWIP_Init+0x240>)
 801153a:	4814      	ldr	r0, [pc, #80]	; (801158c <MX_LWIP_Init+0x254>)
 801153c:	f7f7 f9b8 	bl	80088b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011540:	4812      	ldr	r0, [pc, #72]	; (801158c <MX_LWIP_Init+0x254>)
 8011542:	f7f7 fa95 	bl	8008a70 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8011546:	4b11      	ldr	r3, [pc, #68]	; (801158c <MX_LWIP_Init+0x254>)
 8011548:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801154c:	089b      	lsrs	r3, r3, #2
 801154e:	f003 0301 	and.w	r3, r3, #1
 8011552:	b2db      	uxtb	r3, r3
 8011554:	2b00      	cmp	r3, #0
 8011556:	d003      	beq.n	8011560 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8011558:	480c      	ldr	r0, [pc, #48]	; (801158c <MX_LWIP_Init+0x254>)
 801155a:	f7f7 fa99 	bl	8008a90 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801155e:	e002      	b.n	8011566 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8011560:	480a      	ldr	r0, [pc, #40]	; (801158c <MX_LWIP_Init+0x254>)
 8011562:	f7f7 fad9 	bl	8008b18 <netif_set_down>
}
 8011566:	bf00      	nop
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	2400520c 	.word	0x2400520c
 8011570:	24005208 	.word	0x24005208
 8011574:	240051d0 	.word	0x240051d0
 8011578:	24005204 	.word	0x24005204
 801157c:	24005210 	.word	0x24005210
 8011580:	24005214 	.word	0x24005214
 8011584:	080108b1 	.word	0x080108b1
 8011588:	08010f91 	.word	0x08010f91
 801158c:	240051d4 	.word	0x240051d4

08011590 <SCB_EnableICache>:
{
 8011590:	b480      	push	{r7}
 8011592:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011594:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011598:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801159c:	4b0b      	ldr	r3, [pc, #44]	; (80115cc <SCB_EnableICache+0x3c>)
 801159e:	2200      	movs	r2, #0
 80115a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80115a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80115a8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80115ac:	4b07      	ldr	r3, [pc, #28]	; (80115cc <SCB_EnableICache+0x3c>)
 80115ae:	695b      	ldr	r3, [r3, #20]
 80115b0:	4a06      	ldr	r2, [pc, #24]	; (80115cc <SCB_EnableICache+0x3c>)
 80115b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80115b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80115b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80115bc:	f3bf 8f6f 	isb	sy
}
 80115c0:	bf00      	nop
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop
 80115cc:	e000ed00 	.word	0xe000ed00

080115d0 <SCB_EnableDCache>:
{
 80115d0:	b480      	push	{r7}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80115d6:	4b1d      	ldr	r3, [pc, #116]	; (801164c <SCB_EnableDCache+0x7c>)
 80115d8:	2200      	movs	r2, #0
 80115da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80115de:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80115e2:	4b1a      	ldr	r3, [pc, #104]	; (801164c <SCB_EnableDCache+0x7c>)
 80115e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80115e8:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	0b5b      	lsrs	r3, r3, #13
 80115ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80115f2:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	08db      	lsrs	r3, r3, #3
 80115f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80115fc:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	015a      	lsls	r2, r3, #5
 8011602:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011606:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011608:	68ba      	ldr	r2, [r7, #8]
 801160a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801160c:	490f      	ldr	r1, [pc, #60]	; (801164c <SCB_EnableDCache+0x7c>)
 801160e:	4313      	orrs	r3, r2
 8011610:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	1e5a      	subs	r2, r3, #1
 8011618:	60ba      	str	r2, [r7, #8]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d1ef      	bne.n	80115fe <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	1e5a      	subs	r2, r3, #1
 8011622:	60fa      	str	r2, [r7, #12]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d1e5      	bne.n	80115f4 <SCB_EnableDCache+0x24>
 8011628:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801162c:	4b07      	ldr	r3, [pc, #28]	; (801164c <SCB_EnableDCache+0x7c>)
 801162e:	695b      	ldr	r3, [r3, #20]
 8011630:	4a06      	ldr	r2, [pc, #24]	; (801164c <SCB_EnableDCache+0x7c>)
 8011632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011636:	6153      	str	r3, [r2, #20]
 8011638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801163c:	f3bf 8f6f 	isb	sy
}
 8011640:	bf00      	nop
 8011642:	3714      	adds	r7, #20
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr
 801164c:	e000ed00 	.word	0xe000ed00

08011650 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */


	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8011654:	f7ff ff9c 	bl	8011590 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8011658:	f7ff ffba 	bl	80115d0 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 801165c:	f7ef f970 	bl	8000940 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8011660:	f000 f814 	bl	801168c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8011664:	f7ff fdb4 	bl	80111d0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8011668:	f000 fa88 	bl	8011b7c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 801166c:	f000 fb1c 	bl	8011ca8 <MX_USB_OTG_FS_PCD_Init>
	MX_LWIP_Init();
 8011670:	f7ff fe62 	bl	8011338 <MX_LWIP_Init>
	/* USER CODE BEGIN 2 */
	/* Configure the Network interface */
	Netif_Config();
 8011674:	f000 f8c4 	bl	8011800 <Netif_Config>

	/* UDP client connect */
	udp_echoclient_connect();
 8011678:	f000 fa3e 	bl	8011af8 <udp_echoclient_connect>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* Read a received packet from the Ethernet buffers and send it
	       to the lwIP for handling */
		ethernetif_input(&gnetif);
 801167c:	4802      	ldr	r0, [pc, #8]	; (8011688 <main+0x38>)
 801167e:	f7ff fc67 	bl	8010f50 <ethernetif_input>

		/* Handle timeouts */
		sys_check_timeouts();
 8011682:	f7fc fd15 	bl	800e0b0 <sys_check_timeouts>
		ethernetif_input(&gnetif);
 8011686:	e7f9      	b.n	801167c <main+0x2c>
 8011688:	240051d4 	.word	0x240051d4

0801168c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b0cc      	sub	sp, #304	; 0x130
 8011690:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011692:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011696:	224c      	movs	r2, #76	; 0x4c
 8011698:	2100      	movs	r1, #0
 801169a:	4618      	mov	r0, r3
 801169c:	f000 fbf6 	bl	8011e8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80116a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80116a4:	2220      	movs	r2, #32
 80116a6:	2100      	movs	r1, #0
 80116a8:	4618      	mov	r0, r3
 80116aa:	f000 fbef 	bl	8011e8c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80116ae:	f107 0308 	add.w	r3, r7, #8
 80116b2:	4618      	mov	r0, r3
 80116b4:	23bc      	movs	r3, #188	; 0xbc
 80116b6:	461a      	mov	r2, r3
 80116b8:	2100      	movs	r1, #0
 80116ba:	f000 fbe7 	bl	8011e8c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80116be:	2002      	movs	r0, #2
 80116c0:	f7f1 faf8 	bl	8002cb4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80116c4:	1d3b      	adds	r3, r7, #4
 80116c6:	2200      	movs	r2, #0
 80116c8:	601a      	str	r2, [r3, #0]
 80116ca:	4b4a      	ldr	r3, [pc, #296]	; (80117f4 <SystemClock_Config+0x168>)
 80116cc:	699b      	ldr	r3, [r3, #24]
 80116ce:	4a49      	ldr	r2, [pc, #292]	; (80117f4 <SystemClock_Config+0x168>)
 80116d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80116d4:	6193      	str	r3, [r2, #24]
 80116d6:	4b47      	ldr	r3, [pc, #284]	; (80117f4 <SystemClock_Config+0x168>)
 80116d8:	699b      	ldr	r3, [r3, #24]
 80116da:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80116de:	1d3b      	adds	r3, r7, #4
 80116e0:	601a      	str	r2, [r3, #0]
 80116e2:	4b45      	ldr	r3, [pc, #276]	; (80117f8 <SystemClock_Config+0x16c>)
 80116e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e6:	4a44      	ldr	r2, [pc, #272]	; (80117f8 <SystemClock_Config+0x16c>)
 80116e8:	f043 0301 	orr.w	r3, r3, #1
 80116ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80116ee:	4b42      	ldr	r3, [pc, #264]	; (80117f8 <SystemClock_Config+0x16c>)
 80116f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f2:	f003 0201 	and.w	r2, r3, #1
 80116f6:	1d3b      	adds	r3, r7, #4
 80116f8:	601a      	str	r2, [r3, #0]
 80116fa:	1d3b      	adds	r3, r7, #4
 80116fc:	681b      	ldr	r3, [r3, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80116fe:	bf00      	nop
 8011700:	4b3c      	ldr	r3, [pc, #240]	; (80117f4 <SystemClock_Config+0x168>)
 8011702:	699b      	ldr	r3, [r3, #24]
 8011704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801170c:	d1f8      	bne.n	8011700 <SystemClock_Config+0x74>
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801170e:	2301      	movs	r3, #1
 8011710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8011714:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8011718:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801171c:	2302      	movs	r3, #2
 801171e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011722:	2302      	movs	r3, #2
 8011724:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8011728:	2301      	movs	r3, #1
 801172a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	RCC_OscInitStruct.PLL.PLLN = 120;
 801172e:	2378      	movs	r3, #120	; 0x78
 8011730:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	RCC_OscInitStruct.PLL.PLLP = 2;
 8011734:	2302      	movs	r3, #2
 8011736:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	RCC_OscInitStruct.PLL.PLLQ = 20;
 801173a:	2314      	movs	r3, #20
 801173c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8011740:	2302      	movs	r3, #2
 8011742:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8011746:	230c      	movs	r3, #12
 8011748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 801174c:	2300      	movs	r3, #0
 801174e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011758:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801175c:	4618      	mov	r0, r3
 801175e:	f7f1 faf1 	bl	8002d44 <HAL_RCC_OscConfig>
 8011762:	4603      	mov	r3, r0
 8011764:	2b00      	cmp	r3, #0
 8011766:	d001      	beq.n	801176c <SystemClock_Config+0xe0>
	{
		Error_Handler();
 8011768:	f000 f878 	bl	801185c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801176c:	233f      	movs	r3, #63	; 0x3f
 801176e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011772:	2303      	movs	r3, #3
 8011774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8011778:	2300      	movs	r3, #0
 801177a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801177e:	2308      	movs	r3, #8
 8011780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8011784:	2340      	movs	r3, #64	; 0x40
 8011786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 801178a:	2340      	movs	r3, #64	; 0x40
 801178c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8011790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011794:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8011798:	2340      	movs	r3, #64	; 0x40
 801179a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801179e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80117a2:	2104      	movs	r1, #4
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7f1 fe85 	bl	80034b4 <HAL_RCC_ClockConfig>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <SystemClock_Config+0x128>
	{
		Error_Handler();
 80117b0:	f000 f854 	bl	801185c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80117b4:	f107 0308 	add.w	r3, r7, #8
 80117b8:	4a10      	ldr	r2, [pc, #64]	; (80117fc <SystemClock_Config+0x170>)
 80117ba:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80117bc:	f107 0308 	add.w	r3, r7, #8
 80117c0:	2200      	movs	r2, #0
 80117c2:	675a      	str	r2, [r3, #116]	; 0x74
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80117c4:	f107 0308 	add.w	r3, r7, #8
 80117c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80117cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80117d0:	f107 0308 	add.w	r3, r7, #8
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7f2 f9cb 	bl	8003b70 <HAL_RCCEx_PeriphCLKConfig>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d001      	beq.n	80117e4 <SystemClock_Config+0x158>
	{
		Error_Handler();
 80117e0:	f000 f83c 	bl	801185c <Error_Handler>
	}
	/** Enable USB Voltage detector
	 */
	HAL_PWREx_EnableUSBVoltageDetector();
 80117e4:	f7f1 fa9e 	bl	8002d24 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80117e8:	bf00      	nop
 80117ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	58024800 	.word	0x58024800
 80117f8:	58000400 	.word	0x58000400
 80117fc:	00040002 	.word	0x00040002

08011800 <Netif_Config>:
 * @brief  Setup the network interface
 * @param  None
 * @retval None
 */
static void Netif_Config(void)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b088      	sub	sp, #32
 8011804:	af04      	add	r7, sp, #16
	ip_addr_set_zero_ip4(&netmask);
	ip_addr_set_zero_ip4(&gw);
#else

	/* IP address default setting */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8011806:	4b10      	ldr	r3, [pc, #64]	; (8011848 <Netif_Config+0x48>)
 8011808:	60fb      	str	r3, [r7, #12]
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 801180a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801180e:	60bb      	str	r3, [r7, #8]
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8011810:	4b0e      	ldr	r3, [pc, #56]	; (801184c <Netif_Config+0x4c>)
 8011812:	607b      	str	r3, [r7, #4]

#endif

	/* add the network interface */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8011814:	1d38      	adds	r0, r7, #4
 8011816:	f107 0208 	add.w	r2, r7, #8
 801181a:	f107 010c 	add.w	r1, r7, #12
 801181e:	4b0c      	ldr	r3, [pc, #48]	; (8011850 <Netif_Config+0x50>)
 8011820:	9302      	str	r3, [sp, #8]
 8011822:	4b0c      	ldr	r3, [pc, #48]	; (8011854 <Netif_Config+0x54>)
 8011824:	9301      	str	r3, [sp, #4]
 8011826:	2300      	movs	r3, #0
 8011828:	9300      	str	r3, [sp, #0]
 801182a:	4603      	mov	r3, r0
 801182c:	480a      	ldr	r0, [pc, #40]	; (8011858 <Netif_Config+0x58>)
 801182e:	f7f7 f83f 	bl	80088b0 <netif_add>

	/*  Registers the default network interface */
	netif_set_default(&gnetif);
 8011832:	4809      	ldr	r0, [pc, #36]	; (8011858 <Netif_Config+0x58>)
 8011834:	f7f7 f91c 	bl	8008a70 <netif_set_default>

	ethernet_link_status_updated(&gnetif);
 8011838:	4807      	ldr	r0, [pc, #28]	; (8011858 <Netif_Config+0x58>)
 801183a:	f7ff f915 	bl	8010a68 <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
#endif
}
 801183e:	bf00      	nop
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	0a00a8c0 	.word	0x0a00a8c0
 801184c:	0100a8c0 	.word	0x0100a8c0
 8011850:	080108b1 	.word	0x080108b1
 8011854:	08010f91 	.word	0x08010f91
 8011858:	240051d4 	.word	0x240051d4

0801185c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 801185c:	b480      	push	{r7}
 801185e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8011860:	bf00      	nop
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr
	...

0801186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011872:	4b0a      	ldr	r3, [pc, #40]	; (801189c <HAL_MspInit+0x30>)
 8011874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011878:	4a08      	ldr	r2, [pc, #32]	; (801189c <HAL_MspInit+0x30>)
 801187a:	f043 0302 	orr.w	r3, r3, #2
 801187e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8011882:	4b06      	ldr	r3, [pc, #24]	; (801189c <HAL_MspInit+0x30>)
 8011884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011888:	f003 0302 	and.w	r3, r3, #2
 801188c:	607b      	str	r3, [r7, #4]
 801188e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011890:	bf00      	nop
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	58024400 	.word	0x58024400

080118a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80118a0:	b480      	push	{r7}
 80118a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80118a4:	bf00      	nop
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80118ae:	b480      	push	{r7}
 80118b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80118b2:	e7fe      	b.n	80118b2 <HardFault_Handler+0x4>

080118b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80118b8:	e7fe      	b.n	80118b8 <MemManage_Handler+0x4>

080118ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80118ba:	b480      	push	{r7}
 80118bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80118be:	e7fe      	b.n	80118be <BusFault_Handler+0x4>

080118c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80118c0:	b480      	push	{r7}
 80118c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80118c4:	e7fe      	b.n	80118c4 <UsageFault_Handler+0x4>

080118c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80118c6:	b480      	push	{r7}
 80118c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80118ca:	bf00      	nop
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr

080118d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80118d4:	b480      	push	{r7}
 80118d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80118d8:	bf00      	nop
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr

080118e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80118e2:	b480      	push	{r7}
 80118e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80118e6:	bf00      	nop
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80118f4:	f7ef f892 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80118f8:	bf00      	nop
 80118fa:	bd80      	pop	{r7, pc}

080118fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b086      	sub	sp, #24
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011908:	2300      	movs	r3, #0
 801190a:	617b      	str	r3, [r7, #20]
 801190c:	e00a      	b.n	8011924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801190e:	f3af 8000 	nop.w
 8011912:	4601      	mov	r1, r0
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	1c5a      	adds	r2, r3, #1
 8011918:	60ba      	str	r2, [r7, #8]
 801191a:	b2ca      	uxtb	r2, r1
 801191c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	3301      	adds	r3, #1
 8011922:	617b      	str	r3, [r7, #20]
 8011924:	697a      	ldr	r2, [r7, #20]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	429a      	cmp	r2, r3
 801192a:	dbf0      	blt.n	801190e <_read+0x12>
	}

return len;
 801192c:	687b      	ldr	r3, [r7, #4]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3718      	adds	r7, #24
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}

08011936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b086      	sub	sp, #24
 801193a:	af00      	add	r7, sp, #0
 801193c:	60f8      	str	r0, [r7, #12]
 801193e:	60b9      	str	r1, [r7, #8]
 8011940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011942:	2300      	movs	r3, #0
 8011944:	617b      	str	r3, [r7, #20]
 8011946:	e009      	b.n	801195c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	1c5a      	adds	r2, r3, #1
 801194c:	60ba      	str	r2, [r7, #8]
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	4618      	mov	r0, r3
 8011952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	3301      	adds	r3, #1
 801195a:	617b      	str	r3, [r7, #20]
 801195c:	697a      	ldr	r2, [r7, #20]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	429a      	cmp	r2, r3
 8011962:	dbf1      	blt.n	8011948 <_write+0x12>
	}
	return len;
 8011964:	687b      	ldr	r3, [r7, #4]
}
 8011966:	4618      	mov	r0, r3
 8011968:	3718      	adds	r7, #24
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <_close>:

int _close(int file)
{
 801196e:	b480      	push	{r7}
 8011970:	b083      	sub	sp, #12
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
	return -1;
 8011976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801197a:	4618      	mov	r0, r3
 801197c:	370c      	adds	r7, #12
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr

08011986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011986:	b480      	push	{r7}
 8011988:	b083      	sub	sp, #12
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
 801198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011996:	605a      	str	r2, [r3, #4]
	return 0;
 8011998:	2300      	movs	r3, #0
}
 801199a:	4618      	mov	r0, r3
 801199c:	370c      	adds	r7, #12
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr

080119a6 <_isatty>:

int _isatty(int file)
{
 80119a6:	b480      	push	{r7}
 80119a8:	b083      	sub	sp, #12
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
	return 1;
 80119ae:	2301      	movs	r3, #1
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80119bc:	b480      	push	{r7}
 80119be:	b085      	sub	sp, #20
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	607a      	str	r2, [r7, #4]
	return 0;
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3714      	adds	r7, #20
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr
	...

080119d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80119e0:	4b11      	ldr	r3, [pc, #68]	; (8011a28 <_sbrk+0x50>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d102      	bne.n	80119ee <_sbrk+0x16>
		heap_end = &end;
 80119e8:	4b0f      	ldr	r3, [pc, #60]	; (8011a28 <_sbrk+0x50>)
 80119ea:	4a10      	ldr	r2, [pc, #64]	; (8011a2c <_sbrk+0x54>)
 80119ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80119ee:	4b0e      	ldr	r3, [pc, #56]	; (8011a28 <_sbrk+0x50>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80119f4:	4b0c      	ldr	r3, [pc, #48]	; (8011a28 <_sbrk+0x50>)
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4413      	add	r3, r2
 80119fc:	466a      	mov	r2, sp
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d905      	bls.n	8011a0e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8011a02:	4b0b      	ldr	r3, [pc, #44]	; (8011a30 <_sbrk+0x58>)
 8011a04:	220c      	movs	r2, #12
 8011a06:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8011a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a0c:	e006      	b.n	8011a1c <_sbrk+0x44>
	}

	heap_end += incr;
 8011a0e:	4b06      	ldr	r3, [pc, #24]	; (8011a28 <_sbrk+0x50>)
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	4413      	add	r3, r2
 8011a16:	4a04      	ldr	r2, [pc, #16]	; (8011a28 <_sbrk+0x50>)
 8011a18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3714      	adds	r7, #20
 8011a20:	46bd      	mov	sp, r7
 8011a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a26:	4770      	bx	lr
 8011a28:	24001ae0 	.word	0x24001ae0
 8011a2c:	24005718 	.word	0x24005718
 8011a30:	24005714 	.word	0x24005714

08011a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011a34:	b480      	push	{r7}
 8011a36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8011a38:	4b29      	ldr	r3, [pc, #164]	; (8011ae0 <SystemInit+0xac>)
 8011a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a3e:	4a28      	ldr	r2, [pc, #160]	; (8011ae0 <SystemInit+0xac>)
 8011a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8011a48:	4b26      	ldr	r3, [pc, #152]	; (8011ae4 <SystemInit+0xb0>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	4a25      	ldr	r2, [pc, #148]	; (8011ae4 <SystemInit+0xb0>)
 8011a4e:	f043 0301 	orr.w	r3, r3, #1
 8011a52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011a54:	4b23      	ldr	r3, [pc, #140]	; (8011ae4 <SystemInit+0xb0>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8011a5a:	4b22      	ldr	r3, [pc, #136]	; (8011ae4 <SystemInit+0xb0>)
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	4921      	ldr	r1, [pc, #132]	; (8011ae4 <SystemInit+0xb0>)
 8011a60:	4b21      	ldr	r3, [pc, #132]	; (8011ae8 <SystemInit+0xb4>)
 8011a62:	4013      	ands	r3, r2
 8011a64:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8011a66:	4b1f      	ldr	r3, [pc, #124]	; (8011ae4 <SystemInit+0xb0>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8011a6c:	4b1d      	ldr	r3, [pc, #116]	; (8011ae4 <SystemInit+0xb0>)
 8011a6e:	2200      	movs	r2, #0
 8011a70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8011a72:	4b1c      	ldr	r3, [pc, #112]	; (8011ae4 <SystemInit+0xb0>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8011a78:	4b1a      	ldr	r3, [pc, #104]	; (8011ae4 <SystemInit+0xb0>)
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8011a7e:	4b19      	ldr	r3, [pc, #100]	; (8011ae4 <SystemInit+0xb0>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8011a84:	4b17      	ldr	r3, [pc, #92]	; (8011ae4 <SystemInit+0xb0>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8011a8a:	4b16      	ldr	r3, [pc, #88]	; (8011ae4 <SystemInit+0xb0>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8011a90:	4b14      	ldr	r3, [pc, #80]	; (8011ae4 <SystemInit+0xb0>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8011a96:	4b13      	ldr	r3, [pc, #76]	; (8011ae4 <SystemInit+0xb0>)
 8011a98:	2200      	movs	r2, #0
 8011a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8011a9c:	4b11      	ldr	r3, [pc, #68]	; (8011ae4 <SystemInit+0xb0>)
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8011aa2:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <SystemInit+0xb0>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011aa8:	4b0e      	ldr	r3, [pc, #56]	; (8011ae4 <SystemInit+0xb0>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a0d      	ldr	r2, [pc, #52]	; (8011ae4 <SystemInit+0xb0>)
 8011aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011ab2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8011ab4:	4b0b      	ldr	r3, [pc, #44]	; (8011ae4 <SystemInit+0xb0>)
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8011aba:	4b0c      	ldr	r3, [pc, #48]	; (8011aec <SystemInit+0xb8>)
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	4b0c      	ldr	r3, [pc, #48]	; (8011af0 <SystemInit+0xbc>)
 8011ac0:	4013      	ands	r3, r2
 8011ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ac6:	d202      	bcs.n	8011ace <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8011ac8:	4b0a      	ldr	r3, [pc, #40]	; (8011af4 <SystemInit+0xc0>)
 8011aca:	2201      	movs	r2, #1
 8011acc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011ace:	4b04      	ldr	r3, [pc, #16]	; (8011ae0 <SystemInit+0xac>)
 8011ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011ad4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8011ad6:	bf00      	nop
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr
 8011ae0:	e000ed00 	.word	0xe000ed00
 8011ae4:	58024400 	.word	0x58024400
 8011ae8:	eaf6ed7f 	.word	0xeaf6ed7f
 8011aec:	5c001000 	.word	0x5c001000
 8011af0:	ffff0000 	.word	0xffff0000
 8011af4:	51008108 	.word	0x51008108

08011af8 <udp_echoclient_connect>:
  * @brief  Connect to UDP echo server
  * @param  None
  * @retval None
  */
void udp_echoclient_connect(void)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
  ip_addr_t DestIPaddr;
  err_t err;
  
  /* Create a new UDP control block  */
  upcb = udp_new();
 8011afe:	f7fc fd63 	bl	800e5c8 <udp_new>
 8011b02:	4602      	mov	r2, r0
 8011b04:	4b0f      	ldr	r3, [pc, #60]	; (8011b44 <udp_echoclient_connect+0x4c>)
 8011b06:	601a      	str	r2, [r3, #0]
  
  if (upcb!=NULL)
 8011b08:	4b0e      	ldr	r3, [pc, #56]	; (8011b44 <udp_echoclient_connect+0x4c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d015      	beq.n	8011b3c <udp_echoclient_connect+0x44>
  {
    /*assign destination IP address */
    IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 8011b10:	4b0d      	ldr	r3, [pc, #52]	; (8011b48 <udp_echoclient_connect+0x50>)
 8011b12:	603b      	str	r3, [r7, #0]
    
    /* configure destination IP address and port */
    err= udp_connect(upcb, &DestIPaddr, UDP_SERVER_PORT);
 8011b14:	4b0b      	ldr	r3, [pc, #44]	; (8011b44 <udp_echoclient_connect+0x4c>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4639      	mov	r1, r7
 8011b1a:	2207      	movs	r2, #7
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fc fceb 	bl	800e4f8 <udp_connect>
 8011b22:	4603      	mov	r3, r0
 8011b24:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8011b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d106      	bne.n	8011b3c <udp_echoclient_connect+0x44>
    {
      /* Set a receive callback for the upcb */
      udp_recv(upcb, udp_receive_callback, NULL);  
 8011b2e:	4b05      	ldr	r3, [pc, #20]	; (8011b44 <udp_echoclient_connect+0x4c>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	2200      	movs	r2, #0
 8011b34:	4905      	ldr	r1, [pc, #20]	; (8011b4c <udp_echoclient_connect+0x54>)
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fc fd34 	bl	800e5a4 <udp_recv>
    }
  }
}
 8011b3c:	bf00      	nop
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	24005218 	.word	0x24005218
 8011b48:	0b00a8c0 	.word	0x0b00a8c0
 8011b4c:	08011b51 	.word	0x08011b51

08011b50 <udp_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
 8011b5c:	603b      	str	r3, [r7, #0]
  /*increment message count */
  message_count++;
 8011b5e:	4b06      	ldr	r3, [pc, #24]	; (8011b78 <udp_receive_callback+0x28>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	3301      	adds	r3, #1
 8011b64:	4a04      	ldr	r2, [pc, #16]	; (8011b78 <udp_receive_callback+0x28>)
 8011b66:	6013      	str	r3, [r2, #0]
  
  /* Free receive pbuf */
  pbuf_free(p);
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7f7 fbd7 	bl	800931c <pbuf_free>
}
 8011b6e:	bf00      	nop
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	24001ae4 	.word	0x24001ae4

08011b7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8011b80:	4b22      	ldr	r3, [pc, #136]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011b82:	4a23      	ldr	r2, [pc, #140]	; (8011c10 <MX_USART3_UART_Init+0x94>)
 8011b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8011b86:	4b21      	ldr	r3, [pc, #132]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8011b8e:	4b1f      	ldr	r3, [pc, #124]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011b90:	2200      	movs	r2, #0
 8011b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8011b94:	4b1d      	ldr	r3, [pc, #116]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011b96:	2200      	movs	r2, #0
 8011b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8011b9a:	4b1c      	ldr	r3, [pc, #112]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8011ba0:	4b1a      	ldr	r3, [pc, #104]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011ba2:	220c      	movs	r2, #12
 8011ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011ba6:	4b19      	ldr	r3, [pc, #100]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011ba8:	2200      	movs	r2, #0
 8011baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8011bac:	4b17      	ldr	r3, [pc, #92]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bae:	2200      	movs	r2, #0
 8011bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011bb2:	4b16      	ldr	r3, [pc, #88]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011bb8:	4b14      	ldr	r3, [pc, #80]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bba:	2200      	movs	r2, #0
 8011bbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011bbe:	4b13      	ldr	r3, [pc, #76]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8011bc4:	4811      	ldr	r0, [pc, #68]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bc6:	f7f3 faf1 	bl	80051ac <HAL_UART_Init>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d001      	beq.n	8011bd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8011bd0:	f7ff fe44 	bl	801185c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	480d      	ldr	r0, [pc, #52]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bd8:	f7f5 fe5b 	bl	8007892 <HAL_UARTEx_SetTxFifoThreshold>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d001      	beq.n	8011be6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8011be2:	f7ff fe3b 	bl	801185c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011be6:	2100      	movs	r1, #0
 8011be8:	4808      	ldr	r0, [pc, #32]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bea:	f7f5 fe90 	bl	800790e <HAL_UARTEx_SetRxFifoThreshold>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d001      	beq.n	8011bf8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8011bf4:	f7ff fe32 	bl	801185c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8011bf8:	4804      	ldr	r0, [pc, #16]	; (8011c0c <MX_USART3_UART_Init+0x90>)
 8011bfa:	f7f5 fe11 	bl	8007820 <HAL_UARTEx_DisableFifoMode>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d001      	beq.n	8011c08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8011c04:	f7ff fe2a 	bl	801185c <Error_Handler>
  }

}
 8011c08:	bf00      	nop
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	24005280 	.word	0x24005280
 8011c10:	40004800 	.word	0x40004800

08011c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b08a      	sub	sp, #40	; 0x28
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c1c:	f107 0314 	add.w	r3, r7, #20
 8011c20:	2200      	movs	r2, #0
 8011c22:	601a      	str	r2, [r3, #0]
 8011c24:	605a      	str	r2, [r3, #4]
 8011c26:	609a      	str	r2, [r3, #8]
 8011c28:	60da      	str	r2, [r3, #12]
 8011c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a1a      	ldr	r2, [pc, #104]	; (8011c9c <HAL_UART_MspInit+0x88>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d12e      	bne.n	8011c94 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8011c36:	4b1a      	ldr	r3, [pc, #104]	; (8011ca0 <HAL_UART_MspInit+0x8c>)
 8011c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011c3c:	4a18      	ldr	r2, [pc, #96]	; (8011ca0 <HAL_UART_MspInit+0x8c>)
 8011c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011c42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8011c46:	4b16      	ldr	r3, [pc, #88]	; (8011ca0 <HAL_UART_MspInit+0x8c>)
 8011c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8011c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011c50:	613b      	str	r3, [r7, #16]
 8011c52:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011c54:	4b12      	ldr	r3, [pc, #72]	; (8011ca0 <HAL_UART_MspInit+0x8c>)
 8011c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c5a:	4a11      	ldr	r2, [pc, #68]	; (8011ca0 <HAL_UART_MspInit+0x8c>)
 8011c5c:	f043 0308 	orr.w	r3, r3, #8
 8011c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011c64:	4b0e      	ldr	r3, [pc, #56]	; (8011ca0 <HAL_UART_MspInit+0x8c>)
 8011c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c6a:	f003 0308 	and.w	r3, r3, #8
 8011c6e:	60fb      	str	r3, [r7, #12]
 8011c70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8011c72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c78:	2302      	movs	r3, #2
 8011c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c80:	2300      	movs	r3, #0
 8011c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8011c84:	2307      	movs	r3, #7
 8011c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011c88:	f107 0314 	add.w	r3, r7, #20
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	4805      	ldr	r0, [pc, #20]	; (8011ca4 <HAL_UART_MspInit+0x90>)
 8011c90:	f7f0 fcfe 	bl	8002690 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8011c94:	bf00      	nop
 8011c96:	3728      	adds	r7, #40	; 0x28
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	40004800 	.word	0x40004800
 8011ca0:	58024400 	.word	0x58024400
 8011ca4:	58020c00 	.word	0x58020c00

08011ca8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011cac:	4b15      	ldr	r3, [pc, #84]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cae:	4a16      	ldr	r2, [pc, #88]	; (8011d08 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8011cb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011cb2:	4b14      	ldr	r3, [pc, #80]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cb4:	2209      	movs	r2, #9
 8011cb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011cb8:	4b12      	ldr	r3, [pc, #72]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cba:	2202      	movs	r2, #2
 8011cbc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011cbe:	4b11      	ldr	r3, [pc, #68]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011cc4:	4b0f      	ldr	r3, [pc, #60]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cc6:	2202      	movs	r2, #2
 8011cc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011cca:	4b0e      	ldr	r3, [pc, #56]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011ccc:	2201      	movs	r2, #1
 8011cce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011cd0:	4b0c      	ldr	r3, [pc, #48]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011cd6:	4b0b      	ldr	r3, [pc, #44]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cd8:	2200      	movs	r2, #0
 8011cda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8011cdc:	4b09      	ldr	r3, [pc, #36]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cde:	2201      	movs	r2, #1
 8011ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8011ce2:	4b08      	ldr	r3, [pc, #32]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011ce8:	4b06      	ldr	r3, [pc, #24]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011cee:	4805      	ldr	r0, [pc, #20]	; (8011d04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8011cf0:	f7f0 fe97 	bl	8002a22 <HAL_PCD_Init>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d001      	beq.n	8011cfe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8011cfa:	f7ff fdaf 	bl	801185c <Error_Handler>
  }

}
 8011cfe:	bf00      	nop
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	2400530c 	.word	0x2400530c
 8011d08:	40080000 	.word	0x40080000

08011d0c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b08a      	sub	sp, #40	; 0x28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d14:	f107 0314 	add.w	r3, r7, #20
 8011d18:	2200      	movs	r2, #0
 8011d1a:	601a      	str	r2, [r3, #0]
 8011d1c:	605a      	str	r2, [r3, #4]
 8011d1e:	609a      	str	r2, [r3, #8]
 8011d20:	60da      	str	r2, [r3, #12]
 8011d22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	4a21      	ldr	r2, [pc, #132]	; (8011db0 <HAL_PCD_MspInit+0xa4>)
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d13b      	bne.n	8011da6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d2e:	4b21      	ldr	r3, [pc, #132]	; (8011db4 <HAL_PCD_MspInit+0xa8>)
 8011d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011d34:	4a1f      	ldr	r2, [pc, #124]	; (8011db4 <HAL_PCD_MspInit+0xa8>)
 8011d36:	f043 0301 	orr.w	r3, r3, #1
 8011d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011d3e:	4b1d      	ldr	r3, [pc, #116]	; (8011db4 <HAL_PCD_MspInit+0xa8>)
 8011d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011d44:	f003 0301 	and.w	r3, r3, #1
 8011d48:	613b      	str	r3, [r7, #16]
 8011d4a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8011d4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8011d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d52:	2302      	movs	r3, #2
 8011d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d56:	2300      	movs	r3, #0
 8011d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011d5e:	230a      	movs	r3, #10
 8011d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d62:	f107 0314 	add.w	r3, r7, #20
 8011d66:	4619      	mov	r1, r3
 8011d68:	4813      	ldr	r0, [pc, #76]	; (8011db8 <HAL_PCD_MspInit+0xac>)
 8011d6a:	f7f0 fc91 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8011d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d74:	2300      	movs	r3, #0
 8011d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011d7c:	f107 0314 	add.w	r3, r7, #20
 8011d80:	4619      	mov	r1, r3
 8011d82:	480d      	ldr	r0, [pc, #52]	; (8011db8 <HAL_PCD_MspInit+0xac>)
 8011d84:	f7f0 fc84 	bl	8002690 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011d88:	4b0a      	ldr	r3, [pc, #40]	; (8011db4 <HAL_PCD_MspInit+0xa8>)
 8011d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d8e:	4a09      	ldr	r2, [pc, #36]	; (8011db4 <HAL_PCD_MspInit+0xa8>)
 8011d90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011d94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d98:	4b06      	ldr	r3, [pc, #24]	; (8011db4 <HAL_PCD_MspInit+0xa8>)
 8011d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011da2:	60fb      	str	r3, [r7, #12]
 8011da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011da6:	bf00      	nop
 8011da8:	3728      	adds	r7, #40	; 0x28
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	40080000 	.word	0x40080000
 8011db4:	58024400 	.word	0x58024400
 8011db8:	58020000 	.word	0x58020000

08011dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011df4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011dc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011dc2:	e003      	b.n	8011dcc <LoopCopyDataInit>

08011dc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011dc4:	4b0c      	ldr	r3, [pc, #48]	; (8011df8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011dc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011dc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011dca:	3104      	adds	r1, #4

08011dcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011dcc:	480b      	ldr	r0, [pc, #44]	; (8011dfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011dce:	4b0c      	ldr	r3, [pc, #48]	; (8011e00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011dd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011dd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011dd4:	d3f6      	bcc.n	8011dc4 <CopyDataInit>
  ldr  r2, =_sbss
 8011dd6:	4a0b      	ldr	r2, [pc, #44]	; (8011e04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011dd8:	e002      	b.n	8011de0 <LoopFillZerobss>

08011dda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011dda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011ddc:	f842 3b04 	str.w	r3, [r2], #4

08011de0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011de0:	4b09      	ldr	r3, [pc, #36]	; (8011e08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011de2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011de4:	d3f9      	bcc.n	8011dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011de6:	f7ff fe25 	bl	8011a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011dea:	f000 f811 	bl	8011e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011dee:	f7ff fc2f 	bl	8011650 <main>
  bx  lr    
 8011df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011df4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8011df8:	08014ae4 	.word	0x08014ae4
  ldr  r0, =_sdata
 8011dfc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8011e00:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 8011e04:	24001950 	.word	0x24001950
  ldr  r3, = _ebss
 8011e08:	24005718 	.word	0x24005718

08011e0c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011e0c:	e7fe      	b.n	8011e0c <ADC3_IRQHandler>
	...

08011e10 <__libc_init_array>:
 8011e10:	b570      	push	{r4, r5, r6, lr}
 8011e12:	4e0d      	ldr	r6, [pc, #52]	; (8011e48 <__libc_init_array+0x38>)
 8011e14:	4c0d      	ldr	r4, [pc, #52]	; (8011e4c <__libc_init_array+0x3c>)
 8011e16:	1ba4      	subs	r4, r4, r6
 8011e18:	10a4      	asrs	r4, r4, #2
 8011e1a:	2500      	movs	r5, #0
 8011e1c:	42a5      	cmp	r5, r4
 8011e1e:	d109      	bne.n	8011e34 <__libc_init_array+0x24>
 8011e20:	4e0b      	ldr	r6, [pc, #44]	; (8011e50 <__libc_init_array+0x40>)
 8011e22:	4c0c      	ldr	r4, [pc, #48]	; (8011e54 <__libc_init_array+0x44>)
 8011e24:	f000 ff1e 	bl	8012c64 <_init>
 8011e28:	1ba4      	subs	r4, r4, r6
 8011e2a:	10a4      	asrs	r4, r4, #2
 8011e2c:	2500      	movs	r5, #0
 8011e2e:	42a5      	cmp	r5, r4
 8011e30:	d105      	bne.n	8011e3e <__libc_init_array+0x2e>
 8011e32:	bd70      	pop	{r4, r5, r6, pc}
 8011e34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e38:	4798      	blx	r3
 8011e3a:	3501      	adds	r5, #1
 8011e3c:	e7ee      	b.n	8011e1c <__libc_init_array+0xc>
 8011e3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e42:	4798      	blx	r3
 8011e44:	3501      	adds	r5, #1
 8011e46:	e7f2      	b.n	8011e2e <__libc_init_array+0x1e>
 8011e48:	08014adc 	.word	0x08014adc
 8011e4c:	08014adc 	.word	0x08014adc
 8011e50:	08014adc 	.word	0x08014adc
 8011e54:	08014ae0 	.word	0x08014ae0

08011e58 <memcmp>:
 8011e58:	b530      	push	{r4, r5, lr}
 8011e5a:	2400      	movs	r4, #0
 8011e5c:	42a2      	cmp	r2, r4
 8011e5e:	d101      	bne.n	8011e64 <memcmp+0xc>
 8011e60:	2000      	movs	r0, #0
 8011e62:	e007      	b.n	8011e74 <memcmp+0x1c>
 8011e64:	5d03      	ldrb	r3, [r0, r4]
 8011e66:	3401      	adds	r4, #1
 8011e68:	190d      	adds	r5, r1, r4
 8011e6a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8011e6e:	42ab      	cmp	r3, r5
 8011e70:	d0f4      	beq.n	8011e5c <memcmp+0x4>
 8011e72:	1b58      	subs	r0, r3, r5
 8011e74:	bd30      	pop	{r4, r5, pc}

08011e76 <memcpy>:
 8011e76:	b510      	push	{r4, lr}
 8011e78:	1e43      	subs	r3, r0, #1
 8011e7a:	440a      	add	r2, r1
 8011e7c:	4291      	cmp	r1, r2
 8011e7e:	d100      	bne.n	8011e82 <memcpy+0xc>
 8011e80:	bd10      	pop	{r4, pc}
 8011e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e8a:	e7f7      	b.n	8011e7c <memcpy+0x6>

08011e8c <memset>:
 8011e8c:	4402      	add	r2, r0
 8011e8e:	4603      	mov	r3, r0
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d100      	bne.n	8011e96 <memset+0xa>
 8011e94:	4770      	bx	lr
 8011e96:	f803 1b01 	strb.w	r1, [r3], #1
 8011e9a:	e7f9      	b.n	8011e90 <memset+0x4>

08011e9c <iprintf>:
 8011e9c:	b40f      	push	{r0, r1, r2, r3}
 8011e9e:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <iprintf+0x2c>)
 8011ea0:	b513      	push	{r0, r1, r4, lr}
 8011ea2:	681c      	ldr	r4, [r3, #0]
 8011ea4:	b124      	cbz	r4, 8011eb0 <iprintf+0x14>
 8011ea6:	69a3      	ldr	r3, [r4, #24]
 8011ea8:	b913      	cbnz	r3, 8011eb0 <iprintf+0x14>
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f000 f84e 	bl	8011f4c <__sinit>
 8011eb0:	ab05      	add	r3, sp, #20
 8011eb2:	9a04      	ldr	r2, [sp, #16]
 8011eb4:	68a1      	ldr	r1, [r4, #8]
 8011eb6:	9301      	str	r3, [sp, #4]
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f000 f9a3 	bl	8012204 <_vfiprintf_r>
 8011ebe:	b002      	add	sp, #8
 8011ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ec4:	b004      	add	sp, #16
 8011ec6:	4770      	bx	lr
 8011ec8:	2400002c 	.word	0x2400002c

08011ecc <std>:
 8011ecc:	2300      	movs	r3, #0
 8011ece:	b510      	push	{r4, lr}
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8011ed6:	6083      	str	r3, [r0, #8]
 8011ed8:	8181      	strh	r1, [r0, #12]
 8011eda:	6643      	str	r3, [r0, #100]	; 0x64
 8011edc:	81c2      	strh	r2, [r0, #14]
 8011ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ee2:	6183      	str	r3, [r0, #24]
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	2208      	movs	r2, #8
 8011ee8:	305c      	adds	r0, #92	; 0x5c
 8011eea:	f7ff ffcf 	bl	8011e8c <memset>
 8011eee:	4b05      	ldr	r3, [pc, #20]	; (8011f04 <std+0x38>)
 8011ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ef2:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <std+0x3c>)
 8011ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ef6:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <std+0x40>)
 8011ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011efa:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <std+0x44>)
 8011efc:	6224      	str	r4, [r4, #32]
 8011efe:	6323      	str	r3, [r4, #48]	; 0x30
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	bf00      	nop
 8011f04:	08012761 	.word	0x08012761
 8011f08:	08012783 	.word	0x08012783
 8011f0c:	080127bb 	.word	0x080127bb
 8011f10:	080127df 	.word	0x080127df

08011f14 <_cleanup_r>:
 8011f14:	4901      	ldr	r1, [pc, #4]	; (8011f1c <_cleanup_r+0x8>)
 8011f16:	f000 b885 	b.w	8012024 <_fwalk_reent>
 8011f1a:	bf00      	nop
 8011f1c:	08012ab9 	.word	0x08012ab9

08011f20 <__sfmoreglue>:
 8011f20:	b570      	push	{r4, r5, r6, lr}
 8011f22:	1e4a      	subs	r2, r1, #1
 8011f24:	2568      	movs	r5, #104	; 0x68
 8011f26:	4355      	muls	r5, r2
 8011f28:	460e      	mov	r6, r1
 8011f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f2e:	f000 f8e5 	bl	80120fc <_malloc_r>
 8011f32:	4604      	mov	r4, r0
 8011f34:	b140      	cbz	r0, 8011f48 <__sfmoreglue+0x28>
 8011f36:	2100      	movs	r1, #0
 8011f38:	e9c0 1600 	strd	r1, r6, [r0]
 8011f3c:	300c      	adds	r0, #12
 8011f3e:	60a0      	str	r0, [r4, #8]
 8011f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f44:	f7ff ffa2 	bl	8011e8c <memset>
 8011f48:	4620      	mov	r0, r4
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}

08011f4c <__sinit>:
 8011f4c:	6983      	ldr	r3, [r0, #24]
 8011f4e:	b510      	push	{r4, lr}
 8011f50:	4604      	mov	r4, r0
 8011f52:	bb33      	cbnz	r3, 8011fa2 <__sinit+0x56>
 8011f54:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011f58:	6503      	str	r3, [r0, #80]	; 0x50
 8011f5a:	4b12      	ldr	r3, [pc, #72]	; (8011fa4 <__sinit+0x58>)
 8011f5c:	4a12      	ldr	r2, [pc, #72]	; (8011fa8 <__sinit+0x5c>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	6282      	str	r2, [r0, #40]	; 0x28
 8011f62:	4298      	cmp	r0, r3
 8011f64:	bf04      	itt	eq
 8011f66:	2301      	moveq	r3, #1
 8011f68:	6183      	streq	r3, [r0, #24]
 8011f6a:	f000 f81f 	bl	8011fac <__sfp>
 8011f6e:	6060      	str	r0, [r4, #4]
 8011f70:	4620      	mov	r0, r4
 8011f72:	f000 f81b 	bl	8011fac <__sfp>
 8011f76:	60a0      	str	r0, [r4, #8]
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f000 f817 	bl	8011fac <__sfp>
 8011f7e:	2200      	movs	r2, #0
 8011f80:	60e0      	str	r0, [r4, #12]
 8011f82:	2104      	movs	r1, #4
 8011f84:	6860      	ldr	r0, [r4, #4]
 8011f86:	f7ff ffa1 	bl	8011ecc <std>
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	2109      	movs	r1, #9
 8011f8e:	68a0      	ldr	r0, [r4, #8]
 8011f90:	f7ff ff9c 	bl	8011ecc <std>
 8011f94:	2202      	movs	r2, #2
 8011f96:	2112      	movs	r1, #18
 8011f98:	68e0      	ldr	r0, [r4, #12]
 8011f9a:	f7ff ff97 	bl	8011ecc <std>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	61a3      	str	r3, [r4, #24]
 8011fa2:	bd10      	pop	{r4, pc}
 8011fa4:	08014a3c 	.word	0x08014a3c
 8011fa8:	08011f15 	.word	0x08011f15

08011fac <__sfp>:
 8011fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fae:	4b1b      	ldr	r3, [pc, #108]	; (801201c <__sfp+0x70>)
 8011fb0:	681e      	ldr	r6, [r3, #0]
 8011fb2:	69b3      	ldr	r3, [r6, #24]
 8011fb4:	4607      	mov	r7, r0
 8011fb6:	b913      	cbnz	r3, 8011fbe <__sfp+0x12>
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f7ff ffc7 	bl	8011f4c <__sinit>
 8011fbe:	3648      	adds	r6, #72	; 0x48
 8011fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011fc4:	3b01      	subs	r3, #1
 8011fc6:	d503      	bpl.n	8011fd0 <__sfp+0x24>
 8011fc8:	6833      	ldr	r3, [r6, #0]
 8011fca:	b133      	cbz	r3, 8011fda <__sfp+0x2e>
 8011fcc:	6836      	ldr	r6, [r6, #0]
 8011fce:	e7f7      	b.n	8011fc0 <__sfp+0x14>
 8011fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011fd4:	b16d      	cbz	r5, 8011ff2 <__sfp+0x46>
 8011fd6:	3468      	adds	r4, #104	; 0x68
 8011fd8:	e7f4      	b.n	8011fc4 <__sfp+0x18>
 8011fda:	2104      	movs	r1, #4
 8011fdc:	4638      	mov	r0, r7
 8011fde:	f7ff ff9f 	bl	8011f20 <__sfmoreglue>
 8011fe2:	6030      	str	r0, [r6, #0]
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d1f1      	bne.n	8011fcc <__sfp+0x20>
 8011fe8:	230c      	movs	r3, #12
 8011fea:	603b      	str	r3, [r7, #0]
 8011fec:	4604      	mov	r4, r0
 8011fee:	4620      	mov	r0, r4
 8011ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ff2:	4b0b      	ldr	r3, [pc, #44]	; (8012020 <__sfp+0x74>)
 8011ff4:	6665      	str	r5, [r4, #100]	; 0x64
 8011ff6:	e9c4 5500 	strd	r5, r5, [r4]
 8011ffa:	60a5      	str	r5, [r4, #8]
 8011ffc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012000:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012004:	2208      	movs	r2, #8
 8012006:	4629      	mov	r1, r5
 8012008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801200c:	f7ff ff3e 	bl	8011e8c <memset>
 8012010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012018:	e7e9      	b.n	8011fee <__sfp+0x42>
 801201a:	bf00      	nop
 801201c:	08014a3c 	.word	0x08014a3c
 8012020:	ffff0001 	.word	0xffff0001

08012024 <_fwalk_reent>:
 8012024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012028:	4680      	mov	r8, r0
 801202a:	4689      	mov	r9, r1
 801202c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012030:	2600      	movs	r6, #0
 8012032:	b914      	cbnz	r4, 801203a <_fwalk_reent+0x16>
 8012034:	4630      	mov	r0, r6
 8012036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801203a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801203e:	3f01      	subs	r7, #1
 8012040:	d501      	bpl.n	8012046 <_fwalk_reent+0x22>
 8012042:	6824      	ldr	r4, [r4, #0]
 8012044:	e7f5      	b.n	8012032 <_fwalk_reent+0xe>
 8012046:	89ab      	ldrh	r3, [r5, #12]
 8012048:	2b01      	cmp	r3, #1
 801204a:	d907      	bls.n	801205c <_fwalk_reent+0x38>
 801204c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012050:	3301      	adds	r3, #1
 8012052:	d003      	beq.n	801205c <_fwalk_reent+0x38>
 8012054:	4629      	mov	r1, r5
 8012056:	4640      	mov	r0, r8
 8012058:	47c8      	blx	r9
 801205a:	4306      	orrs	r6, r0
 801205c:	3568      	adds	r5, #104	; 0x68
 801205e:	e7ee      	b.n	801203e <_fwalk_reent+0x1a>

08012060 <_free_r>:
 8012060:	b538      	push	{r3, r4, r5, lr}
 8012062:	4605      	mov	r5, r0
 8012064:	2900      	cmp	r1, #0
 8012066:	d045      	beq.n	80120f4 <_free_r+0x94>
 8012068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801206c:	1f0c      	subs	r4, r1, #4
 801206e:	2b00      	cmp	r3, #0
 8012070:	bfb8      	it	lt
 8012072:	18e4      	addlt	r4, r4, r3
 8012074:	f000 fdc0 	bl	8012bf8 <__malloc_lock>
 8012078:	4a1f      	ldr	r2, [pc, #124]	; (80120f8 <_free_r+0x98>)
 801207a:	6813      	ldr	r3, [r2, #0]
 801207c:	4610      	mov	r0, r2
 801207e:	b933      	cbnz	r3, 801208e <_free_r+0x2e>
 8012080:	6063      	str	r3, [r4, #4]
 8012082:	6014      	str	r4, [r2, #0]
 8012084:	4628      	mov	r0, r5
 8012086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801208a:	f000 bdb6 	b.w	8012bfa <__malloc_unlock>
 801208e:	42a3      	cmp	r3, r4
 8012090:	d90c      	bls.n	80120ac <_free_r+0x4c>
 8012092:	6821      	ldr	r1, [r4, #0]
 8012094:	1862      	adds	r2, r4, r1
 8012096:	4293      	cmp	r3, r2
 8012098:	bf04      	itt	eq
 801209a:	681a      	ldreq	r2, [r3, #0]
 801209c:	685b      	ldreq	r3, [r3, #4]
 801209e:	6063      	str	r3, [r4, #4]
 80120a0:	bf04      	itt	eq
 80120a2:	1852      	addeq	r2, r2, r1
 80120a4:	6022      	streq	r2, [r4, #0]
 80120a6:	6004      	str	r4, [r0, #0]
 80120a8:	e7ec      	b.n	8012084 <_free_r+0x24>
 80120aa:	4613      	mov	r3, r2
 80120ac:	685a      	ldr	r2, [r3, #4]
 80120ae:	b10a      	cbz	r2, 80120b4 <_free_r+0x54>
 80120b0:	42a2      	cmp	r2, r4
 80120b2:	d9fa      	bls.n	80120aa <_free_r+0x4a>
 80120b4:	6819      	ldr	r1, [r3, #0]
 80120b6:	1858      	adds	r0, r3, r1
 80120b8:	42a0      	cmp	r0, r4
 80120ba:	d10b      	bne.n	80120d4 <_free_r+0x74>
 80120bc:	6820      	ldr	r0, [r4, #0]
 80120be:	4401      	add	r1, r0
 80120c0:	1858      	adds	r0, r3, r1
 80120c2:	4282      	cmp	r2, r0
 80120c4:	6019      	str	r1, [r3, #0]
 80120c6:	d1dd      	bne.n	8012084 <_free_r+0x24>
 80120c8:	6810      	ldr	r0, [r2, #0]
 80120ca:	6852      	ldr	r2, [r2, #4]
 80120cc:	605a      	str	r2, [r3, #4]
 80120ce:	4401      	add	r1, r0
 80120d0:	6019      	str	r1, [r3, #0]
 80120d2:	e7d7      	b.n	8012084 <_free_r+0x24>
 80120d4:	d902      	bls.n	80120dc <_free_r+0x7c>
 80120d6:	230c      	movs	r3, #12
 80120d8:	602b      	str	r3, [r5, #0]
 80120da:	e7d3      	b.n	8012084 <_free_r+0x24>
 80120dc:	6820      	ldr	r0, [r4, #0]
 80120de:	1821      	adds	r1, r4, r0
 80120e0:	428a      	cmp	r2, r1
 80120e2:	bf04      	itt	eq
 80120e4:	6811      	ldreq	r1, [r2, #0]
 80120e6:	6852      	ldreq	r2, [r2, #4]
 80120e8:	6062      	str	r2, [r4, #4]
 80120ea:	bf04      	itt	eq
 80120ec:	1809      	addeq	r1, r1, r0
 80120ee:	6021      	streq	r1, [r4, #0]
 80120f0:	605c      	str	r4, [r3, #4]
 80120f2:	e7c7      	b.n	8012084 <_free_r+0x24>
 80120f4:	bd38      	pop	{r3, r4, r5, pc}
 80120f6:	bf00      	nop
 80120f8:	24001ae8 	.word	0x24001ae8

080120fc <_malloc_r>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	1ccd      	adds	r5, r1, #3
 8012100:	f025 0503 	bic.w	r5, r5, #3
 8012104:	3508      	adds	r5, #8
 8012106:	2d0c      	cmp	r5, #12
 8012108:	bf38      	it	cc
 801210a:	250c      	movcc	r5, #12
 801210c:	2d00      	cmp	r5, #0
 801210e:	4606      	mov	r6, r0
 8012110:	db01      	blt.n	8012116 <_malloc_r+0x1a>
 8012112:	42a9      	cmp	r1, r5
 8012114:	d903      	bls.n	801211e <_malloc_r+0x22>
 8012116:	230c      	movs	r3, #12
 8012118:	6033      	str	r3, [r6, #0]
 801211a:	2000      	movs	r0, #0
 801211c:	bd70      	pop	{r4, r5, r6, pc}
 801211e:	f000 fd6b 	bl	8012bf8 <__malloc_lock>
 8012122:	4a21      	ldr	r2, [pc, #132]	; (80121a8 <_malloc_r+0xac>)
 8012124:	6814      	ldr	r4, [r2, #0]
 8012126:	4621      	mov	r1, r4
 8012128:	b991      	cbnz	r1, 8012150 <_malloc_r+0x54>
 801212a:	4c20      	ldr	r4, [pc, #128]	; (80121ac <_malloc_r+0xb0>)
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	b91b      	cbnz	r3, 8012138 <_malloc_r+0x3c>
 8012130:	4630      	mov	r0, r6
 8012132:	f000 fb05 	bl	8012740 <_sbrk_r>
 8012136:	6020      	str	r0, [r4, #0]
 8012138:	4629      	mov	r1, r5
 801213a:	4630      	mov	r0, r6
 801213c:	f000 fb00 	bl	8012740 <_sbrk_r>
 8012140:	1c43      	adds	r3, r0, #1
 8012142:	d124      	bne.n	801218e <_malloc_r+0x92>
 8012144:	230c      	movs	r3, #12
 8012146:	6033      	str	r3, [r6, #0]
 8012148:	4630      	mov	r0, r6
 801214a:	f000 fd56 	bl	8012bfa <__malloc_unlock>
 801214e:	e7e4      	b.n	801211a <_malloc_r+0x1e>
 8012150:	680b      	ldr	r3, [r1, #0]
 8012152:	1b5b      	subs	r3, r3, r5
 8012154:	d418      	bmi.n	8012188 <_malloc_r+0x8c>
 8012156:	2b0b      	cmp	r3, #11
 8012158:	d90f      	bls.n	801217a <_malloc_r+0x7e>
 801215a:	600b      	str	r3, [r1, #0]
 801215c:	50cd      	str	r5, [r1, r3]
 801215e:	18cc      	adds	r4, r1, r3
 8012160:	4630      	mov	r0, r6
 8012162:	f000 fd4a 	bl	8012bfa <__malloc_unlock>
 8012166:	f104 000b 	add.w	r0, r4, #11
 801216a:	1d23      	adds	r3, r4, #4
 801216c:	f020 0007 	bic.w	r0, r0, #7
 8012170:	1ac3      	subs	r3, r0, r3
 8012172:	d0d3      	beq.n	801211c <_malloc_r+0x20>
 8012174:	425a      	negs	r2, r3
 8012176:	50e2      	str	r2, [r4, r3]
 8012178:	e7d0      	b.n	801211c <_malloc_r+0x20>
 801217a:	428c      	cmp	r4, r1
 801217c:	684b      	ldr	r3, [r1, #4]
 801217e:	bf16      	itet	ne
 8012180:	6063      	strne	r3, [r4, #4]
 8012182:	6013      	streq	r3, [r2, #0]
 8012184:	460c      	movne	r4, r1
 8012186:	e7eb      	b.n	8012160 <_malloc_r+0x64>
 8012188:	460c      	mov	r4, r1
 801218a:	6849      	ldr	r1, [r1, #4]
 801218c:	e7cc      	b.n	8012128 <_malloc_r+0x2c>
 801218e:	1cc4      	adds	r4, r0, #3
 8012190:	f024 0403 	bic.w	r4, r4, #3
 8012194:	42a0      	cmp	r0, r4
 8012196:	d005      	beq.n	80121a4 <_malloc_r+0xa8>
 8012198:	1a21      	subs	r1, r4, r0
 801219a:	4630      	mov	r0, r6
 801219c:	f000 fad0 	bl	8012740 <_sbrk_r>
 80121a0:	3001      	adds	r0, #1
 80121a2:	d0cf      	beq.n	8012144 <_malloc_r+0x48>
 80121a4:	6025      	str	r5, [r4, #0]
 80121a6:	e7db      	b.n	8012160 <_malloc_r+0x64>
 80121a8:	24001ae8 	.word	0x24001ae8
 80121ac:	24001aec 	.word	0x24001aec

080121b0 <__sfputc_r>:
 80121b0:	6893      	ldr	r3, [r2, #8]
 80121b2:	3b01      	subs	r3, #1
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	b410      	push	{r4}
 80121b8:	6093      	str	r3, [r2, #8]
 80121ba:	da08      	bge.n	80121ce <__sfputc_r+0x1e>
 80121bc:	6994      	ldr	r4, [r2, #24]
 80121be:	42a3      	cmp	r3, r4
 80121c0:	db01      	blt.n	80121c6 <__sfputc_r+0x16>
 80121c2:	290a      	cmp	r1, #10
 80121c4:	d103      	bne.n	80121ce <__sfputc_r+0x1e>
 80121c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121ca:	f000 bb0d 	b.w	80127e8 <__swbuf_r>
 80121ce:	6813      	ldr	r3, [r2, #0]
 80121d0:	1c58      	adds	r0, r3, #1
 80121d2:	6010      	str	r0, [r2, #0]
 80121d4:	7019      	strb	r1, [r3, #0]
 80121d6:	4608      	mov	r0, r1
 80121d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121dc:	4770      	bx	lr

080121de <__sfputs_r>:
 80121de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121e0:	4606      	mov	r6, r0
 80121e2:	460f      	mov	r7, r1
 80121e4:	4614      	mov	r4, r2
 80121e6:	18d5      	adds	r5, r2, r3
 80121e8:	42ac      	cmp	r4, r5
 80121ea:	d101      	bne.n	80121f0 <__sfputs_r+0x12>
 80121ec:	2000      	movs	r0, #0
 80121ee:	e007      	b.n	8012200 <__sfputs_r+0x22>
 80121f0:	463a      	mov	r2, r7
 80121f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121f6:	4630      	mov	r0, r6
 80121f8:	f7ff ffda 	bl	80121b0 <__sfputc_r>
 80121fc:	1c43      	adds	r3, r0, #1
 80121fe:	d1f3      	bne.n	80121e8 <__sfputs_r+0xa>
 8012200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012204 <_vfiprintf_r>:
 8012204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012208:	460c      	mov	r4, r1
 801220a:	b09d      	sub	sp, #116	; 0x74
 801220c:	4617      	mov	r7, r2
 801220e:	461d      	mov	r5, r3
 8012210:	4606      	mov	r6, r0
 8012212:	b118      	cbz	r0, 801221c <_vfiprintf_r+0x18>
 8012214:	6983      	ldr	r3, [r0, #24]
 8012216:	b90b      	cbnz	r3, 801221c <_vfiprintf_r+0x18>
 8012218:	f7ff fe98 	bl	8011f4c <__sinit>
 801221c:	4b7c      	ldr	r3, [pc, #496]	; (8012410 <_vfiprintf_r+0x20c>)
 801221e:	429c      	cmp	r4, r3
 8012220:	d158      	bne.n	80122d4 <_vfiprintf_r+0xd0>
 8012222:	6874      	ldr	r4, [r6, #4]
 8012224:	89a3      	ldrh	r3, [r4, #12]
 8012226:	0718      	lsls	r0, r3, #28
 8012228:	d55e      	bpl.n	80122e8 <_vfiprintf_r+0xe4>
 801222a:	6923      	ldr	r3, [r4, #16]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d05b      	beq.n	80122e8 <_vfiprintf_r+0xe4>
 8012230:	2300      	movs	r3, #0
 8012232:	9309      	str	r3, [sp, #36]	; 0x24
 8012234:	2320      	movs	r3, #32
 8012236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801223a:	2330      	movs	r3, #48	; 0x30
 801223c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012240:	9503      	str	r5, [sp, #12]
 8012242:	f04f 0b01 	mov.w	fp, #1
 8012246:	46b8      	mov	r8, r7
 8012248:	4645      	mov	r5, r8
 801224a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801224e:	b10b      	cbz	r3, 8012254 <_vfiprintf_r+0x50>
 8012250:	2b25      	cmp	r3, #37	; 0x25
 8012252:	d154      	bne.n	80122fe <_vfiprintf_r+0xfa>
 8012254:	ebb8 0a07 	subs.w	sl, r8, r7
 8012258:	d00b      	beq.n	8012272 <_vfiprintf_r+0x6e>
 801225a:	4653      	mov	r3, sl
 801225c:	463a      	mov	r2, r7
 801225e:	4621      	mov	r1, r4
 8012260:	4630      	mov	r0, r6
 8012262:	f7ff ffbc 	bl	80121de <__sfputs_r>
 8012266:	3001      	adds	r0, #1
 8012268:	f000 80c2 	beq.w	80123f0 <_vfiprintf_r+0x1ec>
 801226c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801226e:	4453      	add	r3, sl
 8012270:	9309      	str	r3, [sp, #36]	; 0x24
 8012272:	f898 3000 	ldrb.w	r3, [r8]
 8012276:	2b00      	cmp	r3, #0
 8012278:	f000 80ba 	beq.w	80123f0 <_vfiprintf_r+0x1ec>
 801227c:	2300      	movs	r3, #0
 801227e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012286:	9304      	str	r3, [sp, #16]
 8012288:	9307      	str	r3, [sp, #28]
 801228a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801228e:	931a      	str	r3, [sp, #104]	; 0x68
 8012290:	46a8      	mov	r8, r5
 8012292:	2205      	movs	r2, #5
 8012294:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012298:	485e      	ldr	r0, [pc, #376]	; (8012414 <_vfiprintf_r+0x210>)
 801229a:	f7ee f821 	bl	80002e0 <memchr>
 801229e:	9b04      	ldr	r3, [sp, #16]
 80122a0:	bb78      	cbnz	r0, 8012302 <_vfiprintf_r+0xfe>
 80122a2:	06d9      	lsls	r1, r3, #27
 80122a4:	bf44      	itt	mi
 80122a6:	2220      	movmi	r2, #32
 80122a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80122ac:	071a      	lsls	r2, r3, #28
 80122ae:	bf44      	itt	mi
 80122b0:	222b      	movmi	r2, #43	; 0x2b
 80122b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80122b6:	782a      	ldrb	r2, [r5, #0]
 80122b8:	2a2a      	cmp	r2, #42	; 0x2a
 80122ba:	d02a      	beq.n	8012312 <_vfiprintf_r+0x10e>
 80122bc:	9a07      	ldr	r2, [sp, #28]
 80122be:	46a8      	mov	r8, r5
 80122c0:	2000      	movs	r0, #0
 80122c2:	250a      	movs	r5, #10
 80122c4:	4641      	mov	r1, r8
 80122c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122ca:	3b30      	subs	r3, #48	; 0x30
 80122cc:	2b09      	cmp	r3, #9
 80122ce:	d969      	bls.n	80123a4 <_vfiprintf_r+0x1a0>
 80122d0:	b360      	cbz	r0, 801232c <_vfiprintf_r+0x128>
 80122d2:	e024      	b.n	801231e <_vfiprintf_r+0x11a>
 80122d4:	4b50      	ldr	r3, [pc, #320]	; (8012418 <_vfiprintf_r+0x214>)
 80122d6:	429c      	cmp	r4, r3
 80122d8:	d101      	bne.n	80122de <_vfiprintf_r+0xda>
 80122da:	68b4      	ldr	r4, [r6, #8]
 80122dc:	e7a2      	b.n	8012224 <_vfiprintf_r+0x20>
 80122de:	4b4f      	ldr	r3, [pc, #316]	; (801241c <_vfiprintf_r+0x218>)
 80122e0:	429c      	cmp	r4, r3
 80122e2:	bf08      	it	eq
 80122e4:	68f4      	ldreq	r4, [r6, #12]
 80122e6:	e79d      	b.n	8012224 <_vfiprintf_r+0x20>
 80122e8:	4621      	mov	r1, r4
 80122ea:	4630      	mov	r0, r6
 80122ec:	f000 fae0 	bl	80128b0 <__swsetup_r>
 80122f0:	2800      	cmp	r0, #0
 80122f2:	d09d      	beq.n	8012230 <_vfiprintf_r+0x2c>
 80122f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122f8:	b01d      	add	sp, #116	; 0x74
 80122fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122fe:	46a8      	mov	r8, r5
 8012300:	e7a2      	b.n	8012248 <_vfiprintf_r+0x44>
 8012302:	4a44      	ldr	r2, [pc, #272]	; (8012414 <_vfiprintf_r+0x210>)
 8012304:	1a80      	subs	r0, r0, r2
 8012306:	fa0b f000 	lsl.w	r0, fp, r0
 801230a:	4318      	orrs	r0, r3
 801230c:	9004      	str	r0, [sp, #16]
 801230e:	4645      	mov	r5, r8
 8012310:	e7be      	b.n	8012290 <_vfiprintf_r+0x8c>
 8012312:	9a03      	ldr	r2, [sp, #12]
 8012314:	1d11      	adds	r1, r2, #4
 8012316:	6812      	ldr	r2, [r2, #0]
 8012318:	9103      	str	r1, [sp, #12]
 801231a:	2a00      	cmp	r2, #0
 801231c:	db01      	blt.n	8012322 <_vfiprintf_r+0x11e>
 801231e:	9207      	str	r2, [sp, #28]
 8012320:	e004      	b.n	801232c <_vfiprintf_r+0x128>
 8012322:	4252      	negs	r2, r2
 8012324:	f043 0302 	orr.w	r3, r3, #2
 8012328:	9207      	str	r2, [sp, #28]
 801232a:	9304      	str	r3, [sp, #16]
 801232c:	f898 3000 	ldrb.w	r3, [r8]
 8012330:	2b2e      	cmp	r3, #46	; 0x2e
 8012332:	d10e      	bne.n	8012352 <_vfiprintf_r+0x14e>
 8012334:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012338:	2b2a      	cmp	r3, #42	; 0x2a
 801233a:	d138      	bne.n	80123ae <_vfiprintf_r+0x1aa>
 801233c:	9b03      	ldr	r3, [sp, #12]
 801233e:	1d1a      	adds	r2, r3, #4
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	9203      	str	r2, [sp, #12]
 8012344:	2b00      	cmp	r3, #0
 8012346:	bfb8      	it	lt
 8012348:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801234c:	f108 0802 	add.w	r8, r8, #2
 8012350:	9305      	str	r3, [sp, #20]
 8012352:	4d33      	ldr	r5, [pc, #204]	; (8012420 <_vfiprintf_r+0x21c>)
 8012354:	f898 1000 	ldrb.w	r1, [r8]
 8012358:	2203      	movs	r2, #3
 801235a:	4628      	mov	r0, r5
 801235c:	f7ed ffc0 	bl	80002e0 <memchr>
 8012360:	b140      	cbz	r0, 8012374 <_vfiprintf_r+0x170>
 8012362:	2340      	movs	r3, #64	; 0x40
 8012364:	1b40      	subs	r0, r0, r5
 8012366:	fa03 f000 	lsl.w	r0, r3, r0
 801236a:	9b04      	ldr	r3, [sp, #16]
 801236c:	4303      	orrs	r3, r0
 801236e:	f108 0801 	add.w	r8, r8, #1
 8012372:	9304      	str	r3, [sp, #16]
 8012374:	f898 1000 	ldrb.w	r1, [r8]
 8012378:	482a      	ldr	r0, [pc, #168]	; (8012424 <_vfiprintf_r+0x220>)
 801237a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801237e:	2206      	movs	r2, #6
 8012380:	f108 0701 	add.w	r7, r8, #1
 8012384:	f7ed ffac 	bl	80002e0 <memchr>
 8012388:	2800      	cmp	r0, #0
 801238a:	d037      	beq.n	80123fc <_vfiprintf_r+0x1f8>
 801238c:	4b26      	ldr	r3, [pc, #152]	; (8012428 <_vfiprintf_r+0x224>)
 801238e:	bb1b      	cbnz	r3, 80123d8 <_vfiprintf_r+0x1d4>
 8012390:	9b03      	ldr	r3, [sp, #12]
 8012392:	3307      	adds	r3, #7
 8012394:	f023 0307 	bic.w	r3, r3, #7
 8012398:	3308      	adds	r3, #8
 801239a:	9303      	str	r3, [sp, #12]
 801239c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801239e:	444b      	add	r3, r9
 80123a0:	9309      	str	r3, [sp, #36]	; 0x24
 80123a2:	e750      	b.n	8012246 <_vfiprintf_r+0x42>
 80123a4:	fb05 3202 	mla	r2, r5, r2, r3
 80123a8:	2001      	movs	r0, #1
 80123aa:	4688      	mov	r8, r1
 80123ac:	e78a      	b.n	80122c4 <_vfiprintf_r+0xc0>
 80123ae:	2300      	movs	r3, #0
 80123b0:	f108 0801 	add.w	r8, r8, #1
 80123b4:	9305      	str	r3, [sp, #20]
 80123b6:	4619      	mov	r1, r3
 80123b8:	250a      	movs	r5, #10
 80123ba:	4640      	mov	r0, r8
 80123bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123c0:	3a30      	subs	r2, #48	; 0x30
 80123c2:	2a09      	cmp	r2, #9
 80123c4:	d903      	bls.n	80123ce <_vfiprintf_r+0x1ca>
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d0c3      	beq.n	8012352 <_vfiprintf_r+0x14e>
 80123ca:	9105      	str	r1, [sp, #20]
 80123cc:	e7c1      	b.n	8012352 <_vfiprintf_r+0x14e>
 80123ce:	fb05 2101 	mla	r1, r5, r1, r2
 80123d2:	2301      	movs	r3, #1
 80123d4:	4680      	mov	r8, r0
 80123d6:	e7f0      	b.n	80123ba <_vfiprintf_r+0x1b6>
 80123d8:	ab03      	add	r3, sp, #12
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	4622      	mov	r2, r4
 80123de:	4b13      	ldr	r3, [pc, #76]	; (801242c <_vfiprintf_r+0x228>)
 80123e0:	a904      	add	r1, sp, #16
 80123e2:	4630      	mov	r0, r6
 80123e4:	f3af 8000 	nop.w
 80123e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80123ec:	4681      	mov	r9, r0
 80123ee:	d1d5      	bne.n	801239c <_vfiprintf_r+0x198>
 80123f0:	89a3      	ldrh	r3, [r4, #12]
 80123f2:	065b      	lsls	r3, r3, #25
 80123f4:	f53f af7e 	bmi.w	80122f4 <_vfiprintf_r+0xf0>
 80123f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123fa:	e77d      	b.n	80122f8 <_vfiprintf_r+0xf4>
 80123fc:	ab03      	add	r3, sp, #12
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	4622      	mov	r2, r4
 8012402:	4b0a      	ldr	r3, [pc, #40]	; (801242c <_vfiprintf_r+0x228>)
 8012404:	a904      	add	r1, sp, #16
 8012406:	4630      	mov	r0, r6
 8012408:	f000 f888 	bl	801251c <_printf_i>
 801240c:	e7ec      	b.n	80123e8 <_vfiprintf_r+0x1e4>
 801240e:	bf00      	nop
 8012410:	08014a60 	.word	0x08014a60
 8012414:	08014aa0 	.word	0x08014aa0
 8012418:	08014a80 	.word	0x08014a80
 801241c:	08014a40 	.word	0x08014a40
 8012420:	08014aa6 	.word	0x08014aa6
 8012424:	08014aaa 	.word	0x08014aaa
 8012428:	00000000 	.word	0x00000000
 801242c:	080121df 	.word	0x080121df

08012430 <_printf_common>:
 8012430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012434:	4691      	mov	r9, r2
 8012436:	461f      	mov	r7, r3
 8012438:	688a      	ldr	r2, [r1, #8]
 801243a:	690b      	ldr	r3, [r1, #16]
 801243c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012440:	4293      	cmp	r3, r2
 8012442:	bfb8      	it	lt
 8012444:	4613      	movlt	r3, r2
 8012446:	f8c9 3000 	str.w	r3, [r9]
 801244a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801244e:	4606      	mov	r6, r0
 8012450:	460c      	mov	r4, r1
 8012452:	b112      	cbz	r2, 801245a <_printf_common+0x2a>
 8012454:	3301      	adds	r3, #1
 8012456:	f8c9 3000 	str.w	r3, [r9]
 801245a:	6823      	ldr	r3, [r4, #0]
 801245c:	0699      	lsls	r1, r3, #26
 801245e:	bf42      	ittt	mi
 8012460:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012464:	3302      	addmi	r3, #2
 8012466:	f8c9 3000 	strmi.w	r3, [r9]
 801246a:	6825      	ldr	r5, [r4, #0]
 801246c:	f015 0506 	ands.w	r5, r5, #6
 8012470:	d107      	bne.n	8012482 <_printf_common+0x52>
 8012472:	f104 0a19 	add.w	sl, r4, #25
 8012476:	68e3      	ldr	r3, [r4, #12]
 8012478:	f8d9 2000 	ldr.w	r2, [r9]
 801247c:	1a9b      	subs	r3, r3, r2
 801247e:	42ab      	cmp	r3, r5
 8012480:	dc28      	bgt.n	80124d4 <_printf_common+0xa4>
 8012482:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012486:	6822      	ldr	r2, [r4, #0]
 8012488:	3300      	adds	r3, #0
 801248a:	bf18      	it	ne
 801248c:	2301      	movne	r3, #1
 801248e:	0692      	lsls	r2, r2, #26
 8012490:	d42d      	bmi.n	80124ee <_printf_common+0xbe>
 8012492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012496:	4639      	mov	r1, r7
 8012498:	4630      	mov	r0, r6
 801249a:	47c0      	blx	r8
 801249c:	3001      	adds	r0, #1
 801249e:	d020      	beq.n	80124e2 <_printf_common+0xb2>
 80124a0:	6823      	ldr	r3, [r4, #0]
 80124a2:	68e5      	ldr	r5, [r4, #12]
 80124a4:	f8d9 2000 	ldr.w	r2, [r9]
 80124a8:	f003 0306 	and.w	r3, r3, #6
 80124ac:	2b04      	cmp	r3, #4
 80124ae:	bf08      	it	eq
 80124b0:	1aad      	subeq	r5, r5, r2
 80124b2:	68a3      	ldr	r3, [r4, #8]
 80124b4:	6922      	ldr	r2, [r4, #16]
 80124b6:	bf0c      	ite	eq
 80124b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124bc:	2500      	movne	r5, #0
 80124be:	4293      	cmp	r3, r2
 80124c0:	bfc4      	itt	gt
 80124c2:	1a9b      	subgt	r3, r3, r2
 80124c4:	18ed      	addgt	r5, r5, r3
 80124c6:	f04f 0900 	mov.w	r9, #0
 80124ca:	341a      	adds	r4, #26
 80124cc:	454d      	cmp	r5, r9
 80124ce:	d11a      	bne.n	8012506 <_printf_common+0xd6>
 80124d0:	2000      	movs	r0, #0
 80124d2:	e008      	b.n	80124e6 <_printf_common+0xb6>
 80124d4:	2301      	movs	r3, #1
 80124d6:	4652      	mov	r2, sl
 80124d8:	4639      	mov	r1, r7
 80124da:	4630      	mov	r0, r6
 80124dc:	47c0      	blx	r8
 80124de:	3001      	adds	r0, #1
 80124e0:	d103      	bne.n	80124ea <_printf_common+0xba>
 80124e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ea:	3501      	adds	r5, #1
 80124ec:	e7c3      	b.n	8012476 <_printf_common+0x46>
 80124ee:	18e1      	adds	r1, r4, r3
 80124f0:	1c5a      	adds	r2, r3, #1
 80124f2:	2030      	movs	r0, #48	; 0x30
 80124f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80124f8:	4422      	add	r2, r4
 80124fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80124fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012502:	3302      	adds	r3, #2
 8012504:	e7c5      	b.n	8012492 <_printf_common+0x62>
 8012506:	2301      	movs	r3, #1
 8012508:	4622      	mov	r2, r4
 801250a:	4639      	mov	r1, r7
 801250c:	4630      	mov	r0, r6
 801250e:	47c0      	blx	r8
 8012510:	3001      	adds	r0, #1
 8012512:	d0e6      	beq.n	80124e2 <_printf_common+0xb2>
 8012514:	f109 0901 	add.w	r9, r9, #1
 8012518:	e7d8      	b.n	80124cc <_printf_common+0x9c>
	...

0801251c <_printf_i>:
 801251c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012520:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012524:	460c      	mov	r4, r1
 8012526:	7e09      	ldrb	r1, [r1, #24]
 8012528:	b085      	sub	sp, #20
 801252a:	296e      	cmp	r1, #110	; 0x6e
 801252c:	4617      	mov	r7, r2
 801252e:	4606      	mov	r6, r0
 8012530:	4698      	mov	r8, r3
 8012532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012534:	f000 80b3 	beq.w	801269e <_printf_i+0x182>
 8012538:	d822      	bhi.n	8012580 <_printf_i+0x64>
 801253a:	2963      	cmp	r1, #99	; 0x63
 801253c:	d036      	beq.n	80125ac <_printf_i+0x90>
 801253e:	d80a      	bhi.n	8012556 <_printf_i+0x3a>
 8012540:	2900      	cmp	r1, #0
 8012542:	f000 80b9 	beq.w	80126b8 <_printf_i+0x19c>
 8012546:	2958      	cmp	r1, #88	; 0x58
 8012548:	f000 8083 	beq.w	8012652 <_printf_i+0x136>
 801254c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012550:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012554:	e032      	b.n	80125bc <_printf_i+0xa0>
 8012556:	2964      	cmp	r1, #100	; 0x64
 8012558:	d001      	beq.n	801255e <_printf_i+0x42>
 801255a:	2969      	cmp	r1, #105	; 0x69
 801255c:	d1f6      	bne.n	801254c <_printf_i+0x30>
 801255e:	6820      	ldr	r0, [r4, #0]
 8012560:	6813      	ldr	r3, [r2, #0]
 8012562:	0605      	lsls	r5, r0, #24
 8012564:	f103 0104 	add.w	r1, r3, #4
 8012568:	d52a      	bpl.n	80125c0 <_printf_i+0xa4>
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	6011      	str	r1, [r2, #0]
 801256e:	2b00      	cmp	r3, #0
 8012570:	da03      	bge.n	801257a <_printf_i+0x5e>
 8012572:	222d      	movs	r2, #45	; 0x2d
 8012574:	425b      	negs	r3, r3
 8012576:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801257a:	486f      	ldr	r0, [pc, #444]	; (8012738 <_printf_i+0x21c>)
 801257c:	220a      	movs	r2, #10
 801257e:	e039      	b.n	80125f4 <_printf_i+0xd8>
 8012580:	2973      	cmp	r1, #115	; 0x73
 8012582:	f000 809d 	beq.w	80126c0 <_printf_i+0x1a4>
 8012586:	d808      	bhi.n	801259a <_printf_i+0x7e>
 8012588:	296f      	cmp	r1, #111	; 0x6f
 801258a:	d020      	beq.n	80125ce <_printf_i+0xb2>
 801258c:	2970      	cmp	r1, #112	; 0x70
 801258e:	d1dd      	bne.n	801254c <_printf_i+0x30>
 8012590:	6823      	ldr	r3, [r4, #0]
 8012592:	f043 0320 	orr.w	r3, r3, #32
 8012596:	6023      	str	r3, [r4, #0]
 8012598:	e003      	b.n	80125a2 <_printf_i+0x86>
 801259a:	2975      	cmp	r1, #117	; 0x75
 801259c:	d017      	beq.n	80125ce <_printf_i+0xb2>
 801259e:	2978      	cmp	r1, #120	; 0x78
 80125a0:	d1d4      	bne.n	801254c <_printf_i+0x30>
 80125a2:	2378      	movs	r3, #120	; 0x78
 80125a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80125a8:	4864      	ldr	r0, [pc, #400]	; (801273c <_printf_i+0x220>)
 80125aa:	e055      	b.n	8012658 <_printf_i+0x13c>
 80125ac:	6813      	ldr	r3, [r2, #0]
 80125ae:	1d19      	adds	r1, r3, #4
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	6011      	str	r1, [r2, #0]
 80125b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125bc:	2301      	movs	r3, #1
 80125be:	e08c      	b.n	80126da <_printf_i+0x1be>
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	6011      	str	r1, [r2, #0]
 80125c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80125c8:	bf18      	it	ne
 80125ca:	b21b      	sxthne	r3, r3
 80125cc:	e7cf      	b.n	801256e <_printf_i+0x52>
 80125ce:	6813      	ldr	r3, [r2, #0]
 80125d0:	6825      	ldr	r5, [r4, #0]
 80125d2:	1d18      	adds	r0, r3, #4
 80125d4:	6010      	str	r0, [r2, #0]
 80125d6:	0628      	lsls	r0, r5, #24
 80125d8:	d501      	bpl.n	80125de <_printf_i+0xc2>
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	e002      	b.n	80125e4 <_printf_i+0xc8>
 80125de:	0668      	lsls	r0, r5, #25
 80125e0:	d5fb      	bpl.n	80125da <_printf_i+0xbe>
 80125e2:	881b      	ldrh	r3, [r3, #0]
 80125e4:	4854      	ldr	r0, [pc, #336]	; (8012738 <_printf_i+0x21c>)
 80125e6:	296f      	cmp	r1, #111	; 0x6f
 80125e8:	bf14      	ite	ne
 80125ea:	220a      	movne	r2, #10
 80125ec:	2208      	moveq	r2, #8
 80125ee:	2100      	movs	r1, #0
 80125f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80125f4:	6865      	ldr	r5, [r4, #4]
 80125f6:	60a5      	str	r5, [r4, #8]
 80125f8:	2d00      	cmp	r5, #0
 80125fa:	f2c0 8095 	blt.w	8012728 <_printf_i+0x20c>
 80125fe:	6821      	ldr	r1, [r4, #0]
 8012600:	f021 0104 	bic.w	r1, r1, #4
 8012604:	6021      	str	r1, [r4, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d13d      	bne.n	8012686 <_printf_i+0x16a>
 801260a:	2d00      	cmp	r5, #0
 801260c:	f040 808e 	bne.w	801272c <_printf_i+0x210>
 8012610:	4665      	mov	r5, ip
 8012612:	2a08      	cmp	r2, #8
 8012614:	d10b      	bne.n	801262e <_printf_i+0x112>
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	07db      	lsls	r3, r3, #31
 801261a:	d508      	bpl.n	801262e <_printf_i+0x112>
 801261c:	6923      	ldr	r3, [r4, #16]
 801261e:	6862      	ldr	r2, [r4, #4]
 8012620:	429a      	cmp	r2, r3
 8012622:	bfde      	ittt	le
 8012624:	2330      	movle	r3, #48	; 0x30
 8012626:	f805 3c01 	strble.w	r3, [r5, #-1]
 801262a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801262e:	ebac 0305 	sub.w	r3, ip, r5
 8012632:	6123      	str	r3, [r4, #16]
 8012634:	f8cd 8000 	str.w	r8, [sp]
 8012638:	463b      	mov	r3, r7
 801263a:	aa03      	add	r2, sp, #12
 801263c:	4621      	mov	r1, r4
 801263e:	4630      	mov	r0, r6
 8012640:	f7ff fef6 	bl	8012430 <_printf_common>
 8012644:	3001      	adds	r0, #1
 8012646:	d14d      	bne.n	80126e4 <_printf_i+0x1c8>
 8012648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801264c:	b005      	add	sp, #20
 801264e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012652:	4839      	ldr	r0, [pc, #228]	; (8012738 <_printf_i+0x21c>)
 8012654:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012658:	6813      	ldr	r3, [r2, #0]
 801265a:	6821      	ldr	r1, [r4, #0]
 801265c:	1d1d      	adds	r5, r3, #4
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	6015      	str	r5, [r2, #0]
 8012662:	060a      	lsls	r2, r1, #24
 8012664:	d50b      	bpl.n	801267e <_printf_i+0x162>
 8012666:	07ca      	lsls	r2, r1, #31
 8012668:	bf44      	itt	mi
 801266a:	f041 0120 	orrmi.w	r1, r1, #32
 801266e:	6021      	strmi	r1, [r4, #0]
 8012670:	b91b      	cbnz	r3, 801267a <_printf_i+0x15e>
 8012672:	6822      	ldr	r2, [r4, #0]
 8012674:	f022 0220 	bic.w	r2, r2, #32
 8012678:	6022      	str	r2, [r4, #0]
 801267a:	2210      	movs	r2, #16
 801267c:	e7b7      	b.n	80125ee <_printf_i+0xd2>
 801267e:	064d      	lsls	r5, r1, #25
 8012680:	bf48      	it	mi
 8012682:	b29b      	uxthmi	r3, r3
 8012684:	e7ef      	b.n	8012666 <_printf_i+0x14a>
 8012686:	4665      	mov	r5, ip
 8012688:	fbb3 f1f2 	udiv	r1, r3, r2
 801268c:	fb02 3311 	mls	r3, r2, r1, r3
 8012690:	5cc3      	ldrb	r3, [r0, r3]
 8012692:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012696:	460b      	mov	r3, r1
 8012698:	2900      	cmp	r1, #0
 801269a:	d1f5      	bne.n	8012688 <_printf_i+0x16c>
 801269c:	e7b9      	b.n	8012612 <_printf_i+0xf6>
 801269e:	6813      	ldr	r3, [r2, #0]
 80126a0:	6825      	ldr	r5, [r4, #0]
 80126a2:	6961      	ldr	r1, [r4, #20]
 80126a4:	1d18      	adds	r0, r3, #4
 80126a6:	6010      	str	r0, [r2, #0]
 80126a8:	0628      	lsls	r0, r5, #24
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	d501      	bpl.n	80126b2 <_printf_i+0x196>
 80126ae:	6019      	str	r1, [r3, #0]
 80126b0:	e002      	b.n	80126b8 <_printf_i+0x19c>
 80126b2:	066a      	lsls	r2, r5, #25
 80126b4:	d5fb      	bpl.n	80126ae <_printf_i+0x192>
 80126b6:	8019      	strh	r1, [r3, #0]
 80126b8:	2300      	movs	r3, #0
 80126ba:	6123      	str	r3, [r4, #16]
 80126bc:	4665      	mov	r5, ip
 80126be:	e7b9      	b.n	8012634 <_printf_i+0x118>
 80126c0:	6813      	ldr	r3, [r2, #0]
 80126c2:	1d19      	adds	r1, r3, #4
 80126c4:	6011      	str	r1, [r2, #0]
 80126c6:	681d      	ldr	r5, [r3, #0]
 80126c8:	6862      	ldr	r2, [r4, #4]
 80126ca:	2100      	movs	r1, #0
 80126cc:	4628      	mov	r0, r5
 80126ce:	f7ed fe07 	bl	80002e0 <memchr>
 80126d2:	b108      	cbz	r0, 80126d8 <_printf_i+0x1bc>
 80126d4:	1b40      	subs	r0, r0, r5
 80126d6:	6060      	str	r0, [r4, #4]
 80126d8:	6863      	ldr	r3, [r4, #4]
 80126da:	6123      	str	r3, [r4, #16]
 80126dc:	2300      	movs	r3, #0
 80126de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126e2:	e7a7      	b.n	8012634 <_printf_i+0x118>
 80126e4:	6923      	ldr	r3, [r4, #16]
 80126e6:	462a      	mov	r2, r5
 80126e8:	4639      	mov	r1, r7
 80126ea:	4630      	mov	r0, r6
 80126ec:	47c0      	blx	r8
 80126ee:	3001      	adds	r0, #1
 80126f0:	d0aa      	beq.n	8012648 <_printf_i+0x12c>
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	079b      	lsls	r3, r3, #30
 80126f6:	d413      	bmi.n	8012720 <_printf_i+0x204>
 80126f8:	68e0      	ldr	r0, [r4, #12]
 80126fa:	9b03      	ldr	r3, [sp, #12]
 80126fc:	4298      	cmp	r0, r3
 80126fe:	bfb8      	it	lt
 8012700:	4618      	movlt	r0, r3
 8012702:	e7a3      	b.n	801264c <_printf_i+0x130>
 8012704:	2301      	movs	r3, #1
 8012706:	464a      	mov	r2, r9
 8012708:	4639      	mov	r1, r7
 801270a:	4630      	mov	r0, r6
 801270c:	47c0      	blx	r8
 801270e:	3001      	adds	r0, #1
 8012710:	d09a      	beq.n	8012648 <_printf_i+0x12c>
 8012712:	3501      	adds	r5, #1
 8012714:	68e3      	ldr	r3, [r4, #12]
 8012716:	9a03      	ldr	r2, [sp, #12]
 8012718:	1a9b      	subs	r3, r3, r2
 801271a:	42ab      	cmp	r3, r5
 801271c:	dcf2      	bgt.n	8012704 <_printf_i+0x1e8>
 801271e:	e7eb      	b.n	80126f8 <_printf_i+0x1dc>
 8012720:	2500      	movs	r5, #0
 8012722:	f104 0919 	add.w	r9, r4, #25
 8012726:	e7f5      	b.n	8012714 <_printf_i+0x1f8>
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1ac      	bne.n	8012686 <_printf_i+0x16a>
 801272c:	7803      	ldrb	r3, [r0, #0]
 801272e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012732:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012736:	e76c      	b.n	8012612 <_printf_i+0xf6>
 8012738:	08014ab1 	.word	0x08014ab1
 801273c:	08014ac2 	.word	0x08014ac2

08012740 <_sbrk_r>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4c06      	ldr	r4, [pc, #24]	; (801275c <_sbrk_r+0x1c>)
 8012744:	2300      	movs	r3, #0
 8012746:	4605      	mov	r5, r0
 8012748:	4608      	mov	r0, r1
 801274a:	6023      	str	r3, [r4, #0]
 801274c:	f7ff f944 	bl	80119d8 <_sbrk>
 8012750:	1c43      	adds	r3, r0, #1
 8012752:	d102      	bne.n	801275a <_sbrk_r+0x1a>
 8012754:	6823      	ldr	r3, [r4, #0]
 8012756:	b103      	cbz	r3, 801275a <_sbrk_r+0x1a>
 8012758:	602b      	str	r3, [r5, #0]
 801275a:	bd38      	pop	{r3, r4, r5, pc}
 801275c:	24005714 	.word	0x24005714

08012760 <__sread>:
 8012760:	b510      	push	{r4, lr}
 8012762:	460c      	mov	r4, r1
 8012764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012768:	f000 fa48 	bl	8012bfc <_read_r>
 801276c:	2800      	cmp	r0, #0
 801276e:	bfab      	itete	ge
 8012770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012772:	89a3      	ldrhlt	r3, [r4, #12]
 8012774:	181b      	addge	r3, r3, r0
 8012776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801277a:	bfac      	ite	ge
 801277c:	6563      	strge	r3, [r4, #84]	; 0x54
 801277e:	81a3      	strhlt	r3, [r4, #12]
 8012780:	bd10      	pop	{r4, pc}

08012782 <__swrite>:
 8012782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012786:	461f      	mov	r7, r3
 8012788:	898b      	ldrh	r3, [r1, #12]
 801278a:	05db      	lsls	r3, r3, #23
 801278c:	4605      	mov	r5, r0
 801278e:	460c      	mov	r4, r1
 8012790:	4616      	mov	r6, r2
 8012792:	d505      	bpl.n	80127a0 <__swrite+0x1e>
 8012794:	2302      	movs	r3, #2
 8012796:	2200      	movs	r2, #0
 8012798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801279c:	f000 f9b6 	bl	8012b0c <_lseek_r>
 80127a0:	89a3      	ldrh	r3, [r4, #12]
 80127a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127aa:	81a3      	strh	r3, [r4, #12]
 80127ac:	4632      	mov	r2, r6
 80127ae:	463b      	mov	r3, r7
 80127b0:	4628      	mov	r0, r5
 80127b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127b6:	f000 b869 	b.w	801288c <_write_r>

080127ba <__sseek>:
 80127ba:	b510      	push	{r4, lr}
 80127bc:	460c      	mov	r4, r1
 80127be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127c2:	f000 f9a3 	bl	8012b0c <_lseek_r>
 80127c6:	1c43      	adds	r3, r0, #1
 80127c8:	89a3      	ldrh	r3, [r4, #12]
 80127ca:	bf15      	itete	ne
 80127cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80127ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80127d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80127d6:	81a3      	strheq	r3, [r4, #12]
 80127d8:	bf18      	it	ne
 80127da:	81a3      	strhne	r3, [r4, #12]
 80127dc:	bd10      	pop	{r4, pc}

080127de <__sclose>:
 80127de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127e2:	f000 b8d3 	b.w	801298c <_close_r>
	...

080127e8 <__swbuf_r>:
 80127e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ea:	460e      	mov	r6, r1
 80127ec:	4614      	mov	r4, r2
 80127ee:	4605      	mov	r5, r0
 80127f0:	b118      	cbz	r0, 80127fa <__swbuf_r+0x12>
 80127f2:	6983      	ldr	r3, [r0, #24]
 80127f4:	b90b      	cbnz	r3, 80127fa <__swbuf_r+0x12>
 80127f6:	f7ff fba9 	bl	8011f4c <__sinit>
 80127fa:	4b21      	ldr	r3, [pc, #132]	; (8012880 <__swbuf_r+0x98>)
 80127fc:	429c      	cmp	r4, r3
 80127fe:	d12a      	bne.n	8012856 <__swbuf_r+0x6e>
 8012800:	686c      	ldr	r4, [r5, #4]
 8012802:	69a3      	ldr	r3, [r4, #24]
 8012804:	60a3      	str	r3, [r4, #8]
 8012806:	89a3      	ldrh	r3, [r4, #12]
 8012808:	071a      	lsls	r2, r3, #28
 801280a:	d52e      	bpl.n	801286a <__swbuf_r+0x82>
 801280c:	6923      	ldr	r3, [r4, #16]
 801280e:	b363      	cbz	r3, 801286a <__swbuf_r+0x82>
 8012810:	6923      	ldr	r3, [r4, #16]
 8012812:	6820      	ldr	r0, [r4, #0]
 8012814:	1ac0      	subs	r0, r0, r3
 8012816:	6963      	ldr	r3, [r4, #20]
 8012818:	b2f6      	uxtb	r6, r6
 801281a:	4283      	cmp	r3, r0
 801281c:	4637      	mov	r7, r6
 801281e:	dc04      	bgt.n	801282a <__swbuf_r+0x42>
 8012820:	4621      	mov	r1, r4
 8012822:	4628      	mov	r0, r5
 8012824:	f000 f948 	bl	8012ab8 <_fflush_r>
 8012828:	bb28      	cbnz	r0, 8012876 <__swbuf_r+0x8e>
 801282a:	68a3      	ldr	r3, [r4, #8]
 801282c:	3b01      	subs	r3, #1
 801282e:	60a3      	str	r3, [r4, #8]
 8012830:	6823      	ldr	r3, [r4, #0]
 8012832:	1c5a      	adds	r2, r3, #1
 8012834:	6022      	str	r2, [r4, #0]
 8012836:	701e      	strb	r6, [r3, #0]
 8012838:	6963      	ldr	r3, [r4, #20]
 801283a:	3001      	adds	r0, #1
 801283c:	4283      	cmp	r3, r0
 801283e:	d004      	beq.n	801284a <__swbuf_r+0x62>
 8012840:	89a3      	ldrh	r3, [r4, #12]
 8012842:	07db      	lsls	r3, r3, #31
 8012844:	d519      	bpl.n	801287a <__swbuf_r+0x92>
 8012846:	2e0a      	cmp	r6, #10
 8012848:	d117      	bne.n	801287a <__swbuf_r+0x92>
 801284a:	4621      	mov	r1, r4
 801284c:	4628      	mov	r0, r5
 801284e:	f000 f933 	bl	8012ab8 <_fflush_r>
 8012852:	b190      	cbz	r0, 801287a <__swbuf_r+0x92>
 8012854:	e00f      	b.n	8012876 <__swbuf_r+0x8e>
 8012856:	4b0b      	ldr	r3, [pc, #44]	; (8012884 <__swbuf_r+0x9c>)
 8012858:	429c      	cmp	r4, r3
 801285a:	d101      	bne.n	8012860 <__swbuf_r+0x78>
 801285c:	68ac      	ldr	r4, [r5, #8]
 801285e:	e7d0      	b.n	8012802 <__swbuf_r+0x1a>
 8012860:	4b09      	ldr	r3, [pc, #36]	; (8012888 <__swbuf_r+0xa0>)
 8012862:	429c      	cmp	r4, r3
 8012864:	bf08      	it	eq
 8012866:	68ec      	ldreq	r4, [r5, #12]
 8012868:	e7cb      	b.n	8012802 <__swbuf_r+0x1a>
 801286a:	4621      	mov	r1, r4
 801286c:	4628      	mov	r0, r5
 801286e:	f000 f81f 	bl	80128b0 <__swsetup_r>
 8012872:	2800      	cmp	r0, #0
 8012874:	d0cc      	beq.n	8012810 <__swbuf_r+0x28>
 8012876:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801287a:	4638      	mov	r0, r7
 801287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801287e:	bf00      	nop
 8012880:	08014a60 	.word	0x08014a60
 8012884:	08014a80 	.word	0x08014a80
 8012888:	08014a40 	.word	0x08014a40

0801288c <_write_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4c07      	ldr	r4, [pc, #28]	; (80128ac <_write_r+0x20>)
 8012890:	4605      	mov	r5, r0
 8012892:	4608      	mov	r0, r1
 8012894:	4611      	mov	r1, r2
 8012896:	2200      	movs	r2, #0
 8012898:	6022      	str	r2, [r4, #0]
 801289a:	461a      	mov	r2, r3
 801289c:	f7ff f84b 	bl	8011936 <_write>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d102      	bne.n	80128aa <_write_r+0x1e>
 80128a4:	6823      	ldr	r3, [r4, #0]
 80128a6:	b103      	cbz	r3, 80128aa <_write_r+0x1e>
 80128a8:	602b      	str	r3, [r5, #0]
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	24005714 	.word	0x24005714

080128b0 <__swsetup_r>:
 80128b0:	4b32      	ldr	r3, [pc, #200]	; (801297c <__swsetup_r+0xcc>)
 80128b2:	b570      	push	{r4, r5, r6, lr}
 80128b4:	681d      	ldr	r5, [r3, #0]
 80128b6:	4606      	mov	r6, r0
 80128b8:	460c      	mov	r4, r1
 80128ba:	b125      	cbz	r5, 80128c6 <__swsetup_r+0x16>
 80128bc:	69ab      	ldr	r3, [r5, #24]
 80128be:	b913      	cbnz	r3, 80128c6 <__swsetup_r+0x16>
 80128c0:	4628      	mov	r0, r5
 80128c2:	f7ff fb43 	bl	8011f4c <__sinit>
 80128c6:	4b2e      	ldr	r3, [pc, #184]	; (8012980 <__swsetup_r+0xd0>)
 80128c8:	429c      	cmp	r4, r3
 80128ca:	d10f      	bne.n	80128ec <__swsetup_r+0x3c>
 80128cc:	686c      	ldr	r4, [r5, #4]
 80128ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	0715      	lsls	r5, r2, #28
 80128d6:	d42c      	bmi.n	8012932 <__swsetup_r+0x82>
 80128d8:	06d0      	lsls	r0, r2, #27
 80128da:	d411      	bmi.n	8012900 <__swsetup_r+0x50>
 80128dc:	2209      	movs	r2, #9
 80128de:	6032      	str	r2, [r6, #0]
 80128e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128e4:	81a3      	strh	r3, [r4, #12]
 80128e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128ea:	e03e      	b.n	801296a <__swsetup_r+0xba>
 80128ec:	4b25      	ldr	r3, [pc, #148]	; (8012984 <__swsetup_r+0xd4>)
 80128ee:	429c      	cmp	r4, r3
 80128f0:	d101      	bne.n	80128f6 <__swsetup_r+0x46>
 80128f2:	68ac      	ldr	r4, [r5, #8]
 80128f4:	e7eb      	b.n	80128ce <__swsetup_r+0x1e>
 80128f6:	4b24      	ldr	r3, [pc, #144]	; (8012988 <__swsetup_r+0xd8>)
 80128f8:	429c      	cmp	r4, r3
 80128fa:	bf08      	it	eq
 80128fc:	68ec      	ldreq	r4, [r5, #12]
 80128fe:	e7e6      	b.n	80128ce <__swsetup_r+0x1e>
 8012900:	0751      	lsls	r1, r2, #29
 8012902:	d512      	bpl.n	801292a <__swsetup_r+0x7a>
 8012904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012906:	b141      	cbz	r1, 801291a <__swsetup_r+0x6a>
 8012908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801290c:	4299      	cmp	r1, r3
 801290e:	d002      	beq.n	8012916 <__swsetup_r+0x66>
 8012910:	4630      	mov	r0, r6
 8012912:	f7ff fba5 	bl	8012060 <_free_r>
 8012916:	2300      	movs	r3, #0
 8012918:	6363      	str	r3, [r4, #52]	; 0x34
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012920:	81a3      	strh	r3, [r4, #12]
 8012922:	2300      	movs	r3, #0
 8012924:	6063      	str	r3, [r4, #4]
 8012926:	6923      	ldr	r3, [r4, #16]
 8012928:	6023      	str	r3, [r4, #0]
 801292a:	89a3      	ldrh	r3, [r4, #12]
 801292c:	f043 0308 	orr.w	r3, r3, #8
 8012930:	81a3      	strh	r3, [r4, #12]
 8012932:	6923      	ldr	r3, [r4, #16]
 8012934:	b94b      	cbnz	r3, 801294a <__swsetup_r+0x9a>
 8012936:	89a3      	ldrh	r3, [r4, #12]
 8012938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801293c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012940:	d003      	beq.n	801294a <__swsetup_r+0x9a>
 8012942:	4621      	mov	r1, r4
 8012944:	4630      	mov	r0, r6
 8012946:	f000 f917 	bl	8012b78 <__smakebuf_r>
 801294a:	89a2      	ldrh	r2, [r4, #12]
 801294c:	f012 0301 	ands.w	r3, r2, #1
 8012950:	d00c      	beq.n	801296c <__swsetup_r+0xbc>
 8012952:	2300      	movs	r3, #0
 8012954:	60a3      	str	r3, [r4, #8]
 8012956:	6963      	ldr	r3, [r4, #20]
 8012958:	425b      	negs	r3, r3
 801295a:	61a3      	str	r3, [r4, #24]
 801295c:	6923      	ldr	r3, [r4, #16]
 801295e:	b953      	cbnz	r3, 8012976 <__swsetup_r+0xc6>
 8012960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012964:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012968:	d1ba      	bne.n	80128e0 <__swsetup_r+0x30>
 801296a:	bd70      	pop	{r4, r5, r6, pc}
 801296c:	0792      	lsls	r2, r2, #30
 801296e:	bf58      	it	pl
 8012970:	6963      	ldrpl	r3, [r4, #20]
 8012972:	60a3      	str	r3, [r4, #8]
 8012974:	e7f2      	b.n	801295c <__swsetup_r+0xac>
 8012976:	2000      	movs	r0, #0
 8012978:	e7f7      	b.n	801296a <__swsetup_r+0xba>
 801297a:	bf00      	nop
 801297c:	2400002c 	.word	0x2400002c
 8012980:	08014a60 	.word	0x08014a60
 8012984:	08014a80 	.word	0x08014a80
 8012988:	08014a40 	.word	0x08014a40

0801298c <_close_r>:
 801298c:	b538      	push	{r3, r4, r5, lr}
 801298e:	4c06      	ldr	r4, [pc, #24]	; (80129a8 <_close_r+0x1c>)
 8012990:	2300      	movs	r3, #0
 8012992:	4605      	mov	r5, r0
 8012994:	4608      	mov	r0, r1
 8012996:	6023      	str	r3, [r4, #0]
 8012998:	f7fe ffe9 	bl	801196e <_close>
 801299c:	1c43      	adds	r3, r0, #1
 801299e:	d102      	bne.n	80129a6 <_close_r+0x1a>
 80129a0:	6823      	ldr	r3, [r4, #0]
 80129a2:	b103      	cbz	r3, 80129a6 <_close_r+0x1a>
 80129a4:	602b      	str	r3, [r5, #0]
 80129a6:	bd38      	pop	{r3, r4, r5, pc}
 80129a8:	24005714 	.word	0x24005714

080129ac <__sflush_r>:
 80129ac:	898a      	ldrh	r2, [r1, #12]
 80129ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b2:	4605      	mov	r5, r0
 80129b4:	0710      	lsls	r0, r2, #28
 80129b6:	460c      	mov	r4, r1
 80129b8:	d458      	bmi.n	8012a6c <__sflush_r+0xc0>
 80129ba:	684b      	ldr	r3, [r1, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dc05      	bgt.n	80129cc <__sflush_r+0x20>
 80129c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	dc02      	bgt.n	80129cc <__sflush_r+0x20>
 80129c6:	2000      	movs	r0, #0
 80129c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129ce:	2e00      	cmp	r6, #0
 80129d0:	d0f9      	beq.n	80129c6 <__sflush_r+0x1a>
 80129d2:	2300      	movs	r3, #0
 80129d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80129d8:	682f      	ldr	r7, [r5, #0]
 80129da:	6a21      	ldr	r1, [r4, #32]
 80129dc:	602b      	str	r3, [r5, #0]
 80129de:	d032      	beq.n	8012a46 <__sflush_r+0x9a>
 80129e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80129e2:	89a3      	ldrh	r3, [r4, #12]
 80129e4:	075a      	lsls	r2, r3, #29
 80129e6:	d505      	bpl.n	80129f4 <__sflush_r+0x48>
 80129e8:	6863      	ldr	r3, [r4, #4]
 80129ea:	1ac0      	subs	r0, r0, r3
 80129ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129ee:	b10b      	cbz	r3, 80129f4 <__sflush_r+0x48>
 80129f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80129f2:	1ac0      	subs	r0, r0, r3
 80129f4:	2300      	movs	r3, #0
 80129f6:	4602      	mov	r2, r0
 80129f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129fa:	6a21      	ldr	r1, [r4, #32]
 80129fc:	4628      	mov	r0, r5
 80129fe:	47b0      	blx	r6
 8012a00:	1c43      	adds	r3, r0, #1
 8012a02:	89a3      	ldrh	r3, [r4, #12]
 8012a04:	d106      	bne.n	8012a14 <__sflush_r+0x68>
 8012a06:	6829      	ldr	r1, [r5, #0]
 8012a08:	291d      	cmp	r1, #29
 8012a0a:	d848      	bhi.n	8012a9e <__sflush_r+0xf2>
 8012a0c:	4a29      	ldr	r2, [pc, #164]	; (8012ab4 <__sflush_r+0x108>)
 8012a0e:	40ca      	lsrs	r2, r1
 8012a10:	07d6      	lsls	r6, r2, #31
 8012a12:	d544      	bpl.n	8012a9e <__sflush_r+0xf2>
 8012a14:	2200      	movs	r2, #0
 8012a16:	6062      	str	r2, [r4, #4]
 8012a18:	04d9      	lsls	r1, r3, #19
 8012a1a:	6922      	ldr	r2, [r4, #16]
 8012a1c:	6022      	str	r2, [r4, #0]
 8012a1e:	d504      	bpl.n	8012a2a <__sflush_r+0x7e>
 8012a20:	1c42      	adds	r2, r0, #1
 8012a22:	d101      	bne.n	8012a28 <__sflush_r+0x7c>
 8012a24:	682b      	ldr	r3, [r5, #0]
 8012a26:	b903      	cbnz	r3, 8012a2a <__sflush_r+0x7e>
 8012a28:	6560      	str	r0, [r4, #84]	; 0x54
 8012a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a2c:	602f      	str	r7, [r5, #0]
 8012a2e:	2900      	cmp	r1, #0
 8012a30:	d0c9      	beq.n	80129c6 <__sflush_r+0x1a>
 8012a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a36:	4299      	cmp	r1, r3
 8012a38:	d002      	beq.n	8012a40 <__sflush_r+0x94>
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	f7ff fb10 	bl	8012060 <_free_r>
 8012a40:	2000      	movs	r0, #0
 8012a42:	6360      	str	r0, [r4, #52]	; 0x34
 8012a44:	e7c0      	b.n	80129c8 <__sflush_r+0x1c>
 8012a46:	2301      	movs	r3, #1
 8012a48:	4628      	mov	r0, r5
 8012a4a:	47b0      	blx	r6
 8012a4c:	1c41      	adds	r1, r0, #1
 8012a4e:	d1c8      	bne.n	80129e2 <__sflush_r+0x36>
 8012a50:	682b      	ldr	r3, [r5, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d0c5      	beq.n	80129e2 <__sflush_r+0x36>
 8012a56:	2b1d      	cmp	r3, #29
 8012a58:	d001      	beq.n	8012a5e <__sflush_r+0xb2>
 8012a5a:	2b16      	cmp	r3, #22
 8012a5c:	d101      	bne.n	8012a62 <__sflush_r+0xb6>
 8012a5e:	602f      	str	r7, [r5, #0]
 8012a60:	e7b1      	b.n	80129c6 <__sflush_r+0x1a>
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a68:	81a3      	strh	r3, [r4, #12]
 8012a6a:	e7ad      	b.n	80129c8 <__sflush_r+0x1c>
 8012a6c:	690f      	ldr	r7, [r1, #16]
 8012a6e:	2f00      	cmp	r7, #0
 8012a70:	d0a9      	beq.n	80129c6 <__sflush_r+0x1a>
 8012a72:	0793      	lsls	r3, r2, #30
 8012a74:	680e      	ldr	r6, [r1, #0]
 8012a76:	bf08      	it	eq
 8012a78:	694b      	ldreq	r3, [r1, #20]
 8012a7a:	600f      	str	r7, [r1, #0]
 8012a7c:	bf18      	it	ne
 8012a7e:	2300      	movne	r3, #0
 8012a80:	eba6 0807 	sub.w	r8, r6, r7
 8012a84:	608b      	str	r3, [r1, #8]
 8012a86:	f1b8 0f00 	cmp.w	r8, #0
 8012a8a:	dd9c      	ble.n	80129c6 <__sflush_r+0x1a>
 8012a8c:	4643      	mov	r3, r8
 8012a8e:	463a      	mov	r2, r7
 8012a90:	6a21      	ldr	r1, [r4, #32]
 8012a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a94:	4628      	mov	r0, r5
 8012a96:	47b0      	blx	r6
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	dc06      	bgt.n	8012aaa <__sflush_r+0xfe>
 8012a9c:	89a3      	ldrh	r3, [r4, #12]
 8012a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aa2:	81a3      	strh	r3, [r4, #12]
 8012aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012aa8:	e78e      	b.n	80129c8 <__sflush_r+0x1c>
 8012aaa:	4407      	add	r7, r0
 8012aac:	eba8 0800 	sub.w	r8, r8, r0
 8012ab0:	e7e9      	b.n	8012a86 <__sflush_r+0xda>
 8012ab2:	bf00      	nop
 8012ab4:	20400001 	.word	0x20400001

08012ab8 <_fflush_r>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	690b      	ldr	r3, [r1, #16]
 8012abc:	4605      	mov	r5, r0
 8012abe:	460c      	mov	r4, r1
 8012ac0:	b1db      	cbz	r3, 8012afa <_fflush_r+0x42>
 8012ac2:	b118      	cbz	r0, 8012acc <_fflush_r+0x14>
 8012ac4:	6983      	ldr	r3, [r0, #24]
 8012ac6:	b90b      	cbnz	r3, 8012acc <_fflush_r+0x14>
 8012ac8:	f7ff fa40 	bl	8011f4c <__sinit>
 8012acc:	4b0c      	ldr	r3, [pc, #48]	; (8012b00 <_fflush_r+0x48>)
 8012ace:	429c      	cmp	r4, r3
 8012ad0:	d109      	bne.n	8012ae6 <_fflush_r+0x2e>
 8012ad2:	686c      	ldr	r4, [r5, #4]
 8012ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ad8:	b17b      	cbz	r3, 8012afa <_fflush_r+0x42>
 8012ada:	4621      	mov	r1, r4
 8012adc:	4628      	mov	r0, r5
 8012ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ae2:	f7ff bf63 	b.w	80129ac <__sflush_r>
 8012ae6:	4b07      	ldr	r3, [pc, #28]	; (8012b04 <_fflush_r+0x4c>)
 8012ae8:	429c      	cmp	r4, r3
 8012aea:	d101      	bne.n	8012af0 <_fflush_r+0x38>
 8012aec:	68ac      	ldr	r4, [r5, #8]
 8012aee:	e7f1      	b.n	8012ad4 <_fflush_r+0x1c>
 8012af0:	4b05      	ldr	r3, [pc, #20]	; (8012b08 <_fflush_r+0x50>)
 8012af2:	429c      	cmp	r4, r3
 8012af4:	bf08      	it	eq
 8012af6:	68ec      	ldreq	r4, [r5, #12]
 8012af8:	e7ec      	b.n	8012ad4 <_fflush_r+0x1c>
 8012afa:	2000      	movs	r0, #0
 8012afc:	bd38      	pop	{r3, r4, r5, pc}
 8012afe:	bf00      	nop
 8012b00:	08014a60 	.word	0x08014a60
 8012b04:	08014a80 	.word	0x08014a80
 8012b08:	08014a40 	.word	0x08014a40

08012b0c <_lseek_r>:
 8012b0c:	b538      	push	{r3, r4, r5, lr}
 8012b0e:	4c07      	ldr	r4, [pc, #28]	; (8012b2c <_lseek_r+0x20>)
 8012b10:	4605      	mov	r5, r0
 8012b12:	4608      	mov	r0, r1
 8012b14:	4611      	mov	r1, r2
 8012b16:	2200      	movs	r2, #0
 8012b18:	6022      	str	r2, [r4, #0]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	f7fe ff4e 	bl	80119bc <_lseek>
 8012b20:	1c43      	adds	r3, r0, #1
 8012b22:	d102      	bne.n	8012b2a <_lseek_r+0x1e>
 8012b24:	6823      	ldr	r3, [r4, #0]
 8012b26:	b103      	cbz	r3, 8012b2a <_lseek_r+0x1e>
 8012b28:	602b      	str	r3, [r5, #0]
 8012b2a:	bd38      	pop	{r3, r4, r5, pc}
 8012b2c:	24005714 	.word	0x24005714

08012b30 <__swhatbuf_r>:
 8012b30:	b570      	push	{r4, r5, r6, lr}
 8012b32:	460e      	mov	r6, r1
 8012b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b38:	2900      	cmp	r1, #0
 8012b3a:	b096      	sub	sp, #88	; 0x58
 8012b3c:	4614      	mov	r4, r2
 8012b3e:	461d      	mov	r5, r3
 8012b40:	da07      	bge.n	8012b52 <__swhatbuf_r+0x22>
 8012b42:	2300      	movs	r3, #0
 8012b44:	602b      	str	r3, [r5, #0]
 8012b46:	89b3      	ldrh	r3, [r6, #12]
 8012b48:	061a      	lsls	r2, r3, #24
 8012b4a:	d410      	bmi.n	8012b6e <__swhatbuf_r+0x3e>
 8012b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b50:	e00e      	b.n	8012b70 <__swhatbuf_r+0x40>
 8012b52:	466a      	mov	r2, sp
 8012b54:	f000 f864 	bl	8012c20 <_fstat_r>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	dbf2      	blt.n	8012b42 <__swhatbuf_r+0x12>
 8012b5c:	9a01      	ldr	r2, [sp, #4]
 8012b5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b66:	425a      	negs	r2, r3
 8012b68:	415a      	adcs	r2, r3
 8012b6a:	602a      	str	r2, [r5, #0]
 8012b6c:	e7ee      	b.n	8012b4c <__swhatbuf_r+0x1c>
 8012b6e:	2340      	movs	r3, #64	; 0x40
 8012b70:	2000      	movs	r0, #0
 8012b72:	6023      	str	r3, [r4, #0]
 8012b74:	b016      	add	sp, #88	; 0x58
 8012b76:	bd70      	pop	{r4, r5, r6, pc}

08012b78 <__smakebuf_r>:
 8012b78:	898b      	ldrh	r3, [r1, #12]
 8012b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b7c:	079d      	lsls	r5, r3, #30
 8012b7e:	4606      	mov	r6, r0
 8012b80:	460c      	mov	r4, r1
 8012b82:	d507      	bpl.n	8012b94 <__smakebuf_r+0x1c>
 8012b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b88:	6023      	str	r3, [r4, #0]
 8012b8a:	6123      	str	r3, [r4, #16]
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	6163      	str	r3, [r4, #20]
 8012b90:	b002      	add	sp, #8
 8012b92:	bd70      	pop	{r4, r5, r6, pc}
 8012b94:	ab01      	add	r3, sp, #4
 8012b96:	466a      	mov	r2, sp
 8012b98:	f7ff ffca 	bl	8012b30 <__swhatbuf_r>
 8012b9c:	9900      	ldr	r1, [sp, #0]
 8012b9e:	4605      	mov	r5, r0
 8012ba0:	4630      	mov	r0, r6
 8012ba2:	f7ff faab 	bl	80120fc <_malloc_r>
 8012ba6:	b948      	cbnz	r0, 8012bbc <__smakebuf_r+0x44>
 8012ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bac:	059a      	lsls	r2, r3, #22
 8012bae:	d4ef      	bmi.n	8012b90 <__smakebuf_r+0x18>
 8012bb0:	f023 0303 	bic.w	r3, r3, #3
 8012bb4:	f043 0302 	orr.w	r3, r3, #2
 8012bb8:	81a3      	strh	r3, [r4, #12]
 8012bba:	e7e3      	b.n	8012b84 <__smakebuf_r+0xc>
 8012bbc:	4b0d      	ldr	r3, [pc, #52]	; (8012bf4 <__smakebuf_r+0x7c>)
 8012bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8012bc0:	89a3      	ldrh	r3, [r4, #12]
 8012bc2:	6020      	str	r0, [r4, #0]
 8012bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bc8:	81a3      	strh	r3, [r4, #12]
 8012bca:	9b00      	ldr	r3, [sp, #0]
 8012bcc:	6163      	str	r3, [r4, #20]
 8012bce:	9b01      	ldr	r3, [sp, #4]
 8012bd0:	6120      	str	r0, [r4, #16]
 8012bd2:	b15b      	cbz	r3, 8012bec <__smakebuf_r+0x74>
 8012bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bd8:	4630      	mov	r0, r6
 8012bda:	f000 f833 	bl	8012c44 <_isatty_r>
 8012bde:	b128      	cbz	r0, 8012bec <__smakebuf_r+0x74>
 8012be0:	89a3      	ldrh	r3, [r4, #12]
 8012be2:	f023 0303 	bic.w	r3, r3, #3
 8012be6:	f043 0301 	orr.w	r3, r3, #1
 8012bea:	81a3      	strh	r3, [r4, #12]
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	431d      	orrs	r5, r3
 8012bf0:	81a5      	strh	r5, [r4, #12]
 8012bf2:	e7cd      	b.n	8012b90 <__smakebuf_r+0x18>
 8012bf4:	08011f15 	.word	0x08011f15

08012bf8 <__malloc_lock>:
 8012bf8:	4770      	bx	lr

08012bfa <__malloc_unlock>:
 8012bfa:	4770      	bx	lr

08012bfc <_read_r>:
 8012bfc:	b538      	push	{r3, r4, r5, lr}
 8012bfe:	4c07      	ldr	r4, [pc, #28]	; (8012c1c <_read_r+0x20>)
 8012c00:	4605      	mov	r5, r0
 8012c02:	4608      	mov	r0, r1
 8012c04:	4611      	mov	r1, r2
 8012c06:	2200      	movs	r2, #0
 8012c08:	6022      	str	r2, [r4, #0]
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	f7fe fe76 	bl	80118fc <_read>
 8012c10:	1c43      	adds	r3, r0, #1
 8012c12:	d102      	bne.n	8012c1a <_read_r+0x1e>
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	b103      	cbz	r3, 8012c1a <_read_r+0x1e>
 8012c18:	602b      	str	r3, [r5, #0]
 8012c1a:	bd38      	pop	{r3, r4, r5, pc}
 8012c1c:	24005714 	.word	0x24005714

08012c20 <_fstat_r>:
 8012c20:	b538      	push	{r3, r4, r5, lr}
 8012c22:	4c07      	ldr	r4, [pc, #28]	; (8012c40 <_fstat_r+0x20>)
 8012c24:	2300      	movs	r3, #0
 8012c26:	4605      	mov	r5, r0
 8012c28:	4608      	mov	r0, r1
 8012c2a:	4611      	mov	r1, r2
 8012c2c:	6023      	str	r3, [r4, #0]
 8012c2e:	f7fe feaa 	bl	8011986 <_fstat>
 8012c32:	1c43      	adds	r3, r0, #1
 8012c34:	d102      	bne.n	8012c3c <_fstat_r+0x1c>
 8012c36:	6823      	ldr	r3, [r4, #0]
 8012c38:	b103      	cbz	r3, 8012c3c <_fstat_r+0x1c>
 8012c3a:	602b      	str	r3, [r5, #0]
 8012c3c:	bd38      	pop	{r3, r4, r5, pc}
 8012c3e:	bf00      	nop
 8012c40:	24005714 	.word	0x24005714

08012c44 <_isatty_r>:
 8012c44:	b538      	push	{r3, r4, r5, lr}
 8012c46:	4c06      	ldr	r4, [pc, #24]	; (8012c60 <_isatty_r+0x1c>)
 8012c48:	2300      	movs	r3, #0
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	4608      	mov	r0, r1
 8012c4e:	6023      	str	r3, [r4, #0]
 8012c50:	f7fe fea9 	bl	80119a6 <_isatty>
 8012c54:	1c43      	adds	r3, r0, #1
 8012c56:	d102      	bne.n	8012c5e <_isatty_r+0x1a>
 8012c58:	6823      	ldr	r3, [r4, #0]
 8012c5a:	b103      	cbz	r3, 8012c5e <_isatty_r+0x1a>
 8012c5c:	602b      	str	r3, [r5, #0]
 8012c5e:	bd38      	pop	{r3, r4, r5, pc}
 8012c60:	24005714 	.word	0x24005714

08012c64 <_init>:
 8012c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c66:	bf00      	nop
 8012c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c6a:	bc08      	pop	{r3}
 8012c6c:	469e      	mov	lr, r3
 8012c6e:	4770      	bx	lr

08012c70 <_fini>:
 8012c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c72:	bf00      	nop
 8012c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c76:	bc08      	pop	{r3}
 8012c78:	469e      	mov	lr, r3
 8012c7a:	4770      	bx	lr
