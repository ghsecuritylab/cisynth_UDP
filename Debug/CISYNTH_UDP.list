
CISYNTH_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010498  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001440  08010738  08010738  00020738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b78  08011b78  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08011b78  08011b78  00021b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b80  08011b80  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b80  08011b80  00021b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b84  08011b84  00021b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08011b88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038bc  24000098  08011c20  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24003954  08011c20  00033954  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  08011c20  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036fe0  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00006079  00000000  00000000  000670a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014a0  00000000  00000000  0006d120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001238  00000000  00000000  0006e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00040d14  00000000  00000000  0006f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002194a  00000000  00000000  000b050c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0016a53a  00000000  00000000  000d1e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0023c390  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057fc  00000000  00000000  0023c40c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010720 	.word	0x08010720

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08010720 	.word	0x08010720

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00b      	beq.n	80006b8 <LAN8742_RegisterBusIO+0x28>
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d007      	beq.n	80006b8 <LAN8742_RegisterBusIO+0x28>
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <LAN8742_RegisterBusIO+0x28>
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006bc:	e014      	b.n	80006e8 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	691a      	ldr	r2, [r3, #16]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d17b      	bne.n	800080c <LAN8742_Init+0x118>
   {
     if(pObj->IO.Init != 0)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2220      	movs	r2, #32
 8000726:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	e01c      	b.n	8000768 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2112      	movs	r1, #18
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	4798      	blx	r3
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	da03      	bge.n	800074a <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000742:	f06f 0304 	mvn.w	r3, #4
 8000746:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000748:	e00b      	b.n	8000762 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	429a      	cmp	r2, r3
 8000754:	d105      	bne.n	8000762 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
         break;
 8000760:	e005      	b.n	800076e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b1f      	cmp	r3, #31
 800076c:	d9df      	bls.n	800072e <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b1f      	cmp	r3, #31
 8000774:	d902      	bls.n	800077c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000776:	f06f 0302 	mvn.w	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d144      	bne.n	800080c <LAN8742_Init+0x118>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	6810      	ldr	r0, [r2, #0]
 800078a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800078e:	2100      	movs	r1, #0
 8000790:	4798      	blx	r3
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	db36      	blt.n	8000806 <LAN8742_Init+0x112>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6810      	ldr	r0, [r2, #0]
 80007a0:	f107 0208 	add.w	r2, r7, #8
 80007a4:	2100      	movs	r1, #0
 80007a6:	4798      	blx	r3
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db27      	blt.n	80007fe <LAN8742_Init+0x10a>
         { 
           tickstart = pObj->IO.GetTick();
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4798      	blx	r3
 80007b4:	4603      	mov	r3, r0
 80007b6:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80007b8:	e01b      	b.n	80007f2 <LAN8742_Init+0xfe>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4798      	blx	r3
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007cc:	d80e      	bhi.n	80007ec <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6810      	ldr	r0, [r2, #0]
 80007d6:	f107 0208 	add.w	r2, r7, #8
 80007da:	2100      	movs	r1, #0
 80007dc:	4798      	blx	r3
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da06      	bge.n	80007f2 <LAN8742_Init+0xfe>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80007e4:	f06f 0304 	mvn.w	r3, #4
 80007e8:	613b      	str	r3, [r7, #16]
                 break;
 80007ea:	e00f      	b.n	800080c <LAN8742_Init+0x118>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80007ec:	f06f 0301 	mvn.w	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1de      	bne.n	80007ba <LAN8742_Init+0xc6>
 80007fc:	e006      	b.n	800080c <LAN8742_Init+0x118>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80007fe:	f06f 0304 	mvn.w	r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	e002      	b.n	800080c <LAN8742_Init+0x118>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000806:	f06f 0303 	mvn.w	r3, #3
 800080a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d112      	bne.n	8000838 <LAN8742_Init+0x144>
   {
     tickstart =  pObj->IO.GetTick();
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4798      	blx	r3
 8000818:	4603      	mov	r3, r0
 800081a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800081c:	bf00      	nop
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4798      	blx	r3
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000830:	d9f5      	bls.n	800081e <LAN8742_Init+0x12a>
     {
     }
     pObj->Is_Initialized = 1;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000838:	693b      	ldr	r3, [r7, #16]
 }
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	6810      	ldr	r0, [r2, #0]
 8000856:	f107 020c 	add.w	r2, r7, #12
 800085a:	2101      	movs	r1, #1
 800085c:	4798      	blx	r3
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	da02      	bge.n	800086a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000864:	f06f 0304 	mvn.w	r3, #4
 8000868:	e06e      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	6810      	ldr	r0, [r2, #0]
 8000872:	f107 020c 	add.w	r2, r7, #12
 8000876:	2101      	movs	r1, #1
 8000878:	4798      	blx	r3
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	da02      	bge.n	8000886 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000880:	f06f 0304 	mvn.w	r3, #4
 8000884:	e060      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000890:	2301      	movs	r3, #1
 8000892:	e059      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6810      	ldr	r0, [r2, #0]
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	2100      	movs	r1, #0
 80008a2:	4798      	blx	r3
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da02      	bge.n	80008b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80008aa:	f06f 0304 	mvn.w	r3, #4
 80008ae:	e04b      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d11b      	bne.n	80008f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d006      	beq.n	80008d2 <LAN8742_GetLinkState+0x90>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80008ce:	2302      	movs	r3, #2
 80008d0:	e03a      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80008dc:	2303      	movs	r3, #3
 80008de:	e033      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80008ea:	2304      	movs	r3, #4
 80008ec:	e02c      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80008ee:	2305      	movs	r3, #5
 80008f0:	e02a      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6810      	ldr	r0, [r2, #0]
 80008fa:	f107 020c 	add.w	r2, r7, #12
 80008fe:	211f      	movs	r1, #31
 8000900:	4798      	blx	r3
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	da02      	bge.n	800090e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000908:	f06f 0304 	mvn.w	r3, #4
 800090c:	e01c      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000918:	2306      	movs	r3, #6
 800091a:	e015      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 031c 	and.w	r3, r3, #28
 8000922:	2b18      	cmp	r3, #24
 8000924:	d101      	bne.n	800092a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000926:	2302      	movs	r3, #2
 8000928:	e00e      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f003 031c 	and.w	r3, r3, #28
 8000930:	2b08      	cmp	r3, #8
 8000932:	d101      	bne.n	8000938 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000934:	2303      	movs	r3, #3
 8000936:	e007      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 031c 	and.w	r3, r3, #28
 800093e:	2b14      	cmp	r3, #20
 8000940:	d101      	bne.n	8000946 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000942:	2304      	movs	r3, #4
 8000944:	e000      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000946:	2305      	movs	r3, #5
    }				
  }
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f9a7 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800095a:	f003 fd71 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 800095e:	4601      	mov	r1, r0
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <HAL_Init+0x60>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <HAL_Init+0x64>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	fa21 f303 	lsr.w	r3, r1, r3
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_Init+0x68>)
 8000978:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_Init+0x68>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_Init+0x60>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	490b      	ldr	r1, [pc, #44]	; (80009b4 <HAL_Init+0x64>)
 8000988:	5ccb      	ldrb	r3, [r1, r3]
 800098a:	f003 031f 	and.w	r3, r3, #31
 800098e:	fa22 f303 	lsr.w	r3, r2, r3
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_Init+0x6c>)
 8000994:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f812 	bl	80009c0 <HAL_InitTick>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e002      	b.n	80009ac <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009a6:	f00e f9d1 	bl	800ed4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58024400 	.word	0x58024400
 80009b4:	08011ad0 	.word	0x08011ad0
 80009b8:	2400002c 	.word	0x2400002c
 80009bc:	24000030 	.word	0x24000030

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_InitTick+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e021      	b.n	8000a18 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_InitTick+0x64>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_InitTick+0x60>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f9be 	bl	8000d6c <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 f96e 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x68>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24000004 	.word	0x24000004
 8000a24:	2400002c 	.word	0x2400002c
 8000a28:	24000000 	.word	0x24000000

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	24000004 	.word	0x24000004
 8000a50:	240001f4 	.word	0x240001f4

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	240001f4 	.word	0x240001f4

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff ffee 	bl	8000a54 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_Delay+0x40>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffde 	bl	8000a54 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	24000004 	.word	0x24000004

08000ab0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetREVID+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	0c1b      	lsrs	r3, r3, #16
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	5c001000 	.word	0x5c001000

08000ac8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000adc:	d004      	beq.n	8000ae8 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8000ade:	f240 2153 	movw	r1, #595	; 0x253
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 8000ae4:	f00e f927 	bl	800ed36 <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000af0:	4904      	ldr	r1, [pc, #16]	; (8000b04 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	604b      	str	r3, [r1, #4]
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	08010738 	.word	0x08010738
 8000b04:	58000400 	.word	0x58000400

08000b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <__NVIC_SetPriorityGrouping+0x40>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x40>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00
 8000b4c:	05fa0000 	.word	0x05fa0000

08000b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <__NVIC_GetPriorityGrouping+0x18>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	f003 0307 	and.w	r3, r3, #7
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db0b      	blt.n	8000b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <__NVIC_EnableIRQ+0x38>)
 8000b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b07      	cmp	r3, #7
 8000cb4:	d00f      	beq.n	8000cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d00c      	beq.n	8000cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d009      	beq.n	8000cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d006      	beq.n	8000cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d003      	beq.n	8000cd6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cce:	2192      	movs	r1, #146	; 0x92
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000cd2:	f00e f830 	bl	800ed36 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff16 	bl	8000b08 <__NVIC_SetPriorityGrouping>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	0801076c 	.word	0x0801076c

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d903      	bls.n	8000d04 <HAL_NVIC_SetPriority+0x1c>
 8000cfc:	21aa      	movs	r1, #170	; 0xaa
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_NVIC_SetPriority+0x50>)
 8000d00:	f00e f819 	bl	800ed36 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	d903      	bls.n	8000d12 <HAL_NVIC_SetPriority+0x2a>
 8000d0a:	21ab      	movs	r1, #171	; 0xab
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <HAL_NVIC_SetPriority+0x50>)
 8000d0e:	f00e f812 	bl	800ed36 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d12:	f7ff ff1d 	bl	8000b50 <__NVIC_GetPriorityGrouping>
 8000d16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f7ff ff6d 	bl	8000bfc <NVIC_EncodePriority>
 8000d22:	4602      	mov	r2, r0
 8000d24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff3c 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	0801076c 	.word	0x0801076c

08000d3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da03      	bge.n	8000d56 <HAL_NVIC_EnableIRQ+0x1a>
 8000d4e:	21be      	movs	r1, #190	; 0xbe
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d52:	f00d fff0 	bl	800ed36 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff06 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	0801076c 	.word	0x0801076c

08000d6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff75 	bl	8000c64 <SysTick_Config>
 8000d7a:	4603      	mov	r3, r0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d88:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MPU_Disable+0x24>)
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <HAL_MPU_Disable+0x24>)
 8000d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d96:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_MPU_Disable+0x28>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	e000ed90 	.word	0xe000ed90

08000db0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_MPU_Enable+0x34>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_MPU_Enable+0x38>)
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MPU_Enable+0x38>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed90 	.word	0xe000ed90
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d040      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d03c      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	785b      	ldrb	r3, [r3, #1]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d038      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	785b      	ldrb	r3, [r3, #1]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d034      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d030      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d02c      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	2b06      	cmp	r3, #6
 8000e2a:	d028      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	2b07      	cmp	r3, #7
 8000e32:	d024      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	785b      	ldrb	r3, [r3, #1]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d020      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	785b      	ldrb	r3, [r3, #1]
 8000e40:	2b09      	cmp	r3, #9
 8000e42:	d01c      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	d018      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	2b0b      	cmp	r3, #11
 8000e52:	d014      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	785b      	ldrb	r3, [r3, #1]
 8000e58:	2b0c      	cmp	r3, #12
 8000e5a:	d010      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	2b0d      	cmp	r3, #13
 8000e62:	d00c      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	785b      	ldrb	r3, [r3, #1]
 8000e68:	2b0e      	cmp	r3, #14
 8000e6a:	d008      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d004      	beq.n	8000e7e <HAL_MPU_ConfigRegion+0x92>
 8000e74:	f240 112d 	movw	r1, #301	; 0x12d
 8000e78:	4896      	ldr	r0, [pc, #600]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000e7a:	f00d ff5c 	bl	800ed36 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d008      	beq.n	8000e98 <HAL_MPU_ConfigRegion+0xac>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <HAL_MPU_ConfigRegion+0xac>
 8000e8e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8000e92:	4890      	ldr	r0, [pc, #576]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000e94:	f00d ff4f 	bl	800ed36 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	785a      	ldrb	r2, [r3, #1]
 8000e9c:	4b8e      	ldr	r3, [pc, #568]	; (80010d8 <HAL_MPU_ConfigRegion+0x2ec>)
 8000e9e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 810a 	beq.w	80010be <HAL_MPU_ConfigRegion+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7b1b      	ldrb	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <HAL_MPU_ConfigRegion+0xd8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7b1b      	ldrb	r3, [r3, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d004      	beq.n	8000ec4 <HAL_MPU_ConfigRegion+0xd8>
 8000eba:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000ebe:	4885      	ldr	r0, [pc, #532]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000ec0:	f00d ff39 	bl	800ed36 <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7adb      	ldrb	r3, [r3, #11]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d018      	beq.n	8000efe <HAL_MPU_ConfigRegion+0x112>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7adb      	ldrb	r3, [r3, #11]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d014      	beq.n	8000efe <HAL_MPU_ConfigRegion+0x112>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7adb      	ldrb	r3, [r3, #11]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d010      	beq.n	8000efe <HAL_MPU_ConfigRegion+0x112>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7adb      	ldrb	r3, [r3, #11]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d00c      	beq.n	8000efe <HAL_MPU_ConfigRegion+0x112>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7adb      	ldrb	r3, [r3, #11]
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d008      	beq.n	8000efe <HAL_MPU_ConfigRegion+0x112>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7adb      	ldrb	r3, [r3, #11]
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	d004      	beq.n	8000efe <HAL_MPU_ConfigRegion+0x112>
 8000ef4:	f240 1137 	movw	r1, #311	; 0x137
 8000ef8:	4876      	ldr	r0, [pc, #472]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000efa:	f00d ff1c 	bl	800ed36 <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7a9b      	ldrb	r3, [r3, #10]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00c      	beq.n	8000f20 <HAL_MPU_ConfigRegion+0x134>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7a9b      	ldrb	r3, [r3, #10]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d008      	beq.n	8000f20 <HAL_MPU_ConfigRegion+0x134>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7a9b      	ldrb	r3, [r3, #10]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d004      	beq.n	8000f20 <HAL_MPU_ConfigRegion+0x134>
 8000f16:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000f1a:	486e      	ldr	r0, [pc, #440]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f1c:	f00d ff0b 	bl	800ed36 <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7b5b      	ldrb	r3, [r3, #13]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d008      	beq.n	8000f3a <HAL_MPU_ConfigRegion+0x14e>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7b5b      	ldrb	r3, [r3, #13]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <HAL_MPU_ConfigRegion+0x14e>
 8000f30:	f240 1139 	movw	r1, #313	; 0x139
 8000f34:	4867      	ldr	r0, [pc, #412]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f36:	f00d fefe 	bl	800ed36 <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7b9b      	ldrb	r3, [r3, #14]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d008      	beq.n	8000f54 <HAL_MPU_ConfigRegion+0x168>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7b9b      	ldrb	r3, [r3, #14]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d004      	beq.n	8000f54 <HAL_MPU_ConfigRegion+0x168>
 8000f4a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8000f4e:	4861      	ldr	r0, [pc, #388]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f50:	f00d fef1 	bl	800ed36 <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7bdb      	ldrb	r3, [r3, #15]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d008      	beq.n	8000f6e <HAL_MPU_ConfigRegion+0x182>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7bdb      	ldrb	r3, [r3, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HAL_MPU_ConfigRegion+0x182>
 8000f64:	f240 113b 	movw	r1, #315	; 0x13b
 8000f68:	485a      	ldr	r0, [pc, #360]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f6a:	f00d fee4 	bl	800ed36 <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7a5b      	ldrb	r3, [r3, #9]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d104      	bne.n	8000f80 <HAL_MPU_ConfigRegion+0x194>
 8000f76:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8000f7a:	4856      	ldr	r0, [pc, #344]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f7c:	f00d fedb 	bl	800ed36 <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7a1b      	ldrb	r3, [r3, #8]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d070      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7a1b      	ldrb	r3, [r3, #8]
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d06c      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7a1b      	ldrb	r3, [r3, #8]
 8000f94:	2b06      	cmp	r3, #6
 8000f96:	d068      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7a1b      	ldrb	r3, [r3, #8]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d064      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7a1b      	ldrb	r3, [r3, #8]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d060      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7a1b      	ldrb	r3, [r3, #8]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d05c      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7a1b      	ldrb	r3, [r3, #8]
 8000fb4:	2b0a      	cmp	r3, #10
 8000fb6:	d058      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a1b      	ldrb	r3, [r3, #8]
 8000fbc:	2b0b      	cmp	r3, #11
 8000fbe:	d054      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7a1b      	ldrb	r3, [r3, #8]
 8000fc4:	2b0c      	cmp	r3, #12
 8000fc6:	d050      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7a1b      	ldrb	r3, [r3, #8]
 8000fcc:	2b0d      	cmp	r3, #13
 8000fce:	d04c      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7a1b      	ldrb	r3, [r3, #8]
 8000fd4:	2b0e      	cmp	r3, #14
 8000fd6:	d048      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7a1b      	ldrb	r3, [r3, #8]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d044      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7a1b      	ldrb	r3, [r3, #8]
 8000fe4:	2b10      	cmp	r3, #16
 8000fe6:	d040      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a1b      	ldrb	r3, [r3, #8]
 8000fec:	2b11      	cmp	r3, #17
 8000fee:	d03c      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7a1b      	ldrb	r3, [r3, #8]
 8000ff4:	2b12      	cmp	r3, #18
 8000ff6:	d038      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7a1b      	ldrb	r3, [r3, #8]
 8000ffc:	2b13      	cmp	r3, #19
 8000ffe:	d034      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7a1b      	ldrb	r3, [r3, #8]
 8001004:	2b14      	cmp	r3, #20
 8001006:	d030      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7a1b      	ldrb	r3, [r3, #8]
 800100c:	2b15      	cmp	r3, #21
 800100e:	d02c      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7a1b      	ldrb	r3, [r3, #8]
 8001014:	2b16      	cmp	r3, #22
 8001016:	d028      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7a1b      	ldrb	r3, [r3, #8]
 800101c:	2b17      	cmp	r3, #23
 800101e:	d024      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7a1b      	ldrb	r3, [r3, #8]
 8001024:	2b18      	cmp	r3, #24
 8001026:	d020      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7a1b      	ldrb	r3, [r3, #8]
 800102c:	2b19      	cmp	r3, #25
 800102e:	d01c      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a1b      	ldrb	r3, [r3, #8]
 8001034:	2b1a      	cmp	r3, #26
 8001036:	d018      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7a1b      	ldrb	r3, [r3, #8]
 800103c:	2b1b      	cmp	r3, #27
 800103e:	d014      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7a1b      	ldrb	r3, [r3, #8]
 8001044:	2b1c      	cmp	r3, #28
 8001046:	d010      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7a1b      	ldrb	r3, [r3, #8]
 800104c:	2b1d      	cmp	r3, #29
 800104e:	d00c      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7a1b      	ldrb	r3, [r3, #8]
 8001054:	2b1e      	cmp	r3, #30
 8001056:	d008      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7a1b      	ldrb	r3, [r3, #8]
 800105c:	2b1f      	cmp	r3, #31
 800105e:	d004      	beq.n	800106a <HAL_MPU_ConfigRegion+0x27e>
 8001060:	f240 113d 	movw	r1, #317	; 0x13d
 8001064:	481b      	ldr	r0, [pc, #108]	; (80010d4 <HAL_MPU_ConfigRegion+0x2e8>)
 8001066:	f00d fe66 	bl	800ed36 <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 800106a:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <HAL_MPU_ConfigRegion+0x2ec>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7b1b      	ldrb	r3, [r3, #12]
 8001076:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7adb      	ldrb	r3, [r3, #11]
 800107c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800107e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a9b      	ldrb	r3, [r3, #10]
 8001084:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001086:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7b5b      	ldrb	r3, [r3, #13]
 800108c:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800108e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7b9b      	ldrb	r3, [r3, #14]
 8001094:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001096:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7bdb      	ldrb	r3, [r3, #15]
 800109c:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800109e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7a5b      	ldrb	r3, [r3, #9]
 80010a4:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010a6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a1b      	ldrb	r3, [r3, #8]
 80010ac:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010ae:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MPU_ConfigRegion+0x2ec>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010b8:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010ba:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80010bc:	e005      	b.n	80010ca <HAL_MPU_ConfigRegion+0x2de>
    MPU->RBAR = 0x00;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MPU_ConfigRegion+0x2ec>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_MPU_ConfigRegion+0x2ec>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	0801076c 	.word	0x0801076c
 80010d8:	e000ed90 	.word	0xe000ed90

080010dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0c6      	b.n	800127c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f00c fe6a 	bl	800ddd0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2223      	movs	r2, #35	; 0x23
 8001100:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b60      	ldr	r3, [pc, #384]	; (8001284 <HAL_ETH_Init+0x1a8>)
 8001104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001108:	4a5e      	ldr	r2, [pc, #376]	; (8001284 <HAL_ETH_Init+0x1a8>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <HAL_ETH_Init+0x1a8>)
 8001114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7a1b      	ldrb	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fccd 	bl	8000ac8 <HAL_SYSCFG_ETHInterfaceSelect>
 800112e:	e003      	b.n	8001138 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001130:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001134:	f7ff fcc8 	bl	8000ac8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800114e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001150:	f7ff fc80 	bl	8000a54 <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001156:	e00f      	b.n	8001178 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001158:	f7ff fc7c 	bl	8000a54 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001166:	d907      	bls.n	8001178 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	22e0      	movs	r2, #224	; 0xe0
 8001172:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e081      	b.n	800127c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1e6      	bne.n	8001158 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f001 fa7a 	bl	8002684 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001190:	f003 fac8 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8001194:	4602      	mov	r2, r0
 8001196:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <HAL_ETH_Init+0x1ac>)
 8001198:	fba3 2302 	umull	r2, r3, r3, r2
 800119c:	0c9a      	lsrs	r2, r3, #18
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3a01      	subs	r2, #1
 80011a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f001 f9cd 	bl	8002548 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80011c8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	22e0      	movs	r2, #224	; 0xe0
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e04a      	b.n	800127c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80011ee:	4413      	add	r3, r2
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <HAL_ETH_Init+0x1b0>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6952      	ldr	r2, [r2, #20]
 80011fa:	0052      	lsls	r2, r2, #1
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	6809      	ldr	r1, [r1, #0]
 8001200:	431a      	orrs	r2, r3
 8001202:	f241 1308 	movw	r3, #4360	; 0x1108
 8001206:	440b      	add	r3, r1
 8001208:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f001 fa92 	bl	8002734 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 fad6 	bl	80027c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	3305      	adds	r3, #5
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	021a      	lsls	r2, r3, #8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	3304      	adds	r3, #4
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	3303      	adds	r3, #3
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	061a      	lsls	r2, r3, #24
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	3302      	adds	r3, #2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	041b      	lsls	r3, r3, #16
 8001248:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001254:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001262:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001264:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2210      	movs	r2, #16
 8001272:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2210      	movs	r2, #16
 8001278:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024400 	.word	0x58024400
 8001288:	431bde83 	.word	0x431bde83
 800128c:	ffff8001 	.word	0xffff8001

08001290 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	330a      	adds	r3, #10
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <HAL_ETH_DescAssignMemory+0x28>
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d904      	bls.n	80012c2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e021      	b.n	8001306 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	2b10      	cmp	r3, #16
 8001320:	d14c      	bne.n	80013bc <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2223      	movs	r2, #35	; 0x23
 8001326:	655a      	str	r2, [r3, #84]	; 0x54

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0202 	orr.w	r2, r2, #2
 8001336:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	f241 1304 	movw	r3, #4356	; 0x1104
 8001364:	4413      	add	r3, r2
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6811      	ldr	r1, [r2, #0]
 800136c:	f043 0201 	orr.w	r2, r3, #1
 8001370:	f241 1304 	movw	r3, #4356	; 0x1104
 8001374:	440b      	add	r3, r1
 8001376:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001380:	4413      	add	r3, r2
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6811      	ldr	r1, [r2, #0]
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001390:	440b      	add	r3, r1
 8001392:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80013a6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80013aa:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2210      	movs	r2, #16
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2222      	movs	r2, #34	; 0x22
 80013b6:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e000      	b.n	80013be <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
  }
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d040      	beq.n	800145c <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2223      	movs	r2, #35	; 0x23
 80013de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f241 1304 	movw	r3, #4356	; 0x1104
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6811      	ldr	r1, [r2, #0]
 80013f0:	f023 0201 	bic.w	r2, r3, #1
 80013f4:	f241 1304 	movw	r3, #4356	; 0x1104
 80013f8:	440b      	add	r3, r1
 80013fa:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f241 1308 	movw	r3, #4360	; 0x1108
 8001404:	4413      	add	r3, r2
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6811      	ldr	r1, [r2, #0]
 800140c:	f023 0201 	bic.w	r2, r3, #1
 8001410:	f241 1308 	movw	r3, #4360	; 0x1108
 8001414:	440b      	add	r3, r1
 8001416:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0202 	bic.w	r2, r2, #2
 800144a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2210      	movs	r2, #16
 8001450:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2210      	movs	r2, #16
 8001456:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	e000      	b.n	800145e <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
  }
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d107      	bne.n	800148c <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e076      	b.n	800157a <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	2b10      	cmp	r3, #16
 8001492:	d171      	bne.n	8001578 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001494:	2200      	movs	r2, #0
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f001 f9ef 	bl	800287c <ETH_Prepare_Tx_Descriptors>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	f043 0202 	orr.w	r2, r3, #2
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e062      	b.n	800157a <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3206      	adds	r2, #6
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d904      	bls.n	80014de <HAL_ETH_Transmit+0x74>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	1f1a      	subs	r2, r3, #4
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	3106      	adds	r1, #6
 80014ea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80014ee:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80014f2:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80014f4:	f7ff faae 	bl	8000a54 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80014fa:	e034      	b.n	8001566 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d011      	beq.n	8001532 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	f043 0208 	orr.w	r2, r3, #8
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	22e0      	movs	r2, #224	; 0xe0
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e023      	b.n	800157a <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001538:	d015      	beq.n	8001566 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800153a:	f7ff fa8b 	bl	8000a54 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d302      	bcc.n	8001550 <HAL_ETH_Transmit+0xe6>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10a      	bne.n	8001566 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	f043 0204 	orr.w	r2, r3, #4
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2210      	movs	r2, #16
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e009      	b.n	800157a <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dbc6      	blt.n	80014fc <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2210      	movs	r2, #16
 8001572:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	e000      	b.n	800157a <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001582:	b480      	push	{r7}
 8001584:	b089      	sub	sp, #36	; 0x24
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	332c      	adds	r3, #44	; 0x2c
 800158e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159e:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d06b      	beq.n	800168c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e0bc      	b.n	8001732 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d036      	beq.n	8001638 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3301      	adds	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d902      	bls.n	80015ec <HAL_ETH_IsRxDataAvailable+0x6a>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b04      	subs	r3, #4
 80015ea:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db11      	blt.n	8001622 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2201      	movs	r2, #1
 800160e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	3301      	adds	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d902      	bls.n	8001622 <HAL_ETH_IsRxDataAvailable+0xa0>
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3b04      	subs	r3, #4
 8001620:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001634:	2301      	movs	r3, #1
 8001636:	e07c      	b.n	8001732 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d012      	beq.n	800166a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	3301      	adds	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d902      	bls.n	800165e <HAL_ETH_IsRxDataAvailable+0xdc>
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3b04      	subs	r3, #4
 800165c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	e010      	b.n	800168c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	3301      	adds	r3, #1
 800166e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3301      	adds	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d902      	bls.n	8001682 <HAL_ETH_IsRxDataAvailable+0x100>
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3b04      	subs	r3, #4
 8001680:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db02      	blt.n	800169a <HAL_ETH_IsRxDataAvailable+0x118>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d98e      	bls.n	80015b8 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d044      	beq.n	800172a <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e036      	b.n	8001722 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c2:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	3301      	adds	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d902      	bls.n	8001712 <HAL_ETH_IsRxDataAvailable+0x190>
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3b04      	subs	r3, #4
 8001710:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171a:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3c4      	bcc.n	80016b4 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]

  return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b08a      	sub	sp, #40	; 0x28
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	332c      	adds	r3, #44	; 0x2c
 800174c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001760:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07d      	b.n	8001872 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff feff 	bl	8001582 <HAL_ETH_IsRxDataAvailable>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e071      	b.n	8001872 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
 80017a2:	e031      	b.n	8001808 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	461a      	mov	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00b      	beq.n	80017d6 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	461a      	mov	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017de:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	3301      	adds	r3, #1
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d902      	bls.n	80017f2 <HAL_ETH_GetRxDataBuffer+0xb4>
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	3b04      	subs	r3, #4
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	3301      	adds	r3, #1
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	3b01      	subs	r3, #1
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	429a      	cmp	r2, r3
 8001812:	d3c7      	bcc.n	80017a4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	461a      	mov	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d803      	bhi.n	800183e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	e018      	b.n	8001870 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d012      	beq.n	800186c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	461a      	mov	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	1ad2      	subs	r2, r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	e001      	b.n	8001870 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	332c      	adds	r3, #44	; 0x2c
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fe72 	bl	8001582 <HAL_ETH_IsRxDataAvailable>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e017      	b.n	80018d8 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4413      	add	r3, r2
 80018b0:	3b01      	subs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d902      	bls.n	80018c0 <HAL_ETH_GetRxDataLength+0x46>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3b04      	subs	r3, #4
 80018be:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c8:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	332c      	adds	r3, #44	; 0x2c
 80018ec:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e055      	b.n	80019bc <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	e03c      	b.n	800199e <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001932:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	3b01      	subs	r3, #1
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d20d      	bcs.n	8001998 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	3301      	adds	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d902      	bls.n	800198e <HAL_ETH_BuildRxDescriptors+0xae>
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	3b04      	subs	r3, #4
 800198c:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	3301      	adds	r3, #1
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3be      	bcc.n	8001924 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	f241 1328 	movw	r3, #4392	; 0x1128
 80019b0:	440b      	add	r3, r1
 80019b2:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3724      	adds	r7, #36	; 0x24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019de:	2b40      	cmp	r3, #64	; 0x40
 80019e0:	d113      	bne.n	8001a0a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f241 1334 	movw	r3, #4404	; 0x1134
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b40      	cmp	r3, #64	; 0x40
 80019f4:	d109      	bne.n	8001a0a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8da 	bl	8001bb0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a04:	f248 0240 	movw	r2, #32832	; 0x8040
 8001a08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d113      	bne.n	8001a44 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a24:	4413      	add	r3, r2
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d109      	bne.n	8001a44 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f8b3 	bl	8001b9c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a3e:	f248 0201 	movw	r2, #32769	; 0x8001
 8001a42:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a56:	d149      	bne.n	8001aec <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6c:	d13e      	bne.n	8001aec <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	f043 0208 	orr.w	r2, r3, #8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a8c:	d11b      	bne.n	8001ac6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	f241 1302 	movw	r3, #4354	; 0x1102
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f241 1334 	movw	r3, #4404	; 0x1134
 8001aaa:	4413      	add	r3, r2
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6811      	ldr	r1, [r2, #0]
 8001ab2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ab6:	f241 1334 	movw	r3, #4404	; 0x1134
 8001aba:	440b      	add	r3, r1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	22e0      	movs	r2, #224	; 0xe0
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac4:	e00f      	b.n	8001ae6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001ae0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001ae4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f86c 	bl	8001bc4 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001af4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001af8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001afc:	d10e      	bne.n	8001b1c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	22e0      	movs	r2, #224	; 0xe0
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f861 	bl	8001bd8 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d10d      	bne.n	8001b48 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b34:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f855 	bl	8001bec <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b50:	f003 0320 	and.w	r3, r3, #32
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d10d      	bne.n	8001b74 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b60:	f003 020f 	and.w	r2, r3, #15
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f849 	bl	8001c00 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_ETH_IRQHandler+0x1d0>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_ETH_IRQHandler+0x1d0>)
 8001b82:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f843 	bl	8001c14 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	58000080 	.word	0x58000080

08001b9c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e03e      	b.n	8001cc8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c52:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	055b      	lsls	r3, r3, #21
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f043 030c 	orr.w	r3, r3, #12
 8001c76:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001c8a:	f7fe fee3 	bl	8000a54 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c90:	e009      	b.n	8001ca6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001c92:	f7fe fedf 	bl	8000a54 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca0:	d901      	bls.n	8001ca6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e010      	b.n	8001cc8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ed      	bne.n	8001c92 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e03c      	b.n	8001d6c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cfa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	055b      	lsls	r3, r3, #21
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f023 030c 	bic.w	r3, r3, #12
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_ETH_WritePHYRegister+0xa4>)
 8001d32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <HAL_ETH_WritePHYRegister+0xa4>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001d3e:	f7fe fe89 	bl	8000a54 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d44:	e009      	b.n	8001d5a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001d46:	f7fe fe85 	bl	8000a54 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d54:	d901      	bls.n	8001d5a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e008      	b.n	8001d6c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ed      	bne.n	8001d46 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40028000 	.word	0x40028000

08001d78 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e1c3      	b.n	8002114 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf14      	ite	ne
 8001dee:	2301      	movne	r3, #1
 8001df0:	2300      	moveq	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf14      	ite	ne
 8001e22:	2301      	movne	r3, #1
 8001e24:	2300      	moveq	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2301      	movne	r3, #1
 8001f38:	2300      	moveq	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0e5b      	lsrs	r3, r3, #25
 8001fd6:	f003 021f 	and.w	r2, r3, #31
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf14      	ite	ne
 8002016:	2301      	movne	r3, #1
 8002018:	2300      	moveq	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	b29a      	uxth	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80020a0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020b0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00a      	b.n	800214a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	2b10      	cmp	r3, #16
 800213a:	d105      	bne.n	8002148 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f860 	bl	8002204 <ETH_SetMACConfig>

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002164:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800216c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800216e:	f002 fad9 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8002172:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d908      	bls.n	800218e <HAL_ETH_SetMDIOClockRange+0x3a>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d804      	bhi.n	800218e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e027      	b.n	80021de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d908      	bls.n	80021a8 <HAL_ETH_SetMDIOClockRange+0x54>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d804      	bhi.n	80021a8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e01a      	b.n	80021de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d903      	bls.n	80021b8 <HAL_ETH_SetMDIOClockRange+0x64>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d911      	bls.n	80021dc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d908      	bls.n	80021d2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4a0f      	ldr	r2, [pc, #60]	; (8002200 <HAL_ETH_SetMDIOClockRange+0xac>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d804      	bhi.n	80021d2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e005      	b.n	80021de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	e000      	b.n	80021de <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80021dc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	01312cff 	.word	0x01312cff
 80021f4:	02160ebf 	.word	0x02160ebf
 80021f8:	039386ff 	.word	0x039386ff
 80021fc:	05f5e0ff 	.word	0x05f5e0ff
 8002200:	08f0d17f 	.word	0x08f0d17f

08002204 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002216:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800221e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	7b1b      	ldrb	r3, [r3, #12]
 8002224:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002226:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	7b5b      	ldrb	r3, [r3, #13]
 800222c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800222e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	7b9b      	ldrb	r3, [r3, #14]
 8002234:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002236:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7bdb      	ldrb	r3, [r3, #15]
 800223c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800223e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	7c12      	ldrb	r2, [r2, #16]
 8002244:	2a00      	cmp	r2, #0
 8002246:	d102      	bne.n	800224e <ETH_SetMACConfig+0x4a>
 8002248:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800224c:	e000      	b.n	8002250 <ETH_SetMACConfig+0x4c>
 800224e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002250:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	7c52      	ldrb	r2, [r2, #17]
 8002256:	2a00      	cmp	r2, #0
 8002258:	d102      	bne.n	8002260 <ETH_SetMACConfig+0x5c>
 800225a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800225e:	e000      	b.n	8002262 <ETH_SetMACConfig+0x5e>
 8002260:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002262:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	7c9b      	ldrb	r3, [r3, #18]
 8002268:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800226a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002270:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002276:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	7f1b      	ldrb	r3, [r3, #28]
 800227c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800227e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	7f5b      	ldrb	r3, [r3, #29]
 8002284:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002286:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	7f92      	ldrb	r2, [r2, #30]
 800228c:	2a00      	cmp	r2, #0
 800228e:	d102      	bne.n	8002296 <ETH_SetMACConfig+0x92>
 8002290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002294:	e000      	b.n	8002298 <ETH_SetMACConfig+0x94>
 8002296:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002298:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	7fdb      	ldrb	r3, [r3, #31]
 800229e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80022a0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	d102      	bne.n	80022b2 <ETH_SetMACConfig+0xae>
 80022ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b0:	e000      	b.n	80022b4 <ETH_SetMACConfig+0xb0>
 80022b2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80022b4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80022ba:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022c2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80022c4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b56      	ldr	r3, [pc, #344]	; (8002430 <ETH_SetMACConfig+0x22c>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	430b      	orrs	r3, r1
 80022e0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022f0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022f8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022fa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002302:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002304:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800230c:	2a00      	cmp	r2, #0
 800230e:	d102      	bne.n	8002316 <ETH_SetMACConfig+0x112>
 8002310:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002314:	e000      	b.n	8002318 <ETH_SetMACConfig+0x114>
 8002316:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002318:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <ETH_SetMACConfig+0x230>)
 800232a:	4013      	ands	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	68f9      	ldr	r1, [r7, #12]
 8002332:	430b      	orrs	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <ETH_SetMACConfig+0x234>)
 800234e:	4013      	ands	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	430b      	orrs	r3, r1
 8002358:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002360:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002366:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800236e:	2a00      	cmp	r2, #0
 8002370:	d101      	bne.n	8002376 <ETH_SetMACConfig+0x172>
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	e000      	b.n	8002378 <ETH_SetMACConfig+0x174>
 8002376:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002378:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002380:	4313      	orrs	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800238a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800238e:	4013      	ands	r3, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	430b      	orrs	r3, r1
 8002398:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f023 0103 	bic.w	r1, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023ce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	d101      	bne.n	80023f2 <ETH_SetMACConfig+0x1ee>
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	e000      	b.n	80023f4 <ETH_SetMACConfig+0x1f0>
 80023f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80023f4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80023fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023fe:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002406:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002414:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	430a      	orrs	r2, r1
 8002420:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	00048083 	.word	0x00048083
 8002434:	c0f88000 	.word	0xc0f88000
 8002438:	fffffef0 	.word	0xfffffef0

0800243c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b38      	ldr	r3, [pc, #224]	; (8002534 <ETH_SetDMAConfig+0xf8>)
 8002452:	4013      	ands	r3, r2
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	431a      	orrs	r2, r3
 800245e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002462:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	791b      	ldrb	r3, [r3, #4]
 8002468:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800246e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7b1b      	ldrb	r3, [r3, #12]
 8002474:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002482:	4413      	add	r3, r2
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <ETH_SetDMAConfig+0xfc>)
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	431a      	orrs	r2, r3
 8002492:	f241 0304 	movw	r3, #4100	; 0x1004
 8002496:	440b      	add	r3, r1
 8002498:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7b5b      	ldrb	r3, [r3, #13]
 800249e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <ETH_SetDMAConfig+0x100>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	431a      	orrs	r2, r3
 80024be:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80024c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	7d1b      	ldrb	r3, [r3, #20]
 80024cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024ce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	7f5b      	ldrb	r3, [r3, #29]
 80024d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f241 1304 	movw	r3, #4356	; 0x1104
 80024e2:	4413      	add	r3, r2
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <ETH_SetDMAConfig+0x104>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6811      	ldr	r1, [r2, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80024f6:	440b      	add	r3, r1
 80024f8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	7f1b      	ldrb	r3, [r3, #28]
 80024fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002510:	4413      	add	r3, r2
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <ETH_SetDMAConfig+0x108>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6811      	ldr	r1, [r2, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	431a      	orrs	r2, r3
 8002520:	f241 1308 	movw	r3, #4360	; 0x1108
 8002524:	440b      	add	r3, r1
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	ffff87fd 	.word	0xffff87fd
 8002538:	ffff2ffe 	.word	0xffff2ffe
 800253c:	fffec000 	.word	0xfffec000
 8002540:	ffc0efef 	.word	0xffc0efef
 8002544:	7fc0ffff 	.word	0x7fc0ffff

08002548 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b0a4      	sub	sp, #144	; 0x90
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002556:	2300      	movs	r3, #0
 8002558:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002566:	2301      	movs	r3, #1
 8002568:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002590:	2300      	movs	r3, #0
 8002592:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80025a0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025a4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025c2:	2300      	movs	r3, #0
 80025c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025ca:	2300      	movs	r3, #0
 80025cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025e0:	2320      	movs	r3, #32
 80025e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025f2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025fc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002604:	2302      	movs	r3, #2
 8002606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002622:	2300      	movs	r3, #0
 8002624:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fde6 	bl	8002204 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800263c:	2301      	movs	r3, #1
 800263e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002652:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002656:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800265c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002660:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002668:	f44f 7306 	mov.w	r3, #536	; 0x218
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fee1 	bl	800243c <ETH_SetDMAConfig>
}
 800267a:	bf00      	nop
 800267c:	3790      	adds	r7, #144	; 0x90
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002694:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800269c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800269e:	f002 f841 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 80026a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d908      	bls.n	80026be <ETH_MAC_MDIO_ClkConfig+0x3a>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d804      	bhi.n	80026be <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e027      	b.n	800270e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d908      	bls.n	80026d8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d804      	bhi.n	80026d8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	e01a      	b.n	800270e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d903      	bls.n	80026e8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d911      	bls.n	800270c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d908      	bls.n	8002702 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d804      	bhi.n	8002702 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e005      	b.n	800270e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e000      	b.n	800270e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800270c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	01312cff 	.word	0x01312cff
 8002724:	02160ebf 	.word	0x02160ebf
 8002728:	039386ff 	.word	0x039386ff
 800272c:	05f5e0ff 	.word	0x05f5e0ff
 8002730:	08f0d17f 	.word	0x08f0d17f

08002734 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e01d      	b.n	800277e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68d9      	ldr	r1, [r3, #12]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	3206      	adds	r2, #6
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3301      	adds	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d9de      	bls.n	8002742 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f241 132c 	movw	r3, #4396	; 0x112c
 8002792:	4413      	add	r3, r2
 8002794:	2203      	movs	r2, #3
 8002796:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f241 1314 	movw	r3, #4372	; 0x1114
 80027a4:	4413      	add	r3, r2
 80027a6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80027b4:	601a      	str	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e024      	b.n	800281a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6919      	ldr	r1, [r3, #16]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2200      	movs	r2, #0
 80027ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	330a      	adds	r3, #10
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d9d7      	bls.n	80027d0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f241 1330 	movw	r3, #4400	; 0x1130
 8002846:	4413      	add	r3, r2
 8002848:	2203      	movs	r2, #3
 800284a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6919      	ldr	r1, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f241 131c 	movw	r3, #4380	; 0x111c
 8002858:	4413      	add	r3, r2
 800285a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f241 1328 	movw	r3, #4392	; 0x1128
 800286c:	4413      	add	r3, r2
 800286e:	6019      	str	r1, [r3, #0]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800287c:	b480      	push	{r7}
 800287e:	b08d      	sub	sp, #52	; 0x34
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3318      	adds	r3, #24
 800288c:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ba:	d101      	bne.n	80028c0 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80028bc:	2302      	movs	r3, #2
 80028be:	e223      	b.n	8002d08 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d044      	beq.n	8002956 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	4b72      	ldr	r3, [pc, #456]	; (8002a9c <ETH_Prepare_Tx_Descriptors+0x220>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d8:	431a      	orrs	r2, r3
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d027      	beq.n	8002956 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	b29a      	uxth	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	431a      	orrs	r2, r3
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	431a      	orrs	r2, r3
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002944:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002954:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00e      	beq.n	8002980 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	6992      	ldr	r2, [r2, #24]
 800296e:	431a      	orrs	r2, r3
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <ETH_Prepare_Tx_Descriptors+0x11c>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d030      	beq.n	80029fa <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	3301      	adds	r3, #1
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d902      	bls.n	80029c2 <ETH_Prepare_Tx_Descriptors+0x146>
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	3b04      	subs	r3, #4
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ca:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	3301      	adds	r3, #1
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029de:	d10c      	bne.n	80029fa <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	e186      	b.n	8002d08 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	3301      	adds	r3, #1
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	6852      	ldr	r2, [r2, #4]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d012      	beq.n	8002a4a <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	6852      	ldr	r2, [r2, #4]
 8002a40:	0412      	lsls	r2, r2, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	e008      	b.n	8002a5c <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	6a3a      	ldr	r2, [r7, #32]
 8002a5a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d021      	beq.n	8002aac <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	04db      	lsls	r3, r3, #19
 8002a76:	431a      	orrs	r2, r3
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	69d2      	ldr	r2, [r2, #28]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e02e      	b.n	8002afa <ETH_Prepare_Tx_Descriptors+0x27e>
 8002a9c:	ffff0000 	.word	0xffff0000
 8002aa0:	ffffc000 	.word	0xffffc000
 8002aa4:	c000ffff 	.word	0xc000ffff
 8002aa8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b98      	ldr	r3, [pc, #608]	; (8002d14 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	6852      	ldr	r2, [r2, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80c0 	beq.w	8002cca <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b5c:	e0b5      	b.n	8002cca <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d902      	bls.n	8002b7c <ETH_Prepare_Tx_Descriptors+0x300>
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	3b04      	subs	r3, #4
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b84:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b9e:	d126      	bne.n	8002bee <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bac:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	e016      	b.n	8002be2 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d902      	bls.n	8002bd2 <ETH_Prepare_Tx_Descriptors+0x356>
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bda:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	3301      	adds	r3, #1
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3e4      	bcc.n	8002bb4 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8002bea:	2302      	movs	r3, #2
 8002bec:	e08c      	b.n	8002d08 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	6852      	ldr	r2, [r2, #4]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d012      	beq.n	8002c44 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	6852      	ldr	r2, [r2, #4]
 8002c3a:	0412      	lsls	r2, r2, #16
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	e008      	b.n	8002c56 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	6a3a      	ldr	r2, [r7, #32]
 8002c54:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00f      	beq.n	8002c82 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	69d2      	ldr	r2, [r2, #28]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	e017      	b.n	8002cb2 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	6852      	ldr	r2, [r2, #4]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f47f af45 	bne.w	8002b5e <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	e005      	b.n	8002cf4 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d04:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3734      	adds	r7, #52	; 0x34
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	ffff8000 	.word	0xffff8000
 8002d18:	ffffc000 	.word	0xffffc000
 8002d1c:	c000ffff 	.word	0xc000ffff
 8002d20:	fffc0000 	.word	0xfffc0000

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_GPIO_Init+0x12c>)
 8002d34:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a46      	ldr	r2, [pc, #280]	; (8002e54 <HAL_GPIO_Init+0x130>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02b      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a45      	ldr	r2, [pc, #276]	; (8002e58 <HAL_GPIO_Init+0x134>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d027      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a44      	ldr	r2, [pc, #272]	; (8002e5c <HAL_GPIO_Init+0x138>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d023      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a43      	ldr	r2, [pc, #268]	; (8002e60 <HAL_GPIO_Init+0x13c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a42      	ldr	r2, [pc, #264]	; (8002e64 <HAL_GPIO_Init+0x140>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01b      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <HAL_GPIO_Init+0x144>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d017      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a40      	ldr	r2, [pc, #256]	; (8002e6c <HAL_GPIO_Init+0x148>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <HAL_GPIO_Init+0x14c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00f      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a3e      	ldr	r2, [pc, #248]	; (8002e74 <HAL_GPIO_Init+0x150>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a3d      	ldr	r2, [pc, #244]	; (8002e78 <HAL_GPIO_Init+0x154>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a3c      	ldr	r2, [pc, #240]	; (8002e7c <HAL_GPIO_Init+0x158>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x72>
 8002d8e:	21bb      	movs	r1, #187	; 0xbb
 8002d90:	483b      	ldr	r0, [pc, #236]	; (8002e80 <HAL_GPIO_Init+0x15c>)
 8002d92:	f00b ffd0 	bl	800ed36 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_GPIO_Init+0x88>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <HAL_GPIO_Init+0x160>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x90>
 8002dac:	21bc      	movs	r1, #188	; 0xbc
 8002dae:	4834      	ldr	r0, [pc, #208]	; (8002e80 <HAL_GPIO_Init+0x15c>)
 8002db0:	f00b ffc1 	bl	800ed36 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d035      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d031      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b11      	cmp	r3, #17
 8002dca:	d02d      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d029      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b12      	cmp	r3, #18
 8002dda:	d025      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_GPIO_Init+0x164>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d020      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <HAL_GPIO_Init+0x168>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d01b      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <HAL_GPIO_Init+0x16c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d016      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <HAL_GPIO_Init+0x170>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d011      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <HAL_GPIO_Init+0x174>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00c      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_GPIO_Init+0x178>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d007      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x104>
 8002e20:	21bd      	movs	r1, #189	; 0xbd
 8002e22:	4817      	ldr	r0, [pc, #92]	; (8002e80 <HAL_GPIO_Init+0x15c>)
 8002e24:	f00b ff87 	bl	800ed36 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 821a 	beq.w	8003266 <HAL_GPIO_Init+0x542>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	f000 8215 	beq.w	8003266 <HAL_GPIO_Init+0x542>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f000 8210 	beq.w	8003266 <HAL_GPIO_Init+0x542>
 8002e46:	21be      	movs	r1, #190	; 0xbe
 8002e48:	480d      	ldr	r0, [pc, #52]	; (8002e80 <HAL_GPIO_Init+0x15c>)
 8002e4a:	f00b ff74 	bl	800ed36 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e4e:	e20a      	b.n	8003266 <HAL_GPIO_Init+0x542>
 8002e50:	58000080 	.word	0x58000080
 8002e54:	58020000 	.word	0x58020000
 8002e58:	58020400 	.word	0x58020400
 8002e5c:	58020800 	.word	0x58020800
 8002e60:	58020c00 	.word	0x58020c00
 8002e64:	58021000 	.word	0x58021000
 8002e68:	58021400 	.word	0x58021400
 8002e6c:	58021800 	.word	0x58021800
 8002e70:	58021c00 	.word	0x58021c00
 8002e74:	58022000 	.word	0x58022000
 8002e78:	58022400 	.word	0x58022400
 8002e7c:	58022800 	.word	0x58022800
 8002e80:	080107a8 	.word	0x080107a8
 8002e84:	ffff0000 	.word	0xffff0000
 8002e88:	11110000 	.word	0x11110000
 8002e8c:	11210000 	.word	0x11210000
 8002e90:	11310000 	.word	0x11310000
 8002e94:	11120000 	.word	0x11120000
 8002e98:	11220000 	.word	0x11220000
 8002e9c:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 81d4 	beq.w	8003260 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x1a4>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b12      	cmp	r3, #18
 8002ec6:	d15b      	bne.n	8002f80 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4aa2      	ldr	r2, [pc, #648]	; (8003154 <HAL_GPIO_Init+0x430>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d02b      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4aa1      	ldr	r2, [pc, #644]	; (8003158 <HAL_GPIO_Init+0x434>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d027      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4aa0      	ldr	r2, [pc, #640]	; (800315c <HAL_GPIO_Init+0x438>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d023      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a9f      	ldr	r2, [pc, #636]	; (8003160 <HAL_GPIO_Init+0x43c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01f      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a9e      	ldr	r2, [pc, #632]	; (8003164 <HAL_GPIO_Init+0x440>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d01b      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a9d      	ldr	r2, [pc, #628]	; (8003168 <HAL_GPIO_Init+0x444>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d017      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a9c      	ldr	r2, [pc, #624]	; (800316c <HAL_GPIO_Init+0x448>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a9b      	ldr	r2, [pc, #620]	; (8003170 <HAL_GPIO_Init+0x44c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00f      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a9a      	ldr	r2, [pc, #616]	; (8003174 <HAL_GPIO_Init+0x450>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a99      	ldr	r2, [pc, #612]	; (8003178 <HAL_GPIO_Init+0x454>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d007      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a98      	ldr	r2, [pc, #608]	; (800317c <HAL_GPIO_Init+0x458>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002f20:	21cd      	movs	r1, #205	; 0xcd
 8002f22:	4897      	ldr	r0, [pc, #604]	; (8003180 <HAL_GPIO_Init+0x45c>)
 8002f24:	f00b ff07 	bl	800ed36 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d903      	bls.n	8002f38 <HAL_GPIO_Init+0x214>
 8002f30:	21ce      	movs	r1, #206	; 0xce
 8002f32:	4893      	ldr	r0, [pc, #588]	; (8003180 <HAL_GPIO_Init+0x45c>)
 8002f34:	f00b feff 	bl	800ed36 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	08da      	lsrs	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	220f      	movs	r2, #15
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	08da      	lsrs	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3208      	adds	r2, #8
 8002f7a:	69b9      	ldr	r1, [r7, #24]
 8002f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0203 	and.w	r2, r3, #3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d00b      	beq.n	8002fd4 <HAL_GPIO_Init+0x2b0>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d007      	beq.n	8002fd4 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fc8:	2b11      	cmp	r3, #17
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b12      	cmp	r3, #18
 8002fd2:	d144      	bne.n	800305e <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00f      	beq.n	8002ffc <HAL_GPIO_Init+0x2d8>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d00b      	beq.n	8002ffc <HAL_GPIO_Init+0x2d8>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d007      	beq.n	8002ffc <HAL_GPIO_Init+0x2d8>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2d8>
 8002ff4:	21e2      	movs	r1, #226	; 0xe2
 8002ff6:	4862      	ldr	r0, [pc, #392]	; (8003180 <HAL_GPIO_Init+0x45c>)
 8002ff8:	f00b fe9d 	bl	800ed36 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003032:	2201      	movs	r2, #1
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 0201 	and.w	r2, r3, #1
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80e2 	beq.w	8003260 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309c:	4b39      	ldr	r3, [pc, #228]	; (8003184 <HAL_GPIO_Init+0x460>)
 800309e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030a2:	4a38      	ldr	r2, [pc, #224]	; (8003184 <HAL_GPIO_Init+0x460>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030ac:	4b35      	ldr	r3, [pc, #212]	; (8003184 <HAL_GPIO_Init+0x460>)
 80030ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ba:	4a33      	ldr	r2, [pc, #204]	; (8003188 <HAL_GPIO_Init+0x464>)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_GPIO_Init+0x430>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d054      	beq.n	8003190 <HAL_GPIO_Init+0x46c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <HAL_GPIO_Init+0x434>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04e      	beq.n	800318c <HAL_GPIO_Init+0x468>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_GPIO_Init+0x438>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d02b      	beq.n	800314e <HAL_GPIO_Init+0x42a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_GPIO_Init+0x43c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d025      	beq.n	800314a <HAL_GPIO_Init+0x426>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_GPIO_Init+0x440>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01f      	beq.n	8003146 <HAL_GPIO_Init+0x422>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_GPIO_Init+0x444>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_Init+0x41e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <HAL_GPIO_Init+0x448>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0x41a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_GPIO_Init+0x44c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_Init+0x416>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <HAL_GPIO_Init+0x450>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x412>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <HAL_GPIO_Init+0x454>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_Init+0x40e>
 800312e:	2309      	movs	r3, #9
 8003130:	e02f      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 8003132:	230a      	movs	r3, #10
 8003134:	e02d      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 8003136:	2308      	movs	r3, #8
 8003138:	e02b      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 800313a:	2307      	movs	r3, #7
 800313c:	e029      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 800313e:	2306      	movs	r3, #6
 8003140:	e027      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 8003142:	2305      	movs	r3, #5
 8003144:	e025      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 8003146:	2304      	movs	r3, #4
 8003148:	e023      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 800314a:	2303      	movs	r3, #3
 800314c:	e021      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 800314e:	2302      	movs	r3, #2
 8003150:	e01f      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 8003152:	bf00      	nop
 8003154:	58020000 	.word	0x58020000
 8003158:	58020400 	.word	0x58020400
 800315c:	58020800 	.word	0x58020800
 8003160:	58020c00 	.word	0x58020c00
 8003164:	58021000 	.word	0x58021000
 8003168:	58021400 	.word	0x58021400
 800316c:	58021800 	.word	0x58021800
 8003170:	58021c00 	.word	0x58021c00
 8003174:	58022000 	.word	0x58022000
 8003178:	58022400 	.word	0x58022400
 800317c:	58022800 	.word	0x58022800
 8003180:	080107a8 	.word	0x080107a8
 8003184:	58024400 	.word	0x58024400
 8003188:	58000400 	.word	0x58000400
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <HAL_GPIO_Init+0x46e>
 8003190:	2300      	movs	r3, #0
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	f002 0203 	and.w	r2, r2, #3
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	4093      	lsls	r3, r2
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a2:	4937      	ldr	r1, [pc, #220]	; (8003280 <HAL_GPIO_Init+0x55c>)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800322a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3301      	adds	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f ae15 	bne.w	8002ea0 <HAL_GPIO_Init+0x17c>
  }
}
 8003276:	bf00      	nop
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	58000400 	.word	0x58000400

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <HAL_GPIO_WritePin+0x20>
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_GPIO_WritePin+0x60>)
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <HAL_GPIO_WritePin+0x2a>
 80032a4:	f240 11ad 	movw	r1, #429	; 0x1ad
 80032a8:	480f      	ldr	r0, [pc, #60]	; (80032e8 <HAL_GPIO_WritePin+0x64>)
 80032aa:	f00b fd44 	bl	800ed36 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80032ae:	787b      	ldrb	r3, [r7, #1]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_GPIO_WritePin+0x40>
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d004      	beq.n	80032c4 <HAL_GPIO_WritePin+0x40>
 80032ba:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80032be:	480a      	ldr	r0, [pc, #40]	; (80032e8 <HAL_GPIO_WritePin+0x64>)
 80032c0:	f00b fd39 	bl	800ed36 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	ffff0000 	.word	0xffff0000
 80032e8:	080107a8 	.word	0x080107a8

080032ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d006      	beq.n	8003310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003302:	4a05      	ldr	r2, [pc, #20]	; (8003318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	4618      	mov	r0, r3
 800330c:	f00b fc84 	bl	800ec18 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	58000080 	.word	0x58000080

0800331c <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d006      	beq.n	8003338 <HAL_PWREx_ConfigSupply+0x1c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d003      	beq.n	8003338 <HAL_PWREx_ConfigSupply+0x1c>
 8003330:	21ef      	movs	r1, #239	; 0xef
 8003332:	481a      	ldr	r0, [pc, #104]	; (800339c <HAL_PWREx_ConfigSupply+0x80>)
 8003334:	f00b fcff 	bl	800ed36 <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_PWREx_ConfigSupply+0x84>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b04      	cmp	r3, #4
 8003342:	d008      	beq.n	8003356 <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003344:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <HAL_PWREx_ConfigSupply+0x84>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e01d      	b.n	8003392 <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_PWREx_ConfigSupply+0x84>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f023 0207 	bic.w	r2, r3, #7
 800335e:	4910      	ldr	r1, [pc, #64]	; (80033a0 <HAL_PWREx_ConfigSupply+0x84>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003366:	f7fd fb75 	bl	8000a54 <HAL_GetTick>
 800336a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800336c:	e009      	b.n	8003382 <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800336e:	f7fd fb71 	bl	8000a54 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337c:	d901      	bls.n	8003382 <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e007      	b.n	8003392 <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_PWREx_ConfigSupply+0x84>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338e:	d1ee      	bne.n	800336e <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	080107e4 	.word	0x080107e4
 80033a0:	58024800 	.word	0x58024800

080033a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	60d3      	str	r3, [r2, #12]
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	58024800 	.word	0x58024800

080033c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f000 bcc9 	b.w	8003d6a <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d028      	beq.n	8003432 <HAL_RCC_OscConfig+0x6e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d122      	bne.n	8003432 <HAL_RCC_OscConfig+0x6e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11c      	bne.n	8003432 <HAL_RCC_OscConfig+0x6e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d116      	bne.n	8003432 <HAL_RCC_OscConfig+0x6e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <HAL_RCC_OscConfig+0x6e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_RCC_OscConfig+0x6e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <HAL_RCC_OscConfig+0x6e>
 8003428:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800342c:	48a2      	ldr	r0, [pc, #648]	; (80036b8 <HAL_RCC_OscConfig+0x2f4>)
 800342e:	f00b fc82 	bl	800ed36 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 809d 	beq.w	800357a <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00e      	beq.n	8003466 <HAL_RCC_OscConfig+0xa2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d009      	beq.n	8003466 <HAL_RCC_OscConfig+0xa2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800345a:	d004      	beq.n	8003466 <HAL_RCC_OscConfig+0xa2>
 800345c:	f240 1175 	movw	r1, #373	; 0x175
 8003460:	4895      	ldr	r0, [pc, #596]	; (80036b8 <HAL_RCC_OscConfig+0x2f4>)
 8003462:	f00b fc68 	bl	800ed36 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b95      	ldr	r3, [pc, #596]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003470:	4b92      	ldr	r3, [pc, #584]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b10      	cmp	r3, #16
 800347a:	d007      	beq.n	800348c <HAL_RCC_OscConfig+0xc8>
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	2b18      	cmp	r3, #24
 8003480:	d111      	bne.n	80034a6 <HAL_RCC_OscConfig+0xe2>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d10c      	bne.n	80034a6 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d06f      	beq.n	8003578 <HAL_RCC_OscConfig+0x1b4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d16b      	bne.n	8003578 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f000 bc62 	b.w	8003d6a <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0xfa>
 80034b0:	4b82      	ldr	r3, [pc, #520]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a81      	ldr	r2, [pc, #516]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	e02e      	b.n	800351c <HAL_RCC_OscConfig+0x158>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x11c>
 80034c6:	4b7d      	ldr	r3, [pc, #500]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a7c      	ldr	r2, [pc, #496]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b7a      	ldr	r3, [pc, #488]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a79      	ldr	r2, [pc, #484]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e01d      	b.n	800351c <HAL_RCC_OscConfig+0x158>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x140>
 80034ea:	4b74      	ldr	r3, [pc, #464]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a73      	ldr	r2, [pc, #460]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b71      	ldr	r3, [pc, #452]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a70      	ldr	r2, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0x158>
 8003504:	4b6d      	ldr	r3, [pc, #436]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a6c      	ldr	r2, [pc, #432]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a69      	ldr	r2, [pc, #420]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d014      	beq.n	800354e <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd fa96 	bl	8000a54 <HAL_GetTick>
 8003528:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800352a:	e009      	b.n	8003540 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7fd fa92 	bl	8000a54 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d902      	bls.n	8003540 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	f000 bc15 	b.w	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003540:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCC_OscConfig+0x168>
 800354c:	e015      	b.n	800357a <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fd fa81 	bl	8000a54 <HAL_GetTick>
 8003552:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003554:	e009      	b.n	800356a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003556:	f7fd fa7d 	bl	8000a54 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b64      	cmp	r3, #100	; 0x64
 8003562:	d902      	bls.n	800356a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	f000 bc00 	b.w	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <HAL_RCC_OscConfig+0x192>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80d8 	beq.w	8003738 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d018      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1fe>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d014      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1fe>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d010      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1fe>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b09      	cmp	r3, #9
 80035a6:	d00c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1fe>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b11      	cmp	r3, #17
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1fe>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b19      	cmp	r3, #25
 80035b6:	d004      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1fe>
 80035b8:	f240 11a9 	movw	r1, #425	; 0x1a9
 80035bc:	483e      	ldr	r0, [pc, #248]	; (80036b8 <HAL_RCC_OscConfig+0x2f4>)
 80035be:	f00b fbba 	bl	800ed36 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b7f      	cmp	r3, #127	; 0x7f
 80035c8:	d904      	bls.n	80035d4 <HAL_RCC_OscConfig+0x210>
 80035ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80035ce:	483a      	ldr	r0, [pc, #232]	; (80036b8 <HAL_RCC_OscConfig+0x2f4>)
 80035d0:	f00b fbb1 	bl	800ed36 <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_RCC_OscConfig+0x236>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b18      	cmp	r3, #24
 80035ee:	d149      	bne.n	8003684 <HAL_RCC_OscConfig+0x2c0>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d144      	bne.n	8003684 <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x24e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e3ab      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0219 	bic.w	r2, r3, #25
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4927      	ldr	r1, [pc, #156]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd fa16 	bl	8000a54 <HAL_GetTick>
 8003628:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362c:	f7fd fa12 	bl	8000a54 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e395      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800363e:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	f7fd fa31 	bl	8000ab0 <HAL_GetREVID>
 800364e:	4602      	mov	r2, r0
 8003650:	f241 0303 	movw	r3, #4099	; 0x1003
 8003654:	429a      	cmp	r2, r3
 8003656:	d80a      	bhi.n	800366e <HAL_RCC_OscConfig+0x2aa>
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	031b      	lsls	r3, r3, #12
 8003666:	4915      	ldr	r1, [pc, #84]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	e064      	b.n	8003738 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	061b      	lsls	r3, r3, #24
 800367c:	490f      	ldr	r1, [pc, #60]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003682:	e059      	b.n	8003738 <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03c      	beq.n	8003706 <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 0219 	bic.w	r2, r3, #25
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4908      	ldr	r1, [pc, #32]	; (80036bc <HAL_RCC_OscConfig+0x2f8>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fd f9d9 	bl	8000a54 <HAL_GetTick>
 80036a2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a4:	e00c      	b.n	80036c0 <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fd f9d5 	bl	8000a54 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d905      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e358      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
 80036b8:	08010820 	.word	0x08010820
 80036bc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c0:	4b95      	ldr	r3, [pc, #596]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ec      	beq.n	80036a6 <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036cc:	f7fd f9f0 	bl	8000ab0 <HAL_GetREVID>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d80a      	bhi.n	80036f0 <HAL_RCC_OscConfig+0x32c>
 80036da:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	031b      	lsls	r3, r3, #12
 80036e8:	498b      	ldr	r1, [pc, #556]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
 80036ee:	e023      	b.n	8003738 <HAL_RCC_OscConfig+0x374>
 80036f0:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	4986      	ldr	r1, [pc, #536]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
 8003704:	e018      	b.n	8003738 <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b84      	ldr	r3, [pc, #528]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a83      	ldr	r2, [pc, #524]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fd f99f 	bl	8000a54 <HAL_GetTick>
 8003716:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371a:	f7fd f99b 	bl	8000a54 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e31e      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800372c:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a5 	beq.w	8003890 <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_RCC_OscConfig+0x39c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d004      	beq.n	8003760 <HAL_RCC_OscConfig+0x39c>
 8003756:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800375a:	4870      	ldr	r0, [pc, #448]	; (800391c <HAL_RCC_OscConfig+0x558>)
 800375c:	f00b faeb 	bl	800ed36 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	2b1f      	cmp	r3, #31
 8003766:	d904      	bls.n	8003772 <HAL_RCC_OscConfig+0x3ae>
 8003768:	f240 11fb 	movw	r1, #507	; 0x1fb
 800376c:	486b      	ldr	r0, [pc, #428]	; (800391c <HAL_RCC_OscConfig+0x558>)
 800376e:	f00b fae2 	bl	800ed36 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003772:	4b69      	ldr	r3, [pc, #420]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800377c:	4b66      	ldr	r3, [pc, #408]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d007      	beq.n	8003798 <HAL_RCC_OscConfig+0x3d4>
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b18      	cmp	r3, #24
 800378c:	d12d      	bne.n	80037ea <HAL_RCC_OscConfig+0x426>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d128      	bne.n	80037ea <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003798:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x3ec>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b80      	cmp	r3, #128	; 0x80
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e2dc      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037b0:	f7fd f97e 	bl	8000ab0 <HAL_GetREVID>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d80a      	bhi.n	80037d4 <HAL_RCC_OscConfig+0x410>
 80037be:	4b56      	ldr	r3, [pc, #344]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	4952      	ldr	r1, [pc, #328]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037d2:	e05d      	b.n	8003890 <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037d4:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	494d      	ldr	r1, [pc, #308]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037e8:	e052      	b.n	8003890 <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d035      	beq.n	800385e <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a48      	ldr	r2, [pc, #288]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd f929 	bl	8000a54 <HAL_GetTick>
 8003802:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003806:	f7fd f925 	bl	8000a54 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e2a8      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003818:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003824:	f7fd f944 	bl	8000ab0 <HAL_GetREVID>
 8003828:	4602      	mov	r2, r0
 800382a:	f241 0303 	movw	r3, #4099	; 0x1003
 800382e:	429a      	cmp	r2, r3
 8003830:	d80a      	bhi.n	8003848 <HAL_RCC_OscConfig+0x484>
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	069b      	lsls	r3, r3, #26
 8003840:	4935      	ldr	r1, [pc, #212]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
 8003846:	e023      	b.n	8003890 <HAL_RCC_OscConfig+0x4cc>
 8003848:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	061b      	lsls	r3, r3, #24
 8003856:	4930      	ldr	r1, [pc, #192]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003858:	4313      	orrs	r3, r2
 800385a:	60cb      	str	r3, [r1, #12]
 800385c:	e018      	b.n	8003890 <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2d      	ldr	r2, [pc, #180]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd f8f3 	bl	8000a54 <HAL_GetTick>
 800386e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003872:	f7fd f8ef 	bl	8000a54 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e272      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d047      	beq.n	800392c <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_RCC_OscConfig+0x4f2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d004      	beq.n	80038b6 <HAL_RCC_OscConfig+0x4f2>
 80038ac:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80038b0:	481a      	ldr	r0, [pc, #104]	; (800391c <HAL_RCC_OscConfig+0x558>)
 80038b2:	f00b fa40 	bl	800ed36 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d019      	beq.n	80038f2 <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fd f8c3 	bl	8000a54 <HAL_GetTick>
 80038ce:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fd f8bf 	bl	8000a54 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e242      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80038e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x50e>
 80038f0:	e01c      	b.n	800392c <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <HAL_RCC_OscConfig+0x554>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd f8a9 	bl	8000a54 <HAL_GetTick>
 8003902:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003904:	e00c      	b.n	8003920 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd f8a5 	bl	8000a54 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d905      	bls.n	8003920 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e228      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
 8003918:	58024400 	.word	0x58024400
 800391c:	08010820 	.word	0x08010820
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003920:	4b71      	ldr	r3, [pc, #452]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ec      	bne.n	8003906 <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_OscConfig+0x58e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d004      	beq.n	8003952 <HAL_RCC_OscConfig+0x58e>
 8003948:	f240 2167 	movw	r1, #615	; 0x267
 800394c:	4867      	ldr	r0, [pc, #412]	; (8003aec <HAL_RCC_OscConfig+0x728>)
 800394e:	f00b f9f2 	bl	800ed36 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a62      	ldr	r2, [pc, #392]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003964:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003966:	f7fd f875 	bl	8000a54 <HAL_GetTick>
 800396a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800396e:	f7fd f871 	bl	8000a54 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1f4      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003980:	4b59      	ldr	r3, [pc, #356]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x5aa>
 800398c:	e018      	b.n	80039c0 <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800398e:	4b56      	ldr	r3, [pc, #344]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a55      	ldr	r2, [pc, #340]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003998:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800399a:	f7fd f85b 	bl	8000a54 <HAL_GetTick>
 800399e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039a2:	f7fd f857 	bl	8000a54 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1da      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039b4:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8099 	beq.w	8003b00 <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x62c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d008      	beq.n	80039f0 <HAL_RCC_OscConfig+0x62c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d004      	beq.n	80039f0 <HAL_RCC_OscConfig+0x62c>
 80039e6:	f240 2191 	movw	r1, #657	; 0x291
 80039ea:	4840      	ldr	r0, [pc, #256]	; (8003aec <HAL_RCC_OscConfig+0x728>)
 80039ec:	f00b f9a3 	bl	800ed36 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039f0:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <HAL_RCC_OscConfig+0x72c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a3e      	ldr	r2, [pc, #248]	; (8003af0 <HAL_RCC_OscConfig+0x72c>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039fc:	f7fd f82a 	bl	8000a54 <HAL_GetTick>
 8003a00:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd f826 	bl	8000a54 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1a9      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <HAL_RCC_OscConfig+0x72c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_OscConfig+0x674>
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	e02d      	b.n	8003a94 <HAL_RCC_OscConfig+0x6d0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x696>
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a28      	ldr	r2, [pc, #160]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4c:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a52:	f023 0304 	bic.w	r3, r3, #4
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x6d0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x6b8>
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0x6d0>
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6713      	str	r3, [r2, #112]	; 0x70
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003a8e:	f023 0304 	bic.w	r3, r3, #4
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fc ffda 	bl	8000a54 <HAL_GetTick>
 8003aa0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fc ffd6 	bl	8000a54 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e157      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_OscConfig+0x724>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ee      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x6e0>
 8003ac6:	e01b      	b.n	8003b00 <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fc ffc4 	bl	8000a54 <HAL_GetTick>
 8003acc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ace:	e011      	b.n	8003af4 <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fc ffc0 	bl	8000a54 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d908      	bls.n	8003af4 <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e141      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
 8003ae6:	bf00      	nop
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	08010820 	.word	0x08010820
 8003af0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003af4:	4b9f      	ldr	r3, [pc, #636]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e7      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x75e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_OscConfig+0x75e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d004      	beq.n	8003b22 <HAL_RCC_OscConfig+0x75e>
 8003b18:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003b1c:	4896      	ldr	r0, [pc, #600]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003b1e:	f00b f90a 	bl	800ed36 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 811e 	beq.w	8003d68 <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b2c:	4b91      	ldr	r3, [pc, #580]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b34:	2b18      	cmp	r3, #24
 8003b36:	f000 8115 	beq.w	8003d64 <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 80f6 	bne.w	8003d30 <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d010      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7aa>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7aa>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7aa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d004      	beq.n	8003b6e <HAL_RCC_OscConfig+0x7aa>
 8003b64:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8003b68:	4883      	ldr	r0, [pc, #524]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003b6a:	f00b f8e4 	bl	800ed36 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_OscConfig+0x7ba>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	2b3f      	cmp	r3, #63	; 0x3f
 8003b7c:	d904      	bls.n	8003b88 <HAL_RCC_OscConfig+0x7c4>
 8003b7e:	f240 21cd 	movw	r1, #717	; 0x2cd
 8003b82:	487d      	ldr	r0, [pc, #500]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003b84:	f00b f8d7 	bl	800ed36 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d904      	bls.n	8003b9a <HAL_RCC_OscConfig+0x7d6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b98:	d904      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x7e0>
 8003b9a:	f240 21ce 	movw	r1, #718	; 0x2ce
 8003b9e:	4876      	ldr	r0, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003ba0:	f00b f8c9 	bl	800ed36 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x7f0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d904      	bls.n	8003bbe <HAL_RCC_OscConfig+0x7fa>
 8003bb4:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003bb8:	486f      	ldr	r0, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003bba:	f00b f8bc 	bl	800ed36 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_OscConfig+0x80a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d904      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x814>
 8003bce:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8003bd2:	4869      	ldr	r0, [pc, #420]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003bd4:	f00b f8af 	bl	800ed36 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCC_OscConfig+0x824>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d904      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x82e>
 8003be8:	f240 21d1 	movw	r1, #721	; 0x2d1
 8003bec:	4862      	ldr	r0, [pc, #392]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003bee:	f00b f8a2 	bl	800ed36 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfa:	d304      	bcc.n	8003c06 <HAL_RCC_OscConfig+0x842>
 8003bfc:	f240 21d2 	movw	r1, #722	; 0x2d2
 8003c00:	485d      	ldr	r0, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x9b4>)
 8003c02:	f00b f898 	bl	800ed36 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a5a      	ldr	r2, [pc, #360]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fc ff1f 	bl	8000a54 <HAL_GetTick>
 8003c16:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fc ff1b 	bl	8000a54 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e09e      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c2c:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3c:	4b4f      	ldr	r3, [pc, #316]	; (8003d7c <HAL_RCC_OscConfig+0x9b8>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	4949      	ldr	r1, [pc, #292]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	628b      	str	r3, [r1, #40]	; 0x28
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	3b01      	subs	r3, #1
 8003c62:	025b      	lsls	r3, r3, #9
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c82:	493c      	ldr	r1, [pc, #240]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003c88:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c94:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c98:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_OscConfig+0x9bc>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ca0:	00d2      	lsls	r2, r2, #3
 8003ca2:	4934      	ldr	r1, [pc, #208]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f023 020c 	bic.w	r2, r3, #12
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	492f      	ldr	r1, [pc, #188]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cba:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f023 0202 	bic.w	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	492b      	ldr	r1, [pc, #172]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd8:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003cf0:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fc fea4 	bl	8000a54 <HAL_GetTick>
 8003d0c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fc fea0 	bl	8000a54 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e023      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x94c>
 8003d2e:	e01b      	b.n	8003d68 <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0f      	ldr	r2, [pc, #60]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fc fe8a 	bl	8000a54 <HAL_GetTick>
 8003d40:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fc fe86 	bl	8000a54 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e009      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_RCC_OscConfig+0x9b0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x980>
 8003d62:	e001      	b.n	8003d68 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3728      	adds	r7, #40	; 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
 8003d78:	08010820 	.word	0x08010820
 8003d7c:	fffffc0c 	.word	0xfffffc0c
 8003d80:	ffff0007 	.word	0xffff0007

08003d84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e345      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x24>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b3f      	cmp	r3, #63	; 0x3f
 8003da6:	d904      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x2e>
 8003da8:	f240 3152 	movw	r1, #850	; 0x352
 8003dac:	4827      	ldr	r0, [pc, #156]	; (8003e4c <HAL_RCC_ClockConfig+0xc8>)
 8003dae:	f00a ffc2 	bl	800ed36 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d031      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d02e      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d02b      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d028      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d025      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d022      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d01f      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	d01c      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d019      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b09      	cmp	r3, #9
 8003dec:	d016      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b0a      	cmp	r3, #10
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b0b      	cmp	r3, #11
 8003df8:	d010      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b0d      	cmp	r3, #13
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b0e      	cmp	r3, #14
 8003e0a:	d007      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d004      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x98>
 8003e12:	f240 3153 	movw	r1, #851	; 0x353
 8003e16:	480d      	ldr	r0, [pc, #52]	; (8003e4c <HAL_RCC_ClockConfig+0xc8>)
 8003e18:	f00a ff8d 	bl	800ed36 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_RCC_ClockConfig+0xcc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d914      	bls.n	8003e54 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0xcc>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 020f 	bic.w	r2, r3, #15
 8003e32:	4907      	ldr	r1, [pc, #28]	; (8003e50 <HAL_RCC_ClockConfig+0xcc>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_ClockConfig+0xcc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e2eb      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
 8003e4c:	08010820 	.word	0x08010820
 8003e50:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d029      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	4b9a      	ldr	r3, [pc, #616]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d921      	bls.n	8003eb4 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d014      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x11e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d010      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x11e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d00c      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x11e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b60      	cmp	r3, #96	; 0x60
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x11e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b70      	cmp	r3, #112	; 0x70
 8003e96:	d004      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x11e>
 8003e98:	f240 316e 	movw	r1, #878	; 0x36e
 8003e9c:	488d      	ldr	r0, [pc, #564]	; (80040d4 <HAL_RCC_ClockConfig+0x350>)
 8003e9e:	f00a ff4a 	bl	800ed36 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ea2:	4b8b      	ldr	r3, [pc, #556]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	4988      	ldr	r1, [pc, #544]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d029      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	4b82      	ldr	r3, [pc, #520]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d921      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d014      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x17e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d010      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x17e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	2b50      	cmp	r3, #80	; 0x50
 8003ee6:	d00c      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x17e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	2b60      	cmp	r3, #96	; 0x60
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x17e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	2b70      	cmp	r3, #112	; 0x70
 8003ef6:	d004      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x17e>
 8003ef8:	f44f 715e 	mov.w	r1, #888	; 0x378
 8003efc:	4875      	ldr	r0, [pc, #468]	; (80040d4 <HAL_RCC_ClockConfig+0x350>)
 8003efe:	f00a ff1a 	bl	800ed36 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f02:	4b73      	ldr	r3, [pc, #460]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4970      	ldr	r1, [pc, #448]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d02d      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d925      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d018      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x1e6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d013      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x1e6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f4a:	d00e      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x1e6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x1e6>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f5e:	d004      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x1e6>
 8003f60:	f240 3182 	movw	r1, #898	; 0x382
 8003f64:	485b      	ldr	r0, [pc, #364]	; (80040d4 <HAL_RCC_ClockConfig+0x350>)
 8003f66:	f00a fee6 	bl	800ed36 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f6a:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	4956      	ldr	r1, [pc, #344]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d029      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d921      	bls.n	8003fdc <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d014      	beq.n	8003fca <HAL_RCC_ClockConfig+0x246>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d010      	beq.n	8003fca <HAL_RCC_ClockConfig+0x246>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	2b50      	cmp	r3, #80	; 0x50
 8003fae:	d00c      	beq.n	8003fca <HAL_RCC_ClockConfig+0x246>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2b60      	cmp	r3, #96	; 0x60
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x246>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2b70      	cmp	r3, #112	; 0x70
 8003fbe:	d004      	beq.n	8003fca <HAL_RCC_ClockConfig+0x246>
 8003fc0:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8003fc4:	4843      	ldr	r0, [pc, #268]	; (80040d4 <HAL_RCC_ClockConfig+0x350>)
 8003fc6:	f00a feb6 	bl	800ed36 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fca:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	493e      	ldr	r1, [pc, #248]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d039      	beq.n	800405c <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d931      	bls.n	800405c <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d024      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d020      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b09      	cmp	r3, #9
 800400e:	d01c      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b0a      	cmp	r3, #10
 8004016:	d018      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b0b      	cmp	r3, #11
 800401e:	d014      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b0d      	cmp	r3, #13
 800402e:	d00c      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b0e      	cmp	r3, #14
 8004036:	d008      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b0f      	cmp	r3, #15
 800403e:	d004      	beq.n	800404a <HAL_RCC_ClockConfig+0x2c6>
 8004040:	f240 3197 	movw	r1, #919	; 0x397
 8004044:	4823      	ldr	r0, [pc, #140]	; (80040d4 <HAL_RCC_ClockConfig+0x350>)
 8004046:	f00a fe76 	bl	800ed36 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f023 020f 	bic.w	r2, r3, #15
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	491e      	ldr	r1, [pc, #120]	; (80040d0 <HAL_RCC_ClockConfig+0x34c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80a2 	beq.w	80041ae <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d032      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407a:	d02d      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004084:	d028      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800408e:	d023      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004098:	d01e      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a2:	d019      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80040ac:	d014      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80040b6:	d00f      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 80040c2:	f240 319f 	movw	r1, #927	; 0x39f
 80040c6:	4803      	ldr	r0, [pc, #12]	; (80040d4 <HAL_RCC_ClockConfig+0x350>)
 80040c8:	f00a fe35 	bl	800ed36 <assert_failed>
 80040cc:	e004      	b.n	80040d8 <HAL_RCC_ClockConfig+0x354>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
 80040d4:	08010820 	.word	0x08010820
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x37e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00c      	beq.n	8004102 <HAL_RCC_ClockConfig+0x37e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d008      	beq.n	8004102 <HAL_RCC_ClockConfig+0x37e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d004      	beq.n	8004102 <HAL_RCC_ClockConfig+0x37e>
 80040f8:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80040fc:	4858      	ldr	r0, [pc, #352]	; (8004260 <HAL_RCC_ClockConfig+0x4dc>)
 80040fe:	f00a fe1a 	bl	800ed36 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004102:	4b58      	ldr	r3, [pc, #352]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	4955      	ldr	r1, [pc, #340]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 8004110:	4313      	orrs	r3, r2
 8004112:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d107      	bne.n	800412c <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800411c:	4b51      	ldr	r3, [pc, #324]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d121      	bne.n	800416c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e17b      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d107      	bne.n	8004144 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004134:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d115      	bne.n	800416c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e16f      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800414c:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e163      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800415c:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e15b      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800416c:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f023 0207 	bic.w	r2, r3, #7
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	493a      	ldr	r1, [pc, #232]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fc fc69 	bl	8000a54 <HAL_GetTick>
 8004182:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004184:	e00a      	b.n	800419c <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f7fc fc65 	bl	8000a54 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e143      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419c:	4b31      	ldr	r3, [pc, #196]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d1eb      	bne.n	8004186 <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d039      	beq.n	800422e <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d231      	bcs.n	800422e <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d024      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d020      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b09      	cmp	r3, #9
 80041e0:	d01c      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b0a      	cmp	r3, #10
 80041e8:	d018      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b0b      	cmp	r3, #11
 80041f0:	d014      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b0c      	cmp	r3, #12
 80041f8:	d010      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b0d      	cmp	r3, #13
 8004200:	d00c      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b0e      	cmp	r3, #14
 8004208:	d008      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	d004      	beq.n	800421c <HAL_RCC_ClockConfig+0x498>
 8004212:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8004216:	4812      	ldr	r0, [pc, #72]	; (8004260 <HAL_RCC_ClockConfig+0x4dc>)
 8004218:	f00a fd8d 	bl	800ed36 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f023 020f 	bic.w	r2, r3, #15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x4e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x4e4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d217      	bcs.n	800426c <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x4e4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 020f 	bic.w	r2, r3, #15
 8004244:	4908      	ldr	r1, [pc, #32]	; (8004268 <HAL_RCC_ClockConfig+0x4e4>)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <HAL_RCC_ClockConfig+0x4e4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d008      	beq.n	800426c <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0e2      	b.n	8004424 <HAL_RCC_ClockConfig+0x6a0>
 800425e:	bf00      	nop
 8004260:	08010820 	.word	0x08010820
 8004264:	58024400 	.word	0x58024400
 8004268:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d029      	beq.n	80042cc <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	4b6b      	ldr	r3, [pc, #428]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004284:	429a      	cmp	r2, r3
 8004286:	d221      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d014      	beq.n	80042ba <HAL_RCC_ClockConfig+0x536>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d010      	beq.n	80042ba <HAL_RCC_ClockConfig+0x536>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b50      	cmp	r3, #80	; 0x50
 800429e:	d00c      	beq.n	80042ba <HAL_RCC_ClockConfig+0x536>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b60      	cmp	r3, #96	; 0x60
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_ClockConfig+0x536>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b70      	cmp	r3, #112	; 0x70
 80042ae:	d004      	beq.n	80042ba <HAL_RCC_ClockConfig+0x536>
 80042b0:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80042b4:	485e      	ldr	r0, [pc, #376]	; (8004430 <HAL_RCC_ClockConfig+0x6ac>)
 80042b6:	f00a fd3e 	bl	800ed36 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042ba:	4b5c      	ldr	r3, [pc, #368]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	4959      	ldr	r1, [pc, #356]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d029      	beq.n	800432c <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	4b53      	ldr	r3, [pc, #332]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d221      	bcs.n	800432c <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d014      	beq.n	800431a <HAL_RCC_ClockConfig+0x596>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d010      	beq.n	800431a <HAL_RCC_ClockConfig+0x596>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b50      	cmp	r3, #80	; 0x50
 80042fe:	d00c      	beq.n	800431a <HAL_RCC_ClockConfig+0x596>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b60      	cmp	r3, #96	; 0x60
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x596>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	2b70      	cmp	r3, #112	; 0x70
 800430e:	d004      	beq.n	800431a <HAL_RCC_ClockConfig+0x596>
 8004310:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004314:	4846      	ldr	r0, [pc, #280]	; (8004430 <HAL_RCC_ClockConfig+0x6ac>)
 8004316:	f00a fd0e 	bl	800ed36 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4941      	ldr	r1, [pc, #260]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d02d      	beq.n	8004394 <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699a      	ldr	r2, [r3, #24]
 800433c:	4b3b      	ldr	r3, [pc, #236]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004344:	429a      	cmp	r2, r3
 8004346:	d225      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d018      	beq.n	8004382 <HAL_RCC_ClockConfig+0x5fe>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d013      	beq.n	8004382 <HAL_RCC_ClockConfig+0x5fe>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004362:	d00e      	beq.n	8004382 <HAL_RCC_ClockConfig+0x5fe>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x5fe>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004376:	d004      	beq.n	8004382 <HAL_RCC_ClockConfig+0x5fe>
 8004378:	f44f 6181 	mov.w	r1, #1032	; 0x408
 800437c:	482c      	ldr	r0, [pc, #176]	; (8004430 <HAL_RCC_ClockConfig+0x6ac>)
 800437e:	f00a fcda 	bl	800ed36 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004382:	4b2a      	ldr	r3, [pc, #168]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	4927      	ldr	r1, [pc, #156]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 8004390:	4313      	orrs	r3, r2
 8004392:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d029      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	4b21      	ldr	r3, [pc, #132]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d221      	bcs.n	80043f4 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d014      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x65e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x65e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b50      	cmp	r3, #80	; 0x50
 80043c6:	d00c      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x65e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	2b60      	cmp	r3, #96	; 0x60
 80043ce:	d008      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x65e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	2b70      	cmp	r3, #112	; 0x70
 80043d6:	d004      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x65e>
 80043d8:	f240 4112 	movw	r1, #1042	; 0x412
 80043dc:	4814      	ldr	r0, [pc, #80]	; (8004430 <HAL_RCC_ClockConfig+0x6ac>)
 80043de:	f00a fcaa 	bl	800ed36 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	490f      	ldr	r1, [pc, #60]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043f4:	f000 f824 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043f8:	4601      	mov	r1, r0
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <HAL_RCC_ClockConfig+0x6a8>)
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <HAL_RCC_ClockConfig+0x6b0>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa21 f303 	lsr.w	r3, r1, r3
 8004410:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x6b4>)
 8004412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x6b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc fad1 	bl	80009c0 <HAL_InitTick>
 800441e:	4603      	mov	r3, r0
 8004420:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004422:	7afb      	ldrb	r3, [r7, #11]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	58024400 	.word	0x58024400
 8004430:	08010820 	.word	0x08010820
 8004434:	08011ad0 	.word	0x08011ad0
 8004438:	2400002c 	.word	0x2400002c
 800443c:	24000000 	.word	0x24000000

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	; 0x24
 8004444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004446:	4baf      	ldr	r3, [pc, #700]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800444e:	2b18      	cmp	r3, #24
 8004450:	f200 814e 	bhi.w	80046f0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	080044c1 	.word	0x080044c1
 8004460:	080046f1 	.word	0x080046f1
 8004464:	080046f1 	.word	0x080046f1
 8004468:	080046f1 	.word	0x080046f1
 800446c:	080046f1 	.word	0x080046f1
 8004470:	080046f1 	.word	0x080046f1
 8004474:	080046f1 	.word	0x080046f1
 8004478:	080046f1 	.word	0x080046f1
 800447c:	080044e7 	.word	0x080044e7
 8004480:	080046f1 	.word	0x080046f1
 8004484:	080046f1 	.word	0x080046f1
 8004488:	080046f1 	.word	0x080046f1
 800448c:	080046f1 	.word	0x080046f1
 8004490:	080046f1 	.word	0x080046f1
 8004494:	080046f1 	.word	0x080046f1
 8004498:	080046f1 	.word	0x080046f1
 800449c:	080044ed 	.word	0x080044ed
 80044a0:	080046f1 	.word	0x080046f1
 80044a4:	080046f1 	.word	0x080046f1
 80044a8:	080046f1 	.word	0x080046f1
 80044ac:	080046f1 	.word	0x080046f1
 80044b0:	080046f1 	.word	0x080046f1
 80044b4:	080046f1 	.word	0x080046f1
 80044b8:	080046f1 	.word	0x080046f1
 80044bc:	080044f3 	.word	0x080044f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044c0:	4b90      	ldr	r3, [pc, #576]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044cc:	4b8d      	ldr	r3, [pc, #564]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	4a8c      	ldr	r2, [pc, #560]	; (8004708 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
 80044dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80044de:	e10a      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044e0:	4b89      	ldr	r3, [pc, #548]	; (8004708 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80044e2:	61bb      	str	r3, [r7, #24]
    break;
 80044e4:	e107      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044e6:	4b89      	ldr	r3, [pc, #548]	; (800470c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80044e8:	61bb      	str	r3, [r7, #24]
    break;
 80044ea:	e104      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044ec:	4b88      	ldr	r3, [pc, #544]	; (8004710 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80044ee:	61bb      	str	r3, [r7, #24]
    break;
 80044f0:	e101      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044f2:	4b84      	ldr	r3, [pc, #528]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80044fc:	4b81      	ldr	r3, [pc, #516]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004506:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004508:	4b7e      	ldr	r3, [pc, #504]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004512:	4b7c      	ldr	r3, [pc, #496]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	08db      	lsrs	r3, r3, #3
 8004518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80da 	beq.w	80046ea <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d05a      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800453c:	2b01      	cmp	r3, #1
 800453e:	d302      	bcc.n	8004546 <HAL_RCC_GetSysClockFreq+0x106>
 8004540:	2b02      	cmp	r3, #2
 8004542:	d078      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004544:	e099      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004546:	4b6f      	ldr	r3, [pc, #444]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02d      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004552:	4b6c      	ldr	r3, [pc, #432]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	4a6a      	ldr	r2, [pc, #424]	; (8004708 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004590:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004714 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045ac:	e087      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004718 <HAL_RCC_GetSysClockFreq+0x2d8>
 80045bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004714 <HAL_RCC_GetSysClockFreq+0x2d4>
 80045d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f0:	e065      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fc:	eddf 6a47 	vldr	s13, [pc, #284]	; 800471c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004604:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004614:	ed97 6a02 	vldr	s12, [r7, #8]
 8004618:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004714 <HAL_RCC_GetSysClockFreq+0x2d4>
 800461c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004634:	e043      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004720 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004648:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004658:	ed97 6a02 	vldr	s12, [r7, #8]
 800465c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004714 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004678:	e021      	b.n	80046be <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004684:	eddf 6a25 	vldr	s13, [pc, #148]	; 800471c <HAL_RCC_GetSysClockFreq+0x2dc>
 8004688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469c:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004714 <HAL_RCC_GetSysClockFreq+0x2d4>
 80046a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046bc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	0a5b      	lsrs	r3, r3, #9
 80046c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c8:	3301      	adds	r3, #1
 80046ca:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e2:	ee17 3a90 	vmov	r3, s15
 80046e6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80046e8:	e005      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
    break;
 80046ee:	e002      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046f2:	61bb      	str	r3, [r7, #24]
    break;
 80046f4:	bf00      	nop
  }

  return sysclockfreq;
 80046f6:	69bb      	ldr	r3, [r7, #24]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3724      	adds	r7, #36	; 0x24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	58024400 	.word	0x58024400
 8004708:	03d09000 	.word	0x03d09000
 800470c:	003d0900 	.word	0x003d0900
 8004710:	007a1200 	.word	0x007a1200
 8004714:	46000000 	.word	0x46000000
 8004718:	4c742400 	.word	0x4c742400
 800471c:	4a742400 	.word	0x4a742400
 8004720:	4af42400 	.word	0x4af42400

08004724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004728:	f001 fc94 	bl	8006054 <HAL_RCCEx_GetD1SysClockFreq>
 800472c:	4601      	mov	r1, r0
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	4a07      	ldr	r2, [pc, #28]	; (8004754 <HAL_RCC_GetHCLKFreq+0x30>)
 8004738:	5cd3      	ldrb	r3, [r2, r3]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	fa21 f303 	lsr.w	r3, r1, r3
 8004742:	4a05      	ldr	r2, [pc, #20]	; (8004758 <HAL_RCC_GetHCLKFreq+0x34>)
 8004744:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <HAL_RCC_GetHCLKFreq+0x34>)
 8004748:	681b      	ldr	r3, [r3, #0]
}
 800474a:	4618      	mov	r0, r3
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	58024400 	.word	0x58024400
 8004754:	08011ad0 	.word	0x08011ad0
 8004758:	24000030 	.word	0x24000030

0800475c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004760:	f7ff ffe0 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004764:	4601      	mov	r1, r0
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	58024400 	.word	0x58024400
 8004784:	08011ad0 	.word	0x08011ad0

08004788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800478c:	f7ff ffca 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004790:	4601      	mov	r1, r0
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	58024400 	.word	0x58024400
 80047b0:	08011ad0 	.word	0x08011ad0

080047b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047bc:	2300      	movs	r3, #0
 80047be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047c0:	2300      	movs	r3, #0
 80047c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d03d      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d8:	d013      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80047da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047de:	d802      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80047e4:	e01f      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80047e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ea:	d013      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80047ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047f0:	d01c      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80047f2:	e018      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f4:	4baf      	ldr	r3, [pc, #700]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	4aae      	ldr	r2, [pc, #696]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004800:	e015      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2102      	movs	r1, #2
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fc3f 	bl	800608c <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004812:	e00c      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	2102      	movs	r1, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f001 fd58 	bl	80062d0 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004824:	e003      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	75fb      	strb	r3, [r7, #23]
      break;
 800482a:	e000      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800482c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800482e:	7dfb      	ldrb	r3, [r7, #23]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004834:	4b9f      	ldr	r3, [pc, #636]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004840:	499c      	ldr	r1, [pc, #624]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004842:	4313      	orrs	r3, r2
 8004844:	650b      	str	r3, [r1, #80]	; 0x50
 8004846:	e001      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d03d      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	2b04      	cmp	r3, #4
 800485e:	d826      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	0800487d 	.word	0x0800487d
 800486c:	0800488b 	.word	0x0800488b
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048b5 	.word	0x080048b5
 8004878:	080048b5 	.word	0x080048b5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800487c:	4b8d      	ldr	r3, [pc, #564]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	4a8c      	ldr	r2, [pc, #560]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004888:	e015      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fbfb 	bl	800608c <RCCEx_PLL2_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800489a:	e00c      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3324      	adds	r3, #36	; 0x24
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 fd14 	bl	80062d0 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
      break;
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80048b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048bc:	4b7d      	ldr	r3, [pc, #500]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	f023 0207 	bic.w	r2, r3, #7
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	497a      	ldr	r1, [pc, #488]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	650b      	str	r3, [r1, #80]	; 0x50
 80048ce:	e001      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03e      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d01c      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d804      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d00d      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80048f4:	e01e      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80048f6:	2bc0      	cmp	r3, #192	; 0xc0
 80048f8:	d01f      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80048fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fe:	d01e      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004900:	e018      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004902:	4b6c      	ldr	r3, [pc, #432]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	4a6b      	ldr	r2, [pc, #428]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800490e:	e017      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f001 fbb8 	bl	800608c <RCCEx_PLL2_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004920:	e00e      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3324      	adds	r3, #36	; 0x24
 8004926:	2100      	movs	r1, #0
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fcd1 	bl	80062d0 <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004932:	e005      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	e002      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800493e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004946:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	4958      	ldr	r1, [pc, #352]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004954:	4313      	orrs	r3, r2
 8004956:	650b      	str	r3, [r1, #80]	; 0x50
 8004958:	e001      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004966:	2b00      	cmp	r3, #0
 8004968:	d044      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004974:	d01f      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497a:	d805      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004984:	d00e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004986:	e01f      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004988:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800498c:	d01f      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800498e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004992:	d01e      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004994:	e018      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004996:	4b47      	ldr	r3, [pc, #284]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	4a46      	ldr	r2, [pc, #280]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049a2:	e017      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 fb6e 	bl	800608c <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80049b4:	e00e      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3324      	adds	r3, #36	; 0x24
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 fc87 	bl	80062d0 <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049c6:	e005      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
      break;
 80049cc:	e002      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80049ce:	bf00      	nop
 80049d0:	e000      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80049d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049da:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049e8:	4932      	ldr	r1, [pc, #200]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	658b      	str	r3, [r1, #88]	; 0x58
 80049ee:	e001      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d044      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a0a:	d01f      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a10:	d805      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a1a:	d00e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004a1c:	e01f      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004a1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a22:	d01f      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a28:	d01e      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004a2a:	e018      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a38:	e017      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fb23 	bl	800608c <RCCEx_PLL2_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a4a:	e00e      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3324      	adds	r3, #36	; 0x24
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fc3c 	bl	80062d0 <RCCEx_PLL3_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a5c:	e005      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a7e:	490d      	ldr	r1, [pc, #52]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	658b      	str	r3, [r1, #88]	; 0x58
 8004a84:	e001      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d035      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d802      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01b      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004aa6:	e017      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d00c      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004aac:	2b30      	cmp	r3, #48	; 0x30
 8004aae:	d018      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004ab0:	e012      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ab2:	bf00      	nop
 8004ab4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab8:	4baf      	ldr	r3, [pc, #700]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4aae      	ldr	r2, [pc, #696]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ac4:	e00e      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 fadd 	bl	800608c <RCCEx_PLL2_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d109      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004aea:	4ba3      	ldr	r3, [pc, #652]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	49a0      	ldr	r1, [pc, #640]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004afc:	e001      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d042      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b16:	d01f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1c:	d805      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d00e      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004b28:	e01f      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b2e:	d01f      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b34:	d01e      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004b36:	e018      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b38:	4b8f      	ldr	r3, [pc, #572]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a8e      	ldr	r2, [pc, #568]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b44:	e017      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fa9d 	bl	800608c <RCCEx_PLL2_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b56:	e00e      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3324      	adds	r3, #36	; 0x24
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fbb6 	bl	80062d0 <RCCEx_PLL3_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b68:	e005      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6e:	e002      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b7c:	4b7e      	ldr	r3, [pc, #504]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b88:	497b      	ldr	r1, [pc, #492]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8004b8e:	e001      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d042      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ba8:	d01b      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bae:	d805      	bhi.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d022      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004bba:	e01b      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004bbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bc0:	d01d      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc6:	d01c      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bcc:	d01b      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004bce:	e011      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 fa58 	bl	800608c <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004be0:	e012      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3324      	adds	r3, #36	; 0x24
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fb71 	bl	80062d0 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c0e:	4b5a      	ldr	r3, [pc, #360]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1a:	4957      	ldr	r1, [pc, #348]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	650b      	str	r3, [r1, #80]	; 0x50
 8004c20:	e001      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d044      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3c:	d01b      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c42:	d805      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d022      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c4e:	e01b      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c54:	d01d      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c5a:	d01c      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004c5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c60:	d01b      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c62:	e011      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	2101      	movs	r1, #1
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fa0e 	bl	800608c <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c74:	e012      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 fb27 	bl	80062d0 <RCCEx_PLL3_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c86:	e009      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8c:	e006      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ca2:	4b35      	ldr	r3, [pc, #212]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cb0:	4931      	ldr	r1, [pc, #196]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02d      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cd0:	d005      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd6:	d009      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d013      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004cdc:	e00f      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	4a25      	ldr	r2, [pc, #148]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cea:	e00c      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 f9ca 	bl	800608c <RCCEx_PLL2_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
      break;
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d18:	4917      	ldr	r1, [pc, #92]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	650b      	str	r3, [r1, #80]	; 0x50
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d037      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d81b      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d7d 	.word	0x08004d7d
 8004d44:	08004d51 	.word	0x08004d51
 8004d48:	08004d5f 	.word	0x08004d5f
 8004d4c:	08004d7d 	.word	0x08004d7d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d5c:	e00f      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	2102      	movs	r1, #2
 8004d64:	4618      	mov	r0, r3
 8004d66:	f001 f991 	bl	800608c <RCCEx_PLL2_Config>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d6e:	e006      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
      break;
 8004d74:	e003      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
      break;
 8004d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d84:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	f023 0203 	bic.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	4901      	ldr	r1, [pc, #4]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 829b 	beq.w	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db8:	f000 81a9 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	f000 81a2 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dd0:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8004dd4:	f000 819b 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dde:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8004de2:	f000 8194 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dec:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8004df0:	f000 818d 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dfa:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8004dfe:	f000 8186 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e08:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8004e0c:	f000 817f 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e16:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8004e1a:	f000 8178 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e24:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8004e28:	f000 8171 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e32:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8004e36:	f000 816a 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e40:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8004e44:	f000 8163 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e4e:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8004e52:	f000 815c 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e5c:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8004e60:	f000 8155 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e6a:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8004e6e:	f000 814e 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e78:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8004e7c:	f000 8147 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e86:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8004e8a:	f000 8140 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e94:	4aa8      	ldr	r2, [pc, #672]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f000 8139 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ea2:	4aa6      	ldr	r2, [pc, #664]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	f000 8132 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eb0:	4aa3      	ldr	r2, [pc, #652]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	f000 812b 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ebe:	4aa1      	ldr	r2, [pc, #644]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	f000 8124 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ecc:	4a9e      	ldr	r2, [pc, #632]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f000 811d 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eda:	4a9c      	ldr	r2, [pc, #624]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	f000 8116 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ee8:	4a99      	ldr	r2, [pc, #612]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	f000 810f 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ef6:	4a97      	ldr	r2, [pc, #604]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	f000 8108 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f04:	4a94      	ldr	r2, [pc, #592]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	f000 8101 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f12:	4a92      	ldr	r2, [pc, #584]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	f000 80fa 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f20:	4a8f      	ldr	r2, [pc, #572]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	f000 80f3 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f2e:	4a8d      	ldr	r2, [pc, #564]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	f000 80ec 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f3c:	4a8a      	ldr	r2, [pc, #552]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f000 80e5 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f4a:	4a88      	ldr	r2, [pc, #544]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	f000 80de 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f58:	4a85      	ldr	r2, [pc, #532]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	f000 80d7 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f66:	4a83      	ldr	r2, [pc, #524]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	f000 80d0 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f74:	4a80      	ldr	r2, [pc, #512]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f000 80c9 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f82:	4a7e      	ldr	r2, [pc, #504]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	f000 80c2 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f90:	4a7b      	ldr	r2, [pc, #492]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	f000 80bb 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f9e:	4a79      	ldr	r2, [pc, #484]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	f000 80b4 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fac:	4a76      	ldr	r2, [pc, #472]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f000 80ad 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fba:	4a74      	ldr	r2, [pc, #464]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	f000 80a6 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fc8:	4a71      	ldr	r2, [pc, #452]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	f000 809f 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fd6:	4a6f      	ldr	r2, [pc, #444]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	f000 8098 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fe4:	4a6c      	ldr	r2, [pc, #432]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f000 8091 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ff2:	4a6a      	ldr	r2, [pc, #424]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	f000 808a 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005000:	4a67      	ldr	r2, [pc, #412]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005002:	4293      	cmp	r3, r2
 8005004:	f000 8083 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800500e:	4a65      	ldr	r2, [pc, #404]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d07c      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800501a:	4a63      	ldr	r2, [pc, #396]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d076      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005026:	4a61      	ldr	r2, [pc, #388]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d070      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005032:	4a5f      	ldr	r2, [pc, #380]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d06a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800503e:	4a5d      	ldr	r2, [pc, #372]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d064      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800504a:	4a5b      	ldr	r2, [pc, #364]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d05e      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005056:	4a59      	ldr	r2, [pc, #356]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d058      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005062:	4a57      	ldr	r2, [pc, #348]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d052      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800506e:	4a55      	ldr	r2, [pc, #340]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d04c      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800507a:	4a53      	ldr	r2, [pc, #332]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d046      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005086:	4a51      	ldr	r2, [pc, #324]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d040      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005092:	4a4f      	ldr	r2, [pc, #316]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d03a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800509e:	4a4d      	ldr	r2, [pc, #308]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d034      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050aa:	4a4b      	ldr	r2, [pc, #300]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d02e      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050b6:	4a49      	ldr	r2, [pc, #292]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d028      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050c2:	4a47      	ldr	r2, [pc, #284]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d022      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ce:	4a45      	ldr	r2, [pc, #276]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d01c      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050da:	4a43      	ldr	r2, [pc, #268]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d016      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050e6:	4a41      	ldr	r2, [pc, #260]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d010      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050f2:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050fe:	4a3d      	ldr	r2, [pc, #244]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005104:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005108:	483b      	ldr	r0, [pc, #236]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 800510a:	f009 fe14 	bl	800ed36 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3a      	ldr	r2, [pc, #232]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800511a:	f7fb fc9b 	bl	8000a54 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005120:	e06e      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005122:	f7fb fc97 	bl	8000a54 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b64      	cmp	r3, #100	; 0x64
 800512e:	d967      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	75fb      	strb	r3, [r7, #23]
        break;
 8005134:	e06a      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8005136:	bf00      	nop
 8005138:	00010300 	.word	0x00010300
 800513c:	00011300 	.word	0x00011300
 8005140:	00012300 	.word	0x00012300
 8005144:	00013300 	.word	0x00013300
 8005148:	00014300 	.word	0x00014300
 800514c:	00015300 	.word	0x00015300
 8005150:	00016300 	.word	0x00016300
 8005154:	00017300 	.word	0x00017300
 8005158:	00018300 	.word	0x00018300
 800515c:	00019300 	.word	0x00019300
 8005160:	0001a300 	.word	0x0001a300
 8005164:	0001b300 	.word	0x0001b300
 8005168:	0001c300 	.word	0x0001c300
 800516c:	0001d300 	.word	0x0001d300
 8005170:	0001e300 	.word	0x0001e300
 8005174:	0001f300 	.word	0x0001f300
 8005178:	00020300 	.word	0x00020300
 800517c:	00021300 	.word	0x00021300
 8005180:	00022300 	.word	0x00022300
 8005184:	00023300 	.word	0x00023300
 8005188:	00024300 	.word	0x00024300
 800518c:	00025300 	.word	0x00025300
 8005190:	00026300 	.word	0x00026300
 8005194:	00027300 	.word	0x00027300
 8005198:	00028300 	.word	0x00028300
 800519c:	00029300 	.word	0x00029300
 80051a0:	0002a300 	.word	0x0002a300
 80051a4:	0002b300 	.word	0x0002b300
 80051a8:	0002c300 	.word	0x0002c300
 80051ac:	0002d300 	.word	0x0002d300
 80051b0:	0002e300 	.word	0x0002e300
 80051b4:	0002f300 	.word	0x0002f300
 80051b8:	00030300 	.word	0x00030300
 80051bc:	00031300 	.word	0x00031300
 80051c0:	00032300 	.word	0x00032300
 80051c4:	00033300 	.word	0x00033300
 80051c8:	00034300 	.word	0x00034300
 80051cc:	00035300 	.word	0x00035300
 80051d0:	00036300 	.word	0x00036300
 80051d4:	00037300 	.word	0x00037300
 80051d8:	00038300 	.word	0x00038300
 80051dc:	00039300 	.word	0x00039300
 80051e0:	0003a300 	.word	0x0003a300
 80051e4:	0003b300 	.word	0x0003b300
 80051e8:	0003c300 	.word	0x0003c300
 80051ec:	0003d300 	.word	0x0003d300
 80051f0:	0003e300 	.word	0x0003e300
 80051f4:	0003f300 	.word	0x0003f300
 80051f8:	08010858 	.word	0x08010858
 80051fc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005200:	4bb9      	ldr	r3, [pc, #740]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d08a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d166      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005212:	4bb6      	ldr	r3, [pc, #728]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800521c:	4053      	eors	r3, r2
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d013      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005226:	4bb1      	ldr	r3, [pc, #708]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005230:	4bae      	ldr	r3, [pc, #696]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4aad      	ldr	r2, [pc, #692]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800523c:	4bab      	ldr	r3, [pc, #684]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	4aaa      	ldr	r2, [pc, #680]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005246:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005248:	4aa8      	ldr	r2, [pc, #672]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d115      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525a:	f7fb fbfb 	bl	8000a54 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005260:	e00b      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005262:	f7fb fbf7 	bl	8000a54 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d902      	bls.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	75fb      	strb	r3, [r7, #23]
            break;
 8005278:	e005      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800527a:	4b9c      	ldr	r3, [pc, #624]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ed      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d126      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529a:	d10d      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 800529c:	4b93      	ldr	r3, [pc, #588]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052aa:	0919      	lsrs	r1, r3, #4
 80052ac:	4b90      	ldr	r3, [pc, #576]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80052ae:	400b      	ands	r3, r1
 80052b0:	498e      	ldr	r1, [pc, #568]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	610b      	str	r3, [r1, #16]
 80052b6:	e005      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 80052b8:	4b8c      	ldr	r3, [pc, #560]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	4a8b      	ldr	r2, [pc, #556]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052c2:	6113      	str	r3, [r2, #16]
 80052c4:	4b89      	ldr	r3, [pc, #548]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d2:	4986      	ldr	r1, [pc, #536]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	670b      	str	r3, [r1, #112]	; 0x70
 80052d8:	e004      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	75bb      	strb	r3, [r7, #22]
 80052de:	e001      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d07e      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f4:	2b28      	cmp	r3, #40	; 0x28
 80052f6:	d867      	bhi.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 80052f8:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	080053cf 	.word	0x080053cf
 8005304:	080053c9 	.word	0x080053c9
 8005308:	080053c9 	.word	0x080053c9
 800530c:	080053c9 	.word	0x080053c9
 8005310:	080053c9 	.word	0x080053c9
 8005314:	080053c9 	.word	0x080053c9
 8005318:	080053c9 	.word	0x080053c9
 800531c:	080053c9 	.word	0x080053c9
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053c9 	.word	0x080053c9
 8005328:	080053c9 	.word	0x080053c9
 800532c:	080053c9 	.word	0x080053c9
 8005330:	080053c9 	.word	0x080053c9
 8005334:	080053c9 	.word	0x080053c9
 8005338:	080053c9 	.word	0x080053c9
 800533c:	080053c9 	.word	0x080053c9
 8005340:	080053b7 	.word	0x080053b7
 8005344:	080053c9 	.word	0x080053c9
 8005348:	080053c9 	.word	0x080053c9
 800534c:	080053c9 	.word	0x080053c9
 8005350:	080053c9 	.word	0x080053c9
 8005354:	080053c9 	.word	0x080053c9
 8005358:	080053c9 	.word	0x080053c9
 800535c:	080053c9 	.word	0x080053c9
 8005360:	080053cf 	.word	0x080053cf
 8005364:	080053c9 	.word	0x080053c9
 8005368:	080053c9 	.word	0x080053c9
 800536c:	080053c9 	.word	0x080053c9
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053c9 	.word	0x080053c9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053c9 	.word	0x080053c9
 8005380:	080053cf 	.word	0x080053cf
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053c9 	.word	0x080053c9
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080053c9 	.word	0x080053c9
 800539c:	080053c9 	.word	0x080053c9
 80053a0:	080053cf 	.word	0x080053cf
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	2101      	movs	r1, #1
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fe6e 	bl	800608c <RCCEx_PLL2_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053b4:	e00c      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3324      	adds	r3, #36	; 0x24
 80053ba:	2101      	movs	r1, #1
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 ff87 	bl	80062d0 <RCCEx_PLL3_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053c6:	e003      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
      break;
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80053ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053d6:	4b45      	ldr	r3, [pc, #276]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e2:	4942      	ldr	r1, [pc, #264]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	654b      	str	r3, [r1, #84]	; 0x54
 80053e8:	e001      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
 80053ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d037      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d820      	bhi.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8005402:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	0800544b 	.word	0x0800544b
 800540c:	08005421 	.word	0x08005421
 8005410:	08005433 	.word	0x08005433
 8005414:	0800544b 	.word	0x0800544b
 8005418:	0800544b 	.word	0x0800544b
 800541c:	0800544b 	.word	0x0800544b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	2101      	movs	r1, #1
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fe30 	bl	800608c <RCCEx_PLL2_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005430:	e00c      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3324      	adds	r3, #36	; 0x24
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f000 ff49 	bl	80062d0 <RCCEx_PLL3_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005442:	e003      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	75fb      	strb	r3, [r7, #23]
      break;
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 800544a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005452:	4b26      	ldr	r3, [pc, #152]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f023 0207 	bic.w	r2, r3, #7
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545e:	4923      	ldr	r1, [pc, #140]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005460:	4313      	orrs	r3, r2
 8005462:	654b      	str	r3, [r1, #84]	; 0x54
 8005464:	e001      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d040      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	2b05      	cmp	r3, #5
 800547e:	d821      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054cb 	.word	0x080054cb
 800548c:	080054a1 	.word	0x080054a1
 8005490:	080054b3 	.word	0x080054b3
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054cb 	.word	0x080054cb
 800549c:	080054cb 	.word	0x080054cb
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	2101      	movs	r1, #1
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fdf0 	bl	800608c <RCCEx_PLL2_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054b0:	e00c      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3324      	adds	r3, #36	; 0x24
 80054b6:	2101      	movs	r1, #1
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 ff09 	bl	80062d0 <RCCEx_PLL3_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054c2:	e003      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
      break;
 80054c8:	e000      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80054ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d110      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	f023 0207 	bic.w	r2, r3, #7
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	4902      	ldr	r1, [pc, #8]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	658b      	str	r3, [r1, #88]	; 0x58
 80054e6:	e007      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054e8:	58024800 	.word	0x58024800
 80054ec:	58024400 	.word	0x58024400
 80054f0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d044      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550e:	d01b      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005514:	d805      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d022      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800551a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005520:	e01b      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xda6>
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005526:	d01d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8005528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552c:	d01c      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800552e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005532:	d01b      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8005534:	e011      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fda5 	bl	800608c <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005546:	e012      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	2102      	movs	r1, #2
 800554e:	4618      	mov	r0, r3
 8005550:	f000 febe 	bl	80062d0 <RCCEx_PLL3_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005558:	e009      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	75fb      	strb	r3, [r7, #23]
      break;
 800555e:	e006      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005560:	bf00      	nop
 8005562:	e004      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005564:	bf00      	nop
 8005566:	e002      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005568:	bf00      	nop
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 800556c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005574:	4bb7      	ldr	r3, [pc, #732]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005582:	49b4      	ldr	r1, [pc, #720]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005584:	4313      	orrs	r3, r2
 8005586:	654b      	str	r3, [r1, #84]	; 0x54
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d044      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a4:	d01b      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 80055a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055aa:	d805      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d022      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 80055b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80055b6:	e01b      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 80055b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055bc:	d01d      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xe46>
 80055be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055c2:	d01c      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 80055c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055c8:	d01b      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 80055ca:	e011      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fd5a 	bl	800608c <RCCEx_PLL2_Config>
 80055d8:	4603      	mov	r3, r0
 80055da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80055dc:	e012      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3324      	adds	r3, #36	; 0x24
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fe73 	bl	80062d0 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80055ee:	e009      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
      break;
 80055f4:	e006      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80055f6:	bf00      	nop
 80055f8:	e004      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80055fa:	bf00      	nop
 80055fc:	e002      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80055fe:	bf00      	nop
 8005600:	e000      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800560a:	4b92      	ldr	r3, [pc, #584]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005618:	498e      	ldr	r1, [pc, #568]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800561a:	4313      	orrs	r3, r2
 800561c:	658b      	str	r3, [r1, #88]	; 0x58
 800561e:	e001      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
 8005622:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562c:	2b00      	cmp	r3, #0
 800562e:	d044      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800563a:	d01b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 800563c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005640:	d805      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d022      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 800564c:	e01b      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xed2>
 800564e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005652:	d01d      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005654:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005658:	d01c      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 800565a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800565e:	d01b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8005660:	e011      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fd0f 	bl	800608c <RCCEx_PLL2_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005672:	e012      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3324      	adds	r3, #36	; 0x24
 8005678:	2102      	movs	r1, #2
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fe28 	bl	80062d0 <RCCEx_PLL3_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005684:	e009      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
      break;
 800568a:	e006      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800568c:	bf00      	nop
 800568e:	e004      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005690:	bf00      	nop
 8005692:	e002      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005694:	bf00      	nop
 8005696:	e000      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056a0:	4b6c      	ldr	r3, [pc, #432]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056ae:	4969      	ldr	r1, [pc, #420]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	658b      	str	r3, [r1, #88]	; 0x58
 80056b4:	e001      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d037      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d015      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d00f      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056f2:	d004      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80056f4:	f240 413a 	movw	r1, #1082	; 0x43a
 80056f8:	4857      	ldr	r0, [pc, #348]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 80056fa:	f009 fb1c 	bl	800ed36 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d10b      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3324      	adds	r3, #36	; 0x24
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fddd 	bl	80062d0 <RCCEx_PLL3_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00c      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75bb      	strb	r3, [r7, #22]
 8005720:	e009      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005722:	4b4c      	ldr	r3, [pc, #304]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005730:	4948      	ldr	r1, [pc, #288]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005732:	4313      	orrs	r3, r2
 8005734:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d037      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574c:	d015      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005758:	d00f      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800576e:	d004      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005770:	f240 414f 	movw	r1, #1103	; 0x44f
 8005774:	4838      	ldr	r0, [pc, #224]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8005776:	f009 fade 	bl	800ed36 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005784:	d10b      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3324      	adds	r3, #36	; 0x24
 800578a:	2102      	movs	r1, #2
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fd9f 	bl	80062d0 <RCCEx_PLL3_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00c      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75bb      	strb	r3, [r7, #22]
 800579c:	e009      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800579e:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ac:	4929      	ldr	r1, [pc, #164]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d030      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d00d      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1032>
 80057ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ce:	d016      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x104a>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d111      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fc56 	bl	800608c <RCCEx_PLL2_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057e4:	e00c      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3324      	adds	r3, #36	; 0x24
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fd6f 	bl	80062d0 <RCCEx_PLL3_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
      break;
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 80057fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005806:	4b13      	ldr	r3, [pc, #76]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005814:	490f      	ldr	r1, [pc, #60]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005816:	4313      	orrs	r3, r2
 8005818:	658b      	str	r3, [r1, #88]	; 0x58
 800581a:	e001      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d034      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005836:	d011      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8005838:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800583c:	d01a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800583e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005842:	d114      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a02      	ldr	r2, [pc, #8]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800584a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005850:	e011      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 8005852:	bf00      	nop
 8005854:	58024400 	.word	0x58024400
 8005858:	08010858 	.word	0x08010858

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3324      	adds	r3, #36	; 0x24
 8005860:	2101      	movs	r1, #1
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fd34 	bl	80062d0 <RCCEx_PLL3_Config>
 8005868:	4603      	mov	r3, r0
 800586a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800586c:	e003      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
      break;
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8005874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587c:	4b9c      	ldr	r3, [pc, #624]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800588a:	4999      	ldr	r1, [pc, #612]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800588c:	4313      	orrs	r3, r2
 800588e:	654b      	str	r3, [r1, #84]	; 0x54
 8005890:	e001      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005892:	7dfb      	ldrb	r3, [r7, #23]
 8005894:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d037      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x110a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b2:	d004      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x110a>
 80058b4:	f240 41b7 	movw	r1, #1207	; 0x4b7
 80058b8:	488e      	ldr	r0, [pc, #568]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80058ba:	f009 fa3c 	bl	800ed36 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80058c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ca:	d007      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 80058cc:	e00f      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	4a87      	ldr	r2, [pc, #540]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058da:	e00b      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3304      	adds	r3, #4
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fbd2 	bl	800608c <RCCEx_PLL2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058ec:	e002      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
      break;
 80058f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058fa:	4b7d      	ldr	r3, [pc, #500]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	497a      	ldr	r1, [pc, #488]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800590c:	e001      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3324      	adds	r3, #36	; 0x24
 8005922:	2102      	movs	r1, #2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fcd3 	bl	80062d0 <RCCEx_PLL3_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02f      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005948:	d00c      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 800594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594e:	d802      	bhi.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d011      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8005954:	e00d      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x11be>
 8005956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595a:	d00f      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800595c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005960:	d00e      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 8005962:	e006      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005964:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a61      	ldr	r2, [pc, #388]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800596a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005970:	e007      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
      break;
 8005976:	e004      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8005978:	bf00      	nop
 800597a:	e002      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8005980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005988:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	4956      	ldr	r1, [pc, #344]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	654b      	str	r3, [r1, #84]	; 0x54
 800599a:	e001      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d016      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059bc:	d004      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 80059be:	f240 5116 	movw	r1, #1302	; 0x516
 80059c2:	484c      	ldr	r0, [pc, #304]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80059c4:	f009 f9b7 	bl	800ed36 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059c8:	4b49      	ldr	r3, [pc, #292]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d4:	4946      	ldr	r1, [pc, #280]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d019      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059fa:	d004      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80059fc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8005a00:	483c      	ldr	r0, [pc, #240]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005a02:	f009 f998 	bl	800ed36 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a06:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a14:	4936      	ldr	r1, [pc, #216]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a36:	d004      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x128e>
 8005a38:	f240 512a 	movw	r1, #1322	; 0x52a
 8005a3c:	482d      	ldr	r0, [pc, #180]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005a3e:	f009 f97a 	bl	800ed36 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a42:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4e:	4928      	ldr	r1, [pc, #160]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01d      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a74:	d004      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8005a76:	f240 5134 	movw	r1, #1332	; 0x534
 8005a7a:	481e      	ldr	r0, [pc, #120]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005a7c:	f009 f95b 	bl	800ed36 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a80:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a8a:	6113      	str	r3, [r2, #16]
 8005a8c:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a8e:	691a      	ldr	r2, [r3, #16]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a96:	4916      	ldr	r1, [pc, #88]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da1b      	bge.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab4:	d009      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005abe:	d004      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8005ac0:	f240 513e 	movw	r1, #1342	; 0x53e
 8005ac4:	480b      	ldr	r0, [pc, #44]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005ac6:	f009 f936 	bl	800ed36 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ace:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad6:	4906      	ldr	r1, [pc, #24]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005adc:	7dbb      	ldrb	r3, [r7, #22]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	58024400 	.word	0x58024400
 8005af4:	08010858 	.word	0x08010858

08005af8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005afc:	f7fe fe12 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8005b00:	4601      	mov	r1, r0
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	091b      	lsrs	r3, r3, #4
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b0e:	5cd3      	ldrb	r3, [r2, r3]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	08011ad0 	.word	0x08011ad0

08005b24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b089      	sub	sp, #36	; 0x24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b2c:	4b9d      	ldr	r3, [pc, #628]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8005b36:	4b9b      	ldr	r3, [pc, #620]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	0b1b      	lsrs	r3, r3, #12
 8005b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b40:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8005b42:	4b98      	ldr	r3, [pc, #608]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b4c:	4b95      	ldr	r3, [pc, #596]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	08db      	lsrs	r3, r3, #3
 8005b52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 810a 	beq.w	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d05a      	beq.n	8005c2c <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d302      	bcc.n	8005b80 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d078      	beq.n	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005b7e:	e099      	b.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b80:	4b88      	ldr	r3, [pc, #544]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02d      	beq.n	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b8c:	4b85      	ldr	r3, [pc, #532]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	08db      	lsrs	r3, r3, #3
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	4a84      	ldr	r2, [pc, #528]	; (8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b7b      	ldr	r3, [pc, #492]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005be6:	e087      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b6a      	ldr	r3, [pc, #424]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c2a:	e065      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b59      	ldr	r3, [pc, #356]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c6e:	e043      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b48      	ldr	r3, [pc, #288]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb2:	e021      	b.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b37      	ldr	r3, [pc, #220]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005cf8:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d1e:	ee17 2a90 	vmov	r2, s15
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	0c1b      	lsrs	r3, r3, #16
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	ee07 3a90 	vmov	s15, r3
 8005d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4c:	ee17 2a90 	vmov	r2, s15
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	0e1b      	lsrs	r3, r3, #24
 8005d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7a:	ee17 2a90 	vmov	r2, s15
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d82:	e008      	b.n	8005d96 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
}
 8005d96:	bf00      	nop
 8005d98:	3724      	adds	r7, #36	; 0x24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	58024400 	.word	0x58024400
 8005da8:	03d09000 	.word	0x03d09000
 8005dac:	46000000 	.word	0x46000000
 8005db0:	4c742400 	.word	0x4c742400
 8005db4:	4a742400 	.word	0x4a742400
 8005db8:	4af42400 	.word	0x4af42400

08005dbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	; 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dc4:	4b9d      	ldr	r3, [pc, #628]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005dce:	4b9b      	ldr	r3, [pc, #620]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	0d1b      	lsrs	r3, r3, #20
 8005dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd8:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005dda:	4b98      	ldr	r3, [pc, #608]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005de4:	4b95      	ldr	r3, [pc, #596]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 810a 	beq.w	800601c <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d05a      	beq.n	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d302      	bcc.n	8005e18 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d078      	beq.n	8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005e16:	e099      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e18:	4b88      	ldr	r3, [pc, #544]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02d      	beq.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e24:	4b85      	ldr	r3, [pc, #532]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	4a84      	ldr	r2, [pc, #528]	; (8006040 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
 8005e34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4e:	4b7b      	ldr	r3, [pc, #492]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e7e:	e087      	b.n	8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e92:	4b6a      	ldr	r3, [pc, #424]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ec2:	e065      	b.n	8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f06:	e043      	b.n	8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b48      	ldr	r3, [pc, #288]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f4a:	e021      	b.n	8005f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800604c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5e:	4b37      	ldr	r3, [pc, #220]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f90:	4b2a      	ldr	r3, [pc, #168]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	0a5b      	lsrs	r3, r3, #9
 8005f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb6:	ee17 2a90 	vmov	r2, s15
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fe4:	ee17 2a90 	vmov	r2, s15
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005fec:	4b13      	ldr	r3, [pc, #76]	; (800603c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	0e1b      	lsrs	r3, r3, #24
 8005ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006006:	edd7 6a07 	vldr	s13, [r7, #28]
 800600a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800600e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006012:	ee17 2a90 	vmov	r2, s15
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800601a:	e008      	b.n	800602e <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
}
 800602e:	bf00      	nop
 8006030:	3724      	adds	r7, #36	; 0x24
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400
 8006040:	03d09000 	.word	0x03d09000
 8006044:	46000000 	.word	0x46000000
 8006048:	4c742400 	.word	0x4c742400
 800604c:	4a742400 	.word	0x4a742400
 8006050:	4af42400 	.word	0x4af42400

08006054 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006058:	f7fe f9f2 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 800605c:	4601      	mov	r1, r0
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	4a06      	ldr	r2, [pc, #24]	; (8006084 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	fa21 f303 	lsr.w	r3, r1, r3
 8006074:	4a04      	ldr	r2, [pc, #16]	; (8006088 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8006076:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006078:	4b03      	ldr	r3, [pc, #12]	; (8006088 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800607a:	681b      	ldr	r3, [r3, #0]
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	58024400 	.word	0x58024400
 8006084:	08011ad0 	.word	0x08011ad0
 8006088:	2400002c 	.word	0x2400002c

0800608c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <RCCEx_PLL2_Config+0x1e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b3f      	cmp	r3, #63	; 0x3f
 80060a8:	d904      	bls.n	80060b4 <RCCEx_PLL2_Config+0x28>
 80060aa:	f640 2186 	movw	r1, #2694	; 0xa86
 80060ae:	4885      	ldr	r0, [pc, #532]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 80060b0:	f008 fe41 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d904      	bls.n	80060c6 <RCCEx_PLL2_Config+0x3a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c4:	d904      	bls.n	80060d0 <RCCEx_PLL2_Config+0x44>
 80060c6:	f640 2187 	movw	r1, #2695	; 0xa87
 80060ca:	487e      	ldr	r0, [pc, #504]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 80060cc:	f008 fe33 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <RCCEx_PLL2_Config+0x54>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d904      	bls.n	80060ea <RCCEx_PLL2_Config+0x5e>
 80060e0:	f640 2188 	movw	r1, #2696	; 0xa88
 80060e4:	4877      	ldr	r0, [pc, #476]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 80060e6:	f008 fe26 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <RCCEx_PLL2_Config+0x6e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b80      	cmp	r3, #128	; 0x80
 80060f8:	d904      	bls.n	8006104 <RCCEx_PLL2_Config+0x78>
 80060fa:	f640 2189 	movw	r1, #2697	; 0xa89
 80060fe:	4871      	ldr	r0, [pc, #452]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 8006100:	f008 fe19 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <RCCEx_PLL2_Config+0x88>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b80      	cmp	r3, #128	; 0x80
 8006112:	d904      	bls.n	800611e <RCCEx_PLL2_Config+0x92>
 8006114:	f640 218a 	movw	r1, #2698	; 0xa8a
 8006118:	486a      	ldr	r0, [pc, #424]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 800611a:	f008 fe0c 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d010      	beq.n	8006148 <RCCEx_PLL2_Config+0xbc>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d00c      	beq.n	8006148 <RCCEx_PLL2_Config+0xbc>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d008      	beq.n	8006148 <RCCEx_PLL2_Config+0xbc>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2bc0      	cmp	r3, #192	; 0xc0
 800613c:	d004      	beq.n	8006148 <RCCEx_PLL2_Config+0xbc>
 800613e:	f640 218b 	movw	r1, #2699	; 0xa8b
 8006142:	4860      	ldr	r0, [pc, #384]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 8006144:	f008 fdf7 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <RCCEx_PLL2_Config+0xd6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b20      	cmp	r3, #32
 8006156:	d004      	beq.n	8006162 <RCCEx_PLL2_Config+0xd6>
 8006158:	f640 218c 	movw	r1, #2700	; 0xa8c
 800615c:	4859      	ldr	r0, [pc, #356]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 800615e:	f008 fdea 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616a:	d304      	bcc.n	8006176 <RCCEx_PLL2_Config+0xea>
 800616c:	f640 218d 	movw	r1, #2701	; 0xa8d
 8006170:	4854      	ldr	r0, [pc, #336]	; (80062c4 <RCCEx_PLL2_Config+0x238>)
 8006172:	f008 fde0 	bl	800ed36 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006176:	4b54      	ldr	r3, [pc, #336]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	2b03      	cmp	r3, #3
 8006180:	d101      	bne.n	8006186 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e099      	b.n	80062ba <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006186:	4b50      	ldr	r3, [pc, #320]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4f      	ldr	r2, [pc, #316]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800618c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006192:	f7fa fc5f 	bl	8000a54 <HAL_GetTick>
 8006196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006198:	e008      	b.n	80061ac <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800619a:	f7fa fc5b 	bl	8000a54 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e086      	b.n	80062ba <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061ac:	4b46      	ldr	r3, [pc, #280]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	031b      	lsls	r3, r3, #12
 80061c6:	4940      	ldr	r1, [pc, #256]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	628b      	str	r3, [r1, #40]	; 0x28
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	3b01      	subs	r3, #1
 80061dc:	025b      	lsls	r3, r3, #9
 80061de:	b29b      	uxth	r3, r3
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	061b      	lsls	r3, r3, #24
 80061f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061fc:	4932      	ldr	r1, [pc, #200]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006202:	4b31      	ldr	r3, [pc, #196]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	492e      	ldr	r1, [pc, #184]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006210:	4313      	orrs	r3, r2
 8006212:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006214:	4b2c      	ldr	r3, [pc, #176]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	f023 0220 	bic.w	r2, r3, #32
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	4929      	ldr	r1, [pc, #164]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006226:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800622c:	f023 0310 	bic.w	r3, r3, #16
 8006230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006232:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006236:	4b25      	ldr	r3, [pc, #148]	; (80062cc <RCCEx_PLL2_Config+0x240>)
 8006238:	4013      	ands	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	69d2      	ldr	r2, [r2, #28]
 800623e:	00d2      	lsls	r2, r2, #3
 8006240:	4921      	ldr	r1, [pc, #132]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006242:	4313      	orrs	r3, r2
 8006244:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	4a1f      	ldr	r2, [pc, #124]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800624c:	f043 0310 	orr.w	r3, r3, #16
 8006250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006258:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	4a1a      	ldr	r2, [pc, #104]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800625e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006262:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006264:	e00f      	b.n	8006286 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d106      	bne.n	800627a <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800626c:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006278:	e005      	b.n	8006286 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800627a:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627e:	4a12      	ldr	r2, [pc, #72]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006284:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a0f      	ldr	r2, [pc, #60]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 800628c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006292:	f7fa fbdf 	bl	8000a54 <HAL_GetTick>
 8006296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006298:	e008      	b.n	80062ac <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800629a:	f7fa fbdb 	bl	8000a54 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e006      	b.n	80062ba <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <RCCEx_PLL2_Config+0x23c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	08010858 	.word	0x08010858
 80062c8:	58024400 	.word	0x58024400
 80062cc:	ffff0007 	.word	0xffff0007

080062d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <RCCEx_PLL3_Config+0x1e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b3f      	cmp	r3, #63	; 0x3f
 80062ec:	d904      	bls.n	80062f8 <RCCEx_PLL3_Config+0x28>
 80062ee:	f640 21ee 	movw	r1, #2798	; 0xaee
 80062f2:	4887      	ldr	r0, [pc, #540]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 80062f4:	f008 fd1f 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d904      	bls.n	800630a <RCCEx_PLL3_Config+0x3a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006308:	d904      	bls.n	8006314 <RCCEx_PLL3_Config+0x44>
 800630a:	f640 21ef 	movw	r1, #2799	; 0xaef
 800630e:	4880      	ldr	r0, [pc, #512]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 8006310:	f008 fd11 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <RCCEx_PLL3_Config+0x54>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d904      	bls.n	800632e <RCCEx_PLL3_Config+0x5e>
 8006324:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8006328:	4879      	ldr	r0, [pc, #484]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 800632a:	f008 fd04 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <RCCEx_PLL3_Config+0x6e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d904      	bls.n	8006348 <RCCEx_PLL3_Config+0x78>
 800633e:	f640 21f1 	movw	r1, #2801	; 0xaf1
 8006342:	4873      	ldr	r0, [pc, #460]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 8006344:	f008 fcf7 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <RCCEx_PLL3_Config+0x88>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d904      	bls.n	8006362 <RCCEx_PLL3_Config+0x92>
 8006358:	f640 21f2 	movw	r1, #2802	; 0xaf2
 800635c:	486c      	ldr	r0, [pc, #432]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 800635e:	f008 fcea 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d013      	beq.n	8006392 <RCCEx_PLL3_Config+0xc2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006372:	d00e      	beq.n	8006392 <RCCEx_PLL3_Config+0xc2>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637c:	d009      	beq.n	8006392 <RCCEx_PLL3_Config+0xc2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006386:	d004      	beq.n	8006392 <RCCEx_PLL3_Config+0xc2>
 8006388:	f640 21f3 	movw	r1, #2803	; 0xaf3
 800638c:	4860      	ldr	r0, [pc, #384]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 800638e:	f008 fcd2 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <RCCEx_PLL3_Config+0xde>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a2:	d004      	beq.n	80063ae <RCCEx_PLL3_Config+0xde>
 80063a4:	f640 21f4 	movw	r1, #2804	; 0xaf4
 80063a8:	4859      	ldr	r0, [pc, #356]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 80063aa:	f008 fcc4 	bl	800ed36 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b6:	d304      	bcc.n	80063c2 <RCCEx_PLL3_Config+0xf2>
 80063b8:	f640 21f5 	movw	r1, #2805	; 0xaf5
 80063bc:	4854      	ldr	r0, [pc, #336]	; (8006510 <RCCEx_PLL3_Config+0x240>)
 80063be:	f008 fcba 	bl	800ed36 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063c2:	4b54      	ldr	r3, [pc, #336]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d101      	bne.n	80063d2 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e099      	b.n	8006506 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80063d2:	4b50      	ldr	r3, [pc, #320]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a4f      	ldr	r2, [pc, #316]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80063d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063de:	f7fa fb39 	bl	8000a54 <HAL_GetTick>
 80063e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80063e6:	f7fa fb35 	bl	8000a54 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e086      	b.n	8006506 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063f8:	4b46      	ldr	r3, [pc, #280]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f0      	bne.n	80063e6 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006404:	4b43      	ldr	r3, [pc, #268]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	051b      	lsls	r3, r3, #20
 8006412:	4940      	ldr	r1, [pc, #256]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006414:	4313      	orrs	r3, r2
 8006416:	628b      	str	r3, [r1, #40]	; 0x28
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	3b01      	subs	r3, #1
 800641e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	3b01      	subs	r3, #1
 8006428:	025b      	lsls	r3, r3, #9
 800642a:	b29b      	uxth	r3, r3
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	3b01      	subs	r3, #1
 8006434:	041b      	lsls	r3, r3, #16
 8006436:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	3b01      	subs	r3, #1
 8006442:	061b      	lsls	r3, r3, #24
 8006444:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006448:	4932      	ldr	r1, [pc, #200]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 800644a:	4313      	orrs	r3, r2
 800644c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800644e:	4b31      	ldr	r3, [pc, #196]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	492e      	ldr	r1, [pc, #184]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 800645c:	4313      	orrs	r3, r2
 800645e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006460:	4b2c      	ldr	r3, [pc, #176]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	4929      	ldr	r1, [pc, #164]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 800646e:	4313      	orrs	r3, r2
 8006470:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006472:	4b28      	ldr	r3, [pc, #160]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	4a27      	ldr	r2, [pc, #156]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800647c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800647e:	4b25      	ldr	r3, [pc, #148]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006482:	4b25      	ldr	r3, [pc, #148]	; (8006518 <RCCEx_PLL3_Config+0x248>)
 8006484:	4013      	ands	r3, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	69d2      	ldr	r2, [r2, #28]
 800648a:	00d2      	lsls	r2, r2, #3
 800648c:	4921      	ldr	r1, [pc, #132]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 800648e:	4313      	orrs	r3, r2
 8006490:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006492:	4b20      	ldr	r3, [pc, #128]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 8006498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800649c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80064a4:	4b1b      	ldr	r3, [pc, #108]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	4a1a      	ldr	r2, [pc, #104]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064b0:	e00f      	b.n	80064d2 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d106      	bne.n	80064c6 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80064b8:	4b16      	ldr	r3, [pc, #88]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	4a15      	ldr	r2, [pc, #84]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064c4:	e005      	b.n	80064d2 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	4a12      	ldr	r2, [pc, #72]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a0f      	ldr	r2, [pc, #60]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064de:	f7fa fab9 	bl	8000a54 <HAL_GetTick>
 80064e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064e4:	e008      	b.n	80064f8 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064e6:	f7fa fab5 	bl	8000a54 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e006      	b.n	8006506 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <RCCEx_PLL3_Config+0x244>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	08010858 	.word	0x08010858
 8006514:	58024400 	.word	0x58024400
 8006518:	ffff0007 	.word	0xffff0007

0800651c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e0ab      	b.n	8006686 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d032      	beq.n	800659c <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a55      	ldr	r2, [pc, #340]	; (8006690 <HAL_UART_Init+0x174>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d05f      	beq.n	8006600 <HAL_UART_Init+0xe4>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a53      	ldr	r2, [pc, #332]	; (8006694 <HAL_UART_Init+0x178>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d05a      	beq.n	8006600 <HAL_UART_Init+0xe4>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a52      	ldr	r2, [pc, #328]	; (8006698 <HAL_UART_Init+0x17c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d055      	beq.n	8006600 <HAL_UART_Init+0xe4>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a50      	ldr	r2, [pc, #320]	; (800669c <HAL_UART_Init+0x180>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d050      	beq.n	8006600 <HAL_UART_Init+0xe4>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a4f      	ldr	r2, [pc, #316]	; (80066a0 <HAL_UART_Init+0x184>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d04b      	beq.n	8006600 <HAL_UART_Init+0xe4>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a4d      	ldr	r2, [pc, #308]	; (80066a4 <HAL_UART_Init+0x188>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d046      	beq.n	8006600 <HAL_UART_Init+0xe4>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a4c      	ldr	r2, [pc, #304]	; (80066a8 <HAL_UART_Init+0x18c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d041      	beq.n	8006600 <HAL_UART_Init+0xe4>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a4a      	ldr	r2, [pc, #296]	; (80066ac <HAL_UART_Init+0x190>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d03c      	beq.n	8006600 <HAL_UART_Init+0xe4>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a49      	ldr	r2, [pc, #292]	; (80066b0 <HAL_UART_Init+0x194>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d037      	beq.n	8006600 <HAL_UART_Init+0xe4>
 8006590:	f44f 7199 	mov.w	r1, #306	; 0x132
 8006594:	4847      	ldr	r0, [pc, #284]	; (80066b4 <HAL_UART_Init+0x198>)
 8006596:	f008 fbce 	bl	800ed36 <assert_failed>
 800659a:	e031      	b.n	8006600 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a3b      	ldr	r2, [pc, #236]	; (8006690 <HAL_UART_Init+0x174>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02c      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3a      	ldr	r2, [pc, #232]	; (8006694 <HAL_UART_Init+0x178>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d027      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a38      	ldr	r2, [pc, #224]	; (8006698 <HAL_UART_Init+0x17c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d022      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a37      	ldr	r2, [pc, #220]	; (800669c <HAL_UART_Init+0x180>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d01d      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a35      	ldr	r2, [pc, #212]	; (80066a0 <HAL_UART_Init+0x184>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d018      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a34      	ldr	r2, [pc, #208]	; (80066a4 <HAL_UART_Init+0x188>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d013      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a32      	ldr	r2, [pc, #200]	; (80066a8 <HAL_UART_Init+0x18c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00e      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a31      	ldr	r2, [pc, #196]	; (80066ac <HAL_UART_Init+0x190>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2f      	ldr	r2, [pc, #188]	; (80066b0 <HAL_UART_Init+0x194>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_UART_Init+0xe4>
 80065f6:	f240 1137 	movw	r1, #311	; 0x137
 80065fa:	482e      	ldr	r0, [pc, #184]	; (80066b4 <HAL_UART_Init+0x198>)
 80065fc:	f008 fb9b 	bl	800ed36 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f008 fec8 	bl	800f3a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2224      	movs	r2, #36	; 0x24
 800661c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8d9 	bl	80067e8 <UART_SetConfig>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e022      	b.n	8006686 <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f002 fb2b 	bl	8008ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800665c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800666c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f002 fc86 	bl	8008f90 <UART_CheckIdleState>
 8006684:	4603      	mov	r3, r0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40011000 	.word	0x40011000
 8006694:	40004400 	.word	0x40004400
 8006698:	40004800 	.word	0x40004800
 800669c:	40004c00 	.word	0x40004c00
 80066a0:	40005000 	.word	0x40005000
 80066a4:	40011400 	.word	0x40011400
 80066a8:	40007800 	.word	0x40007800
 80066ac:	40007c00 	.word	0x40007c00
 80066b0:	58000c00 	.word	0x58000c00
 80066b4:	08010894 	.word	0x08010894

080066b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	; 0x28
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	f040 8083 	bne.w	80067da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_UART_Transmit+0x28>
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e07b      	b.n	80067dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Transmit+0x3a>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e074      	b.n	80067dc <HAL_UART_Transmit+0x124>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2221      	movs	r2, #33	; 0x21
 8006706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800670a:	f7fa f9a3 	bl	8000a54 <HAL_GetTick>
 800670e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	88fa      	ldrh	r2, [r7, #6]
 800671c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d108      	bne.n	800673c <HAL_UART_Transmit+0x84>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	e003      	b.n	8006744 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006744:	e02c      	b.n	80067a0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	2180      	movs	r1, #128	; 0x80
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f002 fc65 	bl	8009020 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e03d      	b.n	80067dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006774:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	3302      	adds	r3, #2
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	e007      	b.n	800678e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1cc      	bne.n	8006746 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2200      	movs	r2, #0
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f002 fc32 	bl	8009020 <UART_WaitOnFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e00a      	b.n	80067dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e000      	b.n	80067dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80067da:	2302      	movs	r3, #2
  }
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	0000      	movs	r0, r0
	...

080067e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80067ec:	b090      	sub	sp, #64	; 0x40
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a17      	ldr	r2, [pc, #92]	; (8006864 <UART_SetConfig+0x7c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d904      	bls.n	8006814 <UART_SetConfig+0x2c>
 800680a:	f640 3134 	movw	r1, #2868	; 0xb34
 800680e:	4816      	ldr	r0, [pc, #88]	; (8006868 <UART_SetConfig+0x80>)
 8006810:	f008 fa91 	bl	800ed36 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800681c:	d00d      	beq.n	800683a <UART_SetConfig+0x52>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <UART_SetConfig+0x52>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682e:	d004      	beq.n	800683a <UART_SetConfig+0x52>
 8006830:	f640 3135 	movw	r1, #2869	; 0xb35
 8006834:	480c      	ldr	r0, [pc, #48]	; (8006868 <UART_SetConfig+0x80>)
 8006836:	f008 fa7e 	bl	800ed36 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a0b      	ldr	r2, [pc, #44]	; (800686c <UART_SetConfig+0x84>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d115      	bne.n	8006870 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d037      	beq.n	80068bc <UART_SetConfig+0xd4>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006854:	d032      	beq.n	80068bc <UART_SetConfig+0xd4>
 8006856:	f640 3138 	movw	r1, #2872	; 0xb38
 800685a:	4803      	ldr	r0, [pc, #12]	; (8006868 <UART_SetConfig+0x80>)
 800685c:	f008 fa6b 	bl	800ed36 <assert_failed>
 8006860:	e02c      	b.n	80068bc <UART_SetConfig+0xd4>
 8006862:	bf00      	nop
 8006864:	00bebc20 	.word	0x00bebc20
 8006868:	08010894 	.word	0x08010894
 800686c:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006878:	d012      	beq.n	80068a0 <UART_SetConfig+0xb8>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00e      	beq.n	80068a0 <UART_SetConfig+0xb8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800688a:	d009      	beq.n	80068a0 <UART_SetConfig+0xb8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006894:	d004      	beq.n	80068a0 <UART_SetConfig+0xb8>
 8006896:	f640 313c 	movw	r1, #2876	; 0xb3c
 800689a:	48aa      	ldr	r0, [pc, #680]	; (8006b44 <UART_SetConfig+0x35c>)
 800689c:	f008 fa4b 	bl	800ed36 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d009      	beq.n	80068bc <UART_SetConfig+0xd4>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b0:	d004      	beq.n	80068bc <UART_SetConfig+0xd4>
 80068b2:	f640 313d 	movw	r1, #2877	; 0xb3d
 80068b6:	48a3      	ldr	r0, [pc, #652]	; (8006b44 <UART_SetConfig+0x35c>)
 80068b8:	f008 fa3d 	bl	800ed36 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00e      	beq.n	80068e2 <UART_SetConfig+0xfa>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068cc:	d009      	beq.n	80068e2 <UART_SetConfig+0xfa>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068d6:	d004      	beq.n	80068e2 <UART_SetConfig+0xfa>
 80068d8:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80068dc:	4899      	ldr	r0, [pc, #612]	; (8006b44 <UART_SetConfig+0x35c>)
 80068de:	f008 fa2a 	bl	800ed36 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f023 030c 	bic.w	r3, r3, #12
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <UART_SetConfig+0x10e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <UART_SetConfig+0x118>
 80068f6:	f640 3141 	movw	r1, #2881	; 0xb41
 80068fa:	4892      	ldr	r0, [pc, #584]	; (8006b44 <UART_SetConfig+0x35c>)
 80068fc:	f008 fa1b 	bl	800ed36 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d013      	beq.n	8006930 <UART_SetConfig+0x148>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006910:	d00e      	beq.n	8006930 <UART_SetConfig+0x148>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800691a:	d009      	beq.n	8006930 <UART_SetConfig+0x148>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006924:	d004      	beq.n	8006930 <UART_SetConfig+0x148>
 8006926:	f640 3142 	movw	r1, #2882	; 0xb42
 800692a:	4886      	ldr	r0, [pc, #536]	; (8006b44 <UART_SetConfig+0x35c>)
 800692c:	f008 fa03 	bl	800ed36 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <UART_SetConfig+0x164>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006940:	d004      	beq.n	800694c <UART_SetConfig+0x164>
 8006942:	f640 3143 	movw	r1, #2883	; 0xb43
 8006946:	487f      	ldr	r0, [pc, #508]	; (8006b44 <UART_SetConfig+0x35c>)
 8006948:	f008 f9f5 	bl	800ed36 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	d030      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2b01      	cmp	r3, #1
 800695a:	d02c      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	2b02      	cmp	r3, #2
 8006962:	d028      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	2b03      	cmp	r3, #3
 800696a:	d024      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	2b04      	cmp	r3, #4
 8006972:	d020      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	2b05      	cmp	r3, #5
 800697a:	d01c      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	2b06      	cmp	r3, #6
 8006982:	d018      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	2b07      	cmp	r3, #7
 800698a:	d014      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	2b08      	cmp	r3, #8
 8006992:	d010      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	2b09      	cmp	r3, #9
 800699a:	d00c      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	2b0a      	cmp	r3, #10
 80069a2:	d008      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	2b0b      	cmp	r3, #11
 80069aa:	d004      	beq.n	80069b6 <UART_SetConfig+0x1ce>
 80069ac:	f640 3144 	movw	r1, #2884	; 0xb44
 80069b0:	4864      	ldr	r0, [pc, #400]	; (8006b44 <UART_SetConfig+0x35c>)
 80069b2:	f008 f9c0 	bl	800ed36 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069d4:	4313      	orrs	r3, r2
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4b5a      	ldr	r3, [pc, #360]	; (8006b48 <UART_SetConfig+0x360>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a4f      	ldr	r2, [pc, #316]	; (8006b4c <UART_SetConfig+0x364>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	4b4b      	ldr	r3, [pc, #300]	; (8006b50 <UART_SetConfig+0x368>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	f023 010f 	bic.w	r1, r3, #15
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a42      	ldr	r2, [pc, #264]	; (8006b54 <UART_SetConfig+0x36c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	f040 8085 	bne.w	8006b5c <UART_SetConfig+0x374>
 8006a52:	4b41      	ldr	r3, [pc, #260]	; (8006b58 <UART_SetConfig+0x370>)
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a5a:	2b28      	cmp	r3, #40	; 0x28
 8006a5c:	d86c      	bhi.n	8006b38 <UART_SetConfig+0x350>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <UART_SetConfig+0x27c>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006b09 	.word	0x08006b09
 8006a68:	08006b39 	.word	0x08006b39
 8006a6c:	08006b39 	.word	0x08006b39
 8006a70:	08006b39 	.word	0x08006b39
 8006a74:	08006b39 	.word	0x08006b39
 8006a78:	08006b39 	.word	0x08006b39
 8006a7c:	08006b39 	.word	0x08006b39
 8006a80:	08006b39 	.word	0x08006b39
 8006a84:	08006b11 	.word	0x08006b11
 8006a88:	08006b39 	.word	0x08006b39
 8006a8c:	08006b39 	.word	0x08006b39
 8006a90:	08006b39 	.word	0x08006b39
 8006a94:	08006b39 	.word	0x08006b39
 8006a98:	08006b39 	.word	0x08006b39
 8006a9c:	08006b39 	.word	0x08006b39
 8006aa0:	08006b39 	.word	0x08006b39
 8006aa4:	08006b19 	.word	0x08006b19
 8006aa8:	08006b39 	.word	0x08006b39
 8006aac:	08006b39 	.word	0x08006b39
 8006ab0:	08006b39 	.word	0x08006b39
 8006ab4:	08006b39 	.word	0x08006b39
 8006ab8:	08006b39 	.word	0x08006b39
 8006abc:	08006b39 	.word	0x08006b39
 8006ac0:	08006b39 	.word	0x08006b39
 8006ac4:	08006b21 	.word	0x08006b21
 8006ac8:	08006b39 	.word	0x08006b39
 8006acc:	08006b39 	.word	0x08006b39
 8006ad0:	08006b39 	.word	0x08006b39
 8006ad4:	08006b39 	.word	0x08006b39
 8006ad8:	08006b39 	.word	0x08006b39
 8006adc:	08006b39 	.word	0x08006b39
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b29 	.word	0x08006b29
 8006ae8:	08006b39 	.word	0x08006b39
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b39 	.word	0x08006b39
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b39 	.word	0x08006b39
 8006b00:	08006b39 	.word	0x08006b39
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b0e:	e23b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b16:	e237      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b1e:	e233      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b26:	e22f      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b28:	2320      	movs	r3, #32
 8006b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b2e:	e22b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b36:	e227      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b3e:	bf00      	nop
 8006b40:	e222      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b42:	bf00      	nop
 8006b44:	08010894 	.word	0x08010894
 8006b48:	cfff69f3 	.word	0xcfff69f3
 8006b4c:	58000c00 	.word	0x58000c00
 8006b50:	11fff4ff 	.word	0x11fff4ff
 8006b54:	40011000 	.word	0x40011000
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4ac9      	ldr	r2, [pc, #804]	; (8006e88 <UART_SetConfig+0x6a0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d131      	bne.n	8006bca <UART_SetConfig+0x3e2>
 8006b66:	4bc9      	ldr	r3, [pc, #804]	; (8006e8c <UART_SetConfig+0x6a4>)
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d826      	bhi.n	8006bc0 <UART_SetConfig+0x3d8>
 8006b72:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <UART_SetConfig+0x390>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b91 	.word	0x08006b91
 8006b7c:	08006b99 	.word	0x08006b99
 8006b80:	08006ba1 	.word	0x08006ba1
 8006b84:	08006ba9 	.word	0x08006ba9
 8006b88:	08006bb1 	.word	0x08006bb1
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b96:	e1f7      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b9e:	e1f3      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ba6:	e1ef      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bae:	e1eb      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bb6:	e1e7      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006bb8:	2340      	movs	r3, #64	; 0x40
 8006bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bbe:	e1e3      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006bc0:	2380      	movs	r3, #128	; 0x80
 8006bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bc6:	bf00      	nop
 8006bc8:	e1de      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4ab0      	ldr	r2, [pc, #704]	; (8006e90 <UART_SetConfig+0x6a8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d132      	bne.n	8006c3a <UART_SetConfig+0x452>
 8006bd4:	4bad      	ldr	r3, [pc, #692]	; (8006e8c <UART_SetConfig+0x6a4>)
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d827      	bhi.n	8006c30 <UART_SetConfig+0x448>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x400>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c01 	.word	0x08006c01
 8006bec:	08006c09 	.word	0x08006c09
 8006bf0:	08006c11 	.word	0x08006c11
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c21 	.word	0x08006c21
 8006bfc:	08006c29 	.word	0x08006c29
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c06:	e1bf      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c0e:	e1bb      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c16:	e1b7      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c1e:	e1b3      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c20:	2320      	movs	r3, #32
 8006c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c26:	e1af      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c2e:	e1ab      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c36:	bf00      	nop
 8006c38:	e1a6      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a95      	ldr	r2, [pc, #596]	; (8006e94 <UART_SetConfig+0x6ac>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d132      	bne.n	8006caa <UART_SetConfig+0x4c2>
 8006c44:	4b91      	ldr	r3, [pc, #580]	; (8006e8c <UART_SetConfig+0x6a4>)
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	2b05      	cmp	r3, #5
 8006c4e:	d827      	bhi.n	8006ca0 <UART_SetConfig+0x4b8>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <UART_SetConfig+0x470>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c71 	.word	0x08006c71
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c81 	.word	0x08006c81
 8006c64:	08006c89 	.word	0x08006c89
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	e187      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c7e:	e183      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c86:	e17f      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c8e:	e17b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c90:	2320      	movs	r3, #32
 8006c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c96:	e177      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c9e:	e173      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ca6:	bf00      	nop
 8006ca8:	e16e      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a7a      	ldr	r2, [pc, #488]	; (8006e98 <UART_SetConfig+0x6b0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d132      	bne.n	8006d1a <UART_SetConfig+0x532>
 8006cb4:	4b75      	ldr	r3, [pc, #468]	; (8006e8c <UART_SetConfig+0x6a4>)
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	d827      	bhi.n	8006d10 <UART_SetConfig+0x528>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0x4e0>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006ce1 	.word	0x08006ce1
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006cf1 	.word	0x08006cf1
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ce6:	e14f      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cee:	e14b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cf6:	e147      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cfe:	e143      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006d00:	2320      	movs	r3, #32
 8006d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d06:	e13f      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d0e:	e13b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d16:	bf00      	nop
 8006d18:	e136      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a5f      	ldr	r2, [pc, #380]	; (8006e9c <UART_SetConfig+0x6b4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d178      	bne.n	8006e16 <UART_SetConfig+0x62e>
 8006d24:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <UART_SetConfig+0x6a4>)
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d2c:	2b28      	cmp	r3, #40	; 0x28
 8006d2e:	d86d      	bhi.n	8006e0c <UART_SetConfig+0x624>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0x550>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006ddd 	.word	0x08006ddd
 8006d3c:	08006e0d 	.word	0x08006e0d
 8006d40:	08006e0d 	.word	0x08006e0d
 8006d44:	08006e0d 	.word	0x08006e0d
 8006d48:	08006e0d 	.word	0x08006e0d
 8006d4c:	08006e0d 	.word	0x08006e0d
 8006d50:	08006e0d 	.word	0x08006e0d
 8006d54:	08006e0d 	.word	0x08006e0d
 8006d58:	08006de5 	.word	0x08006de5
 8006d5c:	08006e0d 	.word	0x08006e0d
 8006d60:	08006e0d 	.word	0x08006e0d
 8006d64:	08006e0d 	.word	0x08006e0d
 8006d68:	08006e0d 	.word	0x08006e0d
 8006d6c:	08006e0d 	.word	0x08006e0d
 8006d70:	08006e0d 	.word	0x08006e0d
 8006d74:	08006e0d 	.word	0x08006e0d
 8006d78:	08006ded 	.word	0x08006ded
 8006d7c:	08006e0d 	.word	0x08006e0d
 8006d80:	08006e0d 	.word	0x08006e0d
 8006d84:	08006e0d 	.word	0x08006e0d
 8006d88:	08006e0d 	.word	0x08006e0d
 8006d8c:	08006e0d 	.word	0x08006e0d
 8006d90:	08006e0d 	.word	0x08006e0d
 8006d94:	08006e0d 	.word	0x08006e0d
 8006d98:	08006df5 	.word	0x08006df5
 8006d9c:	08006e0d 	.word	0x08006e0d
 8006da0:	08006e0d 	.word	0x08006e0d
 8006da4:	08006e0d 	.word	0x08006e0d
 8006da8:	08006e0d 	.word	0x08006e0d
 8006dac:	08006e0d 	.word	0x08006e0d
 8006db0:	08006e0d 	.word	0x08006e0d
 8006db4:	08006e0d 	.word	0x08006e0d
 8006db8:	08006dfd 	.word	0x08006dfd
 8006dbc:	08006e0d 	.word	0x08006e0d
 8006dc0:	08006e0d 	.word	0x08006e0d
 8006dc4:	08006e0d 	.word	0x08006e0d
 8006dc8:	08006e0d 	.word	0x08006e0d
 8006dcc:	08006e0d 	.word	0x08006e0d
 8006dd0:	08006e0d 	.word	0x08006e0d
 8006dd4:	08006e0d 	.word	0x08006e0d
 8006dd8:	08006e05 	.word	0x08006e05
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006de2:	e0d1      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006de4:	2304      	movs	r3, #4
 8006de6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dea:	e0cd      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006dec:	2308      	movs	r3, #8
 8006dee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006df2:	e0c9      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006df4:	2310      	movs	r3, #16
 8006df6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dfa:	e0c5      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006dfc:	2320      	movs	r3, #32
 8006dfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e02:	e0c1      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e04:	2340      	movs	r3, #64	; 0x40
 8006e06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e0a:	e0bd      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e0c:	2380      	movs	r3, #128	; 0x80
 8006e0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e12:	bf00      	nop
 8006e14:	e0b8      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <UART_SetConfig+0x6b8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d141      	bne.n	8006ea4 <UART_SetConfig+0x6bc>
 8006e20:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <UART_SetConfig+0x6a4>)
 8006e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d827      	bhi.n	8006e7c <UART_SetConfig+0x694>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x64c>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e4d 	.word	0x08006e4d
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e52:	e099      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e5a:	e095      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e62:	e091      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e6a:	e08d      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e72:	e089      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e7a:	e085      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e82:	bf00      	nop
 8006e84:	e080      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006e86:	bf00      	nop
 8006e88:	40004400 	.word	0x40004400
 8006e8c:	58024400 	.word	0x58024400
 8006e90:	40004800 	.word	0x40004800
 8006e94:	40004c00 	.word	0x40004c00
 8006e98:	40005000 	.word	0x40005000
 8006e9c:	40011400 	.word	0x40011400
 8006ea0:	40007800 	.word	0x40007800
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a98      	ldr	r2, [pc, #608]	; (800710c <UART_SetConfig+0x924>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d131      	bne.n	8006f12 <UART_SetConfig+0x72a>
 8006eae:	4b98      	ldr	r3, [pc, #608]	; (8007110 <UART_SetConfig+0x928>)
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d826      	bhi.n	8006f08 <UART_SetConfig+0x720>
 8006eba:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <UART_SetConfig+0x6d8>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006ed9 	.word	0x08006ed9
 8006ec4:	08006ee1 	.word	0x08006ee1
 8006ec8:	08006ee9 	.word	0x08006ee9
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006ef9 	.word	0x08006ef9
 8006ed4:	08006f01 	.word	0x08006f01
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ede:	e053      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ee6:	e04f      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ee8:	2308      	movs	r3, #8
 8006eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eee:	e04b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ef6:	e047      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006efe:	e043      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f00:	2340      	movs	r3, #64	; 0x40
 8006f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f06:	e03f      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f0e:	bf00      	nop
 8006f10:	e03a      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a7f      	ldr	r2, [pc, #508]	; (8007114 <UART_SetConfig+0x92c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d132      	bne.n	8006f82 <UART_SetConfig+0x79a>
 8006f1c:	4b7c      	ldr	r3, [pc, #496]	; (8007110 <UART_SetConfig+0x928>)
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	2b05      	cmp	r3, #5
 8006f26:	d827      	bhi.n	8006f78 <UART_SetConfig+0x790>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x748>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f49 	.word	0x08006f49
 8006f34:	08006f51 	.word	0x08006f51
 8006f38:	08006f59 	.word	0x08006f59
 8006f3c:	08006f61 	.word	0x08006f61
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	2302      	movs	r3, #2
 8006f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f4e:	e01b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f56:	e017      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f5e:	e013      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f60:	2310      	movs	r3, #16
 8006f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f66:	e00f      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f6e:	e00b      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f70:	2340      	movs	r3, #64	; 0x40
 8006f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f76:	e007      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f78:	2380      	movs	r3, #128	; 0x80
 8006f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f7e:	bf00      	nop
 8006f80:	e002      	b.n	8006f88 <UART_SetConfig+0x7a0>
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a61      	ldr	r2, [pc, #388]	; (8007114 <UART_SetConfig+0x92c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	f040 86f3 	bne.w	8007d7a <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f94:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	f000 80bd 	beq.w	8007118 <UART_SetConfig+0x930>
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	dc04      	bgt.n	8006fac <UART_SetConfig+0x7c4>
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d00c      	beq.n	8006fc0 <UART_SetConfig+0x7d8>
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d05b      	beq.n	8007062 <UART_SetConfig+0x87a>
 8006faa:	e276      	b.n	800749a <UART_SetConfig+0xcb2>
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	f000 81ad 	beq.w	800730c <UART_SetConfig+0xb24>
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	f000 821a 	beq.w	80073ec <UART_SetConfig+0xc04>
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	f000 8101 	beq.w	80071c0 <UART_SetConfig+0x9d8>
 8006fbe:	e26c      	b.n	800749a <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fc0:	f7fe fd9a 	bl	8005af8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d044      	beq.n	8007058 <UART_SetConfig+0x870>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d03e      	beq.n	8007054 <UART_SetConfig+0x86c>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d038      	beq.n	8007050 <UART_SetConfig+0x868>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d032      	beq.n	800704c <UART_SetConfig+0x864>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d02c      	beq.n	8007048 <UART_SetConfig+0x860>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	d026      	beq.n	8007044 <UART_SetConfig+0x85c>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b06      	cmp	r3, #6
 8006ffc:	d020      	beq.n	8007040 <UART_SetConfig+0x858>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2b07      	cmp	r3, #7
 8007004:	d01a      	beq.n	800703c <UART_SetConfig+0x854>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b08      	cmp	r3, #8
 800700c:	d014      	beq.n	8007038 <UART_SetConfig+0x850>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b09      	cmp	r3, #9
 8007014:	d00e      	beq.n	8007034 <UART_SetConfig+0x84c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	2b0a      	cmp	r3, #10
 800701c:	d008      	beq.n	8007030 <UART_SetConfig+0x848>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	2b0b      	cmp	r3, #11
 8007024:	d102      	bne.n	800702c <UART_SetConfig+0x844>
 8007026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800702a:	e016      	b.n	800705a <UART_SetConfig+0x872>
 800702c:	2301      	movs	r3, #1
 800702e:	e014      	b.n	800705a <UART_SetConfig+0x872>
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	e012      	b.n	800705a <UART_SetConfig+0x872>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	e010      	b.n	800705a <UART_SetConfig+0x872>
 8007038:	2320      	movs	r3, #32
 800703a:	e00e      	b.n	800705a <UART_SetConfig+0x872>
 800703c:	2310      	movs	r3, #16
 800703e:	e00c      	b.n	800705a <UART_SetConfig+0x872>
 8007040:	230c      	movs	r3, #12
 8007042:	e00a      	b.n	800705a <UART_SetConfig+0x872>
 8007044:	230a      	movs	r3, #10
 8007046:	e008      	b.n	800705a <UART_SetConfig+0x872>
 8007048:	2308      	movs	r3, #8
 800704a:	e006      	b.n	800705a <UART_SetConfig+0x872>
 800704c:	2306      	movs	r3, #6
 800704e:	e004      	b.n	800705a <UART_SetConfig+0x872>
 8007050:	2304      	movs	r3, #4
 8007052:	e002      	b.n	800705a <UART_SetConfig+0x872>
 8007054:	2302      	movs	r3, #2
 8007056:	e000      	b.n	800705a <UART_SetConfig+0x872>
 8007058:	2301      	movs	r3, #1
 800705a:	fbb2 f3f3 	udiv	r3, r2, r3
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007060:	e21f      	b.n	80074a2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007062:	f107 0318 	add.w	r3, r7, #24
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fd5c 	bl	8005b24 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d044      	beq.n	8007100 <UART_SetConfig+0x918>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b01      	cmp	r3, #1
 800707c:	d03e      	beq.n	80070fc <UART_SetConfig+0x914>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b02      	cmp	r3, #2
 8007084:	d038      	beq.n	80070f8 <UART_SetConfig+0x910>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b03      	cmp	r3, #3
 800708c:	d032      	beq.n	80070f4 <UART_SetConfig+0x90c>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	2b04      	cmp	r3, #4
 8007094:	d02c      	beq.n	80070f0 <UART_SetConfig+0x908>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	2b05      	cmp	r3, #5
 800709c:	d026      	beq.n	80070ec <UART_SetConfig+0x904>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d020      	beq.n	80070e8 <UART_SetConfig+0x900>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	2b07      	cmp	r3, #7
 80070ac:	d01a      	beq.n	80070e4 <UART_SetConfig+0x8fc>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d014      	beq.n	80070e0 <UART_SetConfig+0x8f8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	d00e      	beq.n	80070dc <UART_SetConfig+0x8f4>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	2b0a      	cmp	r3, #10
 80070c4:	d008      	beq.n	80070d8 <UART_SetConfig+0x8f0>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	2b0b      	cmp	r3, #11
 80070cc:	d102      	bne.n	80070d4 <UART_SetConfig+0x8ec>
 80070ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d2:	e016      	b.n	8007102 <UART_SetConfig+0x91a>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e014      	b.n	8007102 <UART_SetConfig+0x91a>
 80070d8:	2380      	movs	r3, #128	; 0x80
 80070da:	e012      	b.n	8007102 <UART_SetConfig+0x91a>
 80070dc:	2340      	movs	r3, #64	; 0x40
 80070de:	e010      	b.n	8007102 <UART_SetConfig+0x91a>
 80070e0:	2320      	movs	r3, #32
 80070e2:	e00e      	b.n	8007102 <UART_SetConfig+0x91a>
 80070e4:	2310      	movs	r3, #16
 80070e6:	e00c      	b.n	8007102 <UART_SetConfig+0x91a>
 80070e8:	230c      	movs	r3, #12
 80070ea:	e00a      	b.n	8007102 <UART_SetConfig+0x91a>
 80070ec:	230a      	movs	r3, #10
 80070ee:	e008      	b.n	8007102 <UART_SetConfig+0x91a>
 80070f0:	2308      	movs	r3, #8
 80070f2:	e006      	b.n	8007102 <UART_SetConfig+0x91a>
 80070f4:	2306      	movs	r3, #6
 80070f6:	e004      	b.n	8007102 <UART_SetConfig+0x91a>
 80070f8:	2304      	movs	r3, #4
 80070fa:	e002      	b.n	8007102 <UART_SetConfig+0x91a>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e000      	b.n	8007102 <UART_SetConfig+0x91a>
 8007100:	2301      	movs	r3, #1
 8007102:	fbb2 f3f3 	udiv	r3, r2, r3
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007108:	e1cb      	b.n	80074a2 <UART_SetConfig+0xcba>
 800710a:	bf00      	nop
 800710c:	40007c00 	.word	0x40007c00
 8007110:	58024400 	.word	0x58024400
 8007114:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007118:	f107 030c 	add.w	r3, r7, #12
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fe4d 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d044      	beq.n	80071b6 <UART_SetConfig+0x9ce>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b01      	cmp	r3, #1
 8007132:	d03e      	beq.n	80071b2 <UART_SetConfig+0x9ca>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b02      	cmp	r3, #2
 800713a:	d038      	beq.n	80071ae <UART_SetConfig+0x9c6>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	2b03      	cmp	r3, #3
 8007142:	d032      	beq.n	80071aa <UART_SetConfig+0x9c2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b04      	cmp	r3, #4
 800714a:	d02c      	beq.n	80071a6 <UART_SetConfig+0x9be>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b05      	cmp	r3, #5
 8007152:	d026      	beq.n	80071a2 <UART_SetConfig+0x9ba>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b06      	cmp	r3, #6
 800715a:	d020      	beq.n	800719e <UART_SetConfig+0x9b6>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	2b07      	cmp	r3, #7
 8007162:	d01a      	beq.n	800719a <UART_SetConfig+0x9b2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	2b08      	cmp	r3, #8
 800716a:	d014      	beq.n	8007196 <UART_SetConfig+0x9ae>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	2b09      	cmp	r3, #9
 8007172:	d00e      	beq.n	8007192 <UART_SetConfig+0x9aa>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	2b0a      	cmp	r3, #10
 800717a:	d008      	beq.n	800718e <UART_SetConfig+0x9a6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b0b      	cmp	r3, #11
 8007182:	d102      	bne.n	800718a <UART_SetConfig+0x9a2>
 8007184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007188:	e016      	b.n	80071b8 <UART_SetConfig+0x9d0>
 800718a:	2301      	movs	r3, #1
 800718c:	e014      	b.n	80071b8 <UART_SetConfig+0x9d0>
 800718e:	2380      	movs	r3, #128	; 0x80
 8007190:	e012      	b.n	80071b8 <UART_SetConfig+0x9d0>
 8007192:	2340      	movs	r3, #64	; 0x40
 8007194:	e010      	b.n	80071b8 <UART_SetConfig+0x9d0>
 8007196:	2320      	movs	r3, #32
 8007198:	e00e      	b.n	80071b8 <UART_SetConfig+0x9d0>
 800719a:	2310      	movs	r3, #16
 800719c:	e00c      	b.n	80071b8 <UART_SetConfig+0x9d0>
 800719e:	230c      	movs	r3, #12
 80071a0:	e00a      	b.n	80071b8 <UART_SetConfig+0x9d0>
 80071a2:	230a      	movs	r3, #10
 80071a4:	e008      	b.n	80071b8 <UART_SetConfig+0x9d0>
 80071a6:	2308      	movs	r3, #8
 80071a8:	e006      	b.n	80071b8 <UART_SetConfig+0x9d0>
 80071aa:	2306      	movs	r3, #6
 80071ac:	e004      	b.n	80071b8 <UART_SetConfig+0x9d0>
 80071ae:	2304      	movs	r3, #4
 80071b0:	e002      	b.n	80071b8 <UART_SetConfig+0x9d0>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e000      	b.n	80071b8 <UART_SetConfig+0x9d0>
 80071b6:	2301      	movs	r3, #1
 80071b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071be:	e170      	b.n	80074a2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071c0:	4b79      	ldr	r3, [pc, #484]	; (80073a8 <UART_SetConfig+0xbc0>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d054      	beq.n	8007276 <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071cc:	4b76      	ldr	r3, [pc, #472]	; (80073a8 <UART_SetConfig+0xbc0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	4a75      	ldr	r2, [pc, #468]	; (80073ac <UART_SetConfig+0xbc4>)
 80071d8:	40da      	lsrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d044      	beq.n	800726c <UART_SetConfig+0xa84>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d03e      	beq.n	8007268 <UART_SetConfig+0xa80>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d038      	beq.n	8007264 <UART_SetConfig+0xa7c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d032      	beq.n	8007260 <UART_SetConfig+0xa78>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d02c      	beq.n	800725c <UART_SetConfig+0xa74>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b05      	cmp	r3, #5
 8007208:	d026      	beq.n	8007258 <UART_SetConfig+0xa70>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	2b06      	cmp	r3, #6
 8007210:	d020      	beq.n	8007254 <UART_SetConfig+0xa6c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	2b07      	cmp	r3, #7
 8007218:	d01a      	beq.n	8007250 <UART_SetConfig+0xa68>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2b08      	cmp	r3, #8
 8007220:	d014      	beq.n	800724c <UART_SetConfig+0xa64>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b09      	cmp	r3, #9
 8007228:	d00e      	beq.n	8007248 <UART_SetConfig+0xa60>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b0a      	cmp	r3, #10
 8007230:	d008      	beq.n	8007244 <UART_SetConfig+0xa5c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d102      	bne.n	8007240 <UART_SetConfig+0xa58>
 800723a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800723e:	e016      	b.n	800726e <UART_SetConfig+0xa86>
 8007240:	2301      	movs	r3, #1
 8007242:	e014      	b.n	800726e <UART_SetConfig+0xa86>
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	e012      	b.n	800726e <UART_SetConfig+0xa86>
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	e010      	b.n	800726e <UART_SetConfig+0xa86>
 800724c:	2320      	movs	r3, #32
 800724e:	e00e      	b.n	800726e <UART_SetConfig+0xa86>
 8007250:	2310      	movs	r3, #16
 8007252:	e00c      	b.n	800726e <UART_SetConfig+0xa86>
 8007254:	230c      	movs	r3, #12
 8007256:	e00a      	b.n	800726e <UART_SetConfig+0xa86>
 8007258:	230a      	movs	r3, #10
 800725a:	e008      	b.n	800726e <UART_SetConfig+0xa86>
 800725c:	2308      	movs	r3, #8
 800725e:	e006      	b.n	800726e <UART_SetConfig+0xa86>
 8007260:	2306      	movs	r3, #6
 8007262:	e004      	b.n	800726e <UART_SetConfig+0xa86>
 8007264:	2304      	movs	r3, #4
 8007266:	e002      	b.n	800726e <UART_SetConfig+0xa86>
 8007268:	2302      	movs	r3, #2
 800726a:	e000      	b.n	800726e <UART_SetConfig+0xa86>
 800726c:	2301      	movs	r3, #1
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8007274:	e115      	b.n	80074a2 <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d043      	beq.n	8007306 <UART_SetConfig+0xb1e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	2b01      	cmp	r3, #1
 8007284:	d03d      	beq.n	8007302 <UART_SetConfig+0xb1a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	2b02      	cmp	r3, #2
 800728c:	d037      	beq.n	80072fe <UART_SetConfig+0xb16>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	2b03      	cmp	r3, #3
 8007294:	d031      	beq.n	80072fa <UART_SetConfig+0xb12>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b04      	cmp	r3, #4
 800729c:	d02b      	beq.n	80072f6 <UART_SetConfig+0xb0e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d025      	beq.n	80072f2 <UART_SetConfig+0xb0a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b06      	cmp	r3, #6
 80072ac:	d01f      	beq.n	80072ee <UART_SetConfig+0xb06>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	d019      	beq.n	80072ea <UART_SetConfig+0xb02>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d013      	beq.n	80072e6 <UART_SetConfig+0xafe>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b09      	cmp	r3, #9
 80072c4:	d00d      	beq.n	80072e2 <UART_SetConfig+0xafa>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b0a      	cmp	r3, #10
 80072cc:	d007      	beq.n	80072de <UART_SetConfig+0xaf6>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b0b      	cmp	r3, #11
 80072d4:	d101      	bne.n	80072da <UART_SetConfig+0xaf2>
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <UART_SetConfig+0xbc8>)
 80072d8:	e016      	b.n	8007308 <UART_SetConfig+0xb20>
 80072da:	4b34      	ldr	r3, [pc, #208]	; (80073ac <UART_SetConfig+0xbc4>)
 80072dc:	e014      	b.n	8007308 <UART_SetConfig+0xb20>
 80072de:	4b35      	ldr	r3, [pc, #212]	; (80073b4 <UART_SetConfig+0xbcc>)
 80072e0:	e012      	b.n	8007308 <UART_SetConfig+0xb20>
 80072e2:	4b35      	ldr	r3, [pc, #212]	; (80073b8 <UART_SetConfig+0xbd0>)
 80072e4:	e010      	b.n	8007308 <UART_SetConfig+0xb20>
 80072e6:	4b35      	ldr	r3, [pc, #212]	; (80073bc <UART_SetConfig+0xbd4>)
 80072e8:	e00e      	b.n	8007308 <UART_SetConfig+0xb20>
 80072ea:	4b35      	ldr	r3, [pc, #212]	; (80073c0 <UART_SetConfig+0xbd8>)
 80072ec:	e00c      	b.n	8007308 <UART_SetConfig+0xb20>
 80072ee:	4b35      	ldr	r3, [pc, #212]	; (80073c4 <UART_SetConfig+0xbdc>)
 80072f0:	e00a      	b.n	8007308 <UART_SetConfig+0xb20>
 80072f2:	4b35      	ldr	r3, [pc, #212]	; (80073c8 <UART_SetConfig+0xbe0>)
 80072f4:	e008      	b.n	8007308 <UART_SetConfig+0xb20>
 80072f6:	4b35      	ldr	r3, [pc, #212]	; (80073cc <UART_SetConfig+0xbe4>)
 80072f8:	e006      	b.n	8007308 <UART_SetConfig+0xb20>
 80072fa:	4b35      	ldr	r3, [pc, #212]	; (80073d0 <UART_SetConfig+0xbe8>)
 80072fc:	e004      	b.n	8007308 <UART_SetConfig+0xb20>
 80072fe:	4b35      	ldr	r3, [pc, #212]	; (80073d4 <UART_SetConfig+0xbec>)
 8007300:	e002      	b.n	8007308 <UART_SetConfig+0xb20>
 8007302:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <UART_SetConfig+0xbf0>)
 8007304:	e000      	b.n	8007308 <UART_SetConfig+0xb20>
 8007306:	4b29      	ldr	r3, [pc, #164]	; (80073ac <UART_SetConfig+0xbc4>)
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800730a:	e0ca      	b.n	80074a2 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d046      	beq.n	80073a2 <UART_SetConfig+0xbba>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b01      	cmp	r3, #1
 800731a:	d040      	beq.n	800739e <UART_SetConfig+0xbb6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b02      	cmp	r3, #2
 8007322:	d03a      	beq.n	800739a <UART_SetConfig+0xbb2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b03      	cmp	r3, #3
 800732a:	d034      	beq.n	8007396 <UART_SetConfig+0xbae>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	2b04      	cmp	r3, #4
 8007332:	d02e      	beq.n	8007392 <UART_SetConfig+0xbaa>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	2b05      	cmp	r3, #5
 800733a:	d028      	beq.n	800738e <UART_SetConfig+0xba6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	2b06      	cmp	r3, #6
 8007342:	d022      	beq.n	800738a <UART_SetConfig+0xba2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b07      	cmp	r3, #7
 800734a:	d01c      	beq.n	8007386 <UART_SetConfig+0xb9e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b08      	cmp	r3, #8
 8007352:	d016      	beq.n	8007382 <UART_SetConfig+0xb9a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b09      	cmp	r3, #9
 800735a:	d00f      	beq.n	800737c <UART_SetConfig+0xb94>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b0a      	cmp	r3, #10
 8007362:	d008      	beq.n	8007376 <UART_SetConfig+0xb8e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b0b      	cmp	r3, #11
 800736a:	d102      	bne.n	8007372 <UART_SetConfig+0xb8a>
 800736c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007370:	e018      	b.n	80073a4 <UART_SetConfig+0xbbc>
 8007372:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <UART_SetConfig+0xbd8>)
 8007374:	e016      	b.n	80073a4 <UART_SetConfig+0xbbc>
 8007376:	f647 2312 	movw	r3, #31250	; 0x7a12
 800737a:	e013      	b.n	80073a4 <UART_SetConfig+0xbbc>
 800737c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007380:	e010      	b.n	80073a4 <UART_SetConfig+0xbbc>
 8007382:	4b16      	ldr	r3, [pc, #88]	; (80073dc <UART_SetConfig+0xbf4>)
 8007384:	e00e      	b.n	80073a4 <UART_SetConfig+0xbbc>
 8007386:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <UART_SetConfig+0xbc8>)
 8007388:	e00c      	b.n	80073a4 <UART_SetConfig+0xbbc>
 800738a:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <UART_SetConfig+0xbf8>)
 800738c:	e00a      	b.n	80073a4 <UART_SetConfig+0xbbc>
 800738e:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <UART_SetConfig+0xbfc>)
 8007390:	e008      	b.n	80073a4 <UART_SetConfig+0xbbc>
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <UART_SetConfig+0xbcc>)
 8007394:	e006      	b.n	80073a4 <UART_SetConfig+0xbbc>
 8007396:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <UART_SetConfig+0xc00>)
 8007398:	e004      	b.n	80073a4 <UART_SetConfig+0xbbc>
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <UART_SetConfig+0xbd0>)
 800739c:	e002      	b.n	80073a4 <UART_SetConfig+0xbbc>
 800739e:	4b07      	ldr	r3, [pc, #28]	; (80073bc <UART_SetConfig+0xbd4>)
 80073a0:	e000      	b.n	80073a4 <UART_SetConfig+0xbbc>
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <UART_SetConfig+0xbd8>)
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073a6:	e07c      	b.n	80074a2 <UART_SetConfig+0xcba>
 80073a8:	58024400 	.word	0x58024400
 80073ac:	03d09000 	.word	0x03d09000
 80073b0:	0003d090 	.word	0x0003d090
 80073b4:	0007a120 	.word	0x0007a120
 80073b8:	000f4240 	.word	0x000f4240
 80073bc:	001e8480 	.word	0x001e8480
 80073c0:	003d0900 	.word	0x003d0900
 80073c4:	00516155 	.word	0x00516155
 80073c8:	0061a800 	.word	0x0061a800
 80073cc:	007a1200 	.word	0x007a1200
 80073d0:	00a2c2aa 	.word	0x00a2c2aa
 80073d4:	00f42400 	.word	0x00f42400
 80073d8:	01e84800 	.word	0x01e84800
 80073dc:	0001e848 	.word	0x0001e848
 80073e0:	00051615 	.word	0x00051615
 80073e4:	00061a80 	.word	0x00061a80
 80073e8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d04e      	beq.n	8007492 <UART_SetConfig+0xcaa>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d047      	beq.n	800748c <UART_SetConfig+0xca4>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b02      	cmp	r3, #2
 8007402:	d040      	beq.n	8007486 <UART_SetConfig+0xc9e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b03      	cmp	r3, #3
 800740a:	d039      	beq.n	8007480 <UART_SetConfig+0xc98>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	2b04      	cmp	r3, #4
 8007412:	d032      	beq.n	800747a <UART_SetConfig+0xc92>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	2b05      	cmp	r3, #5
 800741a:	d02b      	beq.n	8007474 <UART_SetConfig+0xc8c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b06      	cmp	r3, #6
 8007422:	d024      	beq.n	800746e <UART_SetConfig+0xc86>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	2b07      	cmp	r3, #7
 800742a:	d01d      	beq.n	8007468 <UART_SetConfig+0xc80>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b08      	cmp	r3, #8
 8007432:	d016      	beq.n	8007462 <UART_SetConfig+0xc7a>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	2b09      	cmp	r3, #9
 800743a:	d00f      	beq.n	800745c <UART_SetConfig+0xc74>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	2b0a      	cmp	r3, #10
 8007442:	d008      	beq.n	8007456 <UART_SetConfig+0xc6e>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b0b      	cmp	r3, #11
 800744a:	d101      	bne.n	8007450 <UART_SetConfig+0xc68>
 800744c:	2380      	movs	r3, #128	; 0x80
 800744e:	e022      	b.n	8007496 <UART_SetConfig+0xcae>
 8007450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007454:	e01f      	b.n	8007496 <UART_SetConfig+0xcae>
 8007456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745a:	e01c      	b.n	8007496 <UART_SetConfig+0xcae>
 800745c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007460:	e019      	b.n	8007496 <UART_SetConfig+0xcae>
 8007462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007466:	e016      	b.n	8007496 <UART_SetConfig+0xcae>
 8007468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800746c:	e013      	b.n	8007496 <UART_SetConfig+0xcae>
 800746e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007472:	e010      	b.n	8007496 <UART_SetConfig+0xcae>
 8007474:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007478:	e00d      	b.n	8007496 <UART_SetConfig+0xcae>
 800747a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800747e:	e00a      	b.n	8007496 <UART_SetConfig+0xcae>
 8007480:	f241 5355 	movw	r3, #5461	; 0x1555
 8007484:	e007      	b.n	8007496 <UART_SetConfig+0xcae>
 8007486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800748a:	e004      	b.n	8007496 <UART_SetConfig+0xcae>
 800748c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007490:	e001      	b.n	8007496 <UART_SetConfig+0xcae>
 8007492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007498:	e003      	b.n	80074a2 <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80074a0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f001 83e8 	beq.w	8008c7a <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	4413      	add	r3, r2
 80074b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d305      	bcc.n	80074c6 <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d904      	bls.n	80074d0 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074cc:	f001 bbd5 	b.w	8008c7a <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 80074d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	f000 8154 	beq.w	8007782 <UART_SetConfig+0xf9a>
 80074da:	2b08      	cmp	r3, #8
 80074dc:	dc06      	bgt.n	80074ec <UART_SetConfig+0xd04>
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d00f      	beq.n	8007502 <UART_SetConfig+0xd1a>
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	f000 80ac 	beq.w	8007640 <UART_SetConfig+0xe58>
 80074e8:	f000 bc30 	b.w	8007d4c <UART_SetConfig+0x1564>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	f000 832d 	beq.w	8007b4c <UART_SetConfig+0x1364>
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	f000 83a5 	beq.w	8007c42 <UART_SetConfig+0x145a>
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	f000 81e3 	beq.w	80078c4 <UART_SetConfig+0x10dc>
 80074fe:	f000 bc25 	b.w	8007d4c <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007502:	f7fe faf9 	bl	8005af8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007506:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	4618      	mov	r0, r3
 800750c:	f04f 0100 	mov.w	r1, #0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d067      	beq.n	80075e8 <UART_SetConfig+0xe00>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b01      	cmp	r3, #1
 800751e:	d05e      	beq.n	80075de <UART_SetConfig+0xdf6>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b02      	cmp	r3, #2
 8007526:	d055      	beq.n	80075d4 <UART_SetConfig+0xdec>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b03      	cmp	r3, #3
 800752e:	d04c      	beq.n	80075ca <UART_SetConfig+0xde2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b04      	cmp	r3, #4
 8007536:	d043      	beq.n	80075c0 <UART_SetConfig+0xdd8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b05      	cmp	r3, #5
 800753e:	d03a      	beq.n	80075b6 <UART_SetConfig+0xdce>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	2b06      	cmp	r3, #6
 8007546:	d031      	beq.n	80075ac <UART_SetConfig+0xdc4>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	2b07      	cmp	r3, #7
 800754e:	d028      	beq.n	80075a2 <UART_SetConfig+0xdba>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b08      	cmp	r3, #8
 8007556:	d01f      	beq.n	8007598 <UART_SetConfig+0xdb0>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b09      	cmp	r3, #9
 800755e:	d016      	beq.n	800758e <UART_SetConfig+0xda6>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	2b0a      	cmp	r3, #10
 8007566:	d00d      	beq.n	8007584 <UART_SetConfig+0xd9c>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	2b0b      	cmp	r3, #11
 800756e:	d104      	bne.n	800757a <UART_SetConfig+0xd92>
 8007570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007574:	f04f 0400 	mov.w	r4, #0
 8007578:	e03a      	b.n	80075f0 <UART_SetConfig+0xe08>
 800757a:	f04f 0301 	mov.w	r3, #1
 800757e:	f04f 0400 	mov.w	r4, #0
 8007582:	e035      	b.n	80075f0 <UART_SetConfig+0xe08>
 8007584:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007588:	f04f 0400 	mov.w	r4, #0
 800758c:	e030      	b.n	80075f0 <UART_SetConfig+0xe08>
 800758e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007592:	f04f 0400 	mov.w	r4, #0
 8007596:	e02b      	b.n	80075f0 <UART_SetConfig+0xe08>
 8007598:	f04f 0320 	mov.w	r3, #32
 800759c:	f04f 0400 	mov.w	r4, #0
 80075a0:	e026      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075a2:	f04f 0310 	mov.w	r3, #16
 80075a6:	f04f 0400 	mov.w	r4, #0
 80075aa:	e021      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075ac:	f04f 030c 	mov.w	r3, #12
 80075b0:	f04f 0400 	mov.w	r4, #0
 80075b4:	e01c      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075b6:	f04f 030a 	mov.w	r3, #10
 80075ba:	f04f 0400 	mov.w	r4, #0
 80075be:	e017      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075c0:	f04f 0308 	mov.w	r3, #8
 80075c4:	f04f 0400 	mov.w	r4, #0
 80075c8:	e012      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075ca:	f04f 0306 	mov.w	r3, #6
 80075ce:	f04f 0400 	mov.w	r4, #0
 80075d2:	e00d      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075d4:	f04f 0304 	mov.w	r3, #4
 80075d8:	f04f 0400 	mov.w	r4, #0
 80075dc:	e008      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075de:	f04f 0302 	mov.w	r3, #2
 80075e2:	f04f 0400 	mov.w	r4, #0
 80075e6:	e003      	b.n	80075f0 <UART_SetConfig+0xe08>
 80075e8:	f04f 0301 	mov.w	r3, #1
 80075ec:	f04f 0400 	mov.w	r4, #0
 80075f0:	461a      	mov	r2, r3
 80075f2:	4623      	mov	r3, r4
 80075f4:	f7f8 fecc 	bl	8000390 <__aeabi_uldivmod>
 80075f8:	4603      	mov	r3, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	4619      	mov	r1, r3
 80075fe:	4622      	mov	r2, r4
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	f04f 0400 	mov.w	r4, #0
 8007608:	0214      	lsls	r4, r2, #8
 800760a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800760e:	020b      	lsls	r3, r1, #8
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6852      	ldr	r2, [r2, #4]
 8007614:	0852      	lsrs	r2, r2, #1
 8007616:	4611      	mov	r1, r2
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	eb13 0b01 	adds.w	fp, r3, r1
 8007620:	eb44 0c02 	adc.w	ip, r4, r2
 8007624:	4658      	mov	r0, fp
 8007626:	4661      	mov	r1, ip
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f04f 0400 	mov.w	r4, #0
 8007630:	461a      	mov	r2, r3
 8007632:	4623      	mov	r3, r4
 8007634:	f7f8 feac 	bl	8000390 <__aeabi_uldivmod>
 8007638:	4603      	mov	r3, r0
 800763a:	460c      	mov	r4, r1
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800763e:	e389      	b.n	8007d54 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007640:	f107 0318 	add.w	r3, r7, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fa6d 	bl	8005b24 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4618      	mov	r0, r3
 800764e:	f04f 0100 	mov.w	r1, #0
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d067      	beq.n	800772a <UART_SetConfig+0xf42>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b01      	cmp	r3, #1
 8007660:	d05e      	beq.n	8007720 <UART_SetConfig+0xf38>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b02      	cmp	r3, #2
 8007668:	d055      	beq.n	8007716 <UART_SetConfig+0xf2e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b03      	cmp	r3, #3
 8007670:	d04c      	beq.n	800770c <UART_SetConfig+0xf24>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b04      	cmp	r3, #4
 8007678:	d043      	beq.n	8007702 <UART_SetConfig+0xf1a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	2b05      	cmp	r3, #5
 8007680:	d03a      	beq.n	80076f8 <UART_SetConfig+0xf10>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	2b06      	cmp	r3, #6
 8007688:	d031      	beq.n	80076ee <UART_SetConfig+0xf06>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	2b07      	cmp	r3, #7
 8007690:	d028      	beq.n	80076e4 <UART_SetConfig+0xefc>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	2b08      	cmp	r3, #8
 8007698:	d01f      	beq.n	80076da <UART_SetConfig+0xef2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	2b09      	cmp	r3, #9
 80076a0:	d016      	beq.n	80076d0 <UART_SetConfig+0xee8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2b0a      	cmp	r3, #10
 80076a8:	d00d      	beq.n	80076c6 <UART_SetConfig+0xede>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	2b0b      	cmp	r3, #11
 80076b0:	d104      	bne.n	80076bc <UART_SetConfig+0xed4>
 80076b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076b6:	f04f 0400 	mov.w	r4, #0
 80076ba:	e03a      	b.n	8007732 <UART_SetConfig+0xf4a>
 80076bc:	f04f 0301 	mov.w	r3, #1
 80076c0:	f04f 0400 	mov.w	r4, #0
 80076c4:	e035      	b.n	8007732 <UART_SetConfig+0xf4a>
 80076c6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076ca:	f04f 0400 	mov.w	r4, #0
 80076ce:	e030      	b.n	8007732 <UART_SetConfig+0xf4a>
 80076d0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80076d4:	f04f 0400 	mov.w	r4, #0
 80076d8:	e02b      	b.n	8007732 <UART_SetConfig+0xf4a>
 80076da:	f04f 0320 	mov.w	r3, #32
 80076de:	f04f 0400 	mov.w	r4, #0
 80076e2:	e026      	b.n	8007732 <UART_SetConfig+0xf4a>
 80076e4:	f04f 0310 	mov.w	r3, #16
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	e021      	b.n	8007732 <UART_SetConfig+0xf4a>
 80076ee:	f04f 030c 	mov.w	r3, #12
 80076f2:	f04f 0400 	mov.w	r4, #0
 80076f6:	e01c      	b.n	8007732 <UART_SetConfig+0xf4a>
 80076f8:	f04f 030a 	mov.w	r3, #10
 80076fc:	f04f 0400 	mov.w	r4, #0
 8007700:	e017      	b.n	8007732 <UART_SetConfig+0xf4a>
 8007702:	f04f 0308 	mov.w	r3, #8
 8007706:	f04f 0400 	mov.w	r4, #0
 800770a:	e012      	b.n	8007732 <UART_SetConfig+0xf4a>
 800770c:	f04f 0306 	mov.w	r3, #6
 8007710:	f04f 0400 	mov.w	r4, #0
 8007714:	e00d      	b.n	8007732 <UART_SetConfig+0xf4a>
 8007716:	f04f 0304 	mov.w	r3, #4
 800771a:	f04f 0400 	mov.w	r4, #0
 800771e:	e008      	b.n	8007732 <UART_SetConfig+0xf4a>
 8007720:	f04f 0302 	mov.w	r3, #2
 8007724:	f04f 0400 	mov.w	r4, #0
 8007728:	e003      	b.n	8007732 <UART_SetConfig+0xf4a>
 800772a:	f04f 0301 	mov.w	r3, #1
 800772e:	f04f 0400 	mov.w	r4, #0
 8007732:	461a      	mov	r2, r3
 8007734:	4623      	mov	r3, r4
 8007736:	f7f8 fe2b 	bl	8000390 <__aeabi_uldivmod>
 800773a:	4603      	mov	r3, r0
 800773c:	460c      	mov	r4, r1
 800773e:	4619      	mov	r1, r3
 8007740:	4622      	mov	r2, r4
 8007742:	f04f 0300 	mov.w	r3, #0
 8007746:	f04f 0400 	mov.w	r4, #0
 800774a:	0214      	lsls	r4, r2, #8
 800774c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007750:	020b      	lsls	r3, r1, #8
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6852      	ldr	r2, [r2, #4]
 8007756:	0852      	lsrs	r2, r2, #1
 8007758:	4611      	mov	r1, r2
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	eb13 0b01 	adds.w	fp, r3, r1
 8007762:	eb44 0c02 	adc.w	ip, r4, r2
 8007766:	4658      	mov	r0, fp
 8007768:	4661      	mov	r1, ip
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f04f 0400 	mov.w	r4, #0
 8007772:	461a      	mov	r2, r3
 8007774:	4623      	mov	r3, r4
 8007776:	f7f8 fe0b 	bl	8000390 <__aeabi_uldivmod>
 800777a:	4603      	mov	r3, r0
 800777c:	460c      	mov	r4, r1
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007780:	e2e8      	b.n	8007d54 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007782:	f107 030c 	add.w	r3, r7, #12
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fb18 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	4618      	mov	r0, r3
 8007790:	f04f 0100 	mov.w	r1, #0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	d067      	beq.n	800786c <UART_SetConfig+0x1084>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d05e      	beq.n	8007862 <UART_SetConfig+0x107a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d055      	beq.n	8007858 <UART_SetConfig+0x1070>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d04c      	beq.n	800784e <UART_SetConfig+0x1066>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d043      	beq.n	8007844 <UART_SetConfig+0x105c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	d03a      	beq.n	800783a <UART_SetConfig+0x1052>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b06      	cmp	r3, #6
 80077ca:	d031      	beq.n	8007830 <UART_SetConfig+0x1048>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d028      	beq.n	8007826 <UART_SetConfig+0x103e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d01f      	beq.n	800781c <UART_SetConfig+0x1034>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	d016      	beq.n	8007812 <UART_SetConfig+0x102a>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	2b0a      	cmp	r3, #10
 80077ea:	d00d      	beq.n	8007808 <UART_SetConfig+0x1020>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	2b0b      	cmp	r3, #11
 80077f2:	d104      	bne.n	80077fe <UART_SetConfig+0x1016>
 80077f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077f8:	f04f 0400 	mov.w	r4, #0
 80077fc:	e03a      	b.n	8007874 <UART_SetConfig+0x108c>
 80077fe:	f04f 0301 	mov.w	r3, #1
 8007802:	f04f 0400 	mov.w	r4, #0
 8007806:	e035      	b.n	8007874 <UART_SetConfig+0x108c>
 8007808:	f04f 0380 	mov.w	r3, #128	; 0x80
 800780c:	f04f 0400 	mov.w	r4, #0
 8007810:	e030      	b.n	8007874 <UART_SetConfig+0x108c>
 8007812:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007816:	f04f 0400 	mov.w	r4, #0
 800781a:	e02b      	b.n	8007874 <UART_SetConfig+0x108c>
 800781c:	f04f 0320 	mov.w	r3, #32
 8007820:	f04f 0400 	mov.w	r4, #0
 8007824:	e026      	b.n	8007874 <UART_SetConfig+0x108c>
 8007826:	f04f 0310 	mov.w	r3, #16
 800782a:	f04f 0400 	mov.w	r4, #0
 800782e:	e021      	b.n	8007874 <UART_SetConfig+0x108c>
 8007830:	f04f 030c 	mov.w	r3, #12
 8007834:	f04f 0400 	mov.w	r4, #0
 8007838:	e01c      	b.n	8007874 <UART_SetConfig+0x108c>
 800783a:	f04f 030a 	mov.w	r3, #10
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	e017      	b.n	8007874 <UART_SetConfig+0x108c>
 8007844:	f04f 0308 	mov.w	r3, #8
 8007848:	f04f 0400 	mov.w	r4, #0
 800784c:	e012      	b.n	8007874 <UART_SetConfig+0x108c>
 800784e:	f04f 0306 	mov.w	r3, #6
 8007852:	f04f 0400 	mov.w	r4, #0
 8007856:	e00d      	b.n	8007874 <UART_SetConfig+0x108c>
 8007858:	f04f 0304 	mov.w	r3, #4
 800785c:	f04f 0400 	mov.w	r4, #0
 8007860:	e008      	b.n	8007874 <UART_SetConfig+0x108c>
 8007862:	f04f 0302 	mov.w	r3, #2
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	e003      	b.n	8007874 <UART_SetConfig+0x108c>
 800786c:	f04f 0301 	mov.w	r3, #1
 8007870:	f04f 0400 	mov.w	r4, #0
 8007874:	461a      	mov	r2, r3
 8007876:	4623      	mov	r3, r4
 8007878:	f7f8 fd8a 	bl	8000390 <__aeabi_uldivmod>
 800787c:	4603      	mov	r3, r0
 800787e:	460c      	mov	r4, r1
 8007880:	4619      	mov	r1, r3
 8007882:	4622      	mov	r2, r4
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	f04f 0400 	mov.w	r4, #0
 800788c:	0214      	lsls	r4, r2, #8
 800788e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007892:	020b      	lsls	r3, r1, #8
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	6852      	ldr	r2, [r2, #4]
 8007898:	0852      	lsrs	r2, r2, #1
 800789a:	4611      	mov	r1, r2
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	eb13 0b01 	adds.w	fp, r3, r1
 80078a4:	eb44 0c02 	adc.w	ip, r4, r2
 80078a8:	4658      	mov	r0, fp
 80078aa:	4661      	mov	r1, ip
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f04f 0400 	mov.w	r4, #0
 80078b4:	461a      	mov	r2, r3
 80078b6:	4623      	mov	r3, r4
 80078b8:	f7f8 fd6a 	bl	8000390 <__aeabi_uldivmod>
 80078bc:	4603      	mov	r3, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078c2:	e247      	b.n	8007d54 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c4:	4b96      	ldr	r3, [pc, #600]	; (8007b20 <UART_SetConfig+0x1338>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80a3 	beq.w	8007a18 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078d2:	4b93      	ldr	r3, [pc, #588]	; (8007b20 <UART_SetConfig+0x1338>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	08db      	lsrs	r3, r3, #3
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	4a91      	ldr	r2, [pc, #580]	; (8007b24 <UART_SetConfig+0x133c>)
 80078de:	fa22 f303 	lsr.w	r3, r2, r3
 80078e2:	4618      	mov	r0, r3
 80078e4:	f04f 0100 	mov.w	r1, #0
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d067      	beq.n	80079c0 <UART_SetConfig+0x11d8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d05e      	beq.n	80079b6 <UART_SetConfig+0x11ce>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d055      	beq.n	80079ac <UART_SetConfig+0x11c4>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	2b03      	cmp	r3, #3
 8007906:	d04c      	beq.n	80079a2 <UART_SetConfig+0x11ba>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	2b04      	cmp	r3, #4
 800790e:	d043      	beq.n	8007998 <UART_SetConfig+0x11b0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	2b05      	cmp	r3, #5
 8007916:	d03a      	beq.n	800798e <UART_SetConfig+0x11a6>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	2b06      	cmp	r3, #6
 800791e:	d031      	beq.n	8007984 <UART_SetConfig+0x119c>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	2b07      	cmp	r3, #7
 8007926:	d028      	beq.n	800797a <UART_SetConfig+0x1192>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	2b08      	cmp	r3, #8
 800792e:	d01f      	beq.n	8007970 <UART_SetConfig+0x1188>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	2b09      	cmp	r3, #9
 8007936:	d016      	beq.n	8007966 <UART_SetConfig+0x117e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	2b0a      	cmp	r3, #10
 800793e:	d00d      	beq.n	800795c <UART_SetConfig+0x1174>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	2b0b      	cmp	r3, #11
 8007946:	d104      	bne.n	8007952 <UART_SetConfig+0x116a>
 8007948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800794c:	f04f 0400 	mov.w	r4, #0
 8007950:	e03a      	b.n	80079c8 <UART_SetConfig+0x11e0>
 8007952:	f04f 0301 	mov.w	r3, #1
 8007956:	f04f 0400 	mov.w	r4, #0
 800795a:	e035      	b.n	80079c8 <UART_SetConfig+0x11e0>
 800795c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007960:	f04f 0400 	mov.w	r4, #0
 8007964:	e030      	b.n	80079c8 <UART_SetConfig+0x11e0>
 8007966:	f04f 0340 	mov.w	r3, #64	; 0x40
 800796a:	f04f 0400 	mov.w	r4, #0
 800796e:	e02b      	b.n	80079c8 <UART_SetConfig+0x11e0>
 8007970:	f04f 0320 	mov.w	r3, #32
 8007974:	f04f 0400 	mov.w	r4, #0
 8007978:	e026      	b.n	80079c8 <UART_SetConfig+0x11e0>
 800797a:	f04f 0310 	mov.w	r3, #16
 800797e:	f04f 0400 	mov.w	r4, #0
 8007982:	e021      	b.n	80079c8 <UART_SetConfig+0x11e0>
 8007984:	f04f 030c 	mov.w	r3, #12
 8007988:	f04f 0400 	mov.w	r4, #0
 800798c:	e01c      	b.n	80079c8 <UART_SetConfig+0x11e0>
 800798e:	f04f 030a 	mov.w	r3, #10
 8007992:	f04f 0400 	mov.w	r4, #0
 8007996:	e017      	b.n	80079c8 <UART_SetConfig+0x11e0>
 8007998:	f04f 0308 	mov.w	r3, #8
 800799c:	f04f 0400 	mov.w	r4, #0
 80079a0:	e012      	b.n	80079c8 <UART_SetConfig+0x11e0>
 80079a2:	f04f 0306 	mov.w	r3, #6
 80079a6:	f04f 0400 	mov.w	r4, #0
 80079aa:	e00d      	b.n	80079c8 <UART_SetConfig+0x11e0>
 80079ac:	f04f 0304 	mov.w	r3, #4
 80079b0:	f04f 0400 	mov.w	r4, #0
 80079b4:	e008      	b.n	80079c8 <UART_SetConfig+0x11e0>
 80079b6:	f04f 0302 	mov.w	r3, #2
 80079ba:	f04f 0400 	mov.w	r4, #0
 80079be:	e003      	b.n	80079c8 <UART_SetConfig+0x11e0>
 80079c0:	f04f 0301 	mov.w	r3, #1
 80079c4:	f04f 0400 	mov.w	r4, #0
 80079c8:	461a      	mov	r2, r3
 80079ca:	4623      	mov	r3, r4
 80079cc:	f7f8 fce0 	bl	8000390 <__aeabi_uldivmod>
 80079d0:	4603      	mov	r3, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	4619      	mov	r1, r3
 80079d6:	4622      	mov	r2, r4
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	f04f 0400 	mov.w	r4, #0
 80079e0:	0214      	lsls	r4, r2, #8
 80079e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079e6:	020b      	lsls	r3, r1, #8
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6852      	ldr	r2, [r2, #4]
 80079ec:	0852      	lsrs	r2, r2, #1
 80079ee:	4611      	mov	r1, r2
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	eb13 0b01 	adds.w	fp, r3, r1
 80079f8:	eb44 0c02 	adc.w	ip, r4, r2
 80079fc:	4658      	mov	r0, fp
 80079fe:	4661      	mov	r1, ip
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f04f 0400 	mov.w	r4, #0
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	f7f8 fcc0 	bl	8000390 <__aeabi_uldivmod>
 8007a10:	4603      	mov	r3, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007a16:	e19d      	b.n	8007d54 <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d05b      	beq.n	8007ad8 <UART_SetConfig+0x12f0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d053      	beq.n	8007ad0 <UART_SetConfig+0x12e8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d04b      	beq.n	8007ac8 <UART_SetConfig+0x12e0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d043      	beq.n	8007ac0 <UART_SetConfig+0x12d8>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d03b      	beq.n	8007ab8 <UART_SetConfig+0x12d0>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	d033      	beq.n	8007ab0 <UART_SetConfig+0x12c8>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	d02b      	beq.n	8007aa8 <UART_SetConfig+0x12c0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b07      	cmp	r3, #7
 8007a56:	d023      	beq.n	8007aa0 <UART_SetConfig+0x12b8>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d01b      	beq.n	8007a98 <UART_SetConfig+0x12b0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d013      	beq.n	8007a90 <UART_SetConfig+0x12a8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b0a      	cmp	r3, #10
 8007a6e:	d00b      	beq.n	8007a88 <UART_SetConfig+0x12a0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2b0b      	cmp	r3, #11
 8007a76:	d103      	bne.n	8007a80 <UART_SetConfig+0x1298>
 8007a78:	4b2a      	ldr	r3, [pc, #168]	; (8007b24 <UART_SetConfig+0x133c>)
 8007a7a:	f04f 0400 	mov.w	r4, #0
 8007a7e:	e02e      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007a80:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <UART_SetConfig+0x1340>)
 8007a82:	f04f 0403 	mov.w	r4, #3
 8007a86:	e02a      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007a88:	4b28      	ldr	r3, [pc, #160]	; (8007b2c <UART_SetConfig+0x1344>)
 8007a8a:	f04f 0400 	mov.w	r4, #0
 8007a8e:	e026      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007a90:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <UART_SetConfig+0x1348>)
 8007a92:	f04f 0400 	mov.w	r4, #0
 8007a96:	e022      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007a98:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <UART_SetConfig+0x134c>)
 8007a9a:	f04f 0400 	mov.w	r4, #0
 8007a9e:	e01e      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007aa0:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <UART_SetConfig+0x1350>)
 8007aa2:	f04f 0400 	mov.w	r4, #0
 8007aa6:	e01a      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007aa8:	a419      	add	r4, pc, #100	; (adr r4, 8007b10 <UART_SetConfig+0x1328>)
 8007aaa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007aae:	e016      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007ab0:	4b22      	ldr	r3, [pc, #136]	; (8007b3c <UART_SetConfig+0x1354>)
 8007ab2:	f04f 0400 	mov.w	r4, #0
 8007ab6:	e012      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007ab8:	4b21      	ldr	r3, [pc, #132]	; (8007b40 <UART_SetConfig+0x1358>)
 8007aba:	f04f 0400 	mov.w	r4, #0
 8007abe:	e00e      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007ac0:	a415      	add	r4, pc, #84	; (adr r4, 8007b18 <UART_SetConfig+0x1330>)
 8007ac2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ac6:	e00a      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007ac8:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <UART_SetConfig+0x135c>)
 8007aca:	f04f 0400 	mov.w	r4, #0
 8007ace:	e006      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <UART_SetConfig+0x1360>)
 8007ad2:	f04f 0401 	mov.w	r4, #1
 8007ad6:	e002      	b.n	8007ade <UART_SetConfig+0x12f6>
 8007ad8:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <UART_SetConfig+0x1340>)
 8007ada:	f04f 0403 	mov.w	r4, #3
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6852      	ldr	r2, [r2, #4]
 8007ae2:	0852      	lsrs	r2, r2, #1
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	eb13 0b01 	adds.w	fp, r3, r1
 8007aee:	eb44 0c02 	adc.w	ip, r4, r2
 8007af2:	4658      	mov	r0, fp
 8007af4:	4661      	mov	r1, ip
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f04f 0400 	mov.w	r4, #0
 8007afe:	461a      	mov	r2, r3
 8007b00:	4623      	mov	r3, r4
 8007b02:	f7f8 fc45 	bl	8000390 <__aeabi_uldivmod>
 8007b06:	4603      	mov	r3, r0
 8007b08:	460c      	mov	r4, r1
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b0c:	e122      	b.n	8007d54 <UART_SetConfig+0x156c>
 8007b0e:	bf00      	nop
 8007b10:	51615500 	.word	0x51615500
 8007b14:	00000000 	.word	0x00000000
 8007b18:	a2c2aa00 	.word	0xa2c2aa00
 8007b1c:	00000000 	.word	0x00000000
 8007b20:	58024400 	.word	0x58024400
 8007b24:	03d09000 	.word	0x03d09000
 8007b28:	d0900000 	.word	0xd0900000
 8007b2c:	07a12000 	.word	0x07a12000
 8007b30:	0f424000 	.word	0x0f424000
 8007b34:	1e848000 	.word	0x1e848000
 8007b38:	3d090000 	.word	0x3d090000
 8007b3c:	61a80000 	.word	0x61a80000
 8007b40:	7a120000 	.word	0x7a120000
 8007b44:	f4240000 	.word	0xf4240000
 8007b48:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d05b      	beq.n	8007c0c <UART_SetConfig+0x1424>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d053      	beq.n	8007c04 <UART_SetConfig+0x141c>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d04b      	beq.n	8007bfc <UART_SetConfig+0x1414>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d043      	beq.n	8007bf4 <UART_SetConfig+0x140c>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d03b      	beq.n	8007bec <UART_SetConfig+0x1404>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2b05      	cmp	r3, #5
 8007b7a:	d033      	beq.n	8007be4 <UART_SetConfig+0x13fc>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	2b06      	cmp	r3, #6
 8007b82:	d02b      	beq.n	8007bdc <UART_SetConfig+0x13f4>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	2b07      	cmp	r3, #7
 8007b8a:	d023      	beq.n	8007bd4 <UART_SetConfig+0x13ec>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d01b      	beq.n	8007bcc <UART_SetConfig+0x13e4>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	2b09      	cmp	r3, #9
 8007b9a:	d013      	beq.n	8007bc4 <UART_SetConfig+0x13dc>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	2b0a      	cmp	r3, #10
 8007ba2:	d00b      	beq.n	8007bbc <UART_SetConfig+0x13d4>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	2b0b      	cmp	r3, #11
 8007baa:	d103      	bne.n	8007bb4 <UART_SetConfig+0x13cc>
 8007bac:	4bc0      	ldr	r3, [pc, #768]	; (8007eb0 <UART_SetConfig+0x16c8>)
 8007bae:	f04f 0400 	mov.w	r4, #0
 8007bb2:	e02e      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bb4:	4bbf      	ldr	r3, [pc, #764]	; (8007eb4 <UART_SetConfig+0x16cc>)
 8007bb6:	f04f 0400 	mov.w	r4, #0
 8007bba:	e02a      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bbc:	4bbe      	ldr	r3, [pc, #760]	; (8007eb8 <UART_SetConfig+0x16d0>)
 8007bbe:	f04f 0400 	mov.w	r4, #0
 8007bc2:	e026      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bc4:	4bbd      	ldr	r3, [pc, #756]	; (8007ebc <UART_SetConfig+0x16d4>)
 8007bc6:	f04f 0400 	mov.w	r4, #0
 8007bca:	e022      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bcc:	4bbc      	ldr	r3, [pc, #752]	; (8007ec0 <UART_SetConfig+0x16d8>)
 8007bce:	f04f 0400 	mov.w	r4, #0
 8007bd2:	e01e      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bd4:	4bbb      	ldr	r3, [pc, #748]	; (8007ec4 <UART_SetConfig+0x16dc>)
 8007bd6:	f04f 0400 	mov.w	r4, #0
 8007bda:	e01a      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bdc:	a4b0      	add	r4, pc, #704	; (adr r4, 8007ea0 <UART_SetConfig+0x16b8>)
 8007bde:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007be2:	e016      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007be4:	4bb8      	ldr	r3, [pc, #736]	; (8007ec8 <UART_SetConfig+0x16e0>)
 8007be6:	f04f 0400 	mov.w	r4, #0
 8007bea:	e012      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bec:	4bb7      	ldr	r3, [pc, #732]	; (8007ecc <UART_SetConfig+0x16e4>)
 8007bee:	f04f 0400 	mov.w	r4, #0
 8007bf2:	e00e      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bf4:	a4ac      	add	r4, pc, #688	; (adr r4, 8007ea8 <UART_SetConfig+0x16c0>)
 8007bf6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007bfa:	e00a      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007bfc:	4bb4      	ldr	r3, [pc, #720]	; (8007ed0 <UART_SetConfig+0x16e8>)
 8007bfe:	f04f 0400 	mov.w	r4, #0
 8007c02:	e006      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007c04:	4bb3      	ldr	r3, [pc, #716]	; (8007ed4 <UART_SetConfig+0x16ec>)
 8007c06:	f04f 0400 	mov.w	r4, #0
 8007c0a:	e002      	b.n	8007c12 <UART_SetConfig+0x142a>
 8007c0c:	4ba9      	ldr	r3, [pc, #676]	; (8007eb4 <UART_SetConfig+0x16cc>)
 8007c0e:	f04f 0400 	mov.w	r4, #0
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6852      	ldr	r2, [r2, #4]
 8007c16:	0852      	lsrs	r2, r2, #1
 8007c18:	4611      	mov	r1, r2
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	eb13 0b01 	adds.w	fp, r3, r1
 8007c22:	eb44 0c02 	adc.w	ip, r4, r2
 8007c26:	4658      	mov	r0, fp
 8007c28:	4661      	mov	r1, ip
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f04f 0400 	mov.w	r4, #0
 8007c32:	461a      	mov	r2, r3
 8007c34:	4623      	mov	r3, r4
 8007c36:	f7f8 fbab 	bl	8000390 <__aeabi_uldivmod>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c40:	e088      	b.n	8007d54 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d064      	beq.n	8007d14 <UART_SetConfig+0x152c>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d05b      	beq.n	8007d0a <UART_SetConfig+0x1522>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d052      	beq.n	8007d00 <UART_SetConfig+0x1518>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d04a      	beq.n	8007cf8 <UART_SetConfig+0x1510>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d041      	beq.n	8007cee <UART_SetConfig+0x1506>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	d039      	beq.n	8007ce6 <UART_SetConfig+0x14fe>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	2b06      	cmp	r3, #6
 8007c78:	d031      	beq.n	8007cde <UART_SetConfig+0x14f6>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	2b07      	cmp	r3, #7
 8007c80:	d028      	beq.n	8007cd4 <UART_SetConfig+0x14ec>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d01f      	beq.n	8007cca <UART_SetConfig+0x14e2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	d016      	beq.n	8007cc0 <UART_SetConfig+0x14d8>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	2b0a      	cmp	r3, #10
 8007c98:	d00d      	beq.n	8007cb6 <UART_SetConfig+0x14ce>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	2b0b      	cmp	r3, #11
 8007ca0:	d104      	bne.n	8007cac <UART_SetConfig+0x14c4>
 8007ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ca6:	f04f 0400 	mov.w	r4, #0
 8007caa:	e037      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cb0:	f04f 0400 	mov.w	r4, #0
 8007cb4:	e032      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cba:	f04f 0400 	mov.w	r4, #0
 8007cbe:	e02d      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cc4:	f04f 0400 	mov.w	r4, #0
 8007cc8:	e028      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007cce:	f04f 0400 	mov.w	r4, #0
 8007cd2:	e023      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007cd8:	f04f 0400 	mov.w	r4, #0
 8007cdc:	e01e      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cde:	4b7e      	ldr	r3, [pc, #504]	; (8007ed8 <UART_SetConfig+0x16f0>)
 8007ce0:	f04f 0400 	mov.w	r4, #0
 8007ce4:	e01a      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007ce6:	4b7d      	ldr	r3, [pc, #500]	; (8007edc <UART_SetConfig+0x16f4>)
 8007ce8:	f04f 0400 	mov.w	r4, #0
 8007cec:	e016      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cf2:	f04f 0400 	mov.w	r4, #0
 8007cf6:	e011      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007cf8:	4b79      	ldr	r3, [pc, #484]	; (8007ee0 <UART_SetConfig+0x16f8>)
 8007cfa:	f04f 0400 	mov.w	r4, #0
 8007cfe:	e00d      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d04:	f04f 0400 	mov.w	r4, #0
 8007d08:	e008      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d0e:	f04f 0400 	mov.w	r4, #0
 8007d12:	e003      	b.n	8007d1c <UART_SetConfig+0x1534>
 8007d14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d18:	f04f 0400 	mov.w	r4, #0
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6852      	ldr	r2, [r2, #4]
 8007d20:	0852      	lsrs	r2, r2, #1
 8007d22:	4611      	mov	r1, r2
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	eb13 0b01 	adds.w	fp, r3, r1
 8007d2c:	eb44 0c02 	adc.w	ip, r4, r2
 8007d30:	4658      	mov	r0, fp
 8007d32:	4661      	mov	r1, ip
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f04f 0400 	mov.w	r4, #0
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4623      	mov	r3, r4
 8007d40:	f7f8 fb26 	bl	8000390 <__aeabi_uldivmod>
 8007d44:	4603      	mov	r3, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d4a:	e003      	b.n	8007d54 <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007d52:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d5a:	d309      	bcc.n	8007d70 <UART_SetConfig+0x1588>
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d62:	d205      	bcs.n	8007d70 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d6a:	60da      	str	r2, [r3, #12]
 8007d6c:	f000 bf85 	b.w	8008c7a <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	f000 bf80 	b.w	8008c7a <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d82:	f040 83da 	bne.w	800853a <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 8007d86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	f200 83b3 	bhi.w	80084f6 <UART_SetConfig+0x1d0e>
 8007d90:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <UART_SetConfig+0x15b0>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007ee5 	.word	0x08007ee5
 8007d9c:	08007f9d 	.word	0x08007f9d
 8007da0:	080084f7 	.word	0x080084f7
 8007da4:	080084f7 	.word	0x080084f7
 8007da8:	08008055 	.word	0x08008055
 8007dac:	080084f7 	.word	0x080084f7
 8007db0:	080084f7 	.word	0x080084f7
 8007db4:	080084f7 	.word	0x080084f7
 8007db8:	08008111 	.word	0x08008111
 8007dbc:	080084f7 	.word	0x080084f7
 8007dc0:	080084f7 	.word	0x080084f7
 8007dc4:	080084f7 	.word	0x080084f7
 8007dc8:	080084f7 	.word	0x080084f7
 8007dcc:	080084f7 	.word	0x080084f7
 8007dd0:	080084f7 	.word	0x080084f7
 8007dd4:	080084f7 	.word	0x080084f7
 8007dd8:	080081cd 	.word	0x080081cd
 8007ddc:	080084f7 	.word	0x080084f7
 8007de0:	080084f7 	.word	0x080084f7
 8007de4:	080084f7 	.word	0x080084f7
 8007de8:	080084f7 	.word	0x080084f7
 8007dec:	080084f7 	.word	0x080084f7
 8007df0:	080084f7 	.word	0x080084f7
 8007df4:	080084f7 	.word	0x080084f7
 8007df8:	080084f7 	.word	0x080084f7
 8007dfc:	080084f7 	.word	0x080084f7
 8007e00:	080084f7 	.word	0x080084f7
 8007e04:	080084f7 	.word	0x080084f7
 8007e08:	080084f7 	.word	0x080084f7
 8007e0c:	080084f7 	.word	0x080084f7
 8007e10:	080084f7 	.word	0x080084f7
 8007e14:	080084f7 	.word	0x080084f7
 8007e18:	0800833f 	.word	0x0800833f
 8007e1c:	080084f7 	.word	0x080084f7
 8007e20:	080084f7 	.word	0x080084f7
 8007e24:	080084f7 	.word	0x080084f7
 8007e28:	080084f7 	.word	0x080084f7
 8007e2c:	080084f7 	.word	0x080084f7
 8007e30:	080084f7 	.word	0x080084f7
 8007e34:	080084f7 	.word	0x080084f7
 8007e38:	080084f7 	.word	0x080084f7
 8007e3c:	080084f7 	.word	0x080084f7
 8007e40:	080084f7 	.word	0x080084f7
 8007e44:	080084f7 	.word	0x080084f7
 8007e48:	080084f7 	.word	0x080084f7
 8007e4c:	080084f7 	.word	0x080084f7
 8007e50:	080084f7 	.word	0x080084f7
 8007e54:	080084f7 	.word	0x080084f7
 8007e58:	080084f7 	.word	0x080084f7
 8007e5c:	080084f7 	.word	0x080084f7
 8007e60:	080084f7 	.word	0x080084f7
 8007e64:	080084f7 	.word	0x080084f7
 8007e68:	080084f7 	.word	0x080084f7
 8007e6c:	080084f7 	.word	0x080084f7
 8007e70:	080084f7 	.word	0x080084f7
 8007e74:	080084f7 	.word	0x080084f7
 8007e78:	080084f7 	.word	0x080084f7
 8007e7c:	080084f7 	.word	0x080084f7
 8007e80:	080084f7 	.word	0x080084f7
 8007e84:	080084f7 	.word	0x080084f7
 8007e88:	080084f7 	.word	0x080084f7
 8007e8c:	080084f7 	.word	0x080084f7
 8007e90:	080084f7 	.word	0x080084f7
 8007e94:	080084f7 	.word	0x080084f7
 8007e98:	08008435 	.word	0x08008435
 8007e9c:	f3af 8000 	nop.w
 8007ea0:	05161500 	.word	0x05161500
 8007ea4:	00000000 	.word	0x00000000
 8007ea8:	0a2c2a00 	.word	0x0a2c2a00
 8007eac:	00000000 	.word	0x00000000
 8007eb0:	003d0900 	.word	0x003d0900
 8007eb4:	3d090000 	.word	0x3d090000
 8007eb8:	007a1200 	.word	0x007a1200
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	01e84800 	.word	0x01e84800
 8007ec4:	03d09000 	.word	0x03d09000
 8007ec8:	061a8000 	.word	0x061a8000
 8007ecc:	07a12000 	.word	0x07a12000
 8007ed0:	0f424000 	.word	0x0f424000
 8007ed4:	1e848000 	.word	0x1e848000
 8007ed8:	000aaa00 	.word	0x000aaa00
 8007edc:	000ccc00 	.word	0x000ccc00
 8007ee0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fc fc3a 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8007ee8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d044      	beq.n	8007f7c <UART_SetConfig+0x1794>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d03e      	beq.n	8007f78 <UART_SetConfig+0x1790>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d038      	beq.n	8007f74 <UART_SetConfig+0x178c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d032      	beq.n	8007f70 <UART_SetConfig+0x1788>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d02c      	beq.n	8007f6c <UART_SetConfig+0x1784>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d026      	beq.n	8007f68 <UART_SetConfig+0x1780>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b06      	cmp	r3, #6
 8007f20:	d020      	beq.n	8007f64 <UART_SetConfig+0x177c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	2b07      	cmp	r3, #7
 8007f28:	d01a      	beq.n	8007f60 <UART_SetConfig+0x1778>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d014      	beq.n	8007f5c <UART_SetConfig+0x1774>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d00e      	beq.n	8007f58 <UART_SetConfig+0x1770>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	2b0a      	cmp	r3, #10
 8007f40:	d008      	beq.n	8007f54 <UART_SetConfig+0x176c>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	2b0b      	cmp	r3, #11
 8007f48:	d102      	bne.n	8007f50 <UART_SetConfig+0x1768>
 8007f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f4e:	e016      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e014      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	e012      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f58:	2340      	movs	r3, #64	; 0x40
 8007f5a:	e010      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f5c:	2320      	movs	r3, #32
 8007f5e:	e00e      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f60:	2310      	movs	r3, #16
 8007f62:	e00c      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f64:	230c      	movs	r3, #12
 8007f66:	e00a      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f68:	230a      	movs	r3, #10
 8007f6a:	e008      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	e006      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f70:	2306      	movs	r3, #6
 8007f72:	e004      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f74:	2304      	movs	r3, #4
 8007f76:	e002      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e000      	b.n	8007f7e <UART_SetConfig+0x1796>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f84:	005a      	lsls	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	441a      	add	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f9a:	e2b0      	b.n	80084fe <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f9c:	f7fc fbf4 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8007fa0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d044      	beq.n	8008034 <UART_SetConfig+0x184c>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d03e      	beq.n	8008030 <UART_SetConfig+0x1848>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d038      	beq.n	800802c <UART_SetConfig+0x1844>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d032      	beq.n	8008028 <UART_SetConfig+0x1840>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d02c      	beq.n	8008024 <UART_SetConfig+0x183c>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b05      	cmp	r3, #5
 8007fd0:	d026      	beq.n	8008020 <UART_SetConfig+0x1838>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d020      	beq.n	800801c <UART_SetConfig+0x1834>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b07      	cmp	r3, #7
 8007fe0:	d01a      	beq.n	8008018 <UART_SetConfig+0x1830>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	d014      	beq.n	8008014 <UART_SetConfig+0x182c>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	2b09      	cmp	r3, #9
 8007ff0:	d00e      	beq.n	8008010 <UART_SetConfig+0x1828>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	2b0a      	cmp	r3, #10
 8007ff8:	d008      	beq.n	800800c <UART_SetConfig+0x1824>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	2b0b      	cmp	r3, #11
 8008000:	d102      	bne.n	8008008 <UART_SetConfig+0x1820>
 8008002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008006:	e016      	b.n	8008036 <UART_SetConfig+0x184e>
 8008008:	2301      	movs	r3, #1
 800800a:	e014      	b.n	8008036 <UART_SetConfig+0x184e>
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	e012      	b.n	8008036 <UART_SetConfig+0x184e>
 8008010:	2340      	movs	r3, #64	; 0x40
 8008012:	e010      	b.n	8008036 <UART_SetConfig+0x184e>
 8008014:	2320      	movs	r3, #32
 8008016:	e00e      	b.n	8008036 <UART_SetConfig+0x184e>
 8008018:	2310      	movs	r3, #16
 800801a:	e00c      	b.n	8008036 <UART_SetConfig+0x184e>
 800801c:	230c      	movs	r3, #12
 800801e:	e00a      	b.n	8008036 <UART_SetConfig+0x184e>
 8008020:	230a      	movs	r3, #10
 8008022:	e008      	b.n	8008036 <UART_SetConfig+0x184e>
 8008024:	2308      	movs	r3, #8
 8008026:	e006      	b.n	8008036 <UART_SetConfig+0x184e>
 8008028:	2306      	movs	r3, #6
 800802a:	e004      	b.n	8008036 <UART_SetConfig+0x184e>
 800802c:	2304      	movs	r3, #4
 800802e:	e002      	b.n	8008036 <UART_SetConfig+0x184e>
 8008030:	2302      	movs	r3, #2
 8008032:	e000      	b.n	8008036 <UART_SetConfig+0x184e>
 8008034:	2301      	movs	r3, #1
 8008036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	005a      	lsls	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	085b      	lsrs	r3, r3, #1
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	fbb2 f3f3 	udiv	r3, r2, r3
 800804e:	b29b      	uxth	r3, r3
 8008050:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008052:	e254      	b.n	80084fe <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008054:	f107 0318 	add.w	r3, r7, #24
 8008058:	4618      	mov	r0, r3
 800805a:	f7fd fd63 	bl	8005b24 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	d044      	beq.n	80080f2 <UART_SetConfig+0x190a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b01      	cmp	r3, #1
 800806e:	d03e      	beq.n	80080ee <UART_SetConfig+0x1906>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b02      	cmp	r3, #2
 8008076:	d038      	beq.n	80080ea <UART_SetConfig+0x1902>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b03      	cmp	r3, #3
 800807e:	d032      	beq.n	80080e6 <UART_SetConfig+0x18fe>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	2b04      	cmp	r3, #4
 8008086:	d02c      	beq.n	80080e2 <UART_SetConfig+0x18fa>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b05      	cmp	r3, #5
 800808e:	d026      	beq.n	80080de <UART_SetConfig+0x18f6>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b06      	cmp	r3, #6
 8008096:	d020      	beq.n	80080da <UART_SetConfig+0x18f2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2b07      	cmp	r3, #7
 800809e:	d01a      	beq.n	80080d6 <UART_SetConfig+0x18ee>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d014      	beq.n	80080d2 <UART_SetConfig+0x18ea>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b09      	cmp	r3, #9
 80080ae:	d00e      	beq.n	80080ce <UART_SetConfig+0x18e6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b0a      	cmp	r3, #10
 80080b6:	d008      	beq.n	80080ca <UART_SetConfig+0x18e2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2b0b      	cmp	r3, #11
 80080be:	d102      	bne.n	80080c6 <UART_SetConfig+0x18de>
 80080c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c4:	e016      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e014      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080ca:	2380      	movs	r3, #128	; 0x80
 80080cc:	e012      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080ce:	2340      	movs	r3, #64	; 0x40
 80080d0:	e010      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080d2:	2320      	movs	r3, #32
 80080d4:	e00e      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080d6:	2310      	movs	r3, #16
 80080d8:	e00c      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080da:	230c      	movs	r3, #12
 80080dc:	e00a      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080de:	230a      	movs	r3, #10
 80080e0:	e008      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080e2:	2308      	movs	r3, #8
 80080e4:	e006      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080e6:	2306      	movs	r3, #6
 80080e8:	e004      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080ea:	2304      	movs	r3, #4
 80080ec:	e002      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080ee:	2302      	movs	r3, #2
 80080f0:	e000      	b.n	80080f4 <UART_SetConfig+0x190c>
 80080f2:	2301      	movs	r3, #1
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	005a      	lsls	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	441a      	add	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	fbb2 f3f3 	udiv	r3, r2, r3
 800810a:	b29b      	uxth	r3, r3
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800810e:	e1f6      	b.n	80084fe <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f7fd fe51 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d044      	beq.n	80081ae <UART_SetConfig+0x19c6>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2b01      	cmp	r3, #1
 800812a:	d03e      	beq.n	80081aa <UART_SetConfig+0x19c2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b02      	cmp	r3, #2
 8008132:	d038      	beq.n	80081a6 <UART_SetConfig+0x19be>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b03      	cmp	r3, #3
 800813a:	d032      	beq.n	80081a2 <UART_SetConfig+0x19ba>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	2b04      	cmp	r3, #4
 8008142:	d02c      	beq.n	800819e <UART_SetConfig+0x19b6>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2b05      	cmp	r3, #5
 800814a:	d026      	beq.n	800819a <UART_SetConfig+0x19b2>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	2b06      	cmp	r3, #6
 8008152:	d020      	beq.n	8008196 <UART_SetConfig+0x19ae>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b07      	cmp	r3, #7
 800815a:	d01a      	beq.n	8008192 <UART_SetConfig+0x19aa>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b08      	cmp	r3, #8
 8008162:	d014      	beq.n	800818e <UART_SetConfig+0x19a6>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2b09      	cmp	r3, #9
 800816a:	d00e      	beq.n	800818a <UART_SetConfig+0x19a2>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b0a      	cmp	r3, #10
 8008172:	d008      	beq.n	8008186 <UART_SetConfig+0x199e>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b0b      	cmp	r3, #11
 800817a:	d102      	bne.n	8008182 <UART_SetConfig+0x199a>
 800817c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008180:	e016      	b.n	80081b0 <UART_SetConfig+0x19c8>
 8008182:	2301      	movs	r3, #1
 8008184:	e014      	b.n	80081b0 <UART_SetConfig+0x19c8>
 8008186:	2380      	movs	r3, #128	; 0x80
 8008188:	e012      	b.n	80081b0 <UART_SetConfig+0x19c8>
 800818a:	2340      	movs	r3, #64	; 0x40
 800818c:	e010      	b.n	80081b0 <UART_SetConfig+0x19c8>
 800818e:	2320      	movs	r3, #32
 8008190:	e00e      	b.n	80081b0 <UART_SetConfig+0x19c8>
 8008192:	2310      	movs	r3, #16
 8008194:	e00c      	b.n	80081b0 <UART_SetConfig+0x19c8>
 8008196:	230c      	movs	r3, #12
 8008198:	e00a      	b.n	80081b0 <UART_SetConfig+0x19c8>
 800819a:	230a      	movs	r3, #10
 800819c:	e008      	b.n	80081b0 <UART_SetConfig+0x19c8>
 800819e:	2308      	movs	r3, #8
 80081a0:	e006      	b.n	80081b0 <UART_SetConfig+0x19c8>
 80081a2:	2306      	movs	r3, #6
 80081a4:	e004      	b.n	80081b0 <UART_SetConfig+0x19c8>
 80081a6:	2304      	movs	r3, #4
 80081a8:	e002      	b.n	80081b0 <UART_SetConfig+0x19c8>
 80081aa:	2302      	movs	r3, #2
 80081ac:	e000      	b.n	80081b0 <UART_SetConfig+0x19c8>
 80081ae:	2301      	movs	r3, #1
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	005a      	lsls	r2, r3, #1
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	085b      	lsrs	r3, r3, #1
 80081bc:	441a      	add	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081ca:	e198      	b.n	80084fe <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081cc:	4b87      	ldr	r3, [pc, #540]	; (80083ec <UART_SetConfig+0x1c04>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d05e      	beq.n	8008296 <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d8:	4b84      	ldr	r3, [pc, #528]	; (80083ec <UART_SetConfig+0x1c04>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	08db      	lsrs	r3, r3, #3
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	4a83      	ldr	r2, [pc, #524]	; (80083f0 <UART_SetConfig+0x1c08>)
 80081e4:	40da      	lsrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d044      	beq.n	8008278 <UART_SetConfig+0x1a90>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d03e      	beq.n	8008274 <UART_SetConfig+0x1a8c>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d038      	beq.n	8008270 <UART_SetConfig+0x1a88>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	2b03      	cmp	r3, #3
 8008204:	d032      	beq.n	800826c <UART_SetConfig+0x1a84>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b04      	cmp	r3, #4
 800820c:	d02c      	beq.n	8008268 <UART_SetConfig+0x1a80>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b05      	cmp	r3, #5
 8008214:	d026      	beq.n	8008264 <UART_SetConfig+0x1a7c>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b06      	cmp	r3, #6
 800821c:	d020      	beq.n	8008260 <UART_SetConfig+0x1a78>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b07      	cmp	r3, #7
 8008224:	d01a      	beq.n	800825c <UART_SetConfig+0x1a74>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b08      	cmp	r3, #8
 800822c:	d014      	beq.n	8008258 <UART_SetConfig+0x1a70>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b09      	cmp	r3, #9
 8008234:	d00e      	beq.n	8008254 <UART_SetConfig+0x1a6c>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b0a      	cmp	r3, #10
 800823c:	d008      	beq.n	8008250 <UART_SetConfig+0x1a68>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b0b      	cmp	r3, #11
 8008244:	d102      	bne.n	800824c <UART_SetConfig+0x1a64>
 8008246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800824a:	e016      	b.n	800827a <UART_SetConfig+0x1a92>
 800824c:	2301      	movs	r3, #1
 800824e:	e014      	b.n	800827a <UART_SetConfig+0x1a92>
 8008250:	2380      	movs	r3, #128	; 0x80
 8008252:	e012      	b.n	800827a <UART_SetConfig+0x1a92>
 8008254:	2340      	movs	r3, #64	; 0x40
 8008256:	e010      	b.n	800827a <UART_SetConfig+0x1a92>
 8008258:	2320      	movs	r3, #32
 800825a:	e00e      	b.n	800827a <UART_SetConfig+0x1a92>
 800825c:	2310      	movs	r3, #16
 800825e:	e00c      	b.n	800827a <UART_SetConfig+0x1a92>
 8008260:	230c      	movs	r3, #12
 8008262:	e00a      	b.n	800827a <UART_SetConfig+0x1a92>
 8008264:	230a      	movs	r3, #10
 8008266:	e008      	b.n	800827a <UART_SetConfig+0x1a92>
 8008268:	2308      	movs	r3, #8
 800826a:	e006      	b.n	800827a <UART_SetConfig+0x1a92>
 800826c:	2306      	movs	r3, #6
 800826e:	e004      	b.n	800827a <UART_SetConfig+0x1a92>
 8008270:	2304      	movs	r3, #4
 8008272:	e002      	b.n	800827a <UART_SetConfig+0x1a92>
 8008274:	2302      	movs	r3, #2
 8008276:	e000      	b.n	800827a <UART_SetConfig+0x1a92>
 8008278:	2301      	movs	r3, #1
 800827a:	fbb2 f3f3 	udiv	r3, r2, r3
 800827e:	005a      	lsls	r2, r3, #1
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	085b      	lsrs	r3, r3, #1
 8008286:	441a      	add	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008290:	b29b      	uxth	r3, r3
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008294:	e133      	b.n	80084fe <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	2b00      	cmp	r3, #0
 800829c:	d043      	beq.n	8008326 <UART_SetConfig+0x1b3e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d03d      	beq.n	8008322 <UART_SetConfig+0x1b3a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d037      	beq.n	800831e <UART_SetConfig+0x1b36>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d031      	beq.n	800831a <UART_SetConfig+0x1b32>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d02b      	beq.n	8008316 <UART_SetConfig+0x1b2e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d025      	beq.n	8008312 <UART_SetConfig+0x1b2a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	2b06      	cmp	r3, #6
 80082cc:	d01f      	beq.n	800830e <UART_SetConfig+0x1b26>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b07      	cmp	r3, #7
 80082d4:	d019      	beq.n	800830a <UART_SetConfig+0x1b22>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	2b08      	cmp	r3, #8
 80082dc:	d013      	beq.n	8008306 <UART_SetConfig+0x1b1e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	2b09      	cmp	r3, #9
 80082e4:	d00d      	beq.n	8008302 <UART_SetConfig+0x1b1a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	2b0a      	cmp	r3, #10
 80082ec:	d007      	beq.n	80082fe <UART_SetConfig+0x1b16>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	2b0b      	cmp	r3, #11
 80082f4:	d101      	bne.n	80082fa <UART_SetConfig+0x1b12>
 80082f6:	4b3f      	ldr	r3, [pc, #252]	; (80083f4 <UART_SetConfig+0x1c0c>)
 80082f8:	e016      	b.n	8008328 <UART_SetConfig+0x1b40>
 80082fa:	4b3f      	ldr	r3, [pc, #252]	; (80083f8 <UART_SetConfig+0x1c10>)
 80082fc:	e014      	b.n	8008328 <UART_SetConfig+0x1b40>
 80082fe:	4b3f      	ldr	r3, [pc, #252]	; (80083fc <UART_SetConfig+0x1c14>)
 8008300:	e012      	b.n	8008328 <UART_SetConfig+0x1b40>
 8008302:	4b3f      	ldr	r3, [pc, #252]	; (8008400 <UART_SetConfig+0x1c18>)
 8008304:	e010      	b.n	8008328 <UART_SetConfig+0x1b40>
 8008306:	4b3f      	ldr	r3, [pc, #252]	; (8008404 <UART_SetConfig+0x1c1c>)
 8008308:	e00e      	b.n	8008328 <UART_SetConfig+0x1b40>
 800830a:	4b3f      	ldr	r3, [pc, #252]	; (8008408 <UART_SetConfig+0x1c20>)
 800830c:	e00c      	b.n	8008328 <UART_SetConfig+0x1b40>
 800830e:	4b3f      	ldr	r3, [pc, #252]	; (800840c <UART_SetConfig+0x1c24>)
 8008310:	e00a      	b.n	8008328 <UART_SetConfig+0x1b40>
 8008312:	4b3f      	ldr	r3, [pc, #252]	; (8008410 <UART_SetConfig+0x1c28>)
 8008314:	e008      	b.n	8008328 <UART_SetConfig+0x1b40>
 8008316:	4b3f      	ldr	r3, [pc, #252]	; (8008414 <UART_SetConfig+0x1c2c>)
 8008318:	e006      	b.n	8008328 <UART_SetConfig+0x1b40>
 800831a:	4b3f      	ldr	r3, [pc, #252]	; (8008418 <UART_SetConfig+0x1c30>)
 800831c:	e004      	b.n	8008328 <UART_SetConfig+0x1b40>
 800831e:	4b3f      	ldr	r3, [pc, #252]	; (800841c <UART_SetConfig+0x1c34>)
 8008320:	e002      	b.n	8008328 <UART_SetConfig+0x1b40>
 8008322:	4b33      	ldr	r3, [pc, #204]	; (80083f0 <UART_SetConfig+0x1c08>)
 8008324:	e000      	b.n	8008328 <UART_SetConfig+0x1b40>
 8008326:	4b34      	ldr	r3, [pc, #208]	; (80083f8 <UART_SetConfig+0x1c10>)
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6852      	ldr	r2, [r2, #4]
 800832c:	0852      	lsrs	r2, r2, #1
 800832e:	441a      	add	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	fbb2 f3f3 	udiv	r3, r2, r3
 8008338:	b29b      	uxth	r3, r3
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800833c:	e0df      	b.n	80084fe <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b00      	cmp	r3, #0
 8008344:	d045      	beq.n	80083d2 <UART_SetConfig+0x1bea>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b01      	cmp	r3, #1
 800834c:	d03f      	beq.n	80083ce <UART_SetConfig+0x1be6>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b02      	cmp	r3, #2
 8008354:	d039      	beq.n	80083ca <UART_SetConfig+0x1be2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b03      	cmp	r3, #3
 800835c:	d033      	beq.n	80083c6 <UART_SetConfig+0x1bde>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b04      	cmp	r3, #4
 8008364:	d02d      	beq.n	80083c2 <UART_SetConfig+0x1bda>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b05      	cmp	r3, #5
 800836c:	d027      	beq.n	80083be <UART_SetConfig+0x1bd6>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	2b06      	cmp	r3, #6
 8008374:	d021      	beq.n	80083ba <UART_SetConfig+0x1bd2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	2b07      	cmp	r3, #7
 800837c:	d01b      	beq.n	80083b6 <UART_SetConfig+0x1bce>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	2b08      	cmp	r3, #8
 8008384:	d015      	beq.n	80083b2 <UART_SetConfig+0x1bca>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b09      	cmp	r3, #9
 800838c:	d00f      	beq.n	80083ae <UART_SetConfig+0x1bc6>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b0a      	cmp	r3, #10
 8008394:	d008      	beq.n	80083a8 <UART_SetConfig+0x1bc0>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b0b      	cmp	r3, #11
 800839c:	d102      	bne.n	80083a4 <UART_SetConfig+0x1bbc>
 800839e:	f647 2312 	movw	r3, #31250	; 0x7a12
 80083a2:	e017      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083a4:	4b18      	ldr	r3, [pc, #96]	; (8008408 <UART_SetConfig+0x1c20>)
 80083a6:	e015      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80083ac:	e012      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083ae:	4b1c      	ldr	r3, [pc, #112]	; (8008420 <UART_SetConfig+0x1c38>)
 80083b0:	e010      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <UART_SetConfig+0x1c3c>)
 80083b4:	e00e      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083b6:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <UART_SetConfig+0x1c0c>)
 80083b8:	e00c      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083ba:	4b1b      	ldr	r3, [pc, #108]	; (8008428 <UART_SetConfig+0x1c40>)
 80083bc:	e00a      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083be:	4b1b      	ldr	r3, [pc, #108]	; (800842c <UART_SetConfig+0x1c44>)
 80083c0:	e008      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083c2:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <UART_SetConfig+0x1c14>)
 80083c4:	e006      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <UART_SetConfig+0x1c48>)
 80083c8:	e004      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083ca:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <UART_SetConfig+0x1c18>)
 80083cc:	e002      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <UART_SetConfig+0x1c1c>)
 80083d0:	e000      	b.n	80083d4 <UART_SetConfig+0x1bec>
 80083d2:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <UART_SetConfig+0x1c20>)
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6852      	ldr	r2, [r2, #4]
 80083d8:	0852      	lsrs	r2, r2, #1
 80083da:	441a      	add	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083e8:	e089      	b.n	80084fe <UART_SetConfig+0x1d16>
 80083ea:	bf00      	nop
 80083ec:	58024400 	.word	0x58024400
 80083f0:	03d09000 	.word	0x03d09000
 80083f4:	0007a120 	.word	0x0007a120
 80083f8:	07a12000 	.word	0x07a12000
 80083fc:	000f4240 	.word	0x000f4240
 8008400:	001e8480 	.word	0x001e8480
 8008404:	003d0900 	.word	0x003d0900
 8008408:	007a1200 	.word	0x007a1200
 800840c:	00a2c2aa 	.word	0x00a2c2aa
 8008410:	00c35000 	.word	0x00c35000
 8008414:	00f42400 	.word	0x00f42400
 8008418:	01458554 	.word	0x01458554
 800841c:	01e84800 	.word	0x01e84800
 8008420:	0001e848 	.word	0x0001e848
 8008424:	0003d090 	.word	0x0003d090
 8008428:	000a2c2a 	.word	0x000a2c2a
 800842c:	000c3500 	.word	0x000c3500
 8008430:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b00      	cmp	r3, #0
 800843a:	d04f      	beq.n	80084dc <UART_SetConfig+0x1cf4>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b01      	cmp	r3, #1
 8008442:	d048      	beq.n	80084d6 <UART_SetConfig+0x1cee>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b02      	cmp	r3, #2
 800844a:	d041      	beq.n	80084d0 <UART_SetConfig+0x1ce8>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b03      	cmp	r3, #3
 8008452:	d03a      	beq.n	80084ca <UART_SetConfig+0x1ce2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2b04      	cmp	r3, #4
 800845a:	d033      	beq.n	80084c4 <UART_SetConfig+0x1cdc>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	2b05      	cmp	r3, #5
 8008462:	d02c      	beq.n	80084be <UART_SetConfig+0x1cd6>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	2b06      	cmp	r3, #6
 800846a:	d025      	beq.n	80084b8 <UART_SetConfig+0x1cd0>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	2b07      	cmp	r3, #7
 8008472:	d01e      	beq.n	80084b2 <UART_SetConfig+0x1cca>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	2b08      	cmp	r3, #8
 800847a:	d017      	beq.n	80084ac <UART_SetConfig+0x1cc4>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	2b09      	cmp	r3, #9
 8008482:	d010      	beq.n	80084a6 <UART_SetConfig+0x1cbe>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	2b0a      	cmp	r3, #10
 800848a:	d009      	beq.n	80084a0 <UART_SetConfig+0x1cb8>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b0b      	cmp	r3, #11
 8008492:	d102      	bne.n	800849a <UART_SetConfig+0x1cb2>
 8008494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008498:	e022      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 800849a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800849e:	e01f      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084a4:	e01c      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084aa:	e019      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084b0:	e016      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084b6:	e013      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084b8:	f241 5354 	movw	r3, #5460	; 0x1554
 80084bc:	e010      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084be:	f641 1398 	movw	r3, #6552	; 0x1998
 80084c2:	e00d      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084c8:	e00a      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084ca:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80084ce:	e007      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084d4:	e004      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084da:	e001      	b.n	80084e0 <UART_SetConfig+0x1cf8>
 80084dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6852      	ldr	r2, [r2, #4]
 80084e4:	0852      	lsrs	r2, r2, #1
 80084e6:	441a      	add	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084f4:	e003      	b.n	80084fe <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80084fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	2b0f      	cmp	r3, #15
 8008502:	d916      	bls.n	8008532 <UART_SetConfig+0x1d4a>
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850a:	d212      	bcs.n	8008532 <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800850c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850e:	b29b      	uxth	r3, r3
 8008510:	f023 030f 	bic.w	r3, r3, #15
 8008514:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	b29b      	uxth	r3, r3
 800851c:	f003 0307 	and.w	r3, r3, #7
 8008520:	b29a      	uxth	r2, r3
 8008522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008524:	4313      	orrs	r3, r2
 8008526:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800852e:	60da      	str	r2, [r3, #12]
 8008530:	e3a3      	b.n	8008c7a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008538:	e39f      	b.n	8008c7a <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800853a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	f200 8388 	bhi.w	8008c54 <UART_SetConfig+0x246c>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0x1d64>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	08008651 	.word	0x08008651
 8008550:	08008707 	.word	0x08008707
 8008554:	08008c55 	.word	0x08008c55
 8008558:	08008c55 	.word	0x08008c55
 800855c:	080087bd 	.word	0x080087bd
 8008560:	08008c55 	.word	0x08008c55
 8008564:	08008c55 	.word	0x08008c55
 8008568:	08008c55 	.word	0x08008c55
 800856c:	08008877 	.word	0x08008877
 8008570:	08008c55 	.word	0x08008c55
 8008574:	08008c55 	.word	0x08008c55
 8008578:	08008c55 	.word	0x08008c55
 800857c:	08008c55 	.word	0x08008c55
 8008580:	08008c55 	.word	0x08008c55
 8008584:	08008c55 	.word	0x08008c55
 8008588:	08008c55 	.word	0x08008c55
 800858c:	08008931 	.word	0x08008931
 8008590:	08008c55 	.word	0x08008c55
 8008594:	08008c55 	.word	0x08008c55
 8008598:	08008c55 	.word	0x08008c55
 800859c:	08008c55 	.word	0x08008c55
 80085a0:	08008c55 	.word	0x08008c55
 80085a4:	08008c55 	.word	0x08008c55
 80085a8:	08008c55 	.word	0x08008c55
 80085ac:	08008c55 	.word	0x08008c55
 80085b0:	08008c55 	.word	0x08008c55
 80085b4:	08008c55 	.word	0x08008c55
 80085b8:	08008c55 	.word	0x08008c55
 80085bc:	08008c55 	.word	0x08008c55
 80085c0:	08008c55 	.word	0x08008c55
 80085c4:	08008c55 	.word	0x08008c55
 80085c8:	08008c55 	.word	0x08008c55
 80085cc:	08008aa1 	.word	0x08008aa1
 80085d0:	08008c55 	.word	0x08008c55
 80085d4:	08008c55 	.word	0x08008c55
 80085d8:	08008c55 	.word	0x08008c55
 80085dc:	08008c55 	.word	0x08008c55
 80085e0:	08008c55 	.word	0x08008c55
 80085e4:	08008c55 	.word	0x08008c55
 80085e8:	08008c55 	.word	0x08008c55
 80085ec:	08008c55 	.word	0x08008c55
 80085f0:	08008c55 	.word	0x08008c55
 80085f4:	08008c55 	.word	0x08008c55
 80085f8:	08008c55 	.word	0x08008c55
 80085fc:	08008c55 	.word	0x08008c55
 8008600:	08008c55 	.word	0x08008c55
 8008604:	08008c55 	.word	0x08008c55
 8008608:	08008c55 	.word	0x08008c55
 800860c:	08008c55 	.word	0x08008c55
 8008610:	08008c55 	.word	0x08008c55
 8008614:	08008c55 	.word	0x08008c55
 8008618:	08008c55 	.word	0x08008c55
 800861c:	08008c55 	.word	0x08008c55
 8008620:	08008c55 	.word	0x08008c55
 8008624:	08008c55 	.word	0x08008c55
 8008628:	08008c55 	.word	0x08008c55
 800862c:	08008c55 	.word	0x08008c55
 8008630:	08008c55 	.word	0x08008c55
 8008634:	08008c55 	.word	0x08008c55
 8008638:	08008c55 	.word	0x08008c55
 800863c:	08008c55 	.word	0x08008c55
 8008640:	08008c55 	.word	0x08008c55
 8008644:	08008c55 	.word	0x08008c55
 8008648:	08008c55 	.word	0x08008c55
 800864c:	08008b95 	.word	0x08008b95
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008650:	f7fc f884 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8008654:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d044      	beq.n	80086e8 <UART_SetConfig+0x1f00>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b01      	cmp	r3, #1
 8008664:	d03e      	beq.n	80086e4 <UART_SetConfig+0x1efc>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b02      	cmp	r3, #2
 800866c:	d038      	beq.n	80086e0 <UART_SetConfig+0x1ef8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b03      	cmp	r3, #3
 8008674:	d032      	beq.n	80086dc <UART_SetConfig+0x1ef4>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	2b04      	cmp	r3, #4
 800867c:	d02c      	beq.n	80086d8 <UART_SetConfig+0x1ef0>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	2b05      	cmp	r3, #5
 8008684:	d026      	beq.n	80086d4 <UART_SetConfig+0x1eec>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	2b06      	cmp	r3, #6
 800868c:	d020      	beq.n	80086d0 <UART_SetConfig+0x1ee8>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b07      	cmp	r3, #7
 8008694:	d01a      	beq.n	80086cc <UART_SetConfig+0x1ee4>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	2b08      	cmp	r3, #8
 800869c:	d014      	beq.n	80086c8 <UART_SetConfig+0x1ee0>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	d00e      	beq.n	80086c4 <UART_SetConfig+0x1edc>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b0a      	cmp	r3, #10
 80086ac:	d008      	beq.n	80086c0 <UART_SetConfig+0x1ed8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	2b0b      	cmp	r3, #11
 80086b4:	d102      	bne.n	80086bc <UART_SetConfig+0x1ed4>
 80086b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ba:	e016      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086bc:	2301      	movs	r3, #1
 80086be:	e014      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	e012      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	e010      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086c8:	2320      	movs	r3, #32
 80086ca:	e00e      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086cc:	2310      	movs	r3, #16
 80086ce:	e00c      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086d0:	230c      	movs	r3, #12
 80086d2:	e00a      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086d4:	230a      	movs	r3, #10
 80086d6:	e008      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086d8:	2308      	movs	r3, #8
 80086da:	e006      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086dc:	2306      	movs	r3, #6
 80086de:	e004      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086e0:	2304      	movs	r3, #4
 80086e2:	e002      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e000      	b.n	80086ea <UART_SetConfig+0x1f02>
 80086e8:	2301      	movs	r3, #1
 80086ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	441a      	add	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008700:	b29b      	uxth	r3, r3
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008704:	e2aa      	b.n	8008c5c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008706:	f7fc f83f 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 800870a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d044      	beq.n	800879e <UART_SetConfig+0x1fb6>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b01      	cmp	r3, #1
 800871a:	d03e      	beq.n	800879a <UART_SetConfig+0x1fb2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b02      	cmp	r3, #2
 8008722:	d038      	beq.n	8008796 <UART_SetConfig+0x1fae>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	2b03      	cmp	r3, #3
 800872a:	d032      	beq.n	8008792 <UART_SetConfig+0x1faa>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	2b04      	cmp	r3, #4
 8008732:	d02c      	beq.n	800878e <UART_SetConfig+0x1fa6>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	2b05      	cmp	r3, #5
 800873a:	d026      	beq.n	800878a <UART_SetConfig+0x1fa2>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	2b06      	cmp	r3, #6
 8008742:	d020      	beq.n	8008786 <UART_SetConfig+0x1f9e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b07      	cmp	r3, #7
 800874a:	d01a      	beq.n	8008782 <UART_SetConfig+0x1f9a>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	2b08      	cmp	r3, #8
 8008752:	d014      	beq.n	800877e <UART_SetConfig+0x1f96>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b09      	cmp	r3, #9
 800875a:	d00e      	beq.n	800877a <UART_SetConfig+0x1f92>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	2b0a      	cmp	r3, #10
 8008762:	d008      	beq.n	8008776 <UART_SetConfig+0x1f8e>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2b0b      	cmp	r3, #11
 800876a:	d102      	bne.n	8008772 <UART_SetConfig+0x1f8a>
 800876c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008770:	e016      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 8008772:	2301      	movs	r3, #1
 8008774:	e014      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	e012      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	e010      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 800877e:	2320      	movs	r3, #32
 8008780:	e00e      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 8008782:	2310      	movs	r3, #16
 8008784:	e00c      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 8008786:	230c      	movs	r3, #12
 8008788:	e00a      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 800878a:	230a      	movs	r3, #10
 800878c:	e008      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 800878e:	2308      	movs	r3, #8
 8008790:	e006      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 8008792:	2306      	movs	r3, #6
 8008794:	e004      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 8008796:	2304      	movs	r3, #4
 8008798:	e002      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 800879a:	2302      	movs	r3, #2
 800879c:	e000      	b.n	80087a0 <UART_SetConfig+0x1fb8>
 800879e:	2301      	movs	r3, #1
 80087a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	085b      	lsrs	r3, r3, #1
 80087ac:	441a      	add	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087ba:	e24f      	b.n	8008c5c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087bc:	f107 0318 	add.w	r3, r7, #24
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fd f9af 	bl	8005b24 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d044      	beq.n	800885a <UART_SetConfig+0x2072>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d03e      	beq.n	8008856 <UART_SetConfig+0x206e>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d038      	beq.n	8008852 <UART_SetConfig+0x206a>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d032      	beq.n	800884e <UART_SetConfig+0x2066>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d02c      	beq.n	800884a <UART_SetConfig+0x2062>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	2b05      	cmp	r3, #5
 80087f6:	d026      	beq.n	8008846 <UART_SetConfig+0x205e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	2b06      	cmp	r3, #6
 80087fe:	d020      	beq.n	8008842 <UART_SetConfig+0x205a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	2b07      	cmp	r3, #7
 8008806:	d01a      	beq.n	800883e <UART_SetConfig+0x2056>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	2b08      	cmp	r3, #8
 800880e:	d014      	beq.n	800883a <UART_SetConfig+0x2052>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	2b09      	cmp	r3, #9
 8008816:	d00e      	beq.n	8008836 <UART_SetConfig+0x204e>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	2b0a      	cmp	r3, #10
 800881e:	d008      	beq.n	8008832 <UART_SetConfig+0x204a>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b0b      	cmp	r3, #11
 8008826:	d102      	bne.n	800882e <UART_SetConfig+0x2046>
 8008828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800882c:	e016      	b.n	800885c <UART_SetConfig+0x2074>
 800882e:	2301      	movs	r3, #1
 8008830:	e014      	b.n	800885c <UART_SetConfig+0x2074>
 8008832:	2380      	movs	r3, #128	; 0x80
 8008834:	e012      	b.n	800885c <UART_SetConfig+0x2074>
 8008836:	2340      	movs	r3, #64	; 0x40
 8008838:	e010      	b.n	800885c <UART_SetConfig+0x2074>
 800883a:	2320      	movs	r3, #32
 800883c:	e00e      	b.n	800885c <UART_SetConfig+0x2074>
 800883e:	2310      	movs	r3, #16
 8008840:	e00c      	b.n	800885c <UART_SetConfig+0x2074>
 8008842:	230c      	movs	r3, #12
 8008844:	e00a      	b.n	800885c <UART_SetConfig+0x2074>
 8008846:	230a      	movs	r3, #10
 8008848:	e008      	b.n	800885c <UART_SetConfig+0x2074>
 800884a:	2308      	movs	r3, #8
 800884c:	e006      	b.n	800885c <UART_SetConfig+0x2074>
 800884e:	2306      	movs	r3, #6
 8008850:	e004      	b.n	800885c <UART_SetConfig+0x2074>
 8008852:	2304      	movs	r3, #4
 8008854:	e002      	b.n	800885c <UART_SetConfig+0x2074>
 8008856:	2302      	movs	r3, #2
 8008858:	e000      	b.n	800885c <UART_SetConfig+0x2074>
 800885a:	2301      	movs	r3, #1
 800885c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	441a      	add	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008870:	b29b      	uxth	r3, r3
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008874:	e1f2      	b.n	8008c5c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008876:	f107 030c 	add.w	r3, r7, #12
 800887a:	4618      	mov	r0, r3
 800887c:	f7fd fa9e 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d044      	beq.n	8008914 <UART_SetConfig+0x212c>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	2b01      	cmp	r3, #1
 8008890:	d03e      	beq.n	8008910 <UART_SetConfig+0x2128>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	2b02      	cmp	r3, #2
 8008898:	d038      	beq.n	800890c <UART_SetConfig+0x2124>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d032      	beq.n	8008908 <UART_SetConfig+0x2120>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d02c      	beq.n	8008904 <UART_SetConfig+0x211c>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b05      	cmp	r3, #5
 80088b0:	d026      	beq.n	8008900 <UART_SetConfig+0x2118>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	2b06      	cmp	r3, #6
 80088b8:	d020      	beq.n	80088fc <UART_SetConfig+0x2114>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2b07      	cmp	r3, #7
 80088c0:	d01a      	beq.n	80088f8 <UART_SetConfig+0x2110>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d014      	beq.n	80088f4 <UART_SetConfig+0x210c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b09      	cmp	r3, #9
 80088d0:	d00e      	beq.n	80088f0 <UART_SetConfig+0x2108>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	2b0a      	cmp	r3, #10
 80088d8:	d008      	beq.n	80088ec <UART_SetConfig+0x2104>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b0b      	cmp	r3, #11
 80088e0:	d102      	bne.n	80088e8 <UART_SetConfig+0x2100>
 80088e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088e6:	e016      	b.n	8008916 <UART_SetConfig+0x212e>
 80088e8:	2301      	movs	r3, #1
 80088ea:	e014      	b.n	8008916 <UART_SetConfig+0x212e>
 80088ec:	2380      	movs	r3, #128	; 0x80
 80088ee:	e012      	b.n	8008916 <UART_SetConfig+0x212e>
 80088f0:	2340      	movs	r3, #64	; 0x40
 80088f2:	e010      	b.n	8008916 <UART_SetConfig+0x212e>
 80088f4:	2320      	movs	r3, #32
 80088f6:	e00e      	b.n	8008916 <UART_SetConfig+0x212e>
 80088f8:	2310      	movs	r3, #16
 80088fa:	e00c      	b.n	8008916 <UART_SetConfig+0x212e>
 80088fc:	230c      	movs	r3, #12
 80088fe:	e00a      	b.n	8008916 <UART_SetConfig+0x212e>
 8008900:	230a      	movs	r3, #10
 8008902:	e008      	b.n	8008916 <UART_SetConfig+0x212e>
 8008904:	2308      	movs	r3, #8
 8008906:	e006      	b.n	8008916 <UART_SetConfig+0x212e>
 8008908:	2306      	movs	r3, #6
 800890a:	e004      	b.n	8008916 <UART_SetConfig+0x212e>
 800890c:	2304      	movs	r3, #4
 800890e:	e002      	b.n	8008916 <UART_SetConfig+0x212e>
 8008910:	2302      	movs	r3, #2
 8008912:	e000      	b.n	8008916 <UART_SetConfig+0x212e>
 8008914:	2301      	movs	r3, #1
 8008916:	fbb2 f2f3 	udiv	r2, r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	441a      	add	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	fbb2 f3f3 	udiv	r3, r2, r3
 800892a:	b29b      	uxth	r3, r3
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800892e:	e195      	b.n	8008c5c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008930:	4b87      	ldr	r3, [pc, #540]	; (8008b50 <UART_SetConfig+0x2368>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b00      	cmp	r3, #0
 800893a:	d05d      	beq.n	80089f8 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800893c:	4b84      	ldr	r3, [pc, #528]	; (8008b50 <UART_SetConfig+0x2368>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	08db      	lsrs	r3, r3, #3
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	4a83      	ldr	r2, [pc, #524]	; (8008b54 <UART_SetConfig+0x236c>)
 8008948:	40da      	lsrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b00      	cmp	r3, #0
 8008950:	d044      	beq.n	80089dc <UART_SetConfig+0x21f4>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b01      	cmp	r3, #1
 8008958:	d03e      	beq.n	80089d8 <UART_SetConfig+0x21f0>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	2b02      	cmp	r3, #2
 8008960:	d038      	beq.n	80089d4 <UART_SetConfig+0x21ec>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	2b03      	cmp	r3, #3
 8008968:	d032      	beq.n	80089d0 <UART_SetConfig+0x21e8>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b04      	cmp	r3, #4
 8008970:	d02c      	beq.n	80089cc <UART_SetConfig+0x21e4>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b05      	cmp	r3, #5
 8008978:	d026      	beq.n	80089c8 <UART_SetConfig+0x21e0>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b06      	cmp	r3, #6
 8008980:	d020      	beq.n	80089c4 <UART_SetConfig+0x21dc>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b07      	cmp	r3, #7
 8008988:	d01a      	beq.n	80089c0 <UART_SetConfig+0x21d8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	2b08      	cmp	r3, #8
 8008990:	d014      	beq.n	80089bc <UART_SetConfig+0x21d4>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	2b09      	cmp	r3, #9
 8008998:	d00e      	beq.n	80089b8 <UART_SetConfig+0x21d0>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2b0a      	cmp	r3, #10
 80089a0:	d008      	beq.n	80089b4 <UART_SetConfig+0x21cc>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b0b      	cmp	r3, #11
 80089a8:	d102      	bne.n	80089b0 <UART_SetConfig+0x21c8>
 80089aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ae:	e016      	b.n	80089de <UART_SetConfig+0x21f6>
 80089b0:	2301      	movs	r3, #1
 80089b2:	e014      	b.n	80089de <UART_SetConfig+0x21f6>
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	e012      	b.n	80089de <UART_SetConfig+0x21f6>
 80089b8:	2340      	movs	r3, #64	; 0x40
 80089ba:	e010      	b.n	80089de <UART_SetConfig+0x21f6>
 80089bc:	2320      	movs	r3, #32
 80089be:	e00e      	b.n	80089de <UART_SetConfig+0x21f6>
 80089c0:	2310      	movs	r3, #16
 80089c2:	e00c      	b.n	80089de <UART_SetConfig+0x21f6>
 80089c4:	230c      	movs	r3, #12
 80089c6:	e00a      	b.n	80089de <UART_SetConfig+0x21f6>
 80089c8:	230a      	movs	r3, #10
 80089ca:	e008      	b.n	80089de <UART_SetConfig+0x21f6>
 80089cc:	2308      	movs	r3, #8
 80089ce:	e006      	b.n	80089de <UART_SetConfig+0x21f6>
 80089d0:	2306      	movs	r3, #6
 80089d2:	e004      	b.n	80089de <UART_SetConfig+0x21f6>
 80089d4:	2304      	movs	r3, #4
 80089d6:	e002      	b.n	80089de <UART_SetConfig+0x21f6>
 80089d8:	2302      	movs	r3, #2
 80089da:	e000      	b.n	80089de <UART_SetConfig+0x21f6>
 80089dc:	2301      	movs	r3, #1
 80089de:	fbb2 f2f3 	udiv	r2, r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	441a      	add	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80089f6:	e131      	b.n	8008c5c <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d043      	beq.n	8008a88 <UART_SetConfig+0x22a0>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d03d      	beq.n	8008a84 <UART_SetConfig+0x229c>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d037      	beq.n	8008a80 <UART_SetConfig+0x2298>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d031      	beq.n	8008a7c <UART_SetConfig+0x2294>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d02b      	beq.n	8008a78 <UART_SetConfig+0x2290>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d025      	beq.n	8008a74 <UART_SetConfig+0x228c>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	2b06      	cmp	r3, #6
 8008a2e:	d01f      	beq.n	8008a70 <UART_SetConfig+0x2288>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	2b07      	cmp	r3, #7
 8008a36:	d019      	beq.n	8008a6c <UART_SetConfig+0x2284>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d013      	beq.n	8008a68 <UART_SetConfig+0x2280>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d00d      	beq.n	8008a64 <UART_SetConfig+0x227c>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b0a      	cmp	r3, #10
 8008a4e:	d007      	beq.n	8008a60 <UART_SetConfig+0x2278>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b0b      	cmp	r3, #11
 8008a56:	d101      	bne.n	8008a5c <UART_SetConfig+0x2274>
 8008a58:	4b3f      	ldr	r3, [pc, #252]	; (8008b58 <UART_SetConfig+0x2370>)
 8008a5a:	e016      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a5c:	4b3d      	ldr	r3, [pc, #244]	; (8008b54 <UART_SetConfig+0x236c>)
 8008a5e:	e014      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a60:	4b3e      	ldr	r3, [pc, #248]	; (8008b5c <UART_SetConfig+0x2374>)
 8008a62:	e012      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a64:	4b3e      	ldr	r3, [pc, #248]	; (8008b60 <UART_SetConfig+0x2378>)
 8008a66:	e010      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a68:	4b3e      	ldr	r3, [pc, #248]	; (8008b64 <UART_SetConfig+0x237c>)
 8008a6a:	e00e      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a6c:	4b3e      	ldr	r3, [pc, #248]	; (8008b68 <UART_SetConfig+0x2380>)
 8008a6e:	e00c      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a70:	4b3e      	ldr	r3, [pc, #248]	; (8008b6c <UART_SetConfig+0x2384>)
 8008a72:	e00a      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a74:	4b3e      	ldr	r3, [pc, #248]	; (8008b70 <UART_SetConfig+0x2388>)
 8008a76:	e008      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a78:	4b3e      	ldr	r3, [pc, #248]	; (8008b74 <UART_SetConfig+0x238c>)
 8008a7a:	e006      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a7c:	4b3e      	ldr	r3, [pc, #248]	; (8008b78 <UART_SetConfig+0x2390>)
 8008a7e:	e004      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a80:	4b3e      	ldr	r3, [pc, #248]	; (8008b7c <UART_SetConfig+0x2394>)
 8008a82:	e002      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a84:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <UART_SetConfig+0x2398>)
 8008a86:	e000      	b.n	8008a8a <UART_SetConfig+0x22a2>
 8008a88:	4b32      	ldr	r3, [pc, #200]	; (8008b54 <UART_SetConfig+0x236c>)
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6852      	ldr	r2, [r2, #4]
 8008a8e:	0852      	lsrs	r2, r2, #1
 8008a90:	441a      	add	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a9e:	e0dd      	b.n	8008c5c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d046      	beq.n	8008b36 <UART_SetConfig+0x234e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d040      	beq.n	8008b32 <UART_SetConfig+0x234a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d03a      	beq.n	8008b2e <UART_SetConfig+0x2346>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d034      	beq.n	8008b2a <UART_SetConfig+0x2342>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d02e      	beq.n	8008b26 <UART_SetConfig+0x233e>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b05      	cmp	r3, #5
 8008ace:	d028      	beq.n	8008b22 <UART_SetConfig+0x233a>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	2b06      	cmp	r3, #6
 8008ad6:	d022      	beq.n	8008b1e <UART_SetConfig+0x2336>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	d01c      	beq.n	8008b1a <UART_SetConfig+0x2332>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d016      	beq.n	8008b16 <UART_SetConfig+0x232e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b09      	cmp	r3, #9
 8008aee:	d00f      	beq.n	8008b10 <UART_SetConfig+0x2328>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	2b0a      	cmp	r3, #10
 8008af6:	d008      	beq.n	8008b0a <UART_SetConfig+0x2322>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b0b      	cmp	r3, #11
 8008afe:	d102      	bne.n	8008b06 <UART_SetConfig+0x231e>
 8008b00:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008b04:	e018      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <UART_SetConfig+0x2380>)
 8008b08:	e016      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b0a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008b0e:	e013      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008b14:	e010      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b16:	4b1b      	ldr	r3, [pc, #108]	; (8008b84 <UART_SetConfig+0x239c>)
 8008b18:	e00e      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b1a:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <UART_SetConfig+0x2370>)
 8008b1c:	e00c      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <UART_SetConfig+0x23a0>)
 8008b20:	e00a      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b22:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <UART_SetConfig+0x23a4>)
 8008b24:	e008      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b26:	4b0d      	ldr	r3, [pc, #52]	; (8008b5c <UART_SetConfig+0x2374>)
 8008b28:	e006      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b2a:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <UART_SetConfig+0x23a8>)
 8008b2c:	e004      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <UART_SetConfig+0x2378>)
 8008b30:	e002      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b32:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <UART_SetConfig+0x237c>)
 8008b34:	e000      	b.n	8008b38 <UART_SetConfig+0x2350>
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <UART_SetConfig+0x2380>)
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6852      	ldr	r2, [r2, #4]
 8008b3c:	0852      	lsrs	r2, r2, #1
 8008b3e:	441a      	add	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b4c:	e086      	b.n	8008c5c <UART_SetConfig+0x2474>
 8008b4e:	bf00      	nop
 8008b50:	58024400 	.word	0x58024400
 8008b54:	03d09000 	.word	0x03d09000
 8008b58:	0003d090 	.word	0x0003d090
 8008b5c:	0007a120 	.word	0x0007a120
 8008b60:	000f4240 	.word	0x000f4240
 8008b64:	001e8480 	.word	0x001e8480
 8008b68:	003d0900 	.word	0x003d0900
 8008b6c:	00516155 	.word	0x00516155
 8008b70:	0061a800 	.word	0x0061a800
 8008b74:	007a1200 	.word	0x007a1200
 8008b78:	00a2c2aa 	.word	0x00a2c2aa
 8008b7c:	00f42400 	.word	0x00f42400
 8008b80:	01e84800 	.word	0x01e84800
 8008b84:	0001e848 	.word	0x0001e848
 8008b88:	00051615 	.word	0x00051615
 8008b8c:	00061a80 	.word	0x00061a80
 8008b90:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d04e      	beq.n	8008c3a <UART_SetConfig+0x2452>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d047      	beq.n	8008c34 <UART_SetConfig+0x244c>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d040      	beq.n	8008c2e <UART_SetConfig+0x2446>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d039      	beq.n	8008c28 <UART_SetConfig+0x2440>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d032      	beq.n	8008c22 <UART_SetConfig+0x243a>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b05      	cmp	r3, #5
 8008bc2:	d02b      	beq.n	8008c1c <UART_SetConfig+0x2434>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b06      	cmp	r3, #6
 8008bca:	d024      	beq.n	8008c16 <UART_SetConfig+0x242e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b07      	cmp	r3, #7
 8008bd2:	d01d      	beq.n	8008c10 <UART_SetConfig+0x2428>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d016      	beq.n	8008c0a <UART_SetConfig+0x2422>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	2b09      	cmp	r3, #9
 8008be2:	d00f      	beq.n	8008c04 <UART_SetConfig+0x241c>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	2b0a      	cmp	r3, #10
 8008bea:	d008      	beq.n	8008bfe <UART_SetConfig+0x2416>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2b0b      	cmp	r3, #11
 8008bf2:	d101      	bne.n	8008bf8 <UART_SetConfig+0x2410>
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	e022      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bfc:	e01f      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c02:	e01c      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c08:	e019      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c0e:	e016      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c14:	e013      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c16:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008c1a:	e010      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c1c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008c20:	e00d      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c26:	e00a      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c28:	f241 5355 	movw	r3, #5461	; 0x1555
 8008c2c:	e007      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c32:	e004      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c38:	e001      	b.n	8008c3e <UART_SetConfig+0x2456>
 8008c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6852      	ldr	r2, [r2, #4]
 8008c42:	0852      	lsrs	r2, r2, #1
 8008c44:	441a      	add	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c52:	e003      	b.n	8008c5c <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5e:	2b0f      	cmp	r3, #15
 8008c60:	d908      	bls.n	8008c74 <UART_SetConfig+0x248c>
 8008c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c68:	d204      	bcs.n	8008c74 <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	e002      	b.n	8008c7a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008c96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3740      	adds	r7, #64	; 0x40
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb0:	2bff      	cmp	r3, #255	; 0xff
 8008cb2:	d904      	bls.n	8008cbe <UART_AdvFeatureConfig+0x1a>
 8008cb4:	f640 4149 	movw	r1, #3145	; 0xc49
 8008cb8:	4899      	ldr	r0, [pc, #612]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008cba:	f006 f83c 	bl	800ed36 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d018      	beq.n	8008cfc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x42>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cda:	d004      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x42>
 8008cdc:	f640 414e 	movw	r1, #3150	; 0xc4e
 8008ce0:	488f      	ldr	r0, [pc, #572]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008ce2:	f006 f828 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d018      	beq.n	8008d3a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <UART_AdvFeatureConfig+0x80>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d18:	d004      	beq.n	8008d24 <UART_AdvFeatureConfig+0x80>
 8008d1a:	f640 4155 	movw	r1, #3157	; 0xc55
 8008d1e:	4880      	ldr	r0, [pc, #512]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008d20:	f006 f809 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	f003 0304 	and.w	r3, r3, #4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d018      	beq.n	8008d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d009      	beq.n	8008d62 <UART_AdvFeatureConfig+0xbe>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d56:	d004      	beq.n	8008d62 <UART_AdvFeatureConfig+0xbe>
 8008d58:	f640 415c 	movw	r1, #3164	; 0xc5c
 8008d5c:	4870      	ldr	r0, [pc, #448]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008d5e:	f005 ffea 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7c:	f003 0308 	and.w	r3, r3, #8
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d018      	beq.n	8008db6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <UART_AdvFeatureConfig+0xfc>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d94:	d004      	beq.n	8008da0 <UART_AdvFeatureConfig+0xfc>
 8008d96:	f640 4163 	movw	r1, #3171	; 0xc63
 8008d9a:	4861      	ldr	r0, [pc, #388]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008d9c:	f005 ffcb 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	f003 0310 	and.w	r3, r3, #16
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d018      	beq.n	8008df4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <UART_AdvFeatureConfig+0x13a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd2:	d004      	beq.n	8008dde <UART_AdvFeatureConfig+0x13a>
 8008dd4:	f640 416a 	movw	r1, #3178	; 0xc6a
 8008dd8:	4851      	ldr	r0, [pc, #324]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008dda:	f005 ffac 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	f003 0320 	and.w	r3, r3, #32
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d018      	beq.n	8008e32 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d009      	beq.n	8008e1c <UART_AdvFeatureConfig+0x178>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e10:	d004      	beq.n	8008e1c <UART_AdvFeatureConfig+0x178>
 8008e12:	f640 4171 	movw	r1, #3185	; 0xc71
 8008e16:	4842      	ldr	r0, [pc, #264]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008e18:	f005 ff8d 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 8082 	beq.w	8008f44 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a37      	ldr	r2, [pc, #220]	; (8008f24 <UART_AdvFeatureConfig+0x280>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d027      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a36      	ldr	r2, [pc, #216]	; (8008f28 <UART_AdvFeatureConfig+0x284>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d022      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a34      	ldr	r2, [pc, #208]	; (8008f2c <UART_AdvFeatureConfig+0x288>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d01d      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a33      	ldr	r2, [pc, #204]	; (8008f30 <UART_AdvFeatureConfig+0x28c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d018      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a31      	ldr	r2, [pc, #196]	; (8008f34 <UART_AdvFeatureConfig+0x290>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d013      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a30      	ldr	r2, [pc, #192]	; (8008f38 <UART_AdvFeatureConfig+0x294>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00e      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a2e      	ldr	r2, [pc, #184]	; (8008f3c <UART_AdvFeatureConfig+0x298>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d009      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a2d      	ldr	r2, [pc, #180]	; (8008f40 <UART_AdvFeatureConfig+0x29c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d004      	beq.n	8008e9a <UART_AdvFeatureConfig+0x1f6>
 8008e90:	f640 4178 	movw	r1, #3192	; 0xc78
 8008e94:	4822      	ldr	r0, [pc, #136]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008e96:	f005 ff4e 	bl	800ed36 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <UART_AdvFeatureConfig+0x212>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eaa:	d004      	beq.n	8008eb6 <UART_AdvFeatureConfig+0x212>
 8008eac:	f640 4179 	movw	r1, #3193	; 0xc79
 8008eb0:	481b      	ldr	r0, [pc, #108]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008eb2:	f005 ff40 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed4:	d136      	bne.n	8008f44 <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d013      	beq.n	8008f06 <UART_AdvFeatureConfig+0x262>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ee6:	d00e      	beq.n	8008f06 <UART_AdvFeatureConfig+0x262>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ef0:	d009      	beq.n	8008f06 <UART_AdvFeatureConfig+0x262>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008efa:	d004      	beq.n	8008f06 <UART_AdvFeatureConfig+0x262>
 8008efc:	f640 417e 	movw	r1, #3198	; 0xc7e
 8008f00:	4807      	ldr	r0, [pc, #28]	; (8008f20 <UART_AdvFeatureConfig+0x27c>)
 8008f02:	f005 ff18 	bl	800ed36 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]
 8008f1c:	e012      	b.n	8008f44 <UART_AdvFeatureConfig+0x2a0>
 8008f1e:	bf00      	nop
 8008f20:	08010894 	.word	0x08010894
 8008f24:	40011000 	.word	0x40011000
 8008f28:	40004400 	.word	0x40004400
 8008f2c:	40004800 	.word	0x40004800
 8008f30:	40004c00 	.word	0x40004c00
 8008f34:	40005000 	.word	0x40005000
 8008f38:	40011400 	.word	0x40011400
 8008f3c:	40007800 	.word	0x40007800
 8008f40:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d018      	beq.n	8008f82 <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <UART_AdvFeatureConfig+0x2c8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f60:	d004      	beq.n	8008f6c <UART_AdvFeatureConfig+0x2c8>
 8008f62:	f640 4186 	movw	r1, #3206	; 0xc86
 8008f66:	4809      	ldr	r0, [pc, #36]	; (8008f8c <UART_AdvFeatureConfig+0x2e8>)
 8008f68:	f005 fee5 	bl	800ed36 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]
  }
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	08010894 	.word	0x08010894

08008f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008fa0:	f7f7 fd58 	bl	8000a54 <HAL_GetTick>
 8008fa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d10e      	bne.n	8008fd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f82c 	bl	8009020 <UART_WaitOnFlagUntilTimeout>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e022      	b.n	8009018 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b04      	cmp	r3, #4
 8008fde:	d10e      	bne.n	8008ffe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f816 	bl	8009020 <UART_WaitOnFlagUntilTimeout>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e00c      	b.n	8009018 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2220      	movs	r2, #32
 800900a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	4613      	mov	r3, r2
 800902e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009030:	e062      	b.n	80090f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009038:	d05e      	beq.n	80090f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800903a:	f7f7 fd0b 	bl	8000a54 <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	429a      	cmp	r2, r3
 8009048:	d302      	bcc.n	8009050 <UART_WaitOnFlagUntilTimeout+0x30>
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d11d      	bne.n	800908c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800905e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0201 	bic.w	r2, r2, #1
 800906e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2220      	movs	r2, #32
 8009074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2220      	movs	r2, #32
 800907c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e045      	b.n	8009118 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0304 	and.w	r3, r3, #4
 8009096:	2b00      	cmp	r3, #0
 8009098:	d02e      	beq.n	80090f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090a8:	d126      	bne.n	80090f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090b2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0201 	bic.w	r2, r2, #1
 80090d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2220      	movs	r2, #32
 80090e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2220      	movs	r2, #32
 80090e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e00f      	b.n	8009118 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69da      	ldr	r2, [r3, #28]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4013      	ands	r3, r2
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	429a      	cmp	r2, r3
 8009106:	bf0c      	ite	eq
 8009108:	2301      	moveq	r3, #1
 800910a:	2300      	movne	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	429a      	cmp	r2, r3
 8009114:	d08d      	beq.n	8009032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a2e      	ldr	r2, [pc, #184]	; (80091e8 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d027      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a2d      	ldr	r2, [pc, #180]	; (80091ec <HAL_UARTEx_DisableFifoMode+0xcc>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d022      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a2b      	ldr	r2, [pc, #172]	; (80091f0 <HAL_UARTEx_DisableFifoMode+0xd0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d01d      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a2a      	ldr	r2, [pc, #168]	; (80091f4 <HAL_UARTEx_DisableFifoMode+0xd4>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d018      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a28      	ldr	r2, [pc, #160]	; (80091f8 <HAL_UARTEx_DisableFifoMode+0xd8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a27      	ldr	r2, [pc, #156]	; (80091fc <HAL_UARTEx_DisableFifoMode+0xdc>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d00e      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a25      	ldr	r2, [pc, #148]	; (8009200 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d009      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a24      	ldr	r2, [pc, #144]	; (8009204 <HAL_UARTEx_DisableFifoMode+0xe4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d004      	beq.n	8009182 <HAL_UARTEx_DisableFifoMode+0x62>
 8009178:	f240 2111 	movw	r1, #529	; 0x211
 800917c:	4822      	ldr	r0, [pc, #136]	; (8009208 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800917e:	f005 fdda 	bl	800ed36 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_UARTEx_DisableFifoMode+0x70>
 800918c:	2302      	movs	r3, #2
 800918e:	e027      	b.n	80091e0 <HAL_UARTEx_DisableFifoMode+0xc0>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2224      	movs	r2, #36	; 0x24
 800919c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0201 	bic.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	40011000 	.word	0x40011000
 80091ec:	40004400 	.word	0x40004400
 80091f0:	40004800 	.word	0x40004800
 80091f4:	40004c00 	.word	0x40004c00
 80091f8:	40005000 	.word	0x40005000
 80091fc:	40011400 	.word	0x40011400
 8009200:	40007800 	.word	0x40007800
 8009204:	40007c00 	.word	0x40007c00
 8009208:	080108d0 	.word	0x080108d0

0800920c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a40      	ldr	r2, [pc, #256]	; (800931c <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d027      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a3e      	ldr	r2, [pc, #248]	; (8009320 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d022      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a3d      	ldr	r2, [pc, #244]	; (8009324 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d01d      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a3b      	ldr	r2, [pc, #236]	; (8009328 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d018      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a3a      	ldr	r2, [pc, #232]	; (800932c <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d013      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a38      	ldr	r2, [pc, #224]	; (8009330 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d00e      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a37      	ldr	r2, [pc, #220]	; (8009334 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d009      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a35      	ldr	r2, [pc, #212]	; (8009338 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d004      	beq.n	8009270 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009266:	f240 213f 	movw	r1, #575	; 0x23f
 800926a:	4834      	ldr	r0, [pc, #208]	; (800933c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800926c:	f005 fd63 	bl	800ed36 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800927c:	d014      	beq.n	80092a8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009284:	d010      	beq.n	80092a8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800928c:	d00c      	beq.n	80092a8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009294:	d008      	beq.n	80092a8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800929c:	d004      	beq.n	80092a8 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800929e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092a2:	4826      	ldr	r0, [pc, #152]	; (800933c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 80092a4:	f005 fd47 	bl	800ed36 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e02d      	b.n	8009312 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2224      	movs	r2, #36	; 0x24
 80092c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0201 	bic.w	r2, r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f8be 	bl	8009474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	40011000 	.word	0x40011000
 8009320:	40004400 	.word	0x40004400
 8009324:	40004800 	.word	0x40004800
 8009328:	40004c00 	.word	0x40004c00
 800932c:	40005000 	.word	0x40005000
 8009330:	40011400 	.word	0x40011400
 8009334:	40007800 	.word	0x40007800
 8009338:	40007c00 	.word	0x40007c00
 800933c:	080108d0 	.word	0x080108d0

08009340 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a40      	ldr	r2, [pc, #256]	; (8009450 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d027      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a3e      	ldr	r2, [pc, #248]	; (8009454 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d022      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a3d      	ldr	r2, [pc, #244]	; (8009458 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d01d      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a3b      	ldr	r2, [pc, #236]	; (800945c <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d018      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a3a      	ldr	r2, [pc, #232]	; (8009460 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d013      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a38      	ldr	r2, [pc, #224]	; (8009464 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00e      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a37      	ldr	r2, [pc, #220]	; (8009468 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d009      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a35      	ldr	r2, [pc, #212]	; (800946c <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d004      	beq.n	80093a4 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800939a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800939e:	4834      	ldr	r0, [pc, #208]	; (8009470 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 80093a0:	f005 fcc9 	bl	800ed36 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d018      	beq.n	80093dc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093b0:	d014      	beq.n	80093dc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093b8:	d010      	beq.n	80093dc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80093c0:	d00c      	beq.n	80093dc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093c8:	d008      	beq.n	80093dc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80093d0:	d004      	beq.n	80093dc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 80093d2:	f240 2171 	movw	r1, #625	; 0x271
 80093d6:	4826      	ldr	r0, [pc, #152]	; (8009470 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 80093d8:	f005 fcad 	bl	800ed36 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e02d      	b.n	8009446 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2224      	movs	r2, #36	; 0x24
 80093f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0201 	bic.w	r2, r2, #1
 8009410:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f824 	bl	8009474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2220      	movs	r2, #32
 8009438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	40011000 	.word	0x40011000
 8009454:	40004400 	.word	0x40004400
 8009458:	40004800 	.word	0x40004800
 800945c:	40004c00 	.word	0x40004c00
 8009460:	40005000 	.word	0x40005000
 8009464:	40011400 	.word	0x40011400
 8009468:	40007800 	.word	0x40007800
 800946c:	40007c00 	.word	0x40007c00
 8009470:	080108d0 	.word	0x080108d0

08009474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009474:	b480      	push	{r7}
 8009476:	b089      	sub	sp, #36	; 0x24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800947c:	4a2f      	ldr	r2, [pc, #188]	; (800953c <UARTEx_SetNbDataToProcess+0xc8>)
 800947e:	f107 0314 	add.w	r3, r7, #20
 8009482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009486:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800948a:	4a2d      	ldr	r2, [pc, #180]	; (8009540 <UARTEx_SetNbDataToProcess+0xcc>)
 800948c:	f107 030c 	add.w	r3, r7, #12
 8009490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009494:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800949c:	2b00      	cmp	r3, #0
 800949e:	d108      	bne.n	80094b2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094b0:	e03d      	b.n	800952e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094b2:	2308      	movs	r3, #8
 80094b4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094b6:	2308      	movs	r3, #8
 80094b8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	0e5b      	lsrs	r3, r3, #25
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 0307 	and.w	r3, r3, #7
 80094c8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	0f5b      	lsrs	r3, r3, #29
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 0307 	and.w	r3, r3, #7
 80094d8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80094da:	7fbb      	ldrb	r3, [r7, #30]
 80094dc:	7f3a      	ldrb	r2, [r7, #28]
 80094de:	f107 0120 	add.w	r1, r7, #32
 80094e2:	440a      	add	r2, r1
 80094e4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80094e8:	fb02 f303 	mul.w	r3, r2, r3
 80094ec:	7f3a      	ldrb	r2, [r7, #28]
 80094ee:	f107 0120 	add.w	r1, r7, #32
 80094f2:	440a      	add	r2, r1
 80094f4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80094f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009504:	7ffb      	ldrb	r3, [r7, #31]
 8009506:	7f7a      	ldrb	r2, [r7, #29]
 8009508:	f107 0120 	add.w	r1, r7, #32
 800950c:	440a      	add	r2, r1
 800950e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009512:	fb02 f303 	mul.w	r3, r2, r3
 8009516:	7f7a      	ldrb	r2, [r7, #29]
 8009518:	f107 0120 	add.w	r1, r7, #32
 800951c:	440a      	add	r2, r1
 800951e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009522:	fb93 f3f2 	sdiv	r3, r3, r2
 8009526:	b29a      	uxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800952e:	bf00      	nop
 8009530:	3724      	adds	r7, #36	; 0x24
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	0801090c 	.word	0x0801090c
 8009540:	08010914 	.word	0x08010914

08009544 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	ba5b      	rev16	r3, r3
 8009552:	b29b      	uxth	r3, r3
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009560:	b480      	push	{r7}
 8009562:	b089      	sub	sp, #36	; 0x24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00d      	beq.n	80095a0 <lwip_standard_chksum+0x40>
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd0a      	ble.n	80095a0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	1c53      	adds	r3, r2, #1
 800958e:	61fb      	str	r3, [r7, #28]
 8009590:	f107 030e 	add.w	r3, r7, #14
 8009594:	3301      	adds	r3, #1
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	701a      	strb	r2, [r3, #0]
    len--;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	3b01      	subs	r3, #1
 800959e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80095a4:	e00a      	b.n	80095bc <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	1c9a      	adds	r2, r3, #2
 80095aa:	61ba      	str	r2, [r7, #24]
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	4413      	add	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]
    len -= 2;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	3b02      	subs	r3, #2
 80095ba:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	dcf1      	bgt.n	80095a6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dd04      	ble.n	80095d2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80095c8:	f107 030e 	add.w	r3, r7, #14
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	7812      	ldrb	r2, [r2, #0]
 80095d0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80095d2:	89fb      	ldrh	r3, [r7, #14]
 80095d4:	461a      	mov	r2, r3
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	4413      	add	r3, r2
 80095da:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	0c1a      	lsrs	r2, r3, #16
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	0c1a      	lsrs	r2, r3, #16
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	4413      	add	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d007      	beq.n	800960a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	b29a      	uxth	r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	b2db      	uxtb	r3, r3
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	b29b      	uxth	r3, r3
}
 800960e:	4618      	mov	r0, r3
 8009610:	3724      	adds	r7, #36	; 0x24
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009626:	887b      	ldrh	r3, [r7, #2]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff ff98 	bl	8009560 <lwip_standard_chksum>
 8009630:	4603      	mov	r3, r0
 8009632:	43db      	mvns	r3, r3
 8009634:	b29b      	uxth	r3, r3
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b086      	sub	sp, #24
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	617b      	str	r3, [r7, #20]
  swapped = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  for (q = p; q != NULL; q = q->next) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	e028      	b.n	80096a6 <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	895b      	ldrh	r3, [r3, #10]
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f7ff ff7e 	bl	8009560 <lwip_standard_chksum>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	4413      	add	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	0c1a      	lsrs	r2, r3, #16
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	b29b      	uxth	r3, r3
 8009676:	4413      	add	r3, r2
 8009678:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	895b      	ldrh	r3, [r3, #10]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	b29b      	uxth	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	f1c3 0301 	rsb	r3, r3, #1
 800968e:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	021b      	lsls	r3, r3, #8
 8009694:	b29a      	uxth	r2, r3
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	0a1b      	lsrs	r3, r3, #8
 800969a:	b2db      	uxtb	r3, r3
 800969c:	4313      	orrs	r3, r2
 800969e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	613b      	str	r3, [r7, #16]
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1d3      	bne.n	8009654 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	43db      	mvns	r3, r3
 80096c8:	b29b      	uxth	r3, r3
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80096dc:	f000 f8a4 	bl	8009828 <mem_init>
  memp_init();
 80096e0:	f000 fb34 	bl	8009d4c <memp_init>
  pbuf_init();
  netif_init();
 80096e4:	f000 fc32 	bl	8009f4c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80096e8:	f001 fd12 	bl	800b110 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80096ec:	f001 fbfa 	bl	800aee4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009700:	4b40      	ldr	r3, [pc, #256]	; (8009804 <plug_holes+0x10c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	429a      	cmp	r2, r3
 8009708:	d206      	bcs.n	8009718 <plug_holes+0x20>
 800970a:	4b3f      	ldr	r3, [pc, #252]	; (8009808 <plug_holes+0x110>)
 800970c:	f240 125d 	movw	r2, #349	; 0x15d
 8009710:	493e      	ldr	r1, [pc, #248]	; (800980c <plug_holes+0x114>)
 8009712:	483f      	ldr	r0, [pc, #252]	; (8009810 <plug_holes+0x118>)
 8009714:	f005 ff02 	bl	800f51c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009718:	4b3e      	ldr	r3, [pc, #248]	; (8009814 <plug_holes+0x11c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	429a      	cmp	r2, r3
 8009720:	d306      	bcc.n	8009730 <plug_holes+0x38>
 8009722:	4b39      	ldr	r3, [pc, #228]	; (8009808 <plug_holes+0x110>)
 8009724:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009728:	493b      	ldr	r1, [pc, #236]	; (8009818 <plug_holes+0x120>)
 800972a:	4839      	ldr	r0, [pc, #228]	; (8009810 <plug_holes+0x118>)
 800972c:	f005 fef6 	bl	800f51c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	791b      	ldrb	r3, [r3, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d006      	beq.n	8009746 <plug_holes+0x4e>
 8009738:	4b33      	ldr	r3, [pc, #204]	; (8009808 <plug_holes+0x110>)
 800973a:	f240 125f 	movw	r2, #351	; 0x15f
 800973e:	4937      	ldr	r1, [pc, #220]	; (800981c <plug_holes+0x124>)
 8009740:	4833      	ldr	r0, [pc, #204]	; (8009810 <plug_holes+0x118>)
 8009742:	f005 feeb 	bl	800f51c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800974e:	d906      	bls.n	800975e <plug_holes+0x66>
 8009750:	4b2d      	ldr	r3, [pc, #180]	; (8009808 <plug_holes+0x110>)
 8009752:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8009756:	4932      	ldr	r1, [pc, #200]	; (8009820 <plug_holes+0x128>)
 8009758:	482d      	ldr	r0, [pc, #180]	; (8009810 <plug_holes+0x118>)
 800975a:	f005 fedf 	bl	800f51c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800975e:	4b29      	ldr	r3, [pc, #164]	; (8009804 <plug_holes+0x10c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	8812      	ldrh	r2, [r2, #0]
 8009766:	4413      	add	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	429a      	cmp	r2, r3
 8009770:	d01f      	beq.n	80097b2 <plug_holes+0xba>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	791b      	ldrb	r3, [r3, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d11b      	bne.n	80097b2 <plug_holes+0xba>
 800977a:	4b26      	ldr	r3, [pc, #152]	; (8009814 <plug_holes+0x11c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	429a      	cmp	r2, r3
 8009782:	d016      	beq.n	80097b2 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009784:	4b27      	ldr	r3, [pc, #156]	; (8009824 <plug_holes+0x12c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	429a      	cmp	r2, r3
 800978c:	d102      	bne.n	8009794 <plug_holes+0x9c>
      lfree = mem;
 800978e:	4a25      	ldr	r2, [pc, #148]	; (8009824 <plug_holes+0x12c>)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	881a      	ldrh	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a19      	ldr	r2, [pc, #100]	; (8009804 <plug_holes+0x10c>)
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	1a99      	subs	r1, r3, r2
 80097a4:	4b17      	ldr	r3, [pc, #92]	; (8009804 <plug_holes+0x10c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	8812      	ldrh	r2, [r2, #0]
 80097ac:	4413      	add	r3, r2
 80097ae:	b28a      	uxth	r2, r1
 80097b0:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80097b2:	4b14      	ldr	r3, [pc, #80]	; (8009804 <plug_holes+0x10c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	8852      	ldrh	r2, [r2, #2]
 80097ba:	4413      	add	r3, r2
 80097bc:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d01a      	beq.n	80097fc <plug_holes+0x104>
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	791b      	ldrb	r3, [r3, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d116      	bne.n	80097fc <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <plug_holes+0x12c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d102      	bne.n	80097de <plug_holes+0xe6>
      lfree = pmem;
 80097d8:	4a12      	ldr	r2, [pc, #72]	; (8009824 <plug_holes+0x12c>)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	881a      	ldrh	r2, [r3, #0]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4a06      	ldr	r2, [pc, #24]	; (8009804 <plug_holes+0x10c>)
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	1a99      	subs	r1, r3, r2
 80097ee:	4b05      	ldr	r3, [pc, #20]	; (8009804 <plug_holes+0x10c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	8812      	ldrh	r2, [r2, #0]
 80097f6:	4413      	add	r3, r2
 80097f8:	b28a      	uxth	r2, r1
 80097fa:	805a      	strh	r2, [r3, #2]
  }
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	240000b4 	.word	0x240000b4
 8009808:	0801091c 	.word	0x0801091c
 800980c:	0801094c 	.word	0x0801094c
 8009810:	08010964 	.word	0x08010964
 8009814:	240000b8 	.word	0x240000b8
 8009818:	0801098c 	.word	0x0801098c
 800981c:	080109a8 	.word	0x080109a8
 8009820:	080109c4 	.word	0x080109c4
 8009824:	240000bc 	.word	0x240000bc

08009828 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800982e:	4b17      	ldr	r3, [pc, #92]	; (800988c <mem_init+0x64>)
 8009830:	4a17      	ldr	r2, [pc, #92]	; (8009890 <mem_init+0x68>)
 8009832:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009834:	4b15      	ldr	r3, [pc, #84]	; (800988c <mem_init+0x64>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009840:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800984e:	4b0f      	ldr	r3, [pc, #60]	; (800988c <mem_init+0x64>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009856:	4a0f      	ldr	r2, [pc, #60]	; (8009894 <mem_init+0x6c>)
 8009858:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800985a:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <mem_init+0x6c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2201      	movs	r2, #1
 8009860:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009862:	4b0c      	ldr	r3, [pc, #48]	; (8009894 <mem_init+0x6c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800986a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800986c:	4b09      	ldr	r3, [pc, #36]	; (8009894 <mem_init+0x6c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009874:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009876:	4b05      	ldr	r3, [pc, #20]	; (800988c <mem_init+0x64>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a07      	ldr	r2, [pc, #28]	; (8009898 <mem_init+0x70>)
 800987c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	240000b4 	.word	0x240000b4
 8009890:	30044000 	.word	0x30044000
 8009894:	240000b8 	.word	0x240000b8
 8009898:	240000bc 	.word	0x240000bc

0800989c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d043      	beq.n	8009932 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d006      	beq.n	80098c2 <mem_free+0x26>
 80098b4:	4b22      	ldr	r3, [pc, #136]	; (8009940 <mem_free+0xa4>)
 80098b6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80098ba:	4922      	ldr	r1, [pc, #136]	; (8009944 <mem_free+0xa8>)
 80098bc:	4822      	ldr	r0, [pc, #136]	; (8009948 <mem_free+0xac>)
 80098be:	f005 fe2d 	bl	800f51c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80098c2:	4b22      	ldr	r3, [pc, #136]	; (800994c <mem_free+0xb0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d304      	bcc.n	80098d6 <mem_free+0x3a>
 80098cc:	4b20      	ldr	r3, [pc, #128]	; (8009950 <mem_free+0xb4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d306      	bcc.n	80098e4 <mem_free+0x48>
 80098d6:	4b1a      	ldr	r3, [pc, #104]	; (8009940 <mem_free+0xa4>)
 80098d8:	f240 12af 	movw	r2, #431	; 0x1af
 80098dc:	491d      	ldr	r1, [pc, #116]	; (8009954 <mem_free+0xb8>)
 80098de:	481a      	ldr	r0, [pc, #104]	; (8009948 <mem_free+0xac>)
 80098e0:	f005 fe1c 	bl	800f51c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80098e4:	4b19      	ldr	r3, [pc, #100]	; (800994c <mem_free+0xb0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d323      	bcc.n	8009936 <mem_free+0x9a>
 80098ee:	4b18      	ldr	r3, [pc, #96]	; (8009950 <mem_free+0xb4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d21e      	bcs.n	8009936 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3b08      	subs	r3, #8
 80098fc:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	791b      	ldrb	r3, [r3, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d106      	bne.n	8009914 <mem_free+0x78>
 8009906:	4b0e      	ldr	r3, [pc, #56]	; (8009940 <mem_free+0xa4>)
 8009908:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800990c:	4912      	ldr	r1, [pc, #72]	; (8009958 <mem_free+0xbc>)
 800990e:	480e      	ldr	r0, [pc, #56]	; (8009948 <mem_free+0xac>)
 8009910:	f005 fe04 	bl	800f51c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800991a:	4b10      	ldr	r3, [pc, #64]	; (800995c <mem_free+0xc0>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	429a      	cmp	r2, r3
 8009922:	d202      	bcs.n	800992a <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009924:	4a0d      	ldr	r2, [pc, #52]	; (800995c <mem_free+0xc0>)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff fee4 	bl	80096f8 <plug_holes>
 8009930:	e002      	b.n	8009938 <mem_free+0x9c>
    return;
 8009932:	bf00      	nop
 8009934:	e000      	b.n	8009938 <mem_free+0x9c>
    return;
 8009936:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	0801091c 	.word	0x0801091c
 8009944:	080109f0 	.word	0x080109f0
 8009948:	08010964 	.word	0x08010964
 800994c:	240000b4 	.word	0x240000b4
 8009950:	240000b8 	.word	0x240000b8
 8009954:	08010a14 	.word	0x08010a14
 8009958:	08010a2c 	.word	0x08010a2c
 800995c:	240000bc 	.word	0x240000bc

08009960 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800996c:	887b      	ldrh	r3, [r7, #2]
 800996e:	3303      	adds	r3, #3
 8009970:	b29b      	uxth	r3, r3
 8009972:	f023 0303 	bic.w	r3, r3, #3
 8009976:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8009978:	887b      	ldrh	r3, [r7, #2]
 800997a:	2b0b      	cmp	r3, #11
 800997c:	d801      	bhi.n	8009982 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800997e:	230c      	movs	r3, #12
 8009980:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8009982:	887b      	ldrh	r3, [r7, #2]
 8009984:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009988:	d901      	bls.n	800998e <mem_trim+0x2e>
    return NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	e0b1      	b.n	8009af2 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800998e:	4b5b      	ldr	r3, [pc, #364]	; (8009afc <mem_trim+0x19c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	d304      	bcc.n	80099a2 <mem_trim+0x42>
 8009998:	4b59      	ldr	r3, [pc, #356]	; (8009b00 <mem_trim+0x1a0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d306      	bcc.n	80099b0 <mem_trim+0x50>
 80099a2:	4b58      	ldr	r3, [pc, #352]	; (8009b04 <mem_trim+0x1a4>)
 80099a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80099a8:	4957      	ldr	r1, [pc, #348]	; (8009b08 <mem_trim+0x1a8>)
 80099aa:	4858      	ldr	r0, [pc, #352]	; (8009b0c <mem_trim+0x1ac>)
 80099ac:	f005 fdb6 	bl	800f51c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80099b0:	4b52      	ldr	r3, [pc, #328]	; (8009afc <mem_trim+0x19c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d304      	bcc.n	80099c4 <mem_trim+0x64>
 80099ba:	4b51      	ldr	r3, [pc, #324]	; (8009b00 <mem_trim+0x1a0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d301      	bcc.n	80099c8 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	e094      	b.n	8009af2 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3b08      	subs	r3, #8
 80099cc:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	4a4a      	ldr	r2, [pc, #296]	; (8009afc <mem_trim+0x19c>)
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	881a      	ldrh	r2, [r3, #0]
 80099dc:	8a7b      	ldrh	r3, [r7, #18]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b08      	subs	r3, #8
 80099e4:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80099e6:	887a      	ldrh	r2, [r7, #2]
 80099e8:	8a3b      	ldrh	r3, [r7, #16]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d906      	bls.n	80099fc <mem_trim+0x9c>
 80099ee:	4b45      	ldr	r3, [pc, #276]	; (8009b04 <mem_trim+0x1a4>)
 80099f0:	f240 2206 	movw	r2, #518	; 0x206
 80099f4:	4946      	ldr	r1, [pc, #280]	; (8009b10 <mem_trim+0x1b0>)
 80099f6:	4845      	ldr	r0, [pc, #276]	; (8009b0c <mem_trim+0x1ac>)
 80099f8:	f005 fd90 	bl	800f51c <iprintf>
  if (newsize > size) {
 80099fc:	887a      	ldrh	r2, [r7, #2]
 80099fe:	8a3b      	ldrh	r3, [r7, #16]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d901      	bls.n	8009a08 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e074      	b.n	8009af2 <mem_trim+0x192>
  }
  if (newsize == size) {
 8009a08:	887a      	ldrh	r2, [r7, #2]
 8009a0a:	8a3b      	ldrh	r3, [r7, #16]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d101      	bne.n	8009a14 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	e06e      	b.n	8009af2 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8009a14:	4b39      	ldr	r3, [pc, #228]	; (8009afc <mem_trim+0x19c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	8812      	ldrh	r2, [r2, #0]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	791b      	ldrb	r3, [r3, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d131      	bne.n	8009a8c <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009a2e:	8a7a      	ldrh	r2, [r7, #18]
 8009a30:	887b      	ldrh	r3, [r7, #2]
 8009a32:	4413      	add	r3, r2
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3308      	adds	r3, #8
 8009a38:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8009a3a:	4b36      	ldr	r3, [pc, #216]	; (8009b14 <mem_trim+0x1b4>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d105      	bne.n	8009a50 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8009a44:	4b2d      	ldr	r3, [pc, #180]	; (8009afc <mem_trim+0x19c>)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	897b      	ldrh	r3, [r7, #10]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	4a31      	ldr	r2, [pc, #196]	; (8009b14 <mem_trim+0x1b4>)
 8009a4e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009a50:	4b2a      	ldr	r3, [pc, #168]	; (8009afc <mem_trim+0x19c>)
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	897b      	ldrh	r3, [r7, #10]
 8009a56:	4413      	add	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	893a      	ldrh	r2, [r7, #8]
 8009a64:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8a7a      	ldrh	r2, [r7, #18]
 8009a6a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	897a      	ldrh	r2, [r7, #10]
 8009a70:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009a7a:	d039      	beq.n	8009af0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009a7c:	4b1f      	ldr	r3, [pc, #124]	; (8009afc <mem_trim+0x19c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	8812      	ldrh	r2, [r2, #0]
 8009a84:	4413      	add	r3, r2
 8009a86:	897a      	ldrh	r2, [r7, #10]
 8009a88:	805a      	strh	r2, [r3, #2]
 8009a8a:	e031      	b.n	8009af0 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009a8c:	887b      	ldrh	r3, [r7, #2]
 8009a8e:	f103 0214 	add.w	r2, r3, #20
 8009a92:	8a3b      	ldrh	r3, [r7, #16]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d82b      	bhi.n	8009af0 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009a98:	8a7a      	ldrh	r2, [r7, #18]
 8009a9a:	887b      	ldrh	r3, [r7, #2]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009aa4:	4b15      	ldr	r3, [pc, #84]	; (8009afc <mem_trim+0x19c>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	897b      	ldrh	r3, [r7, #10]
 8009aaa:	4413      	add	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8009aae:	4b19      	ldr	r3, [pc, #100]	; (8009b14 <mem_trim+0x1b4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d202      	bcs.n	8009abe <mem_trim+0x15e>
      lfree = mem2;
 8009ab8:	4a16      	ldr	r2, [pc, #88]	; (8009b14 <mem_trim+0x1b4>)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	881a      	ldrh	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8a7a      	ldrh	r2, [r7, #18]
 8009ad0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	897a      	ldrh	r2, [r7, #10]
 8009ad6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009ae0:	d006      	beq.n	8009af0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009ae2:	4b06      	ldr	r3, [pc, #24]	; (8009afc <mem_trim+0x19c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	8812      	ldrh	r2, [r2, #0]
 8009aea:	4413      	add	r3, r2
 8009aec:	897a      	ldrh	r2, [r7, #10]
 8009aee:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009af0:	687b      	ldr	r3, [r7, #4]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	240000b4 	.word	0x240000b4
 8009b00:	240000b8 	.word	0x240000b8
 8009b04:	0801091c 	.word	0x0801091c
 8009b08:	08010a40 	.word	0x08010a40
 8009b0c:	08010964 	.word	0x08010964
 8009b10:	08010a58 	.word	0x08010a58
 8009b14:	240000bc 	.word	0x240000bc

08009b18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b088      	sub	sp, #32
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <mem_malloc+0x14>
    return NULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e0c8      	b.n	8009cbe <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8009b2c:	88fb      	ldrh	r3, [r7, #6]
 8009b2e:	3303      	adds	r3, #3
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	2b0b      	cmp	r3, #11
 8009b3c:	d801      	bhi.n	8009b42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009b3e:	230c      	movs	r3, #12
 8009b40:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8009b42:	88fb      	ldrh	r3, [r7, #6]
 8009b44:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009b48:	d901      	bls.n	8009b4e <mem_malloc+0x36>
    return NULL;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e0b7      	b.n	8009cbe <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009b4e:	4b5e      	ldr	r3, [pc, #376]	; (8009cc8 <mem_malloc+0x1b0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	4b5d      	ldr	r3, [pc, #372]	; (8009ccc <mem_malloc+0x1b4>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	83fb      	strh	r3, [r7, #30]
 8009b5c:	e0a7      	b.n	8009cae <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8009b5e:	4b5b      	ldr	r3, [pc, #364]	; (8009ccc <mem_malloc+0x1b4>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	8bfb      	ldrh	r3, [r7, #30]
 8009b64:	4413      	add	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	791b      	ldrb	r3, [r3, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f040 8098 	bne.w	8009ca2 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	8bfb      	ldrh	r3, [r7, #30]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f1a3 0208 	sub.w	r2, r3, #8
 8009b80:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8009b82:	429a      	cmp	r2, r3
 8009b84:	f0c0 808d 	bcc.w	8009ca2 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	8bfb      	ldrh	r3, [r7, #30]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	f1a3 0208 	sub.w	r2, r3, #8
 8009b96:	88fb      	ldrh	r3, [r7, #6]
 8009b98:	3314      	adds	r3, #20
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d327      	bcc.n	8009bee <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8009b9e:	8bfa      	ldrh	r2, [r7, #30]
 8009ba0:	88fb      	ldrh	r3, [r7, #6]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8009baa:	4b48      	ldr	r3, [pc, #288]	; (8009ccc <mem_malloc+0x1b4>)
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	8a7b      	ldrh	r3, [r7, #18]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	881a      	ldrh	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8bfa      	ldrh	r2, [r7, #30]
 8009bc6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	8a7a      	ldrh	r2, [r7, #18]
 8009bcc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009bdc:	d00a      	beq.n	8009bf4 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009bde:	4b3b      	ldr	r3, [pc, #236]	; (8009ccc <mem_malloc+0x1b4>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	8812      	ldrh	r2, [r2, #0]
 8009be6:	4413      	add	r3, r2
 8009be8:	8a7a      	ldrh	r2, [r7, #18]
 8009bea:	805a      	strh	r2, [r3, #2]
 8009bec:	e002      	b.n	8009bf4 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009bf4:	4b34      	ldr	r3, [pc, #208]	; (8009cc8 <mem_malloc+0x1b0>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d127      	bne.n	8009c4e <mem_malloc+0x136>
          struct mem *cur = lfree;
 8009bfe:	4b32      	ldr	r3, [pc, #200]	; (8009cc8 <mem_malloc+0x1b0>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009c04:	e005      	b.n	8009c12 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8009c06:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <mem_malloc+0x1b4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	8812      	ldrh	r2, [r2, #0]
 8009c0e:	4413      	add	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <mem_malloc+0x10c>
 8009c1a:	4b2d      	ldr	r3, [pc, #180]	; (8009cd0 <mem_malloc+0x1b8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69ba      	ldr	r2, [r7, #24]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d1f0      	bne.n	8009c06 <mem_malloc+0xee>
          }
          lfree = cur;
 8009c24:	4a28      	ldr	r2, [pc, #160]	; (8009cc8 <mem_malloc+0x1b0>)
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009c2a:	4b27      	ldr	r3, [pc, #156]	; (8009cc8 <mem_malloc+0x1b0>)
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	4b28      	ldr	r3, [pc, #160]	; (8009cd0 <mem_malloc+0x1b8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d00b      	beq.n	8009c4e <mem_malloc+0x136>
 8009c36:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <mem_malloc+0x1b0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	791b      	ldrb	r3, [r3, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d006      	beq.n	8009c4e <mem_malloc+0x136>
 8009c40:	4b24      	ldr	r3, [pc, #144]	; (8009cd4 <mem_malloc+0x1bc>)
 8009c42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8009c46:	4924      	ldr	r1, [pc, #144]	; (8009cd8 <mem_malloc+0x1c0>)
 8009c48:	4824      	ldr	r0, [pc, #144]	; (8009cdc <mem_malloc+0x1c4>)
 8009c4a:	f005 fc67 	bl	800f51c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c4e:	88fa      	ldrh	r2, [r7, #6]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	4413      	add	r3, r2
 8009c54:	3308      	adds	r3, #8
 8009c56:	4a1e      	ldr	r2, [pc, #120]	; (8009cd0 <mem_malloc+0x1b8>)
 8009c58:	6812      	ldr	r2, [r2, #0]
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d906      	bls.n	8009c6c <mem_malloc+0x154>
 8009c5e:	4b1d      	ldr	r3, [pc, #116]	; (8009cd4 <mem_malloc+0x1bc>)
 8009c60:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8009c64:	491e      	ldr	r1, [pc, #120]	; (8009ce0 <mem_malloc+0x1c8>)
 8009c66:	481d      	ldr	r0, [pc, #116]	; (8009cdc <mem_malloc+0x1c4>)
 8009c68:	f005 fc58 	bl	800f51c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d006      	beq.n	8009c84 <mem_malloc+0x16c>
 8009c76:	4b17      	ldr	r3, [pc, #92]	; (8009cd4 <mem_malloc+0x1bc>)
 8009c78:	f240 22d6 	movw	r2, #726	; 0x2d6
 8009c7c:	4919      	ldr	r1, [pc, #100]	; (8009ce4 <mem_malloc+0x1cc>)
 8009c7e:	4817      	ldr	r0, [pc, #92]	; (8009cdc <mem_malloc+0x1c4>)
 8009c80:	f005 fc4c 	bl	800f51c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d006      	beq.n	8009c9c <mem_malloc+0x184>
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <mem_malloc+0x1bc>)
 8009c90:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8009c94:	4914      	ldr	r1, [pc, #80]	; (8009ce8 <mem_malloc+0x1d0>)
 8009c96:	4811      	ldr	r0, [pc, #68]	; (8009cdc <mem_malloc+0x1c4>)
 8009c98:	f005 fc40 	bl	800f51c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	e00d      	b.n	8009cbe <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8009ca2:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <mem_malloc+0x1b4>)
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	8bfb      	ldrh	r3, [r7, #30]
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009cae:	8bfa      	ldrh	r2, [r7, #30]
 8009cb0:	88fb      	ldrh	r3, [r7, #6]
 8009cb2:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	f4ff af51 	bcc.w	8009b5e <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3720      	adds	r7, #32
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	240000bc 	.word	0x240000bc
 8009ccc:	240000b4 	.word	0x240000b4
 8009cd0:	240000b8 	.word	0x240000b8
 8009cd4:	0801091c 	.word	0x0801091c
 8009cd8:	08010a78 	.word	0x08010a78
 8009cdc:	08010964 	.word	0x08010964
 8009ce0:	08010a94 	.word	0x08010a94
 8009ce4:	08010ac4 	.word	0x08010ac4
 8009ce8:	08010af4 	.word	0x08010af4

08009cec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	3303      	adds	r3, #3
 8009d02:	f023 0303 	bic.w	r3, r3, #3
 8009d06:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e011      	b.n	8009d32 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	889b      	ldrh	r3, [r3, #4]
 8009d24:	461a      	mov	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	4413      	add	r3, r2
 8009d2a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	88db      	ldrh	r3, [r3, #6]
 8009d36:	461a      	mov	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	dbe7      	blt.n	8009d0e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
	...

08009d4c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d52:	2300      	movs	r3, #0
 8009d54:	80fb      	strh	r3, [r7, #6]
 8009d56:	e009      	b.n	8009d6c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	4a08      	ldr	r2, [pc, #32]	; (8009d7c <memp_init+0x30>)
 8009d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff ffc3 	bl	8009cec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	80fb      	strh	r3, [r7, #6]
 8009d6c:	88fb      	ldrh	r3, [r7, #6]
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d9f2      	bls.n	8009d58 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	08011a7c 	.word	0x08011a7c

08009d80 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d012      	beq.n	8009dbc <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	6812      	ldr	r2, [r2, #0]
 8009d9e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 0303 	and.w	r3, r3, #3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d006      	beq.n	8009db8 <do_memp_malloc_pool+0x38>
 8009daa:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <do_memp_malloc_pool+0x48>)
 8009dac:	f240 1249 	movw	r2, #329	; 0x149
 8009db0:	4906      	ldr	r1, [pc, #24]	; (8009dcc <do_memp_malloc_pool+0x4c>)
 8009db2:	4807      	ldr	r0, [pc, #28]	; (8009dd0 <do_memp_malloc_pool+0x50>)
 8009db4:	f005 fbb2 	bl	800f51c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	e000      	b.n	8009dbe <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	08010b60 	.word	0x08010b60
 8009dcc:	08010b90 	.word	0x08010b90
 8009dd0:	08010bb4 	.word	0x08010bb4

08009dd4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <memp_malloc_pool+0x1c>
 8009de2:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <memp_malloc_pool+0x38>)
 8009de4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009de8:	4909      	ldr	r1, [pc, #36]	; (8009e10 <memp_malloc_pool+0x3c>)
 8009dea:	480a      	ldr	r0, [pc, #40]	; (8009e14 <memp_malloc_pool+0x40>)
 8009dec:	f005 fb96 	bl	800f51c <iprintf>
  if (desc == NULL) {
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <memp_malloc_pool+0x26>
    return NULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	e003      	b.n	8009e02 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff ffc0 	bl	8009d80 <do_memp_malloc_pool>
 8009e00:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	08010b60 	.word	0x08010b60
 8009e10:	08010bdc 	.word	0x08010bdc
 8009e14:	08010bb4 	.word	0x08010bb4

08009e18 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b05      	cmp	r3, #5
 8009e26:	d908      	bls.n	8009e3a <memp_malloc+0x22>
 8009e28:	4b0a      	ldr	r3, [pc, #40]	; (8009e54 <memp_malloc+0x3c>)
 8009e2a:	f240 1287 	movw	r2, #391	; 0x187
 8009e2e:	490a      	ldr	r1, [pc, #40]	; (8009e58 <memp_malloc+0x40>)
 8009e30:	480a      	ldr	r0, [pc, #40]	; (8009e5c <memp_malloc+0x44>)
 8009e32:	f005 fb73 	bl	800f51c <iprintf>
 8009e36:	2300      	movs	r3, #0
 8009e38:	e008      	b.n	8009e4c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e3a:	79fb      	ldrb	r3, [r7, #7]
 8009e3c:	4a08      	ldr	r2, [pc, #32]	; (8009e60 <memp_malloc+0x48>)
 8009e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff ff9c 	bl	8009d80 <do_memp_malloc_pool>
 8009e48:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	08010b60 	.word	0x08010b60
 8009e58:	08010bf0 	.word	0x08010bf0
 8009e5c:	08010bb4 	.word	0x08010bb4
 8009e60:	08011a7c 	.word	0x08011a7c

08009e64 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d006      	beq.n	8009e86 <do_memp_free_pool+0x22>
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <do_memp_free_pool+0x40>)
 8009e7a:	f240 129d 	movw	r2, #413	; 0x19d
 8009e7e:	490a      	ldr	r1, [pc, #40]	; (8009ea8 <do_memp_free_pool+0x44>)
 8009e80:	480a      	ldr	r0, [pc, #40]	; (8009eac <do_memp_free_pool+0x48>)
 8009e82:	f005 fb4b 	bl	800f51c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009e9c:	bf00      	nop
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	08010b60 	.word	0x08010b60
 8009ea8:	08010c10 	.word	0x08010c10
 8009eac:	08010bb4 	.word	0x08010bb4

08009eb0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <memp_free_pool+0x1e>
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <memp_free_pool+0x3c>)
 8009ec2:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 8009ec6:	490a      	ldr	r1, [pc, #40]	; (8009ef0 <memp_free_pool+0x40>)
 8009ec8:	480a      	ldr	r0, [pc, #40]	; (8009ef4 <memp_free_pool+0x44>)
 8009eca:	f005 fb27 	bl	800f51c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d007      	beq.n	8009ee4 <memp_free_pool+0x34>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d004      	beq.n	8009ee4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff ffc1 	bl	8009e64 <do_memp_free_pool>
 8009ee2:	e000      	b.n	8009ee6 <memp_free_pool+0x36>
    return;
 8009ee4:	bf00      	nop
}
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	08010b60 	.word	0x08010b60
 8009ef0:	08010bdc 	.word	0x08010bdc
 8009ef4:	08010bb4 	.word	0x08010bb4

08009ef8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d907      	bls.n	8009f1a <memp_free+0x22>
 8009f0a:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <memp_free+0x44>)
 8009f0c:	f240 12db 	movw	r2, #475	; 0x1db
 8009f10:	490b      	ldr	r1, [pc, #44]	; (8009f40 <memp_free+0x48>)
 8009f12:	480c      	ldr	r0, [pc, #48]	; (8009f44 <memp_free+0x4c>)
 8009f14:	f005 fb02 	bl	800f51c <iprintf>
 8009f18:	e00c      	b.n	8009f34 <memp_free+0x3c>

  if (mem == NULL) {
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d008      	beq.n	8009f32 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	4a09      	ldr	r2, [pc, #36]	; (8009f48 <memp_free+0x50>)
 8009f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff ff9a 	bl	8009e64 <do_memp_free_pool>
 8009f30:	e000      	b.n	8009f34 <memp_free+0x3c>
    return;
 8009f32:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	08010b60 	.word	0x08010b60
 8009f40:	08010c30 	.word	0x08010c30
 8009f44:	08010bb4 	.word	0x08010bb4
 8009f48:	08011a7c 	.word	0x08011a7c

08009f4c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009f50:	bf00      	nop
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
	...

08009f5c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d105      	bne.n	8009f7c <netif_add+0x20>
 8009f70:	4b21      	ldr	r3, [pc, #132]	; (8009ff8 <netif_add+0x9c>)
 8009f72:	22fb      	movs	r2, #251	; 0xfb
 8009f74:	4921      	ldr	r1, [pc, #132]	; (8009ffc <netif_add+0xa0>)
 8009f76:	4822      	ldr	r0, [pc, #136]	; (800a000 <netif_add+0xa4>)
 8009f78:	f005 fad0 	bl	800f51c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <netif_add+0xa8>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	b2d1      	uxtb	r1, r2
 8009fb2:	4a14      	ldr	r2, [pc, #80]	; (800a004 <netif_add+0xa8>)
 8009fb4:	7011      	strb	r1, [r2, #0]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a3a      	ldr	r2, [r7, #32]
 8009fc0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f81f 	bl	800a00c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	4798      	blx	r3
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <netif_add+0x82>
    return NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	e007      	b.n	8009fee <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009fde:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <netif_add+0xac>)
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009fe6:	4a08      	ldr	r2, [pc, #32]	; (800a008 <netif_add+0xac>)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8009fec:	68fb      	ldr	r3, [r7, #12]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	08010c4c 	.word	0x08010c4c
 8009ffc:	08010c80 	.word	0x08010c80
 800a000:	08010c98 	.word	0x08010c98
 800a004:	240000d8 	.word	0x240000d8
 800a008:	24003670 	.word	0x24003670

0800a00c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <netif_set_addr+0x1c>
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10c      	bne.n	800a042 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 f81a 	bl	800a064 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f85a 	bl	800a0ec <netif_set_netmask>
    netif_set_gw(netif, gw);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 f842 	bl	800a0c4 <netif_set_gw>
 800a040:	e00b      	b.n	800a05a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800a042:	6879      	ldr	r1, [r7, #4]
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 f851 	bl	800a0ec <netif_set_netmask>
    netif_set_gw(netif, gw);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f839 	bl	800a0c4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f805 	bl	800a064 <netif_set_ipaddr>
  }
}
 800a05a:	bf00      	nop
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <netif_set_ipaddr+0x18>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e002      	b.n	800a082 <netif_set_ipaddr+0x1e>
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <netif_set_ipaddr+0x5c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d014      	beq.n	800a0b8 <netif_set_ipaddr+0x54>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3304      	adds	r3, #4
 800a092:	f107 020c 	add.w	r2, r7, #12
 800a096:	4611      	mov	r1, r2
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 fba9 	bl	800b7f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <netif_set_ipaddr+0x46>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	e000      	b.n	800a0ac <netif_set_ipaddr+0x48>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f861 	bl	800a17a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800a0b8:	bf00      	nop
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	08011aa4 	.word	0x08011aa4

0800a0c4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <netif_set_gw+0x16>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	e000      	b.n	800a0dc <netif_set_gw+0x18>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <netif_set_netmask+0x16>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	e000      	b.n	800a104 <netif_set_netmask+0x18>
 800a102:	2300      	movs	r3, #0
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a11c:	4a04      	ldr	r2, [pc, #16]	; (800a130 <netif_set_default+0x1c>)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	24003674 	.word	0x24003674

0800a134 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d113      	bne.n	800a172 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a150:	f043 0301 	orr.w	r3, r3, #1
 800a154:	b2da      	uxtb	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800a16a:	2103      	movs	r1, #3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f804 	bl	800a17a <netif_issue_reports>
    }
  }
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	460b      	mov	r3, r1
 800a184:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d011      	beq.n	800a1b4 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3304      	adds	r3, #4
 800a194:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00c      	beq.n	800a1b4 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1a0:	f003 0308 	and.w	r3, r3, #8
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f002 fa80 	bl	800c6b4 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d012      	beq.n	800a1f8 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1d8:	f023 0301 	bic.w	r3, r3, #1
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 fe24 	bl	800be40 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d11b      	bne.n	800a24e <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a21c:	f043 0304 	orr.w	r3, r3, #4
 800a220:	b2da      	uxtb	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800a236:	2103      	movs	r1, #3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff ff9e 	bl	800a17a <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <netif_set_link_up+0x4e>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
  }
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b082      	sub	sp, #8
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d010      	beq.n	800a28e <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a272:	f023 0304 	bic.w	r3, r3, #4
 800a276:	b2da      	uxtb	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <netif_set_link_down+0x38>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	4798      	blx	r3
  }
}
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
  if (netif) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	61da      	str	r2, [r3, #28]
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	71fb      	strb	r3, [r7, #7]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	80bb      	strh	r3, [r7, #4]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d81c      	bhi.n	800a30a <pbuf_alloc+0x52>
 800a2d0:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <pbuf_alloc+0x20>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a2ed 	.word	0x0800a2ed
 800a2dc:	0800a2f3 	.word	0x0800a2f3
 800a2e0:	0800a2f9 	.word	0x0800a2f9
 800a2e4:	0800a2ff 	.word	0x0800a2ff
 800a2e8:	0800a305 	.word	0x0800a305
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a2ec:	2336      	movs	r3, #54	; 0x36
 800a2ee:	82fb      	strh	r3, [r7, #22]
    break;
 800a2f0:	e014      	b.n	800a31c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a2f2:	2322      	movs	r3, #34	; 0x22
 800a2f4:	82fb      	strh	r3, [r7, #22]
    break;
 800a2f6:	e011      	b.n	800a31c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a2f8:	230e      	movs	r3, #14
 800a2fa:	82fb      	strh	r3, [r7, #22]
    break;
 800a2fc:	e00e      	b.n	800a31c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a2fe:	2300      	movs	r3, #0
 800a300:	82fb      	strh	r3, [r7, #22]
    break;
 800a302:	e00b      	b.n	800a31c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	82fb      	strh	r3, [r7, #22]
    break;
 800a308:	e008      	b.n	800a31c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800a30a:	4ba3      	ldr	r3, [pc, #652]	; (800a598 <pbuf_alloc+0x2e0>)
 800a30c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800a310:	49a2      	ldr	r1, [pc, #648]	; (800a59c <pbuf_alloc+0x2e4>)
 800a312:	48a3      	ldr	r0, [pc, #652]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a314:	f005 f902 	bl	800f51c <iprintf>
    return NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	e159      	b.n	800a5d0 <pbuf_alloc+0x318>
  }

  switch (type) {
 800a31c:	79bb      	ldrb	r3, [r7, #6]
 800a31e:	2b03      	cmp	r3, #3
 800a320:	f200 8130 	bhi.w	800a584 <pbuf_alloc+0x2cc>
 800a324:	a201      	add	r2, pc, #4	; (adr r2, 800a32c <pbuf_alloc+0x74>)
 800a326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32a:	bf00      	nop
 800a32c:	0800a4c5 	.word	0x0800a4c5
 800a330:	0800a551 	.word	0x0800a551
 800a334:	0800a551 	.word	0x0800a551
 800a338:	0800a33d 	.word	0x0800a33d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a33c:	2005      	movs	r0, #5
 800a33e:	f7ff fd6b 	bl	8009e18 <memp_malloc>
 800a342:	61b8      	str	r0, [r7, #24]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <pbuf_alloc+0x96>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e140      	b.n	800a5d0 <pbuf_alloc+0x318>
    }
    p->type = type;
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	79ba      	ldrb	r2, [r7, #6]
 800a352:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a35a:	8afb      	ldrh	r3, [r7, #22]
 800a35c:	3310      	adds	r3, #16
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	4413      	add	r3, r2
 800a362:	3303      	adds	r3, #3
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	461a      	mov	r2, r3
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d006      	beq.n	800a388 <pbuf_alloc+0xd0>
 800a37a:	4b87      	ldr	r3, [pc, #540]	; (800a598 <pbuf_alloc+0x2e0>)
 800a37c:	f240 1229 	movw	r2, #297	; 0x129
 800a380:	4988      	ldr	r1, [pc, #544]	; (800a5a4 <pbuf_alloc+0x2ec>)
 800a382:	4887      	ldr	r0, [pc, #540]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a384:	f005 f8ca 	bl	800f51c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	88ba      	ldrh	r2, [r7, #4]
 800a38c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a38e:	8afb      	ldrh	r3, [r7, #22]
 800a390:	3303      	adds	r3, #3
 800a392:	f023 0303 	bic.w	r3, r3, #3
 800a396:	f5c3 62bf 	rsb	r2, r3, #1528	; 0x5f8
 800a39a:	88bb      	ldrh	r3, [r7, #4]
 800a39c:	4293      	cmp	r3, r2
 800a39e:	bf28      	it	cs
 800a3a0:	4613      	movcs	r3, r2
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	8952      	ldrh	r2, [r2, #10]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d906      	bls.n	800a3ca <pbuf_alloc+0x112>
 800a3bc:	4b76      	ldr	r3, [pc, #472]	; (800a598 <pbuf_alloc+0x2e0>)
 800a3be:	f44f 7298 	mov.w	r2, #304	; 0x130
 800a3c2:	4979      	ldr	r1, [pc, #484]	; (800a5a8 <pbuf_alloc+0x2f0>)
 800a3c4:	4876      	ldr	r0, [pc, #472]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a3c6:	f005 f8a9 	bl	800f51c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a3ca:	8afb      	ldrh	r3, [r7, #22]
 800a3cc:	3303      	adds	r3, #3
 800a3ce:	f023 0303 	bic.w	r3, r3, #3
 800a3d2:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 800a3d6:	d106      	bne.n	800a3e6 <pbuf_alloc+0x12e>
 800a3d8:	4b6f      	ldr	r3, [pc, #444]	; (800a598 <pbuf_alloc+0x2e0>)
 800a3da:	f44f 7299 	mov.w	r2, #306	; 0x132
 800a3de:	4973      	ldr	r1, [pc, #460]	; (800a5ac <pbuf_alloc+0x2f4>)
 800a3e0:	486f      	ldr	r0, [pc, #444]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a3e2:	f005 f89b 	bl	800f51c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	61fb      	str	r3, [r7, #28]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800a3f0:	88bb      	ldrh	r3, [r7, #4]
 800a3f2:	69ba      	ldr	r2, [r7, #24]
 800a3f4:	8952      	ldrh	r2, [r2, #10]
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800a3fa:	e05f      	b.n	800a4bc <pbuf_alloc+0x204>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a3fc:	2005      	movs	r0, #5
 800a3fe:	f7ff fd0b 	bl	8009e18 <memp_malloc>
 800a402:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d104      	bne.n	800a414 <pbuf_alloc+0x15c>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 800a40a:	69b8      	ldr	r0, [r7, #24]
 800a40c:	f000 fac2 	bl	800a994 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	e0dd      	b.n	800a5d0 <pbuf_alloc+0x318>
      }
      q->type = type;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	79ba      	ldrb	r2, [r7, #6]
 800a418:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a432:	4293      	cmp	r3, r2
 800a434:	dd06      	ble.n	800a444 <pbuf_alloc+0x18c>
 800a436:	4b58      	ldr	r3, [pc, #352]	; (800a598 <pbuf_alloc+0x2e0>)
 800a438:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800a43c:	495c      	ldr	r1, [pc, #368]	; (800a5b0 <pbuf_alloc+0x2f8>)
 800a43e:	4858      	ldr	r0, [pc, #352]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a440:	f005 f86c 	bl	800f51c <iprintf>
      q->tot_len = (u16_t)rem_len;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	b29a      	uxth	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 800a454:	bf28      	it	cs
 800a456:	f44f 63bf 	movcs.w	r3, #1528	; 0x5f8
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f103 0210 	add.w	r2, r3, #16
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d006      	beq.n	800a484 <pbuf_alloc+0x1cc>
 800a476:	4b48      	ldr	r3, [pc, #288]	; (800a598 <pbuf_alloc+0x2e0>)
 800a478:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800a47c:	494d      	ldr	r1, [pc, #308]	; (800a5b4 <pbuf_alloc+0x2fc>)
 800a47e:	4848      	ldr	r0, [pc, #288]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a480:	f005 f84c 	bl	800f51c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	69ba      	ldr	r2, [r7, #24]
 800a48a:	8952      	ldrh	r2, [r2, #10]
 800a48c:	441a      	add	r2, r3
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800a494:	429a      	cmp	r2, r3
 800a496:	d906      	bls.n	800a4a6 <pbuf_alloc+0x1ee>
 800a498:	4b3f      	ldr	r3, [pc, #252]	; (800a598 <pbuf_alloc+0x2e0>)
 800a49a:	f240 1255 	movw	r2, #341	; 0x155
 800a49e:	4942      	ldr	r1, [pc, #264]	; (800a5a8 <pbuf_alloc+0x2f0>)
 800a4a0:	483f      	ldr	r0, [pc, #252]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a4a2:	f005 f83b 	bl	800f51c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	895b      	ldrh	r3, [r3, #10]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	61fb      	str	r3, [r7, #28]
    while (rem_len > 0) {
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dc9c      	bgt.n	800a3fc <pbuf_alloc+0x144>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800a4c2:	e07e      	b.n	800a5c2 <pbuf_alloc+0x30a>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800a4c4:	8afb      	ldrh	r3, [r7, #22]
 800a4c6:	3313      	adds	r3, #19
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	88bb      	ldrh	r3, [r7, #4]
 800a4d2:	3303      	adds	r3, #3
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4413      	add	r3, r2
 800a4de:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800a4e0:	897a      	ldrh	r2, [r7, #10]
 800a4e2:	88bb      	ldrh	r3, [r7, #4]
 800a4e4:	3303      	adds	r3, #3
 800a4e6:	f023 0303 	bic.w	r3, r3, #3
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d201      	bcs.n	800a4f2 <pbuf_alloc+0x23a>
        return NULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e06e      	b.n	800a5d0 <pbuf_alloc+0x318>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800a4f2:	897b      	ldrh	r3, [r7, #10]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff fb0f 	bl	8009b18 <mem_malloc>
 800a4fa:	61b8      	str	r0, [r7, #24]
    }

    if (p == NULL) {
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <pbuf_alloc+0x24e>
      return NULL;
 800a502:	2300      	movs	r3, #0
 800a504:	e064      	b.n	800a5d0 <pbuf_alloc+0x318>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800a506:	8afb      	ldrh	r3, [r7, #22]
 800a508:	3310      	adds	r3, #16
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	4413      	add	r3, r2
 800a50e:	3303      	adds	r3, #3
 800a510:	f023 0303 	bic.w	r3, r3, #3
 800a514:	461a      	mov	r2, r3
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	88ba      	ldrh	r2, [r7, #4]
 800a51e:	811a      	strh	r2, [r3, #8]
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	891a      	ldrh	r2, [r3, #8]
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	79ba      	ldrb	r2, [r7, #6]
 800a532:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f003 0303 	and.w	r3, r3, #3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d03f      	beq.n	800a5c0 <pbuf_alloc+0x308>
 800a540:	4b15      	ldr	r3, [pc, #84]	; (800a598 <pbuf_alloc+0x2e0>)
 800a542:	f240 1277 	movw	r2, #375	; 0x177
 800a546:	491c      	ldr	r1, [pc, #112]	; (800a5b8 <pbuf_alloc+0x300>)
 800a548:	4815      	ldr	r0, [pc, #84]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a54a:	f004 ffe7 	bl	800f51c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800a54e:	e037      	b.n	800a5c0 <pbuf_alloc+0x308>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a550:	2004      	movs	r0, #4
 800a552:	f7ff fc61 	bl	8009e18 <memp_malloc>
 800a556:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <pbuf_alloc+0x2aa>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	e036      	b.n	800a5d0 <pbuf_alloc+0x318>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2200      	movs	r2, #0
 800a566:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	88ba      	ldrh	r2, [r7, #4]
 800a56c:	811a      	strh	r2, [r3, #8]
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	891a      	ldrh	r2, [r3, #8]
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	79ba      	ldrb	r2, [r7, #6]
 800a580:	731a      	strb	r2, [r3, #12]
    break;
 800a582:	e01e      	b.n	800a5c2 <pbuf_alloc+0x30a>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a584:	4b04      	ldr	r3, [pc, #16]	; (800a598 <pbuf_alloc+0x2e0>)
 800a586:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800a58a:	490c      	ldr	r1, [pc, #48]	; (800a5bc <pbuf_alloc+0x304>)
 800a58c:	4804      	ldr	r0, [pc, #16]	; (800a5a0 <pbuf_alloc+0x2e8>)
 800a58e:	f004 ffc5 	bl	800f51c <iprintf>
    return NULL;
 800a592:	2300      	movs	r3, #0
 800a594:	e01c      	b.n	800a5d0 <pbuf_alloc+0x318>
 800a596:	bf00      	nop
 800a598:	08010cc0 	.word	0x08010cc0
 800a59c:	08010cf0 	.word	0x08010cf0
 800a5a0:	08010d0c 	.word	0x08010d0c
 800a5a4:	08010d34 	.word	0x08010d34
 800a5a8:	08010d64 	.word	0x08010d64
 800a5ac:	08010d98 	.word	0x08010d98
 800a5b0:	08010dcc 	.word	0x08010dcc
 800a5b4:	08010de0 	.word	0x08010de0
 800a5b8:	08010e10 	.word	0x08010e10
 800a5bc:	08010e3c 	.word	0x08010e3c
    break;
 800a5c0:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3720      	adds	r7, #32
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	603b      	str	r3, [r7, #0]
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	71fb      	strb	r3, [r7, #7]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	80bb      	strh	r3, [r7, #4]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	d81b      	bhi.n	800a62a <pbuf_alloced_custom+0x52>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <pbuf_alloced_custom+0x20>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a60d 	.word	0x0800a60d
 800a5fc:	0800a613 	.word	0x0800a613
 800a600:	0800a619 	.word	0x0800a619
 800a604:	0800a61f 	.word	0x0800a61f
 800a608:	0800a625 	.word	0x0800a625
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a60c:	2336      	movs	r3, #54	; 0x36
 800a60e:	81fb      	strh	r3, [r7, #14]
    break;
 800a610:	e014      	b.n	800a63c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a612:	2322      	movs	r3, #34	; 0x22
 800a614:	81fb      	strh	r3, [r7, #14]
    break;
 800a616:	e011      	b.n	800a63c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a618:	230e      	movs	r3, #14
 800a61a:	81fb      	strh	r3, [r7, #14]
    break;
 800a61c:	e00e      	b.n	800a63c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a61e:	2300      	movs	r3, #0
 800a620:	81fb      	strh	r3, [r7, #14]
    break;
 800a622:	e00b      	b.n	800a63c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	81fb      	strh	r3, [r7, #14]
    break;
 800a628:	e008      	b.n	800a63c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800a62a:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <pbuf_alloced_custom+0xc8>)
 800a62c:	f240 12c5 	movw	r2, #453	; 0x1c5
 800a630:	491c      	ldr	r1, [pc, #112]	; (800a6a4 <pbuf_alloced_custom+0xcc>)
 800a632:	481d      	ldr	r0, [pc, #116]	; (800a6a8 <pbuf_alloced_custom+0xd0>)
 800a634:	f004 ff72 	bl	800f51c <iprintf>
    return NULL;
 800a638:	2300      	movs	r3, #0
 800a63a:	e02d      	b.n	800a698 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a63c:	89fb      	ldrh	r3, [r7, #14]
 800a63e:	3303      	adds	r3, #3
 800a640:	f023 0203 	bic.w	r2, r3, #3
 800a644:	88bb      	ldrh	r3, [r7, #4]
 800a646:	441a      	add	r2, r3
 800a648:	8bbb      	ldrh	r3, [r7, #28]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d901      	bls.n	800a652 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	e022      	b.n	800a698 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2200      	movs	r2, #0
 800a656:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d008      	beq.n	800a670 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a65e:	89fb      	ldrh	r3, [r7, #14]
 800a660:	3303      	adds	r3, #3
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	441a      	add	r2, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	605a      	str	r2, [r3, #4]
 800a66e:	e002      	b.n	800a676 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2202      	movs	r2, #2
 800a67a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	88ba      	ldrh	r2, [r7, #4]
 800a680:	811a      	strh	r2, [r3, #8]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	891a      	ldrh	r2, [r3, #8]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	79ba      	ldrb	r2, [r7, #6]
 800a68e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2201      	movs	r2, #1
 800a694:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800a696:	683b      	ldr	r3, [r7, #0]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	08010cc0 	.word	0x08010cc0
 800a6a4:	08010e58 	.word	0x08010e58
 800a6a8:	08010d0c 	.word	0x08010d0c

0800a6ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d106      	bne.n	800a6cc <pbuf_realloc+0x20>
 800a6be:	4b4b      	ldr	r3, [pc, #300]	; (800a7ec <pbuf_realloc+0x140>)
 800a6c0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a6c4:	494a      	ldr	r1, [pc, #296]	; (800a7f0 <pbuf_realloc+0x144>)
 800a6c6:	484b      	ldr	r0, [pc, #300]	; (800a7f4 <pbuf_realloc+0x148>)
 800a6c8:	f004 ff28 	bl	800f51c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7b1b      	ldrb	r3, [r3, #12]
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d012      	beq.n	800a6fa <pbuf_realloc+0x4e>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7b1b      	ldrb	r3, [r3, #12]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d00e      	beq.n	800a6fa <pbuf_realloc+0x4e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	7b1b      	ldrb	r3, [r3, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00a      	beq.n	800a6fa <pbuf_realloc+0x4e>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	7b1b      	ldrb	r3, [r3, #12]
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d006      	beq.n	800a6fa <pbuf_realloc+0x4e>
 800a6ec:	4b3f      	ldr	r3, [pc, #252]	; (800a7ec <pbuf_realloc+0x140>)
 800a6ee:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a6f2:	4941      	ldr	r1, [pc, #260]	; (800a7f8 <pbuf_realloc+0x14c>)
 800a6f4:	483f      	ldr	r0, [pc, #252]	; (800a7f4 <pbuf_realloc+0x148>)
 800a6f6:	f004 ff11 	bl	800f51c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	891b      	ldrh	r3, [r3, #8]
 800a6fe:	887a      	ldrh	r2, [r7, #2]
 800a700:	429a      	cmp	r2, r3
 800a702:	d26f      	bcs.n	800a7e4 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800a704:	887b      	ldrh	r3, [r7, #2]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	8912      	ldrh	r2, [r2, #8]
 800a70a:	1a9b      	subs	r3, r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a70e:	887b      	ldrh	r3, [r7, #2]
 800a710:	827b      	strh	r3, [r7, #18]
  q = p;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a716:	e025      	b.n	800a764 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	895b      	ldrh	r3, [r3, #10]
 800a71c:	8a7a      	ldrh	r2, [r7, #18]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a728:	4293      	cmp	r3, r2
 800a72a:	dd06      	ble.n	800a73a <pbuf_realloc+0x8e>
 800a72c:	4b2f      	ldr	r3, [pc, #188]	; (800a7ec <pbuf_realloc+0x140>)
 800a72e:	f240 220b 	movw	r2, #523	; 0x20b
 800a732:	4932      	ldr	r1, [pc, #200]	; (800a7fc <pbuf_realloc+0x150>)
 800a734:	482f      	ldr	r0, [pc, #188]	; (800a7f4 <pbuf_realloc+0x148>)
 800a736:	f004 fef1 	bl	800f51c <iprintf>
    q->tot_len += (u16_t)grow;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	891a      	ldrh	r2, [r3, #8]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	b29b      	uxth	r3, r3
 800a742:	4413      	add	r3, r2
 800a744:	b29a      	uxth	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <pbuf_realloc+0xb8>
 800a756:	4b25      	ldr	r3, [pc, #148]	; (800a7ec <pbuf_realloc+0x140>)
 800a758:	f240 220f 	movw	r2, #527	; 0x20f
 800a75c:	4928      	ldr	r1, [pc, #160]	; (800a800 <pbuf_realloc+0x154>)
 800a75e:	4825      	ldr	r0, [pc, #148]	; (800a7f4 <pbuf_realloc+0x148>)
 800a760:	f004 fedc 	bl	800f51c <iprintf>
  while (rem_len > q->len) {
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	895b      	ldrh	r3, [r3, #10]
 800a768:	8a7a      	ldrh	r2, [r7, #18]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d8d4      	bhi.n	800a718 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	7b1b      	ldrb	r3, [r3, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d122      	bne.n	800a7bc <pbuf_realloc+0x110>
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	895b      	ldrh	r3, [r3, #10]
 800a77a:	8a7a      	ldrh	r2, [r7, #18]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d01d      	beq.n	800a7bc <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	7b5b      	ldrb	r3, [r3, #13]
 800a784:	f003 0302 	and.w	r3, r3, #2
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d117      	bne.n	800a7bc <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	461a      	mov	r2, r3
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	b29a      	uxth	r2, r3
 800a798:	8a7b      	ldrh	r3, [r7, #18]
 800a79a:	4413      	add	r3, r2
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	4619      	mov	r1, r3
 800a7a0:	6978      	ldr	r0, [r7, #20]
 800a7a2:	f7ff f8dd 	bl	8009960 <mem_trim>
 800a7a6:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <pbuf_realloc+0x110>
 800a7ae:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <pbuf_realloc+0x140>)
 800a7b0:	f240 221d 	movw	r2, #541	; 0x21d
 800a7b4:	4913      	ldr	r1, [pc, #76]	; (800a804 <pbuf_realloc+0x158>)
 800a7b6:	480f      	ldr	r0, [pc, #60]	; (800a7f4 <pbuf_realloc+0x148>)
 800a7b8:	f004 feb0 	bl	800f51c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	8a7a      	ldrh	r2, [r7, #18]
 800a7c0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	895a      	ldrh	r2, [r3, #10]
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d004      	beq.n	800a7dc <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 f8dc 	bl	800a994 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e000      	b.n	800a7e6 <pbuf_realloc+0x13a>
    return;
 800a7e4:	bf00      	nop

}
 800a7e6:	3718      	adds	r7, #24
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	08010cc0 	.word	0x08010cc0
 800a7f0:	08010e7c 	.word	0x08010e7c
 800a7f4:	08010d0c 	.word	0x08010d0c
 800a7f8:	08010e94 	.word	0x08010e94
 800a7fc:	08010eb0 	.word	0x08010eb0
 800a800:	08010ec4 	.word	0x08010ec4
 800a804:	08010edc 	.word	0x08010edc

0800a808 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	807b      	strh	r3, [r7, #2]
 800a814:	4613      	mov	r3, r2
 800a816:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d106      	bne.n	800a82c <pbuf_header_impl+0x24>
 800a81e:	4b46      	ldr	r3, [pc, #280]	; (800a938 <pbuf_header_impl+0x130>)
 800a820:	f240 223f 	movw	r2, #575	; 0x23f
 800a824:	4945      	ldr	r1, [pc, #276]	; (800a93c <pbuf_header_impl+0x134>)
 800a826:	4846      	ldr	r0, [pc, #280]	; (800a940 <pbuf_header_impl+0x138>)
 800a828:	f004 fe78 	bl	800f51c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800a82c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <pbuf_header_impl+0x32>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <pbuf_header_impl+0x36>
    return 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	e078      	b.n	800a930 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800a83e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a842:	2b00      	cmp	r3, #0
 800a844:	da10      	bge.n	800a868 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800a846:	887b      	ldrh	r3, [r7, #2]
 800a848:	425b      	negs	r3, r3
 800a84a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	895b      	ldrh	r3, [r3, #10]
 800a850:	89fa      	ldrh	r2, [r7, #14]
 800a852:	429a      	cmp	r2, r3
 800a854:	d90a      	bls.n	800a86c <pbuf_header_impl+0x64>
 800a856:	4b38      	ldr	r3, [pc, #224]	; (800a938 <pbuf_header_impl+0x130>)
 800a858:	f240 2247 	movw	r2, #583	; 0x247
 800a85c:	4939      	ldr	r1, [pc, #228]	; (800a944 <pbuf_header_impl+0x13c>)
 800a85e:	4838      	ldr	r0, [pc, #224]	; (800a940 <pbuf_header_impl+0x138>)
 800a860:	f004 fe5c 	bl	800f51c <iprintf>
 800a864:	2301      	movs	r3, #1
 800a866:	e063      	b.n	800a930 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800a868:	887b      	ldrh	r3, [r7, #2]
 800a86a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7b1b      	ldrb	r3, [r3, #12]
 800a870:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800a878:	89bb      	ldrh	r3, [r7, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <pbuf_header_impl+0x7c>
 800a87e:	89bb      	ldrh	r3, [r7, #12]
 800a880:	2b03      	cmp	r3, #3
 800a882:	d112      	bne.n	800a8aa <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a88c:	425b      	negs	r3, r3
 800a88e:	441a      	add	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3310      	adds	r3, #16
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d238      	bcs.n	800a912 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e042      	b.n	800a930 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800a8aa:	89bb      	ldrh	r3, [r7, #12]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d002      	beq.n	800a8b6 <pbuf_header_impl+0xae>
 800a8b0:	89bb      	ldrh	r3, [r7, #12]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d124      	bne.n	800a900 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a8b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da0d      	bge.n	800a8da <pbuf_header_impl+0xd2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	895b      	ldrh	r3, [r3, #10]
 800a8c2:	89fa      	ldrh	r2, [r7, #14]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d808      	bhi.n	800a8da <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8d0:	425b      	negs	r3, r3
 800a8d2:	441a      	add	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	605a      	str	r2, [r3, #4]
 800a8d8:	e011      	b.n	800a8fe <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800a8da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd0b      	ble.n	800a8fa <pbuf_header_impl+0xf2>
 800a8e2:	787b      	ldrb	r3, [r7, #1]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8f0:	425b      	negs	r3, r3
 800a8f2:	441a      	add	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	605a      	str	r2, [r3, #4]
 800a8f8:	e001      	b.n	800a8fe <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e018      	b.n	800a930 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a8fe:	e008      	b.n	800a912 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800a900:	4b0d      	ldr	r3, [pc, #52]	; (800a938 <pbuf_header_impl+0x130>)
 800a902:	f240 2277 	movw	r2, #631	; 0x277
 800a906:	4910      	ldr	r1, [pc, #64]	; (800a948 <pbuf_header_impl+0x140>)
 800a908:	480d      	ldr	r0, [pc, #52]	; (800a940 <pbuf_header_impl+0x138>)
 800a90a:	f004 fe07 	bl	800f51c <iprintf>
    return 1;
 800a90e:	2301      	movs	r3, #1
 800a910:	e00e      	b.n	800a930 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	895a      	ldrh	r2, [r3, #10]
 800a916:	887b      	ldrh	r3, [r7, #2]
 800a918:	4413      	add	r3, r2
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	891a      	ldrh	r2, [r3, #8]
 800a924:	887b      	ldrh	r3, [r7, #2]
 800a926:	4413      	add	r3, r2
 800a928:	b29a      	uxth	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	08010cc0 	.word	0x08010cc0
 800a93c:	08010ef8 	.word	0x08010ef8
 800a940:	08010d0c 	.word	0x08010d0c
 800a944:	08010f04 	.word	0x08010f04
 800a948:	08010f24 	.word	0x08010f24

0800a94c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800a958:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a95c:	2200      	movs	r2, #0
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff ff51 	bl	800a808 <pbuf_header_impl>
 800a966:	4603      	mov	r3, r0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800a97c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a980:	2201      	movs	r2, #1
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7ff ff3f 	bl	800a808 <pbuf_header_impl>
 800a98a:	4603      	mov	r3, r0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d106      	bne.n	800a9b6 <pbuf_free+0x22>
 800a9a8:	4b3e      	ldr	r3, [pc, #248]	; (800aaa4 <pbuf_free+0x110>)
 800a9aa:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a9ae:	493e      	ldr	r1, [pc, #248]	; (800aaa8 <pbuf_free+0x114>)
 800a9b0:	483e      	ldr	r0, [pc, #248]	; (800aaac <pbuf_free+0x118>)
 800a9b2:	f004 fdb3 	bl	800f51c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e070      	b.n	800aa9c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	7b1b      	ldrb	r3, [r3, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d012      	beq.n	800a9e8 <pbuf_free+0x54>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7b1b      	ldrb	r3, [r3, #12]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d00e      	beq.n	800a9e8 <pbuf_free+0x54>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	7b1b      	ldrb	r3, [r3, #12]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d00a      	beq.n	800a9e8 <pbuf_free+0x54>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7b1b      	ldrb	r3, [r3, #12]
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d006      	beq.n	800a9e8 <pbuf_free+0x54>
 800a9da:	4b32      	ldr	r3, [pc, #200]	; (800aaa4 <pbuf_free+0x110>)
 800a9dc:	f240 22de 	movw	r2, #734	; 0x2de
 800a9e0:	4933      	ldr	r1, [pc, #204]	; (800aab0 <pbuf_free+0x11c>)
 800a9e2:	4832      	ldr	r0, [pc, #200]	; (800aaac <pbuf_free+0x118>)
 800a9e4:	f004 fd9a 	bl	800f51c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a9ec:	e052      	b.n	800aa94 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	89db      	ldrh	r3, [r3, #14]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <pbuf_free+0x70>
 800a9f6:	4b2b      	ldr	r3, [pc, #172]	; (800aaa4 <pbuf_free+0x110>)
 800a9f8:	f240 22eb 	movw	r2, #747	; 0x2eb
 800a9fc:	492d      	ldr	r1, [pc, #180]	; (800aab4 <pbuf_free+0x120>)
 800a9fe:	482b      	ldr	r0, [pc, #172]	; (800aaac <pbuf_free+0x118>)
 800aa00:	f004 fd8c 	bl	800f51c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	89db      	ldrh	r3, [r3, #14]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	81da      	strh	r2, [r3, #14]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	89db      	ldrh	r3, [r3, #14]
 800aa14:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800aa16:	8abb      	ldrh	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d139      	bne.n	800aa90 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	7b1b      	ldrb	r3, [r3, #12]
 800aa26:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	7b5b      	ldrb	r3, [r3, #13]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d011      	beq.n	800aa58 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d106      	bne.n	800aa4e <pbuf_free+0xba>
 800aa40:	4b18      	ldr	r3, [pc, #96]	; (800aaa4 <pbuf_free+0x110>)
 800aa42:	f240 22f9 	movw	r2, #761	; 0x2f9
 800aa46:	491c      	ldr	r1, [pc, #112]	; (800aab8 <pbuf_free+0x124>)
 800aa48:	4818      	ldr	r0, [pc, #96]	; (800aaac <pbuf_free+0x118>)
 800aa4a:	f004 fd67 	bl	800f51c <iprintf>
        pc->custom_free_function(p);
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
 800aa56:	e015      	b.n	800aa84 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800aa58:	89fb      	ldrh	r3, [r7, #14]
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d104      	bne.n	800aa68 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	2005      	movs	r0, #5
 800aa62:	f7ff fa49 	bl	8009ef8 <memp_free>
 800aa66:	e00d      	b.n	800aa84 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800aa68:	89fb      	ldrh	r3, [r7, #14]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d002      	beq.n	800aa74 <pbuf_free+0xe0>
 800aa6e:	89fb      	ldrh	r3, [r7, #14]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d104      	bne.n	800aa7e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	2004      	movs	r0, #4
 800aa78:	f7ff fa3e 	bl	8009ef8 <memp_free>
 800aa7c:	e002      	b.n	800aa84 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7fe ff0c 	bl	800989c <mem_free>
        }
      }
      count++;
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	3301      	adds	r3, #1
 800aa88:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	607b      	str	r3, [r7, #4]
 800aa8e:	e001      	b.n	800aa94 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1a9      	bne.n	800a9ee <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	08010cc0 	.word	0x08010cc0
 800aaa8:	08010ef8 	.word	0x08010ef8
 800aaac:	08010d0c 	.word	0x08010d0c
 800aab0:	08010f34 	.word	0x08010f34
 800aab4:	08010f4c 	.word	0x08010f4c
 800aab8:	08010f64 	.word	0x08010f64

0800aabc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800aac8:	e005      	b.n	800aad6 <pbuf_clen+0x1a>
    ++len;
 800aaca:	89fb      	ldrh	r3, [r7, #14]
 800aacc:	3301      	adds	r3, #1
 800aace:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1f6      	bne.n	800aaca <pbuf_clen+0xe>
  }
  return len;
 800aadc:	89fb      	ldrh	r3, [r7, #14]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
	...

0800aaec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d010      	beq.n	800ab1c <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	89db      	ldrh	r3, [r3, #14]
 800aafe:	3301      	adds	r3, #1
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	89db      	ldrh	r3, [r3, #14]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <pbuf_ref+0x30>
 800ab0e:	4b05      	ldr	r3, [pc, #20]	; (800ab24 <pbuf_ref+0x38>)
 800ab10:	f240 3239 	movw	r2, #825	; 0x339
 800ab14:	4904      	ldr	r1, [pc, #16]	; (800ab28 <pbuf_ref+0x3c>)
 800ab16:	4805      	ldr	r0, [pc, #20]	; (800ab2c <pbuf_ref+0x40>)
 800ab18:	f004 fd00 	bl	800f51c <iprintf>
  }
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	08010cc0 	.word	0x08010cc0
 800ab28:	08010f88 	.word	0x08010f88
 800ab2c:	08010d0c 	.word	0x08010d0c

0800ab30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <pbuf_cat+0x16>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d107      	bne.n	800ab56 <pbuf_cat+0x26>
 800ab46:	4b20      	ldr	r3, [pc, #128]	; (800abc8 <pbuf_cat+0x98>)
 800ab48:	f240 324d 	movw	r2, #845	; 0x34d
 800ab4c:	491f      	ldr	r1, [pc, #124]	; (800abcc <pbuf_cat+0x9c>)
 800ab4e:	4820      	ldr	r0, [pc, #128]	; (800abd0 <pbuf_cat+0xa0>)
 800ab50:	f004 fce4 	bl	800f51c <iprintf>
 800ab54:	e034      	b.n	800abc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	60fb      	str	r3, [r7, #12]
 800ab5a:	e00a      	b.n	800ab72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	891a      	ldrh	r2, [r3, #8]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	891b      	ldrh	r3, [r3, #8]
 800ab64:	4413      	add	r3, r2
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60fb      	str	r3, [r7, #12]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1f0      	bne.n	800ab5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	891a      	ldrh	r2, [r3, #8]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	895b      	ldrh	r3, [r3, #10]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d006      	beq.n	800ab94 <pbuf_cat+0x64>
 800ab86:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <pbuf_cat+0x98>)
 800ab88:	f240 3255 	movw	r2, #853	; 0x355
 800ab8c:	4911      	ldr	r1, [pc, #68]	; (800abd4 <pbuf_cat+0xa4>)
 800ab8e:	4810      	ldr	r0, [pc, #64]	; (800abd0 <pbuf_cat+0xa0>)
 800ab90:	f004 fcc4 	bl	800f51c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d006      	beq.n	800abaa <pbuf_cat+0x7a>
 800ab9c:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <pbuf_cat+0x98>)
 800ab9e:	f240 3256 	movw	r2, #854	; 0x356
 800aba2:	490d      	ldr	r1, [pc, #52]	; (800abd8 <pbuf_cat+0xa8>)
 800aba4:	480a      	ldr	r0, [pc, #40]	; (800abd0 <pbuf_cat+0xa0>)
 800aba6:	f004 fcb9 	bl	800f51c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	891a      	ldrh	r2, [r3, #8]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	891b      	ldrh	r3, [r3, #8]
 800abb2:	4413      	add	r3, r2
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	08010cc0 	.word	0x08010cc0
 800abcc:	08010f9c 	.word	0x08010f9c
 800abd0:	08010d0c 	.word	0x08010d0c
 800abd4:	08010fd4 	.word	0x08010fd4
 800abd8:	08011004 	.word	0x08011004

0800abdc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff ffa1 	bl	800ab30 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800abee:	6838      	ldr	r0, [r7, #0]
 800abf0:	f7ff ff7c 	bl	800aaec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800ac06:	2300      	movs	r3, #0
 800ac08:	81fb      	strh	r3, [r7, #14]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d008      	beq.n	800ac26 <pbuf_copy+0x2a>
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d005      	beq.n	800ac26 <pbuf_copy+0x2a>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	891a      	ldrh	r2, [r3, #8]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	891b      	ldrh	r3, [r3, #8]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d209      	bcs.n	800ac3a <pbuf_copy+0x3e>
 800ac26:	4b54      	ldr	r3, [pc, #336]	; (800ad78 <pbuf_copy+0x17c>)
 800ac28:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ac2c:	4953      	ldr	r1, [pc, #332]	; (800ad7c <pbuf_copy+0x180>)
 800ac2e:	4854      	ldr	r0, [pc, #336]	; (800ad80 <pbuf_copy+0x184>)
 800ac30:	f004 fc74 	bl	800f51c <iprintf>
 800ac34:	f06f 030f 	mvn.w	r3, #15
 800ac38:	e099      	b.n	800ad6e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	895b      	ldrh	r3, [r3, #10]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	89fb      	ldrh	r3, [r7, #14]
 800ac42:	1ad2      	subs	r2, r2, r3
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	895b      	ldrh	r3, [r3, #10]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	89bb      	ldrh	r3, [r7, #12]
 800ac4c:	1acb      	subs	r3, r1, r3
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	db05      	blt.n	800ac5e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	895a      	ldrh	r2, [r3, #10]
 800ac56:	89bb      	ldrh	r3, [r7, #12]
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	817b      	strh	r3, [r7, #10]
 800ac5c:	e004      	b.n	800ac68 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	895a      	ldrh	r2, [r3, #10]
 800ac62:	89fb      	ldrh	r3, [r7, #14]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	89fb      	ldrh	r3, [r7, #14]
 800ac6e:	18d0      	adds	r0, r2, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	89bb      	ldrh	r3, [r7, #12]
 800ac76:	4413      	add	r3, r2
 800ac78:	897a      	ldrh	r2, [r7, #10]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	f004 fc3b 	bl	800f4f6 <memcpy>
    offset_to += len;
 800ac80:	89fa      	ldrh	r2, [r7, #14]
 800ac82:	897b      	ldrh	r3, [r7, #10]
 800ac84:	4413      	add	r3, r2
 800ac86:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800ac88:	89ba      	ldrh	r2, [r7, #12]
 800ac8a:	897b      	ldrh	r3, [r7, #10]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	895b      	ldrh	r3, [r3, #10]
 800ac94:	89fa      	ldrh	r2, [r7, #14]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d906      	bls.n	800aca8 <pbuf_copy+0xac>
 800ac9a:	4b37      	ldr	r3, [pc, #220]	; (800ad78 <pbuf_copy+0x17c>)
 800ac9c:	f240 32cd 	movw	r2, #973	; 0x3cd
 800aca0:	4938      	ldr	r1, [pc, #224]	; (800ad84 <pbuf_copy+0x188>)
 800aca2:	4837      	ldr	r0, [pc, #220]	; (800ad80 <pbuf_copy+0x184>)
 800aca4:	f004 fc3a 	bl	800f51c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	895b      	ldrh	r3, [r3, #10]
 800acac:	89ba      	ldrh	r2, [r7, #12]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d906      	bls.n	800acc0 <pbuf_copy+0xc4>
 800acb2:	4b31      	ldr	r3, [pc, #196]	; (800ad78 <pbuf_copy+0x17c>)
 800acb4:	f240 32ce 	movw	r2, #974	; 0x3ce
 800acb8:	4933      	ldr	r1, [pc, #204]	; (800ad88 <pbuf_copy+0x18c>)
 800acba:	4831      	ldr	r0, [pc, #196]	; (800ad80 <pbuf_copy+0x184>)
 800acbc:	f004 fc2e 	bl	800f51c <iprintf>
    if (offset_from >= p_from->len) {
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	895b      	ldrh	r3, [r3, #10]
 800acc4:	89ba      	ldrh	r2, [r7, #12]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d304      	bcc.n	800acd4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	895b      	ldrh	r3, [r3, #10]
 800acd8:	89fa      	ldrh	r2, [r7, #14]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d114      	bne.n	800ad08 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10c      	bne.n	800ad08 <pbuf_copy+0x10c>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <pbuf_copy+0x10c>
 800acf4:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <pbuf_copy+0x17c>)
 800acf6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800acfa:	4924      	ldr	r1, [pc, #144]	; (800ad8c <pbuf_copy+0x190>)
 800acfc:	4820      	ldr	r0, [pc, #128]	; (800ad80 <pbuf_copy+0x184>)
 800acfe:	f004 fc0d 	bl	800f51c <iprintf>
 800ad02:	f06f 030f 	mvn.w	r3, #15
 800ad06:	e032      	b.n	800ad6e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d013      	beq.n	800ad36 <pbuf_copy+0x13a>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	895a      	ldrh	r2, [r3, #10]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	891b      	ldrh	r3, [r3, #8]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d10d      	bne.n	800ad36 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <pbuf_copy+0x13a>
 800ad22:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <pbuf_copy+0x17c>)
 800ad24:	f240 32de 	movw	r2, #990	; 0x3de
 800ad28:	4919      	ldr	r1, [pc, #100]	; (800ad90 <pbuf_copy+0x194>)
 800ad2a:	4815      	ldr	r0, [pc, #84]	; (800ad80 <pbuf_copy+0x184>)
 800ad2c:	f004 fbf6 	bl	800f51c <iprintf>
 800ad30:	f06f 0305 	mvn.w	r3, #5
 800ad34:	e01b      	b.n	800ad6e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d013      	beq.n	800ad64 <pbuf_copy+0x168>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	895a      	ldrh	r2, [r3, #10]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	891b      	ldrh	r3, [r3, #8]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d10d      	bne.n	800ad64 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d009      	beq.n	800ad64 <pbuf_copy+0x168>
 800ad50:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <pbuf_copy+0x17c>)
 800ad52:	f240 32e3 	movw	r2, #995	; 0x3e3
 800ad56:	490e      	ldr	r1, [pc, #56]	; (800ad90 <pbuf_copy+0x194>)
 800ad58:	4809      	ldr	r0, [pc, #36]	; (800ad80 <pbuf_copy+0x184>)
 800ad5a:	f004 fbdf 	bl	800f51c <iprintf>
 800ad5e:	f06f 0305 	mvn.w	r3, #5
 800ad62:	e004      	b.n	800ad6e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f47f af67 	bne.w	800ac3a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	08010cc0 	.word	0x08010cc0
 800ad7c:	08011050 	.word	0x08011050
 800ad80:	08010d0c 	.word	0x08010d0c
 800ad84:	08011080 	.word	0x08011080
 800ad88:	08011098 	.word	0x08011098
 800ad8c:	080110b4 	.word	0x080110b4
 800ad90:	080110c4 	.word	0x080110c4

0800ad94 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800ada2:	88fb      	ldrh	r3, [r7, #6]
 800ada4:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d109      	bne.n	800adc4 <pbuf_take+0x30>
 800adb0:	4b3a      	ldr	r3, [pc, #232]	; (800ae9c <pbuf_take+0x108>)
 800adb2:	f240 4284 	movw	r2, #1156	; 0x484
 800adb6:	493a      	ldr	r1, [pc, #232]	; (800aea0 <pbuf_take+0x10c>)
 800adb8:	483a      	ldr	r0, [pc, #232]	; (800aea4 <pbuf_take+0x110>)
 800adba:	f004 fbaf 	bl	800f51c <iprintf>
 800adbe:	f06f 030f 	mvn.w	r3, #15
 800adc2:	e066      	b.n	800ae92 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <pbuf_take+0x4a>
 800adca:	4b34      	ldr	r3, [pc, #208]	; (800ae9c <pbuf_take+0x108>)
 800adcc:	f240 4285 	movw	r2, #1157	; 0x485
 800add0:	4935      	ldr	r1, [pc, #212]	; (800aea8 <pbuf_take+0x114>)
 800add2:	4834      	ldr	r0, [pc, #208]	; (800aea4 <pbuf_take+0x110>)
 800add4:	f004 fba2 	bl	800f51c <iprintf>
 800add8:	f06f 030f 	mvn.w	r3, #15
 800addc:	e059      	b.n	800ae92 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	891b      	ldrh	r3, [r3, #8]
 800ade2:	88fa      	ldrh	r2, [r7, #6]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d909      	bls.n	800adfc <pbuf_take+0x68>
 800ade8:	4b2c      	ldr	r3, [pc, #176]	; (800ae9c <pbuf_take+0x108>)
 800adea:	f240 4286 	movw	r2, #1158	; 0x486
 800adee:	492f      	ldr	r1, [pc, #188]	; (800aeac <pbuf_take+0x118>)
 800adf0:	482c      	ldr	r0, [pc, #176]	; (800aea4 <pbuf_take+0x110>)
 800adf2:	f004 fb93 	bl	800f51c <iprintf>
 800adf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adfa:	e04a      	b.n	800ae92 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d007      	beq.n	800ae12 <pbuf_take+0x7e>
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <pbuf_take+0x7e>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	891b      	ldrh	r3, [r3, #8]
 800ae0c:	88fa      	ldrh	r2, [r7, #6]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d902      	bls.n	800ae18 <pbuf_take+0x84>
    return ERR_ARG;
 800ae12:	f06f 030f 	mvn.w	r3, #15
 800ae16:	e03c      	b.n	800ae92 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	61fb      	str	r3, [r7, #28]
 800ae1c:	e027      	b.n	800ae6e <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d106      	bne.n	800ae32 <pbuf_take+0x9e>
 800ae24:	4b1d      	ldr	r3, [pc, #116]	; (800ae9c <pbuf_take+0x108>)
 800ae26:	f240 428e 	movw	r2, #1166	; 0x48e
 800ae2a:	4921      	ldr	r1, [pc, #132]	; (800aeb0 <pbuf_take+0x11c>)
 800ae2c:	481d      	ldr	r0, [pc, #116]	; (800aea4 <pbuf_take+0x110>)
 800ae2e:	f004 fb75 	bl	800f51c <iprintf>
    buf_copy_len = total_copy_len;
 800ae32:	8b3b      	ldrh	r3, [r7, #24]
 800ae34:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	895b      	ldrh	r3, [r3, #10]
 800ae3a:	8b7a      	ldrh	r2, [r7, #26]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d902      	bls.n	800ae46 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	895b      	ldrh	r3, [r3, #10]
 800ae44:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	6858      	ldr	r0, [r3, #4]
 800ae4a:	8afb      	ldrh	r3, [r7, #22]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	4413      	add	r3, r2
 800ae50:	8b7a      	ldrh	r2, [r7, #26]
 800ae52:	4619      	mov	r1, r3
 800ae54:	f004 fb4f 	bl	800f4f6 <memcpy>
    total_copy_len -= buf_copy_len;
 800ae58:	8b3a      	ldrh	r2, [r7, #24]
 800ae5a:	8b7b      	ldrh	r3, [r7, #26]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800ae60:	8afa      	ldrh	r2, [r7, #22]
 800ae62:	8b7b      	ldrh	r3, [r7, #26]
 800ae64:	4413      	add	r3, r2
 800ae66:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	61fb      	str	r3, [r7, #28]
 800ae6e:	8b3b      	ldrh	r3, [r7, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1d4      	bne.n	800ae1e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800ae74:	8b3b      	ldrh	r3, [r7, #24]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d103      	bne.n	800ae82 <pbuf_take+0xee>
 800ae7a:	8afa      	ldrh	r2, [r7, #22]
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d006      	beq.n	800ae90 <pbuf_take+0xfc>
 800ae82:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <pbuf_take+0x108>)
 800ae84:	f240 4299 	movw	r2, #1177	; 0x499
 800ae88:	490a      	ldr	r1, [pc, #40]	; (800aeb4 <pbuf_take+0x120>)
 800ae8a:	4806      	ldr	r0, [pc, #24]	; (800aea4 <pbuf_take+0x110>)
 800ae8c:	f004 fb46 	bl	800f51c <iprintf>
  return ERR_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3720      	adds	r7, #32
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	08010cc0 	.word	0x08010cc0
 800aea0:	08011134 	.word	0x08011134
 800aea4:	08010d0c 	.word	0x08010d0c
 800aea8:	0801114c 	.word	0x0801114c
 800aeac:	08011168 	.word	0x08011168
 800aeb0:	08011188 	.word	0x08011188
 800aeb4:	080111a0 	.word	0x080111a0

0800aeb8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	4903      	ldr	r1, [pc, #12]	; (800aee0 <cyclic_timer+0x28>)
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f82e 	bl	800af34 <sys_timeout>
}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	0800aeb9 	.word	0x0800aeb9

0800aee4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aeea:	2300      	movs	r3, #0
 800aeec:	607b      	str	r3, [r7, #4]
 800aeee:	e00e      	b.n	800af0e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800aef0:	4a0d      	ldr	r2, [pc, #52]	; (800af28 <sys_timeouts_init+0x44>)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	4a0a      	ldr	r2, [pc, #40]	; (800af28 <sys_timeouts_init+0x44>)
 800aefe:	4413      	add	r3, r2
 800af00:	461a      	mov	r2, r3
 800af02:	490a      	ldr	r1, [pc, #40]	; (800af2c <sys_timeouts_init+0x48>)
 800af04:	f000 f816 	bl	800af34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3301      	adds	r3, #1
 800af0c:	607b      	str	r3, [r7, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d9ed      	bls.n	800aef0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800af14:	f003 fa12 	bl	800e33c <sys_now>
 800af18:	4602      	mov	r2, r0
 800af1a:	4b05      	ldr	r3, [pc, #20]	; (800af30 <sys_timeouts_init+0x4c>)
 800af1c:	601a      	str	r2, [r3, #0]
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	08011a94 	.word	0x08011a94
 800af2c:	0800aeb9 	.word	0x0800aeb9
 800af30:	240000e0 	.word	0x240000e0

0800af34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800af40:	2003      	movs	r0, #3
 800af42:	f7fe ff69 	bl	8009e18 <memp_malloc>
 800af46:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	f040 8084 	bne.w	800b05e <sys_timeout+0x12a>
 800af56:	4b44      	ldr	r3, [pc, #272]	; (800b068 <sys_timeout+0x134>)
 800af58:	22d4      	movs	r2, #212	; 0xd4
 800af5a:	4944      	ldr	r1, [pc, #272]	; (800b06c <sys_timeout+0x138>)
 800af5c:	4844      	ldr	r0, [pc, #272]	; (800b070 <sys_timeout+0x13c>)
 800af5e:	f004 fadd 	bl	800f51c <iprintf>
    return;
 800af62:	e07c      	b.n	800b05e <sys_timeout+0x12a>
  }

  now = sys_now();
 800af64:	f003 f9ea 	bl	800e33c <sys_now>
 800af68:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800af6a:	4b42      	ldr	r3, [pc, #264]	; (800b074 <sys_timeout+0x140>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d105      	bne.n	800af7e <sys_timeout+0x4a>
    diff = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800af76:	4a40      	ldr	r2, [pc, #256]	; (800b078 <sys_timeout+0x144>)
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	e004      	b.n	800af88 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800af7e:	4b3e      	ldr	r3, [pc, #248]	; (800b078 <sys_timeout+0x144>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2200      	movs	r2, #0
 800af8c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	441a      	add	r2, r3
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800afa4:	4b33      	ldr	r3, [pc, #204]	; (800b074 <sys_timeout+0x140>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d103      	bne.n	800afb4 <sys_timeout+0x80>
    next_timeout = timeout;
 800afac:	4a31      	ldr	r2, [pc, #196]	; (800b074 <sys_timeout+0x140>)
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	6013      	str	r3, [r2, #0]
    return;
 800afb2:	e055      	b.n	800b060 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800afb4:	4b2f      	ldr	r3, [pc, #188]	; (800b074 <sys_timeout+0x140>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d20f      	bcs.n	800afe0 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800afc0:	4b2c      	ldr	r3, [pc, #176]	; (800b074 <sys_timeout+0x140>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6859      	ldr	r1, [r3, #4]
 800afc6:	4b2b      	ldr	r3, [pc, #172]	; (800b074 <sys_timeout+0x140>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	1a8a      	subs	r2, r1, r2
 800afce:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800afd0:	4b28      	ldr	r3, [pc, #160]	; (800b074 <sys_timeout+0x140>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800afd8:	4a26      	ldr	r2, [pc, #152]	; (800b074 <sys_timeout+0x140>)
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	e03f      	b.n	800b060 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800afe0:	4b24      	ldr	r3, [pc, #144]	; (800b074 <sys_timeout+0x140>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	61fb      	str	r3, [r7, #28]
 800afe6:	e036      	b.n	800b056 <sys_timeout+0x122>
      timeout->time -= t->time;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	1ad2      	subs	r2, r2, r3
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d006      	beq.n	800b00c <sys_timeout+0xd8>
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d921      	bls.n	800b050 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6859      	ldr	r1, [r3, #4]
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	1a8a      	subs	r2, r1, r2
 800b024:	605a      	str	r2, [r3, #4]
 800b026:	e00b      	b.n	800b040 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d206      	bcs.n	800b040 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b032:	4b10      	ldr	r3, [pc, #64]	; (800b074 <sys_timeout+0x140>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	685a      	ldr	r2, [r3, #4]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	441a      	add	r2, r3
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	601a      	str	r2, [r3, #0]
        break;
 800b04e:	e007      	b.n	800b060 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	61fb      	str	r3, [r7, #28]
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1c5      	bne.n	800afe8 <sys_timeout+0xb4>
 800b05c:	e000      	b.n	800b060 <sys_timeout+0x12c>
    return;
 800b05e:	bf00      	nop
      }
    }
  }
}
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	080111cc 	.word	0x080111cc
 800b06c:	08011200 	.word	0x08011200
 800b070:	08011240 	.word	0x08011240
 800b074:	240000dc 	.word	0x240000dc
 800b078:	240000e0 	.word	0x240000e0

0800b07c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b082:	4b21      	ldr	r3, [pc, #132]	; (800b108 <sys_check_timeouts+0x8c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d039      	beq.n	800b0fe <sys_check_timeouts+0x82>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b08a:	f003 f957 	bl	800e33c <sys_now>
 800b08e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b090:	4b1e      	ldr	r3, [pc, #120]	; (800b10c <sys_check_timeouts+0x90>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b09e:	4b1a      	ldr	r3, [pc, #104]	; (800b108 <sys_check_timeouts+0x8c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d026      	beq.n	800b0f8 <sys_check_timeouts+0x7c>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d321      	bcc.n	800b0f8 <sys_check_timeouts+0x7c>
        /* timeout has expired */
        had_one = 1;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	4b13      	ldr	r3, [pc, #76]	; (800b10c <sys_check_timeouts+0x90>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	4a12      	ldr	r2, [pc, #72]	; (800b10c <sys_check_timeouts+0x90>)
 800b0c4:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a0c      	ldr	r2, [pc, #48]	; (800b108 <sys_check_timeouts+0x8c>)
 800b0d6:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	2003      	movs	r0, #3
 800b0e8:	f7fe ff06 	bl	8009ef8 <memp_free>
        if (handler != NULL) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <sys_check_timeouts+0x7c>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6838      	ldr	r0, [r7, #0]
 800b0f6:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b0f8:	7cfb      	ldrb	r3, [r7, #19]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1cd      	bne.n	800b09a <sys_check_timeouts+0x1e>
  }
}
 800b0fe:	bf00      	nop
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	240000dc 	.word	0x240000dc
 800b10c:	240000e0 	.word	0x240000e0

0800b110 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b110:	b480      	push	{r7}
 800b112:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b114:	bf00      	nop
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
	...

0800b120 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b12a:	4b17      	ldr	r3, [pc, #92]	; (800b188 <udp_new_port+0x68>)
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	b291      	uxth	r1, r2
 800b132:	4a15      	ldr	r2, [pc, #84]	; (800b188 <udp_new_port+0x68>)
 800b134:	8011      	strh	r1, [r2, #0]
 800b136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d103      	bne.n	800b146 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b13e:	4b12      	ldr	r3, [pc, #72]	; (800b188 <udp_new_port+0x68>)
 800b140:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b144:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b146:	4b11      	ldr	r3, [pc, #68]	; (800b18c <udp_new_port+0x6c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	603b      	str	r3, [r7, #0]
 800b14c:	e011      	b.n	800b172 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	8a5a      	ldrh	r2, [r3, #18]
 800b152:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <udp_new_port+0x68>)
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d108      	bne.n	800b16c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b15a:	88fb      	ldrh	r3, [r7, #6]
 800b15c:	3301      	adds	r3, #1
 800b15e:	80fb      	strh	r3, [r7, #6]
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b166:	d3e0      	bcc.n	800b12a <udp_new_port+0xa>
        return 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	e007      	b.n	800b17c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	603b      	str	r3, [r7, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1ea      	bne.n	800b14e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b178:	4b03      	ldr	r3, [pc, #12]	; (800b188 <udp_new_port+0x68>)
 800b17a:	881b      	ldrh	r3, [r3, #0]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	24000006 	.word	0x24000006
 800b18c:	24003678 	.word	0x24003678

0800b190 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d018      	beq.n	800b1d6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d013      	beq.n	800b1d2 <udp_input_local_match+0x42>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00f      	beq.n	800b1d2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b1b2:	4b14      	ldr	r3, [pc, #80]	; (800b204 <udp_input_local_match+0x74>)
 800b1b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b1b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1ba:	d00a      	beq.n	800b1d2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	4b10      	ldr	r3, [pc, #64]	; (800b204 <udp_input_local_match+0x74>)
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	405a      	eors	r2, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d110      	bne.n	800b1f4 <udp_input_local_match+0x64>
          return 1;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e00f      	b.n	800b1f6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d009      	beq.n	800b1f0 <udp_input_local_match+0x60>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <udp_input_local_match+0x60>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	4b06      	ldr	r3, [pc, #24]	; (800b204 <udp_input_local_match+0x74>)
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d101      	bne.n	800b1f4 <udp_input_local_match+0x64>
      return 1;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e000      	b.n	800b1f6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	240001f8 	.word	0x240001f8

0800b208 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b08d      	sub	sp, #52	; 0x34
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	895b      	ldrh	r3, [r3, #10]
 800b21c:	2b07      	cmp	r3, #7
 800b21e:	d803      	bhi.n	800b228 <udp_input+0x20>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff fbb7 	bl	800a994 <pbuf_free>
    goto end;
 800b226:	e0c9      	b.n	800b3bc <udp_input+0x1b4>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	60fb      	str	r3, [r7, #12]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b22e:	4b65      	ldr	r3, [pc, #404]	; (800b3c4 <udp_input+0x1bc>)
 800b230:	695a      	ldr	r2, [r3, #20]
 800b232:	4b64      	ldr	r3, [pc, #400]	; (800b3c4 <udp_input+0x1bc>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f001 fe79 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800b23e:	4603      	mov	r3, r0
 800b240:	767b      	strb	r3, [r7, #25]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	b29b      	uxth	r3, r3
 800b248:	4618      	mov	r0, r3
 800b24a:	f7fe f97b 	bl	8009544 <lwip_htons>
 800b24e:	4603      	mov	r3, r0
 800b250:	837b      	strh	r3, [r7, #26]
  dest = lwip_ntohs(udphdr->dest);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	885b      	ldrh	r3, [r3, #2]
 800b256:	b29b      	uxth	r3, r3
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fe f973 	bl	8009544 <lwip_htons>
 800b25e:	4603      	mov	r3, r0
 800b260:	82fb      	strh	r3, [r7, #22]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	61fb      	str	r3, [r7, #28]
  uncon_pcb = NULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	613b      	str	r3, [r7, #16]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b26e:	4b56      	ldr	r3, [pc, #344]	; (800b3c8 <udp_input+0x1c0>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	627b      	str	r3, [r7, #36]	; 0x24
 800b274:	e03b      	b.n	800b2ee <udp_input+0xe6>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	8a5b      	ldrh	r3, [r3, #18]
 800b27a:	8afa      	ldrh	r2, [r7, #22]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d131      	bne.n	800b2e4 <udp_input+0xdc>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b280:	7e7b      	ldrb	r3, [r7, #25]
 800b282:	461a      	mov	r2, r3
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b288:	f7ff ff82 	bl	800b190 <udp_input_local_match>
 800b28c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d028      	beq.n	800b2e4 <udp_input+0xdc>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	7c1b      	ldrb	r3, [r3, #16]
 800b296:	f003 0304 	and.w	r3, r3, #4
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d104      	bne.n	800b2a8 <udp_input+0xa0>
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <udp_input+0xa0>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	613b      	str	r3, [r7, #16]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	8a9b      	ldrh	r3, [r3, #20]
 800b2ac:	8b7a      	ldrh	r2, [r7, #26]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d118      	bne.n	800b2e4 <udp_input+0xdc>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d005      	beq.n	800b2c6 <udp_input+0xbe>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	4b41      	ldr	r3, [pc, #260]	; (800b3c4 <udp_input+0x1bc>)
 800b2c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d10e      	bne.n	800b2e4 <udp_input+0xdc>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d014      	beq.n	800b2f6 <udp_input+0xee>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b2d4:	4b3c      	ldr	r3, [pc, #240]	; (800b3c8 <udp_input+0x1c0>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b2dc:	4a3a      	ldr	r2, [pc, #232]	; (800b3c8 <udp_input+0x1c0>)
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b2e2:	e008      	b.n	800b2f6 <udp_input+0xee>
      }
    }

    prev = pcb;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	61fb      	str	r3, [r7, #28]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1c0      	bne.n	800b276 <udp_input+0x6e>
 800b2f4:	e000      	b.n	800b2f8 <udp_input+0xf0>
        break;
 800b2f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <udp_input+0xfa>
    pcb = uncon_pcb;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <udp_input+0x108>
    for_us = 1;
 800b308:	2301      	movs	r3, #1
 800b30a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b30e:	e00b      	b.n	800b328 <udp_input+0x120>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	3304      	adds	r3, #4
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	4b2b      	ldr	r3, [pc, #172]	; (800b3c4 <udp_input+0x1bc>)
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	bf0c      	ite	eq
 800b31e:	2301      	moveq	r3, #1
 800b320:	2300      	movne	r3, #0
 800b322:	b2db      	uxtb	r3, r3
 800b324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d042      	beq.n	800b3b6 <udp_input+0x1ae>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b330:	f06f 0107 	mvn.w	r1, #7
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff fb09 	bl	800a94c <pbuf_header>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <udp_input+0x14e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b340:	4b22      	ldr	r3, [pc, #136]	; (800b3cc <udp_input+0x1c4>)
 800b342:	f240 1255 	movw	r2, #341	; 0x155
 800b346:	4922      	ldr	r1, [pc, #136]	; (800b3d0 <udp_input+0x1c8>)
 800b348:	4822      	ldr	r0, [pc, #136]	; (800b3d4 <udp_input+0x1cc>)
 800b34a:	f004 f8e7 	bl	800f51c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff fb20 	bl	800a994 <pbuf_free>
      goto end;
 800b354:	e032      	b.n	800b3bc <udp_input+0x1b4>
    }

    if (pcb != NULL) {
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d012      	beq.n	800b382 <udp_input+0x17a>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00a      	beq.n	800b37a <udp_input+0x172>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	699c      	ldr	r4, [r3, #24]
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	69d8      	ldr	r0, [r3, #28]
 800b36c:	8b7b      	ldrh	r3, [r7, #26]
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	4b19      	ldr	r3, [pc, #100]	; (800b3d8 <udp_input+0x1d0>)
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b376:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b378:	e021      	b.n	800b3be <udp_input+0x1b6>
        pbuf_free(p);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff fb0a 	bl	800a994 <pbuf_free>
        goto end;
 800b380:	e01c      	b.n	800b3bc <udp_input+0x1b4>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b382:	7e7b      	ldrb	r3, [r7, #25]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d112      	bne.n	800b3ae <udp_input+0x1a6>
 800b388:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <udp_input+0x1bc>)
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b390:	2be0      	cmp	r3, #224	; 0xe0
 800b392:	d00c      	beq.n	800b3ae <udp_input+0x1a6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b394:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <udp_input+0x1bc>)
 800b396:	899b      	ldrh	r3, [r3, #12]
 800b398:	3308      	adds	r3, #8
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	b21b      	sxth	r3, r3
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7ff fae5 	bl	800a970 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b3a6:	2103      	movs	r1, #3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 fabb 	bl	800c924 <icmp_dest_unreach>
      pbuf_free(p);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff faf0 	bl	800a994 <pbuf_free>
  return;
 800b3b4:	e003      	b.n	800b3be <udp_input+0x1b6>
    pbuf_free(p);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff faec 	bl	800a994 <pbuf_free>
  return;
 800b3bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b3be:	372c      	adds	r7, #44	; 0x2c
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd90      	pop	{r4, r7, pc}
 800b3c4:	240001f8 	.word	0x240001f8
 800b3c8:	24003678 	.word	0x24003678
 800b3cc:	08011268 	.word	0x08011268
 800b3d0:	08011298 	.word	0x08011298
 800b3d4:	080112ac 	.word	0x080112ac
 800b3d8:	24000208 	.word	0x24000208

0800b3dc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d102      	bne.n	800b3f2 <udp_send+0x16>
    return ERR_VAL;
 800b3ec:	f06f 0305 	mvn.w	r3, #5
 800b3f0:	e008      	b.n	800b404 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	1d1a      	adds	r2, r3, #4
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	8a9b      	ldrh	r3, [r3, #20]
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f805 	bl	800b40c <udp_sendto>
 800b402:	4603      	mov	r3, r0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <udp_sendto+0x1e>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <udp_sendto+0x24>
    return ERR_VAL;
 800b42a:	f06f 0305 	mvn.w	r3, #5
 800b42e:	e013      	b.n	800b458 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800b430:	6978      	ldr	r0, [r7, #20]
 800b432:	f001 fb09 	bl	800ca48 <ip4_route>
 800b436:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d102      	bne.n	800b444 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b43e:	f06f 0303 	mvn.w	r3, #3
 800b442:	e009      	b.n	800b458 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b444:	887a      	ldrh	r2, [r7, #2]
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	4613      	mov	r3, r2
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 f805 	bl	800b460 <udp_sendto_if>
 800b456:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af02      	add	r7, sp, #8
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
 800b46c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <udp_sendto_if+0x1a>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d102      	bne.n	800b480 <udp_sendto_if+0x20>
    return ERR_VAL;
 800b47a:	f06f 0305 	mvn.w	r3, #5
 800b47e:	e028      	b.n	800b4d2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d009      	beq.n	800b49a <udp_sendto_if+0x3a>
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b496:	2be0      	cmp	r3, #224	; 0xe0
 800b498:	d103      	bne.n	800b4a2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	3304      	adds	r3, #4
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e00b      	b.n	800b4ba <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d002      	beq.n	800b4b6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800b4b0:	f06f 0303 	mvn.w	r3, #3
 800b4b4:	e00d      	b.n	800b4d2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b4ba:	887a      	ldrh	r2, [r7, #2]
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	68b9      	ldr	r1, [r7, #8]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 f806 	bl	800b4dc <udp_sendto_if_src>
 800b4d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3718      	adds	r7, #24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08c      	sub	sp, #48	; 0x30
 800b4e0:	af04      	add	r7, sp, #16
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <udp_sendto_if_src+0x1a>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d102      	bne.n	800b4fc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800b4f6:	f06f 0305 	mvn.w	r3, #5
 800b4fa:	e07e      	b.n	800b5fa <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	8a5b      	ldrh	r3, [r3, #18]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10f      	bne.n	800b524 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b504:	68f9      	ldr	r1, [r7, #12]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8a5b      	ldrh	r3, [r3, #18]
 800b50a:	461a      	mov	r2, r3
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 f87f 	bl	800b610 <udp_bind>
 800b512:	4603      	mov	r3, r0
 800b514:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b516:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b51e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b522:	e06a      	b.n	800b5fa <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800b524:	2108      	movs	r1, #8
 800b526:	68b8      	ldr	r0, [r7, #8]
 800b528:	f7ff fa10 	bl	800a94c <pbuf_header>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d014      	beq.n	800b55c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b532:	2200      	movs	r2, #0
 800b534:	2108      	movs	r1, #8
 800b536:	2001      	movs	r0, #1
 800b538:	f7fe febe 	bl	800a2b8 <pbuf_alloc>
 800b53c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d102      	bne.n	800b54a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b548:	e057      	b.n	800b5fa <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	891b      	ldrh	r3, [r3, #8]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d006      	beq.n	800b560 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b552:	68b9      	ldr	r1, [r7, #8]
 800b554:	69f8      	ldr	r0, [r7, #28]
 800b556:	f7ff fb41 	bl	800abdc <pbuf_chain>
 800b55a:	e001      	b.n	800b560 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	895b      	ldrh	r3, [r3, #10]
 800b564:	2b07      	cmp	r3, #7
 800b566:	d806      	bhi.n	800b576 <udp_sendto_if_src+0x9a>
 800b568:	4b26      	ldr	r3, [pc, #152]	; (800b604 <udp_sendto_if_src+0x128>)
 800b56a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b56e:	4926      	ldr	r1, [pc, #152]	; (800b608 <udp_sendto_if_src+0x12c>)
 800b570:	4826      	ldr	r0, [pc, #152]	; (800b60c <udp_sendto_if_src+0x130>)
 800b572:	f003 ffd3 	bl	800f51c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	8a5b      	ldrh	r3, [r3, #18]
 800b580:	4618      	mov	r0, r3
 800b582:	f7fd ffdf 	bl	8009544 <lwip_htons>
 800b586:	4603      	mov	r3, r0
 800b588:	461a      	mov	r2, r3
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b58e:	887b      	ldrh	r3, [r7, #2]
 800b590:	4618      	mov	r0, r3
 800b592:	f7fd ffd7 	bl	8009544 <lwip_htons>
 800b596:	4603      	mov	r3, r0
 800b598:	461a      	mov	r2, r3
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	719a      	strb	r2, [r3, #6]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	891b      	ldrh	r3, [r3, #8]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fd ffc9 	bl	8009544 <lwip_htons>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b5ba:	2311      	movs	r3, #17
 800b5bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	7a9b      	ldrb	r3, [r3, #10]
 800b5c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	7a5b      	ldrb	r3, [r3, #9]
 800b5c8:	7cb9      	ldrb	r1, [r7, #18]
 800b5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5cc:	9202      	str	r2, [sp, #8]
 800b5ce:	7cfa      	ldrb	r2, [r7, #19]
 800b5d0:	9201      	str	r2, [sp, #4]
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5da:	69f8      	ldr	r0, [r7, #28]
 800b5dc:	f001 fc00 	bl	800cde0 <ip4_output_if_src>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b5e4:	69fa      	ldr	r2, [r7, #28]
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d004      	beq.n	800b5f6 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800b5ec:	69f8      	ldr	r0, [r7, #28]
 800b5ee:	f7ff f9d1 	bl	800a994 <pbuf_free>
    q = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b5f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	08011268 	.word	0x08011268
 800b608:	080112d4 	.word	0x080112d4
 800b60c:	080112ac 	.word	0x080112ac

0800b610 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	4613      	mov	r3, r2
 800b61c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b624:	4b30      	ldr	r3, [pc, #192]	; (800b6e8 <udp_bind+0xd8>)
 800b626:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <udp_bind+0x24>
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d102      	bne.n	800b63a <udp_bind+0x2a>
    return ERR_VAL;
 800b634:	f06f 0305 	mvn.w	r3, #5
 800b638:	e052      	b.n	800b6e0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b63e:	4b2b      	ldr	r3, [pc, #172]	; (800b6ec <udp_bind+0xdc>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	e009      	b.n	800b65a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d102      	bne.n	800b654 <udp_bind+0x44>
      rebind = 1;
 800b64e:	2301      	movs	r3, #1
 800b650:	74fb      	strb	r3, [r7, #19]
      break;
 800b652:	e005      	b.n	800b660 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	617b      	str	r3, [r7, #20]
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f2      	bne.n	800b646 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d109      	bne.n	800b67a <udp_bind+0x6a>
    port = udp_new_port();
 800b666:	f7ff fd5b 	bl	800b120 <udp_new_port>
 800b66a:	4603      	mov	r3, r0
 800b66c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d11e      	bne.n	800b6b2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b674:	f06f 0307 	mvn.w	r3, #7
 800b678:	e032      	b.n	800b6e0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b67a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ec <udp_bind+0xdc>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	e014      	b.n	800b6ac <udp_bind+0x9c>
      if (pcb != ipcb) {
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	429a      	cmp	r2, r3
 800b688:	d00d      	beq.n	800b6a6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	8a5b      	ldrh	r3, [r3, #18]
 800b68e:	88fa      	ldrh	r2, [r7, #6]
 800b690:	429a      	cmp	r2, r3
 800b692:	d108      	bne.n	800b6a6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d102      	bne.n	800b6a6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b6a0:	f06f 0307 	mvn.w	r3, #7
 800b6a4:	e01c      	b.n	800b6e0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1e7      	bne.n	800b682 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <udp_bind+0xae>
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	e000      	b.n	800b6c0 <udp_bind+0xb0>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	88fa      	ldrh	r2, [r7, #6]
 800b6c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b6ca:	7cfb      	ldrb	r3, [r7, #19]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d106      	bne.n	800b6de <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b6d0:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <udp_bind+0xdc>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b6d8:	4a04      	ldr	r2, [pc, #16]	; (800b6ec <udp_bind+0xdc>)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	08011aa4 	.word	0x08011aa4
 800b6ec:	24003678 	.word	0x24003678

0800b6f0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <udp_connect+0x1a>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d102      	bne.n	800b710 <udp_connect+0x20>
    return ERR_VAL;
 800b70a:	f06f 0305 	mvn.w	r3, #5
 800b70e:	e03e      	b.n	800b78e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8a5b      	ldrh	r3, [r3, #18]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10f      	bne.n	800b738 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b718:	68f9      	ldr	r1, [r7, #12]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8a5b      	ldrh	r3, [r3, #18]
 800b71e:	461a      	mov	r2, r3
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f7ff ff75 	bl	800b610 <udp_bind>
 800b726:	4603      	mov	r3, r0
 800b728:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 800b72a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <udp_connect+0x48>
      return err;
 800b732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b736:	e02a      	b.n	800b78e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <udp_connect+0x54>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	e000      	b.n	800b746 <udp_connect+0x56>
 800b744:	2300      	movs	r3, #0
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	88fa      	ldrh	r2, [r7, #6]
 800b74e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	7c1b      	ldrb	r3, [r3, #16]
 800b754:	f043 0304 	orr.w	r3, r3, #4
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b75e:	4b0e      	ldr	r3, [pc, #56]	; (800b798 <udp_connect+0xa8>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	613b      	str	r3, [r7, #16]
 800b764:	e008      	b.n	800b778 <udp_connect+0x88>
    if (pcb == ipcb) {
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d101      	bne.n	800b772 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	e00d      	b.n	800b78e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	613b      	str	r3, [r7, #16]
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1f3      	bne.n	800b766 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b77e:	4b06      	ldr	r3, [pc, #24]	; (800b798 <udp_connect+0xa8>)
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b786:	4a04      	ldr	r2, [pc, #16]	; (800b798 <udp_connect+0xa8>)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3718      	adds	r7, #24
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	24003678 	.word	0x24003678

0800b79c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	61da      	str	r2, [r3, #28]
}
 800b7b4:	bf00      	nop
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	f7fe fb26 	bl	8009e18 <memp_malloc>
 800b7cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f003 fe97 	bl	800f50c <memset>
    pcb->ttl = UDP_TTL;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	22ff      	movs	r2, #255	; 0xff
 800b7e2:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b7e4:	687b      	ldr	r3, [r7, #4]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01e      	beq.n	800b83e <udp_netif_ip_addr_changed+0x4e>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d01a      	beq.n	800b83e <udp_netif_ip_addr_changed+0x4e>
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d017      	beq.n	800b83e <udp_netif_ip_addr_changed+0x4e>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d013      	beq.n	800b83e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b816:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <udp_netif_ip_addr_changed+0x5c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	e00c      	b.n	800b838 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	429a      	cmp	r2, r3
 800b828:	d103      	bne.n	800b832 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1ef      	bne.n	800b81e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b83e:	bf00      	nop
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	24003678 	.word	0x24003678

0800b850 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b858:	492b      	ldr	r1, [pc, #172]	; (800b908 <etharp_free_entry+0xb8>)
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	4613      	mov	r3, r2
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	4413      	add	r3, r2
 800b862:	00db      	lsls	r3, r3, #3
 800b864:	440b      	add	r3, r1
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d013      	beq.n	800b894 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b86c:	4926      	ldr	r1, [pc, #152]	; (800b908 <etharp_free_entry+0xb8>)
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	4613      	mov	r3, r2
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	4413      	add	r3, r2
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	440b      	add	r3, r1
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff f889 	bl	800a994 <pbuf_free>
    arp_table[i].q = NULL;
 800b882:	4921      	ldr	r1, [pc, #132]	; (800b908 <etharp_free_entry+0xb8>)
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	4613      	mov	r3, r2
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	4413      	add	r3, r2
 800b88c:	00db      	lsls	r3, r3, #3
 800b88e:	440b      	add	r3, r1
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b894:	491c      	ldr	r1, [pc, #112]	; (800b908 <etharp_free_entry+0xb8>)
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	4613      	mov	r3, r2
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	4413      	add	r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	440b      	add	r3, r1
 800b8a2:	3314      	adds	r3, #20
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800b8a8:	4917      	ldr	r1, [pc, #92]	; (800b908 <etharp_free_entry+0xb8>)
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	4413      	add	r3, r2
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	440b      	add	r3, r1
 800b8b6:	3312      	adds	r3, #18
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800b8bc:	4912      	ldr	r1, [pc, #72]	; (800b908 <etharp_free_entry+0xb8>)
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	4413      	add	r3, r2
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	440b      	add	r3, r1
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800b8d0:	490d      	ldr	r1, [pc, #52]	; (800b908 <etharp_free_entry+0xb8>)
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	4413      	add	r3, r2
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	440b      	add	r3, r1
 800b8de:	3304      	adds	r3, #4
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800b8e4:	4908      	ldr	r1, [pc, #32]	; (800b908 <etharp_free_entry+0xb8>)
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	4413      	add	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	440b      	add	r3, r1
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	4a05      	ldr	r2, [pc, #20]	; (800b90c <etharp_free_entry+0xbc>)
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	6810      	ldr	r0, [r2, #0]
 800b8fa:	6018      	str	r0, [r3, #0]
 800b8fc:	8892      	ldrh	r2, [r2, #4]
 800b8fe:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800b900:	bf00      	nop
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	240000e4 	.word	0x240000e4
 800b90c:	08011ab0 	.word	0x08011ab0

0800b910 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b916:	2300      	movs	r3, #0
 800b918:	71fb      	strb	r3, [r7, #7]
 800b91a:	e096      	b.n	800ba4a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b91c:	79fa      	ldrb	r2, [r7, #7]
 800b91e:	494f      	ldr	r1, [pc, #316]	; (800ba5c <etharp_tmr+0x14c>)
 800b920:	4613      	mov	r3, r2
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	4413      	add	r3, r2
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	440b      	add	r3, r1
 800b92a:	3314      	adds	r3, #20
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b930:	79bb      	ldrb	r3, [r7, #6]
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 8086 	beq.w	800ba44 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b938:	79fa      	ldrb	r2, [r7, #7]
 800b93a:	4948      	ldr	r1, [pc, #288]	; (800ba5c <etharp_tmr+0x14c>)
 800b93c:	4613      	mov	r3, r2
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	4413      	add	r3, r2
 800b942:	00db      	lsls	r3, r3, #3
 800b944:	440b      	add	r3, r1
 800b946:	3312      	adds	r3, #18
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	3301      	adds	r3, #1
 800b94c:	b298      	uxth	r0, r3
 800b94e:	4943      	ldr	r1, [pc, #268]	; (800ba5c <etharp_tmr+0x14c>)
 800b950:	4613      	mov	r3, r2
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	4413      	add	r3, r2
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	440b      	add	r3, r1
 800b95a:	3312      	adds	r3, #18
 800b95c:	4602      	mov	r2, r0
 800b95e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b960:	79fa      	ldrb	r2, [r7, #7]
 800b962:	493e      	ldr	r1, [pc, #248]	; (800ba5c <etharp_tmr+0x14c>)
 800b964:	4613      	mov	r3, r2
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	4413      	add	r3, r2
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	440b      	add	r3, r1
 800b96e:	3312      	adds	r3, #18
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b976:	d215      	bcs.n	800b9a4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b978:	79fa      	ldrb	r2, [r7, #7]
 800b97a:	4938      	ldr	r1, [pc, #224]	; (800ba5c <etharp_tmr+0x14c>)
 800b97c:	4613      	mov	r3, r2
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	4413      	add	r3, r2
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	440b      	add	r3, r1
 800b986:	3314      	adds	r3, #20
 800b988:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d10f      	bne.n	800b9ae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b98e:	79fa      	ldrb	r2, [r7, #7]
 800b990:	4932      	ldr	r1, [pc, #200]	; (800ba5c <etharp_tmr+0x14c>)
 800b992:	4613      	mov	r3, r2
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	4413      	add	r3, r2
 800b998:	00db      	lsls	r3, r3, #3
 800b99a:	440b      	add	r3, r1
 800b99c:	3312      	adds	r3, #18
 800b99e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b9a0:	2b04      	cmp	r3, #4
 800b9a2:	d904      	bls.n	800b9ae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff ff52 	bl	800b850 <etharp_free_entry>
 800b9ac:	e04a      	b.n	800ba44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b9ae:	79fa      	ldrb	r2, [r7, #7]
 800b9b0:	492a      	ldr	r1, [pc, #168]	; (800ba5c <etharp_tmr+0x14c>)
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	4413      	add	r3, r2
 800b9b8:	00db      	lsls	r3, r3, #3
 800b9ba:	440b      	add	r3, r1
 800b9bc:	3314      	adds	r3, #20
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	d10a      	bne.n	800b9da <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b9c4:	79fa      	ldrb	r2, [r7, #7]
 800b9c6:	4925      	ldr	r1, [pc, #148]	; (800ba5c <etharp_tmr+0x14c>)
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	4413      	add	r3, r2
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	440b      	add	r3, r1
 800b9d2:	3314      	adds	r3, #20
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	701a      	strb	r2, [r3, #0]
 800b9d8:	e034      	b.n	800ba44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b9da:	79fa      	ldrb	r2, [r7, #7]
 800b9dc:	491f      	ldr	r1, [pc, #124]	; (800ba5c <etharp_tmr+0x14c>)
 800b9de:	4613      	mov	r3, r2
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	4413      	add	r3, r2
 800b9e4:	00db      	lsls	r3, r3, #3
 800b9e6:	440b      	add	r3, r1
 800b9e8:	3314      	adds	r3, #20
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	d10a      	bne.n	800ba06 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b9f0:	79fa      	ldrb	r2, [r7, #7]
 800b9f2:	491a      	ldr	r1, [pc, #104]	; (800ba5c <etharp_tmr+0x14c>)
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	4413      	add	r3, r2
 800b9fa:	00db      	lsls	r3, r3, #3
 800b9fc:	440b      	add	r3, r1
 800b9fe:	3314      	adds	r3, #20
 800ba00:	2202      	movs	r2, #2
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	e01e      	b.n	800ba44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ba06:	79fa      	ldrb	r2, [r7, #7]
 800ba08:	4914      	ldr	r1, [pc, #80]	; (800ba5c <etharp_tmr+0x14c>)
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	4413      	add	r3, r2
 800ba10:	00db      	lsls	r3, r3, #3
 800ba12:	440b      	add	r3, r1
 800ba14:	3314      	adds	r3, #20
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d113      	bne.n	800ba44 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ba1c:	79fa      	ldrb	r2, [r7, #7]
 800ba1e:	490f      	ldr	r1, [pc, #60]	; (800ba5c <etharp_tmr+0x14c>)
 800ba20:	4613      	mov	r3, r2
 800ba22:	005b      	lsls	r3, r3, #1
 800ba24:	4413      	add	r3, r2
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	440b      	add	r3, r1
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	79fa      	ldrb	r2, [r7, #7]
 800ba30:	4613      	mov	r3, r2
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	4413      	add	r3, r2
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	4a08      	ldr	r2, [pc, #32]	; (800ba5c <etharp_tmr+0x14c>)
 800ba3a:	4413      	add	r3, r2
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	f000 fe38 	bl	800c6b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	3301      	adds	r3, #1
 800ba48:	71fb      	strb	r3, [r7, #7]
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	f67f af65 	bls.w	800b91c <etharp_tmr+0xc>
      }
    }
  }
}
 800ba52:	bf00      	nop
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	240000e4 	.word	0x240000e4

0800ba60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ba6e:	230a      	movs	r3, #10
 800ba70:	773b      	strb	r3, [r7, #28]
 800ba72:	230a      	movs	r3, #10
 800ba74:	777b      	strb	r3, [r7, #29]
  s8_t empty = ARP_TABLE_SIZE;
 800ba76:	230a      	movs	r3, #10
 800ba78:	77bb      	strb	r3, [r7, #30]
  u8_t i = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	77fb      	strb	r3, [r7, #31]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ba7e:	230a      	movs	r3, #10
 800ba80:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	833b      	strh	r3, [r7, #24]
 800ba86:	2300      	movs	r3, #0
 800ba88:	82fb      	strh	r3, [r7, #22]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba8e:	2300      	movs	r3, #0
 800ba90:	77fb      	strb	r3, [r7, #31]
 800ba92:	e093      	b.n	800bbbc <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800ba94:	7ffa      	ldrb	r2, [r7, #31]
 800ba96:	4990      	ldr	r1, [pc, #576]	; (800bcd8 <etharp_find_entry+0x278>)
 800ba98:	4613      	mov	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	4413      	add	r3, r2
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	440b      	add	r3, r1
 800baa2:	3314      	adds	r3, #20
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800baa8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800baac:	2b0a      	cmp	r3, #10
 800baae:	d105      	bne.n	800babc <etharp_find_entry+0x5c>
 800bab0:	7cfb      	ldrb	r3, [r7, #19]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d102      	bne.n	800babc <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800bab6:	7ffb      	ldrb	r3, [r7, #31]
 800bab8:	77bb      	strb	r3, [r7, #30]
 800baba:	e07c      	b.n	800bbb6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800babc:	7cfb      	ldrb	r3, [r7, #19]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d079      	beq.n	800bbb6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bac2:	7cfb      	ldrb	r3, [r7, #19]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d009      	beq.n	800badc <etharp_find_entry+0x7c>
 800bac8:	7cfb      	ldrb	r3, [r7, #19]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d806      	bhi.n	800badc <etharp_find_entry+0x7c>
 800bace:	4b83      	ldr	r3, [pc, #524]	; (800bcdc <etharp_find_entry+0x27c>)
 800bad0:	f44f 7293 	mov.w	r2, #294	; 0x126
 800bad4:	4982      	ldr	r1, [pc, #520]	; (800bce0 <etharp_find_entry+0x280>)
 800bad6:	4883      	ldr	r0, [pc, #524]	; (800bce4 <etharp_find_entry+0x284>)
 800bad8:	f003 fd20 	bl	800f51c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00f      	beq.n	800bb02 <etharp_find_entry+0xa2>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6819      	ldr	r1, [r3, #0]
 800bae6:	7ffa      	ldrb	r2, [r7, #31]
 800bae8:	487b      	ldr	r0, [pc, #492]	; (800bcd8 <etharp_find_entry+0x278>)
 800baea:	4613      	mov	r3, r2
 800baec:	005b      	lsls	r3, r3, #1
 800baee:	4413      	add	r3, r2
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	4403      	add	r3, r0
 800baf4:	3304      	adds	r3, #4
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4299      	cmp	r1, r3
 800bafa:	d102      	bne.n	800bb02 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bafc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb00:	e0e5      	b.n	800bcce <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bb02:	7cfb      	ldrb	r3, [r7, #19]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d13b      	bne.n	800bb80 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bb08:	7ffa      	ldrb	r2, [r7, #31]
 800bb0a:	4973      	ldr	r1, [pc, #460]	; (800bcd8 <etharp_find_entry+0x278>)
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	4413      	add	r3, r2
 800bb12:	00db      	lsls	r3, r3, #3
 800bb14:	440b      	add	r3, r1
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d018      	beq.n	800bb4e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800bb1c:	7ffa      	ldrb	r2, [r7, #31]
 800bb1e:	496e      	ldr	r1, [pc, #440]	; (800bcd8 <etharp_find_entry+0x278>)
 800bb20:	4613      	mov	r3, r2
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	00db      	lsls	r3, r3, #3
 800bb28:	440b      	add	r3, r1
 800bb2a:	3312      	adds	r3, #18
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	8b3a      	ldrh	r2, [r7, #24]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d840      	bhi.n	800bbb6 <etharp_find_entry+0x156>
            old_queue = i;
 800bb34:	7ffb      	ldrb	r3, [r7, #31]
 800bb36:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800bb38:	7ffa      	ldrb	r2, [r7, #31]
 800bb3a:	4967      	ldr	r1, [pc, #412]	; (800bcd8 <etharp_find_entry+0x278>)
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	4413      	add	r3, r2
 800bb42:	00db      	lsls	r3, r3, #3
 800bb44:	440b      	add	r3, r1
 800bb46:	3312      	adds	r3, #18
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	833b      	strh	r3, [r7, #24]
 800bb4c:	e033      	b.n	800bbb6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bb4e:	7ffa      	ldrb	r2, [r7, #31]
 800bb50:	4961      	ldr	r1, [pc, #388]	; (800bcd8 <etharp_find_entry+0x278>)
 800bb52:	4613      	mov	r3, r2
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	4413      	add	r3, r2
 800bb58:	00db      	lsls	r3, r3, #3
 800bb5a:	440b      	add	r3, r1
 800bb5c:	3312      	adds	r3, #18
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	8afa      	ldrh	r2, [r7, #22]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d827      	bhi.n	800bbb6 <etharp_find_entry+0x156>
            old_pending = i;
 800bb66:	7ffb      	ldrb	r3, [r7, #31]
 800bb68:	773b      	strb	r3, [r7, #28]
            age_pending = arp_table[i].ctime;
 800bb6a:	7ffa      	ldrb	r2, [r7, #31]
 800bb6c:	495a      	ldr	r1, [pc, #360]	; (800bcd8 <etharp_find_entry+0x278>)
 800bb6e:	4613      	mov	r3, r2
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	4413      	add	r3, r2
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	440b      	add	r3, r1
 800bb78:	3312      	adds	r3, #18
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	82fb      	strh	r3, [r7, #22]
 800bb7e:	e01a      	b.n	800bbb6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bb80:	7cfb      	ldrb	r3, [r7, #19]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d917      	bls.n	800bbb6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bb86:	7ffa      	ldrb	r2, [r7, #31]
 800bb88:	4953      	ldr	r1, [pc, #332]	; (800bcd8 <etharp_find_entry+0x278>)
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	4413      	add	r3, r2
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	440b      	add	r3, r1
 800bb94:	3312      	adds	r3, #18
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	8aba      	ldrh	r2, [r7, #20]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d80b      	bhi.n	800bbb6 <etharp_find_entry+0x156>
            old_stable = i;
 800bb9e:	7ffb      	ldrb	r3, [r7, #31]
 800bba0:	777b      	strb	r3, [r7, #29]
            age_stable = arp_table[i].ctime;
 800bba2:	7ffa      	ldrb	r2, [r7, #31]
 800bba4:	494c      	ldr	r1, [pc, #304]	; (800bcd8 <etharp_find_entry+0x278>)
 800bba6:	4613      	mov	r3, r2
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	4413      	add	r3, r2
 800bbac:	00db      	lsls	r3, r3, #3
 800bbae:	440b      	add	r3, r1
 800bbb0:	3312      	adds	r3, #18
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbb6:	7ffb      	ldrb	r3, [r7, #31]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	77fb      	strb	r3, [r7, #31]
 800bbbc:	7ffb      	ldrb	r3, [r7, #31]
 800bbbe:	2b09      	cmp	r3, #9
 800bbc0:	f67f af68 	bls.w	800ba94 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	f003 0302 	and.w	r3, r3, #2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d108      	bne.n	800bbe0 <etharp_find_entry+0x180>
 800bbce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bbd2:	2b0a      	cmp	r3, #10
 800bbd4:	d107      	bne.n	800bbe6 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800bbe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbe4:	e073      	b.n	800bcce <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bbe6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bbea:	2b09      	cmp	r3, #9
 800bbec:	dc02      	bgt.n	800bbf4 <etharp_find_entry+0x194>
    i = empty;
 800bbee:	7fbb      	ldrb	r3, [r7, #30]
 800bbf0:	77fb      	strb	r3, [r7, #31]
 800bbf2:	e036      	b.n	800bc62 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bbf4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbf8:	2b09      	cmp	r3, #9
 800bbfa:	dc13      	bgt.n	800bc24 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800bbfc:	7f7b      	ldrb	r3, [r7, #29]
 800bbfe:	77fb      	strb	r3, [r7, #31]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bc00:	7ffa      	ldrb	r2, [r7, #31]
 800bc02:	4935      	ldr	r1, [pc, #212]	; (800bcd8 <etharp_find_entry+0x278>)
 800bc04:	4613      	mov	r3, r2
 800bc06:	005b      	lsls	r3, r3, #1
 800bc08:	4413      	add	r3, r2
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	440b      	add	r3, r1
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d018      	beq.n	800bc46 <etharp_find_entry+0x1e6>
 800bc14:	4b31      	ldr	r3, [pc, #196]	; (800bcdc <etharp_find_entry+0x27c>)
 800bc16:	f240 126f 	movw	r2, #367	; 0x16f
 800bc1a:	4933      	ldr	r1, [pc, #204]	; (800bce8 <etharp_find_entry+0x288>)
 800bc1c:	4831      	ldr	r0, [pc, #196]	; (800bce4 <etharp_find_entry+0x284>)
 800bc1e:	f003 fc7d 	bl	800f51c <iprintf>
 800bc22:	e010      	b.n	800bc46 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bc24:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bc28:	2b09      	cmp	r3, #9
 800bc2a:	dc02      	bgt.n	800bc32 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800bc2c:	7f3b      	ldrb	r3, [r7, #28]
 800bc2e:	77fb      	strb	r3, [r7, #31]
 800bc30:	e009      	b.n	800bc46 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bc32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bc36:	2b09      	cmp	r3, #9
 800bc38:	dc02      	bgt.n	800bc40 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bc3a:	7efb      	ldrb	r3, [r7, #27]
 800bc3c:	77fb      	strb	r3, [r7, #31]
 800bc3e:	e002      	b.n	800bc46 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800bc40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc44:	e043      	b.n	800bcce <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bc46:	7ffb      	ldrb	r3, [r7, #31]
 800bc48:	2b09      	cmp	r3, #9
 800bc4a:	d906      	bls.n	800bc5a <etharp_find_entry+0x1fa>
 800bc4c:	4b23      	ldr	r3, [pc, #140]	; (800bcdc <etharp_find_entry+0x27c>)
 800bc4e:	f240 1281 	movw	r2, #385	; 0x181
 800bc52:	4926      	ldr	r1, [pc, #152]	; (800bcec <etharp_find_entry+0x28c>)
 800bc54:	4823      	ldr	r0, [pc, #140]	; (800bce4 <etharp_find_entry+0x284>)
 800bc56:	f003 fc61 	bl	800f51c <iprintf>
    etharp_free_entry(i);
 800bc5a:	7ffb      	ldrb	r3, [r7, #31]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff fdf7 	bl	800b850 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bc62:	7ffb      	ldrb	r3, [r7, #31]
 800bc64:	2b09      	cmp	r3, #9
 800bc66:	d906      	bls.n	800bc76 <etharp_find_entry+0x216>
 800bc68:	4b1c      	ldr	r3, [pc, #112]	; (800bcdc <etharp_find_entry+0x27c>)
 800bc6a:	f240 1285 	movw	r2, #389	; 0x185
 800bc6e:	491f      	ldr	r1, [pc, #124]	; (800bcec <etharp_find_entry+0x28c>)
 800bc70:	481c      	ldr	r0, [pc, #112]	; (800bce4 <etharp_find_entry+0x284>)
 800bc72:	f003 fc53 	bl	800f51c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bc76:	7ffa      	ldrb	r2, [r7, #31]
 800bc78:	4917      	ldr	r1, [pc, #92]	; (800bcd8 <etharp_find_entry+0x278>)
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	4413      	add	r3, r2
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	440b      	add	r3, r1
 800bc84:	3314      	adds	r3, #20
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d006      	beq.n	800bc9a <etharp_find_entry+0x23a>
 800bc8c:	4b13      	ldr	r3, [pc, #76]	; (800bcdc <etharp_find_entry+0x27c>)
 800bc8e:	f240 1287 	movw	r2, #391	; 0x187
 800bc92:	4917      	ldr	r1, [pc, #92]	; (800bcf0 <etharp_find_entry+0x290>)
 800bc94:	4813      	ldr	r0, [pc, #76]	; (800bce4 <etharp_find_entry+0x284>)
 800bc96:	f003 fc41 	bl	800f51c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d00a      	beq.n	800bcb6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bca0:	7ffa      	ldrb	r2, [r7, #31]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6819      	ldr	r1, [r3, #0]
 800bca6:	480c      	ldr	r0, [pc, #48]	; (800bcd8 <etharp_find_entry+0x278>)
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	4403      	add	r3, r0
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bcb6:	7ffa      	ldrb	r2, [r7, #31]
 800bcb8:	4907      	ldr	r1, [pc, #28]	; (800bcd8 <etharp_find_entry+0x278>)
 800bcba:	4613      	mov	r3, r2
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	4413      	add	r3, r2
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	440b      	add	r3, r1
 800bcc4:	3312      	adds	r3, #18
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800bcca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3720      	adds	r7, #32
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	240000e4 	.word	0x240000e4
 800bcdc:	08011304 	.word	0x08011304
 800bce0:	0801133c 	.word	0x0801133c
 800bce4:	0801137c 	.word	0x0801137c
 800bce8:	080113a4 	.word	0x080113a4
 800bcec:	080113bc 	.word	0x080113bc
 800bcf0:	080113d0 	.word	0x080113d0

0800bcf4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b088      	sub	sp, #32
 800bcf8:	af02      	add	r7, sp, #8
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
 800bd00:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd08:	2b06      	cmp	r3, #6
 800bd0a:	d006      	beq.n	800bd1a <etharp_update_arp_entry+0x26>
 800bd0c:	4b48      	ldr	r3, [pc, #288]	; (800be30 <etharp_update_arp_entry+0x13c>)
 800bd0e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800bd12:	4948      	ldr	r1, [pc, #288]	; (800be34 <etharp_update_arp_entry+0x140>)
 800bd14:	4848      	ldr	r0, [pc, #288]	; (800be38 <etharp_update_arp_entry+0x144>)
 800bd16:	f003 fc01 	bl	800f51c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d012      	beq.n	800bd46 <etharp_update_arp_entry+0x52>
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00e      	beq.n	800bd46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68f9      	ldr	r1, [r7, #12]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f001 f8fe 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800bd34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d105      	bne.n	800bd46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bd42:	2be0      	cmp	r3, #224	; 0xe0
 800bd44:	d102      	bne.n	800bd4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bd46:	f06f 030f 	mvn.w	r3, #15
 800bd4a:	e06c      	b.n	800be26 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	4619      	mov	r1, r3
 800bd52:	68b8      	ldr	r0, [r7, #8]
 800bd54:	f7ff fe84 	bl	800ba60 <etharp_find_entry>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bd5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	da02      	bge.n	800bd6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bd64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd68:	e05d      	b.n	800be26 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bd6a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd6e:	4933      	ldr	r1, [pc, #204]	; (800be3c <etharp_update_arp_entry+0x148>)
 800bd70:	4613      	mov	r3, r2
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	4413      	add	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	440b      	add	r3, r1
 800bd7a:	3314      	adds	r3, #20
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bd80:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd84:	492d      	ldr	r1, [pc, #180]	; (800be3c <etharp_update_arp_entry+0x148>)
 800bd86:	4613      	mov	r3, r2
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	4413      	add	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	440b      	add	r3, r1
 800bd90:	3308      	adds	r3, #8
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800bd96:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	4413      	add	r3, r2
 800bda0:	00db      	lsls	r3, r3, #3
 800bda2:	3308      	adds	r3, #8
 800bda4:	4a25      	ldr	r2, [pc, #148]	; (800be3c <etharp_update_arp_entry+0x148>)
 800bda6:	4413      	add	r3, r2
 800bda8:	3304      	adds	r3, #4
 800bdaa:	2206      	movs	r2, #6
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f003 fba1 	bl	800f4f6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bdb4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bdb8:	4920      	ldr	r1, [pc, #128]	; (800be3c <etharp_update_arp_entry+0x148>)
 800bdba:	4613      	mov	r3, r2
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	440b      	add	r3, r1
 800bdc4:	3312      	adds	r3, #18
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bdca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bdce:	491b      	ldr	r1, [pc, #108]	; (800be3c <etharp_update_arp_entry+0x148>)
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	440b      	add	r3, r1
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d021      	beq.n	800be24 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bde0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bde4:	4915      	ldr	r1, [pc, #84]	; (800be3c <etharp_update_arp_entry+0x148>)
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bdf4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bdf8:	4910      	ldr	r1, [pc, #64]	; (800be3c <etharp_update_arp_entry+0x148>)
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	4413      	add	r3, r2
 800be00:	00db      	lsls	r3, r3, #3
 800be02:	440b      	add	r3, r1
 800be04:	2200      	movs	r2, #0
 800be06:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800be0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6939      	ldr	r1, [r7, #16]
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f001 ff2f 	bl	800dc7c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800be1e:	6938      	ldr	r0, [r7, #16]
 800be20:	f7fe fdb8 	bl	800a994 <pbuf_free>
  }
  return ERR_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	08011304 	.word	0x08011304
 800be34:	080113fc 	.word	0x080113fc
 800be38:	0801137c 	.word	0x0801137c
 800be3c:	240000e4 	.word	0x240000e4

0800be40 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be48:	2300      	movs	r3, #0
 800be4a:	73fb      	strb	r3, [r7, #15]
 800be4c:	e01f      	b.n	800be8e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800be4e:	7bfa      	ldrb	r2, [r7, #15]
 800be50:	4912      	ldr	r1, [pc, #72]	; (800be9c <etharp_cleanup_netif+0x5c>)
 800be52:	4613      	mov	r3, r2
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	4413      	add	r3, r2
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	440b      	add	r3, r1
 800be5c:	3314      	adds	r3, #20
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800be62:	7bbb      	ldrb	r3, [r7, #14]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00f      	beq.n	800be88 <etharp_cleanup_netif+0x48>
 800be68:	7bfa      	ldrb	r2, [r7, #15]
 800be6a:	490c      	ldr	r1, [pc, #48]	; (800be9c <etharp_cleanup_netif+0x5c>)
 800be6c:	4613      	mov	r3, r2
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	4413      	add	r3, r2
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	440b      	add	r3, r1
 800be76:	3308      	adds	r3, #8
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d103      	bne.n	800be88 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff fce4 	bl	800b850 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	3301      	adds	r3, #1
 800be8c:	73fb      	strb	r3, [r7, #15]
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
 800be90:	2b09      	cmp	r3, #9
 800be92:	d9dc      	bls.n	800be4e <etharp_cleanup_netif+0xe>
    }
  }
}
 800be94:	bf00      	nop
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	240000e4 	.word	0x240000e4

0800bea0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bea0:	b5b0      	push	{r4, r5, r7, lr}
 800bea2:	b08a      	sub	sp, #40	; 0x28
 800bea4:	af04      	add	r7, sp, #16
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d107      	bne.n	800bec0 <etharp_input+0x20>
 800beb0:	4b3d      	ldr	r3, [pc, #244]	; (800bfa8 <etharp_input+0x108>)
 800beb2:	f44f 7222 	mov.w	r2, #648	; 0x288
 800beb6:	493d      	ldr	r1, [pc, #244]	; (800bfac <etharp_input+0x10c>)
 800beb8:	483d      	ldr	r0, [pc, #244]	; (800bfb0 <etharp_input+0x110>)
 800beba:	f003 fb2f 	bl	800f51c <iprintf>
 800bebe:	e06f      	b.n	800bfa0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	881b      	ldrh	r3, [r3, #0]
 800beca:	b29b      	uxth	r3, r3
 800becc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bed0:	d10c      	bne.n	800beec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bed6:	2b06      	cmp	r3, #6
 800bed8:	d108      	bne.n	800beec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bede:	2b04      	cmp	r3, #4
 800bee0:	d104      	bne.n	800beec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	885b      	ldrh	r3, [r3, #2]
 800bee6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d003      	beq.n	800bef4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7fe fd51 	bl	800a994 <pbuf_free>
    return;
 800bef2:	e055      	b.n	800bfa0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	330e      	adds	r3, #14
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	3318      	adds	r3, #24
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	3304      	adds	r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d102      	bne.n	800bf14 <etharp_input+0x74>
    for_us = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	74fb      	strb	r3, [r7, #19]
 800bf12:	e009      	b.n	800bf28 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	bf0c      	ite	eq
 800bf20:	2301      	moveq	r3, #1
 800bf22:	2300      	movne	r3, #0
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	f103 0208 	add.w	r2, r3, #8
 800bf2e:	7cfb      	ldrb	r3, [r7, #19]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <etharp_input+0x98>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <etharp_input+0x9a>
 800bf38:	2302      	movs	r3, #2
 800bf3a:	f107 010c 	add.w	r1, r7, #12
 800bf3e:	6838      	ldr	r0, [r7, #0]
 800bf40:	f7ff fed8 	bl	800bcf4 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	88db      	ldrh	r3, [r3, #6]
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4e:	d003      	beq.n	800bf58 <etharp_input+0xb8>
 800bf50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf54:	d01e      	beq.n	800bf94 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800bf56:	e020      	b.n	800bf9a <etharp_input+0xfa>
    if (for_us) {
 800bf58:	7cfb      	ldrb	r3, [r7, #19]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d01c      	beq.n	800bf98 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	3208      	adds	r2, #8
      etharp_raw(netif,
 800bf78:	2102      	movs	r1, #2
 800bf7a:	9103      	str	r1, [sp, #12]
 800bf7c:	f107 010c 	add.w	r1, r7, #12
 800bf80:	9102      	str	r1, [sp, #8]
 800bf82:	9201      	str	r2, [sp, #4]
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	462b      	mov	r3, r5
 800bf88:	4622      	mov	r2, r4
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	6838      	ldr	r0, [r7, #0]
 800bf8e:	f000 fae3 	bl	800c558 <etharp_raw>
    break;
 800bf92:	e001      	b.n	800bf98 <etharp_input+0xf8>
    break;
 800bf94:	bf00      	nop
 800bf96:	e000      	b.n	800bf9a <etharp_input+0xfa>
    break;
 800bf98:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7fe fcfa 	bl	800a994 <pbuf_free>
}
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bdb0      	pop	{r4, r5, r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	08011304 	.word	0x08011304
 800bfac:	08011454 	.word	0x08011454
 800bfb0:	0801137c 	.word	0x0801137c

0800bfb4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af02      	add	r7, sp, #8
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bfc2:	79fa      	ldrb	r2, [r7, #7]
 800bfc4:	4944      	ldr	r1, [pc, #272]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	4413      	add	r3, r2
 800bfcc:	00db      	lsls	r3, r3, #3
 800bfce:	440b      	add	r3, r1
 800bfd0:	3314      	adds	r3, #20
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d806      	bhi.n	800bfe6 <etharp_output_to_arp_index+0x32>
 800bfd8:	4b40      	ldr	r3, [pc, #256]	; (800c0dc <etharp_output_to_arp_index+0x128>)
 800bfda:	f240 22ed 	movw	r2, #749	; 0x2ed
 800bfde:	4940      	ldr	r1, [pc, #256]	; (800c0e0 <etharp_output_to_arp_index+0x12c>)
 800bfe0:	4840      	ldr	r0, [pc, #256]	; (800c0e4 <etharp_output_to_arp_index+0x130>)
 800bfe2:	f003 fa9b 	bl	800f51c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bfe6:	79fa      	ldrb	r2, [r7, #7]
 800bfe8:	493b      	ldr	r1, [pc, #236]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800bfea:	4613      	mov	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4413      	add	r3, r2
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	440b      	add	r3, r1
 800bff4:	3314      	adds	r3, #20
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d153      	bne.n	800c0a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bffc:	79fa      	ldrb	r2, [r7, #7]
 800bffe:	4936      	ldr	r1, [pc, #216]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c000:	4613      	mov	r3, r2
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	4413      	add	r3, r2
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	440b      	add	r3, r1
 800c00a:	3312      	adds	r3, #18
 800c00c:	881b      	ldrh	r3, [r3, #0]
 800c00e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c012:	d919      	bls.n	800c048 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c014:	79fa      	ldrb	r2, [r7, #7]
 800c016:	4613      	mov	r3, r2
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	4413      	add	r3, r2
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	4a2e      	ldr	r2, [pc, #184]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c020:	4413      	add	r3, r2
 800c022:	3304      	adds	r3, #4
 800c024:	4619      	mov	r1, r3
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 fb44 	bl	800c6b4 <etharp_request>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d138      	bne.n	800c0a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c032:	79fa      	ldrb	r2, [r7, #7]
 800c034:	4928      	ldr	r1, [pc, #160]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c036:	4613      	mov	r3, r2
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	4413      	add	r3, r2
 800c03c:	00db      	lsls	r3, r3, #3
 800c03e:	440b      	add	r3, r1
 800c040:	3314      	adds	r3, #20
 800c042:	2203      	movs	r2, #3
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	e02d      	b.n	800c0a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c048:	79fa      	ldrb	r2, [r7, #7]
 800c04a:	4923      	ldr	r1, [pc, #140]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c04c:	4613      	mov	r3, r2
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	4413      	add	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	440b      	add	r3, r1
 800c056:	3312      	adds	r3, #18
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c05e:	d321      	bcc.n	800c0a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c060:	79fa      	ldrb	r2, [r7, #7]
 800c062:	4613      	mov	r3, r2
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	4413      	add	r3, r2
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	4a1b      	ldr	r2, [pc, #108]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c06c:	4413      	add	r3, r2
 800c06e:	1d19      	adds	r1, r3, #4
 800c070:	79fa      	ldrb	r2, [r7, #7]
 800c072:	4613      	mov	r3, r2
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	4413      	add	r3, r2
 800c078:	00db      	lsls	r3, r3, #3
 800c07a:	3308      	adds	r3, #8
 800c07c:	4a16      	ldr	r2, [pc, #88]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c07e:	4413      	add	r3, r2
 800c080:	3304      	adds	r3, #4
 800c082:	461a      	mov	r2, r3
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f000 faf3 	bl	800c670 <etharp_request_dst>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d109      	bne.n	800c0a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c090:	79fa      	ldrb	r2, [r7, #7]
 800c092:	4911      	ldr	r1, [pc, #68]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	440b      	add	r3, r1
 800c09e:	3314      	adds	r3, #20
 800c0a0:	2203      	movs	r2, #3
 800c0a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800c0aa:	79fa      	ldrb	r2, [r7, #7]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	3308      	adds	r3, #8
 800c0b6:	4a08      	ldr	r2, [pc, #32]	; (800c0d8 <etharp_output_to_arp_index+0x124>)
 800c0b8:	4413      	add	r3, r2
 800c0ba:	1d1a      	adds	r2, r3, #4
 800c0bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	460a      	mov	r2, r1
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f001 fdd7 	bl	800dc7c <ethernet_output>
 800c0ce:	4603      	mov	r3, r0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	240000e4 	.word	0x240000e4
 800c0dc:	08011304 	.word	0x08011304
 800c0e0:	08011474 	.word	0x08011474
 800c0e4:	0801137c 	.word	0x0801137c

0800c0e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08a      	sub	sp, #40	; 0x28
 800c0ec:	af02      	add	r7, sp, #8
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d106      	bne.n	800c10c <etharp_output+0x24>
 800c0fe:	4b69      	ldr	r3, [pc, #420]	; (800c2a4 <etharp_output+0x1bc>)
 800c100:	f240 321b 	movw	r2, #795	; 0x31b
 800c104:	4968      	ldr	r1, [pc, #416]	; (800c2a8 <etharp_output+0x1c0>)
 800c106:	4869      	ldr	r0, [pc, #420]	; (800c2ac <etharp_output+0x1c4>)
 800c108:	f003 fa08 	bl	800f51c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <etharp_output+0x38>
 800c112:	4b64      	ldr	r3, [pc, #400]	; (800c2a4 <etharp_output+0x1bc>)
 800c114:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c118:	4965      	ldr	r1, [pc, #404]	; (800c2b0 <etharp_output+0x1c8>)
 800c11a:	4864      	ldr	r0, [pc, #400]	; (800c2ac <etharp_output+0x1c4>)
 800c11c:	f003 f9fe 	bl	800f51c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d106      	bne.n	800c134 <etharp_output+0x4c>
 800c126:	4b5f      	ldr	r3, [pc, #380]	; (800c2a4 <etharp_output+0x1bc>)
 800c128:	f240 321d 	movw	r2, #797	; 0x31d
 800c12c:	4961      	ldr	r1, [pc, #388]	; (800c2b4 <etharp_output+0x1cc>)
 800c12e:	485f      	ldr	r0, [pc, #380]	; (800c2ac <etharp_output+0x1c4>)
 800c130:	f003 f9f4 	bl	800f51c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68f9      	ldr	r1, [r7, #12]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fef8 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d002      	beq.n	800c14c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c146:	4b5c      	ldr	r3, [pc, #368]	; (800c2b8 <etharp_output+0x1d0>)
 800c148:	61fb      	str	r3, [r7, #28]
 800c14a:	e09b      	b.n	800c284 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c154:	2be0      	cmp	r3, #224	; 0xe0
 800c156:	d118      	bne.n	800c18a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c158:	2301      	movs	r3, #1
 800c15a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c15c:	2300      	movs	r3, #0
 800c15e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c160:	235e      	movs	r3, #94	; 0x5e
 800c162:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	3301      	adds	r3, #1
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	3302      	adds	r3, #2
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3303      	adds	r3, #3
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c182:	f107 0310 	add.w	r3, r7, #16
 800c186:	61fb      	str	r3, [r7, #28]
 800c188:	e07c      	b.n	800c284 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3304      	adds	r3, #4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	405a      	eors	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3308      	adds	r3, #8
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4013      	ands	r3, r2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d012      	beq.n	800c1c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c1a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d00b      	beq.n	800c1c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	330c      	adds	r3, #12
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	330c      	adds	r3, #12
 800c1be:	61bb      	str	r3, [r7, #24]
 800c1c0:	e002      	b.n	800c1c8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c1c2:	f06f 0303 	mvn.w	r3, #3
 800c1c6:	e069      	b.n	800c29c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c1c8:	4b3c      	ldr	r3, [pc, #240]	; (800c2bc <etharp_output+0x1d4>)
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4a3c      	ldr	r2, [pc, #240]	; (800c2c0 <etharp_output+0x1d8>)
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	440b      	add	r3, r1
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	4413      	add	r3, r2
 800c1da:	3314      	adds	r3, #20
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d917      	bls.n	800c212 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	4b35      	ldr	r3, [pc, #212]	; (800c2bc <etharp_output+0x1d4>)
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	4934      	ldr	r1, [pc, #208]	; (800c2c0 <etharp_output+0x1d8>)
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	4403      	add	r3, r0
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	440b      	add	r3, r1
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d108      	bne.n	800c212 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c200:	4b2e      	ldr	r3, [pc, #184]	; (800c2bc <etharp_output+0x1d4>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	461a      	mov	r2, r3
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff fed3 	bl	800bfb4 <etharp_output_to_arp_index>
 800c20e:	4603      	mov	r3, r0
 800c210:	e044      	b.n	800c29c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c212:	2300      	movs	r3, #0
 800c214:	75fb      	strb	r3, [r7, #23]
 800c216:	e02a      	b.n	800c26e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c218:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c21c:	4928      	ldr	r1, [pc, #160]	; (800c2c0 <etharp_output+0x1d8>)
 800c21e:	4613      	mov	r3, r2
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	4413      	add	r3, r2
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	440b      	add	r3, r1
 800c228:	3314      	adds	r3, #20
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d918      	bls.n	800c262 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	6819      	ldr	r1, [r3, #0]
 800c234:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c238:	4821      	ldr	r0, [pc, #132]	; (800c2c0 <etharp_output+0x1d8>)
 800c23a:	4613      	mov	r3, r2
 800c23c:	005b      	lsls	r3, r3, #1
 800c23e:	4413      	add	r3, r2
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	4403      	add	r3, r0
 800c244:	3304      	adds	r3, #4
 800c246:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c248:	4299      	cmp	r1, r3
 800c24a:	d10a      	bne.n	800c262 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c24c:	7dfa      	ldrb	r2, [r7, #23]
 800c24e:	4b1b      	ldr	r3, [pc, #108]	; (800c2bc <etharp_output+0x1d4>)
 800c250:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	461a      	mov	r2, r3
 800c256:	68b9      	ldr	r1, [r7, #8]
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f7ff feab 	bl	800bfb4 <etharp_output_to_arp_index>
 800c25e:	4603      	mov	r3, r0
 800c260:	e01c      	b.n	800c29c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c262:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c266:	b2db      	uxtb	r3, r3
 800c268:	3301      	adds	r3, #1
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	75fb      	strb	r3, [r7, #23]
 800c26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c272:	2b09      	cmp	r3, #9
 800c274:	ddd0      	ble.n	800c218 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	69b9      	ldr	r1, [r7, #24]
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f000 f822 	bl	800c2c4 <etharp_query>
 800c280:	4603      	mov	r3, r0
 800c282:	e00b      	b.n	800c29c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c28a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	68b9      	ldr	r1, [r7, #8]
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f001 fcf1 	bl	800dc7c <ethernet_output>
 800c29a:	4603      	mov	r3, r0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3720      	adds	r7, #32
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	08011304 	.word	0x08011304
 800c2a8:	08011454 	.word	0x08011454
 800c2ac:	0801137c 	.word	0x0801137c
 800c2b0:	080114a4 	.word	0x080114a4
 800c2b4:	08011444 	.word	0x08011444
 800c2b8:	08011aa8 	.word	0x08011aa8
 800c2bc:	240001d4 	.word	0x240001d4
 800c2c0:	240000e4 	.word	0x240000e4

0800c2c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08c      	sub	sp, #48	; 0x30
 800c2c8:	af02      	add	r7, sp, #8
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3329      	adds	r3, #41	; 0x29
 800c2d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c2d6:	23ff      	movs	r3, #255	; 0xff
 800c2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68f9      	ldr	r1, [r7, #12]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 fe22 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10c      	bne.n	800c30c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2fa:	2be0      	cmp	r3, #224	; 0xe0
 800c2fc:	d006      	beq.n	800c30c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d003      	beq.n	800c30c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c30c:	f06f 030f 	mvn.w	r3, #15
 800c310:	e10f      	b.n	800c532 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	2101      	movs	r1, #1
 800c316:	68b8      	ldr	r0, [r7, #8]
 800c318:	f7ff fba2 	bl	800ba60 <etharp_find_entry>
 800c31c:	4603      	mov	r3, r0
 800c31e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c320:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c324:	2b00      	cmp	r3, #0
 800c326:	da02      	bge.n	800c32e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c32c:	e101      	b.n	800c532 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c32e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c332:	4982      	ldr	r1, [pc, #520]	; (800c53c <etharp_query+0x278>)
 800c334:	4613      	mov	r3, r2
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	4413      	add	r3, r2
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	440b      	add	r3, r1
 800c33e:	3314      	adds	r3, #20
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d117      	bne.n	800c376 <etharp_query+0xb2>
    is_new_entry = 1;
 800c346:	2301      	movs	r3, #1
 800c348:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c34a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c34e:	497b      	ldr	r1, [pc, #492]	; (800c53c <etharp_query+0x278>)
 800c350:	4613      	mov	r3, r2
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	4413      	add	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	440b      	add	r3, r1
 800c35a:	3314      	adds	r3, #20
 800c35c:	2201      	movs	r2, #1
 800c35e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c360:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c364:	4975      	ldr	r1, [pc, #468]	; (800c53c <etharp_query+0x278>)
 800c366:	4613      	mov	r3, r2
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	4413      	add	r3, r2
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	440b      	add	r3, r1
 800c370:	3308      	adds	r3, #8
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c376:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c37a:	4970      	ldr	r1, [pc, #448]	; (800c53c <etharp_query+0x278>)
 800c37c:	4613      	mov	r3, r2
 800c37e:	005b      	lsls	r3, r3, #1
 800c380:	4413      	add	r3, r2
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	440b      	add	r3, r1
 800c386:	3314      	adds	r3, #20
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d012      	beq.n	800c3b4 <etharp_query+0xf0>
 800c38e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c392:	496a      	ldr	r1, [pc, #424]	; (800c53c <etharp_query+0x278>)
 800c394:	4613      	mov	r3, r2
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	4413      	add	r3, r2
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	440b      	add	r3, r1
 800c39e:	3314      	adds	r3, #20
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d806      	bhi.n	800c3b4 <etharp_query+0xf0>
 800c3a6:	4b66      	ldr	r3, [pc, #408]	; (800c540 <etharp_query+0x27c>)
 800c3a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c3ac:	4965      	ldr	r1, [pc, #404]	; (800c544 <etharp_query+0x280>)
 800c3ae:	4866      	ldr	r0, [pc, #408]	; (800c548 <etharp_query+0x284>)
 800c3b0:	f003 f8b4 	bl	800f51c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d102      	bne.n	800c3c0 <etharp_query+0xfc>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10c      	bne.n	800c3da <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c3c0:	68b9      	ldr	r1, [r7, #8]
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 f976 	bl	800c6b4 <etharp_request>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <etharp_query+0x116>
      return result;
 800c3d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3d8:	e0ab      	b.n	800c532 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <etharp_query+0x12a>
 800c3e0:	4b57      	ldr	r3, [pc, #348]	; (800c540 <etharp_query+0x27c>)
 800c3e2:	f240 32db 	movw	r2, #987	; 0x3db
 800c3e6:	4959      	ldr	r1, [pc, #356]	; (800c54c <etharp_query+0x288>)
 800c3e8:	4857      	ldr	r0, [pc, #348]	; (800c548 <etharp_query+0x284>)
 800c3ea:	f003 f897 	bl	800f51c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c3ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3f2:	4952      	ldr	r1, [pc, #328]	; (800c53c <etharp_query+0x278>)
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	4413      	add	r3, r2
 800c3fa:	00db      	lsls	r3, r3, #3
 800c3fc:	440b      	add	r3, r1
 800c3fe:	3314      	adds	r3, #20
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d919      	bls.n	800c43a <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c406:	7cfa      	ldrb	r2, [r7, #19]
 800c408:	4b51      	ldr	r3, [pc, #324]	; (800c550 <etharp_query+0x28c>)
 800c40a:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c40c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c410:	4613      	mov	r3, r2
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	4413      	add	r3, r2
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	3308      	adds	r3, #8
 800c41a:	4a48      	ldr	r2, [pc, #288]	; (800c53c <etharp_query+0x278>)
 800c41c:	4413      	add	r3, r2
 800c41e:	1d1a      	adds	r2, r3, #4
 800c420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	4613      	mov	r3, r2
 800c428:	697a      	ldr	r2, [r7, #20]
 800c42a:	6879      	ldr	r1, [r7, #4]
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f001 fc25 	bl	800dc7c <ethernet_output>
 800c432:	4603      	mov	r3, r0
 800c434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c438:	e079      	b.n	800c52e <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c43a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c43e:	493f      	ldr	r1, [pc, #252]	; (800c53c <etharp_query+0x278>)
 800c440:	4613      	mov	r3, r2
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	4413      	add	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	440b      	add	r3, r1
 800c44a:	3314      	adds	r3, #20
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d16d      	bne.n	800c52e <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c45a:	e01a      	b.n	800c492 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	895a      	ldrh	r2, [r3, #10]
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	891b      	ldrh	r3, [r3, #8]
 800c464:	429a      	cmp	r2, r3
 800c466:	d10a      	bne.n	800c47e <etharp_query+0x1ba>
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d006      	beq.n	800c47e <etharp_query+0x1ba>
 800c470:	4b33      	ldr	r3, [pc, #204]	; (800c540 <etharp_query+0x27c>)
 800c472:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c476:	4937      	ldr	r1, [pc, #220]	; (800c554 <etharp_query+0x290>)
 800c478:	4833      	ldr	r0, [pc, #204]	; (800c548 <etharp_query+0x284>)
 800c47a:	f003 f84f 	bl	800f51c <iprintf>
      if (p->type != PBUF_ROM) {
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	7b1b      	ldrb	r3, [r3, #12]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d002      	beq.n	800c48c <etharp_query+0x1c8>
        copy_needed = 1;
 800c486:	2301      	movs	r3, #1
 800c488:	61bb      	str	r3, [r7, #24]
        break;
 800c48a:	e005      	b.n	800c498 <etharp_query+0x1d4>
      }
      p = p->next;
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e1      	bne.n	800c45c <etharp_query+0x198>
    }
    if (copy_needed) {
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d017      	beq.n	800c4ce <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	891b      	ldrh	r3, [r3, #8]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	2002      	movs	r0, #2
 800c4a8:	f7fd ff06 	bl	800a2b8 <pbuf_alloc>
 800c4ac:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d011      	beq.n	800c4d8 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c4b4:	6879      	ldr	r1, [r7, #4]
 800c4b6:	69f8      	ldr	r0, [r7, #28]
 800c4b8:	f7fe fba0 	bl	800abfc <pbuf_copy>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00a      	beq.n	800c4d8 <etharp_query+0x214>
          pbuf_free(p);
 800c4c2:	69f8      	ldr	r0, [r7, #28]
 800c4c4:	f7fe fa66 	bl	800a994 <pbuf_free>
          p = NULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61fb      	str	r3, [r7, #28]
 800c4cc:	e004      	b.n	800c4d8 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c4d2:	69f8      	ldr	r0, [r7, #28]
 800c4d4:	f7fe fb0a 	bl	800aaec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d024      	beq.n	800c528 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c4de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c4e2:	4916      	ldr	r1, [pc, #88]	; (800c53c <etharp_query+0x278>)
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	4413      	add	r3, r2
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	440b      	add	r3, r1
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00b      	beq.n	800c50c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c4f4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c4f8:	4910      	ldr	r1, [pc, #64]	; (800c53c <etharp_query+0x278>)
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	4413      	add	r3, r2
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	440b      	add	r3, r1
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fa44 	bl	800a994 <pbuf_free>
      }
      arp_table[i].q = p;
 800c50c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c510:	490a      	ldr	r1, [pc, #40]	; (800c53c <etharp_query+0x278>)
 800c512:	4613      	mov	r3, r2
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	4413      	add	r3, r2
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	440b      	add	r3, r1
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c526:	e002      	b.n	800c52e <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c528:	23ff      	movs	r3, #255	; 0xff
 800c52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c52e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c532:	4618      	mov	r0, r3
 800c534:	3728      	adds	r7, #40	; 0x28
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	240000e4 	.word	0x240000e4
 800c540:	08011304 	.word	0x08011304
 800c544:	080114b0 	.word	0x080114b0
 800c548:	0801137c 	.word	0x0801137c
 800c54c:	080114a4 	.word	0x080114a4
 800c550:	240001d4 	.word	0x240001d4
 800c554:	080114d8 	.word	0x080114d8

0800c558 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08a      	sub	sp, #40	; 0x28
 800c55c:	af02      	add	r7, sp, #8
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c566:	2300      	movs	r3, #0
 800c568:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d106      	bne.n	800c57e <etharp_raw+0x26>
 800c570:	4b3a      	ldr	r3, [pc, #232]	; (800c65c <etharp_raw+0x104>)
 800c572:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c576:	493a      	ldr	r1, [pc, #232]	; (800c660 <etharp_raw+0x108>)
 800c578:	483a      	ldr	r0, [pc, #232]	; (800c664 <etharp_raw+0x10c>)
 800c57a:	f002 ffcf 	bl	800f51c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c57e:	2200      	movs	r2, #0
 800c580:	211c      	movs	r1, #28
 800c582:	2002      	movs	r0, #2
 800c584:	f7fd fe98 	bl	800a2b8 <pbuf_alloc>
 800c588:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d102      	bne.n	800c596 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c594:	e05d      	b.n	800c652 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	895b      	ldrh	r3, [r3, #10]
 800c59a:	2b1b      	cmp	r3, #27
 800c59c:	d806      	bhi.n	800c5ac <etharp_raw+0x54>
 800c59e:	4b2f      	ldr	r3, [pc, #188]	; (800c65c <etharp_raw+0x104>)
 800c5a0:	f240 4264 	movw	r2, #1124	; 0x464
 800c5a4:	4930      	ldr	r1, [pc, #192]	; (800c668 <etharp_raw+0x110>)
 800c5a6:	482f      	ldr	r0, [pc, #188]	; (800c664 <etharp_raw+0x10c>)
 800c5a8:	f002 ffb8 	bl	800f51c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c5b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fc ffc5 	bl	8009544 <lwip_htons>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	461a      	mov	r2, r3
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c8:	2b06      	cmp	r3, #6
 800c5ca:	d006      	beq.n	800c5da <etharp_raw+0x82>
 800c5cc:	4b23      	ldr	r3, [pc, #140]	; (800c65c <etharp_raw+0x104>)
 800c5ce:	f240 426b 	movw	r2, #1131	; 0x46b
 800c5d2:	4926      	ldr	r1, [pc, #152]	; (800c66c <etharp_raw+0x114>)
 800c5d4:	4823      	ldr	r0, [pc, #140]	; (800c664 <etharp_raw+0x10c>)
 800c5d6:	f002 ffa1 	bl	800f51c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	3308      	adds	r3, #8
 800c5de:	2206      	movs	r2, #6
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f002 ff87 	bl	800f4f6 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	3312      	adds	r3, #18
 800c5ec:	2206      	movs	r2, #6
 800c5ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f002 ff80 	bl	800f4f6 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	330e      	adds	r3, #14
 800c5fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5fc:	6812      	ldr	r2, [r2, #0]
 800c5fe:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	3318      	adds	r3, #24
 800c604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c606:	6812      	ldr	r2, [r2, #0]
 800c608:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	2200      	movs	r2, #0
 800c60e:	701a      	strb	r2, [r3, #0]
 800c610:	2200      	movs	r2, #0
 800c612:	f042 0201 	orr.w	r2, r2, #1
 800c616:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f042 0208 	orr.w	r2, r2, #8
 800c620:	709a      	strb	r2, [r3, #2]
 800c622:	2200      	movs	r2, #0
 800c624:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2206      	movs	r2, #6
 800c62a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2204      	movs	r2, #4
 800c630:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c632:	f640 0306 	movw	r3, #2054	; 0x806
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	69b9      	ldr	r1, [r7, #24]
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f001 fb1c 	bl	800dc7c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c644:	69b8      	ldr	r0, [r7, #24]
 800c646:	f7fe f9a5 	bl	800a994 <pbuf_free>
  p = NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c64e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3720      	adds	r7, #32
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	08011304 	.word	0x08011304
 800c660:	08011454 	.word	0x08011454
 800c664:	0801137c 	.word	0x0801137c
 800c668:	080114f4 	.word	0x080114f4
 800c66c:	08011528 	.word	0x08011528

0800c670 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b088      	sub	sp, #32
 800c674:	af04      	add	r7, sp, #16
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c68c:	2201      	movs	r2, #1
 800c68e:	9203      	str	r2, [sp, #12]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	9202      	str	r2, [sp, #8]
 800c694:	4a06      	ldr	r2, [pc, #24]	; (800c6b0 <etharp_request_dst+0x40>)
 800c696:	9201      	str	r2, [sp, #4]
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	4603      	mov	r3, r0
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff ff5a 	bl	800c558 <etharp_raw>
 800c6a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	08011ab0 	.word	0x08011ab0

0800c6b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c6be:	4a05      	ldr	r2, [pc, #20]	; (800c6d4 <etharp_request+0x20>)
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff ffd4 	bl	800c670 <etharp_request_dst>
 800c6c8:	4603      	mov	r3, r0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	08011aa8 	.word	0x08011aa8

0800c6d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08e      	sub	sp, #56	; 0x38
 800c6dc:	af04      	add	r7, sp, #16
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c6e2:	4b8a      	ldr	r3, [pc, #552]	; (800c90c <icmp_input+0x234>)
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	f003 030f 	and.w	r3, r3, #15
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c6f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6fa:	2b13      	cmp	r3, #19
 800c6fc:	f240 80f1 	bls.w	800c8e2 <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	895b      	ldrh	r3, [r3, #10]
 800c704:	2b03      	cmp	r3, #3
 800c706:	f240 80ee 	bls.w	800c8e6 <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	785b      	ldrb	r3, [r3, #1]
 800c71a:	f887 3020 	strb.w	r3, [r7, #32]
#endif /* LWIP_DEBUG */
  switch (type) {
 800c71e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 80d6 	beq.w	800c8d4 <icmp_input+0x1fc>
 800c728:	2b08      	cmp	r3, #8
 800c72a:	f040 80d6 	bne.w	800c8da <icmp_input+0x202>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c72e:	4b78      	ldr	r3, [pc, #480]	; (800c910 <icmp_input+0x238>)
 800c730:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c732:	4b76      	ldr	r3, [pc, #472]	; (800c90c <icmp_input+0x234>)
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c73a:	2be0      	cmp	r3, #224	; 0xe0
 800c73c:	f000 80da 	beq.w	800c8f4 <icmp_input+0x21c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c740:	4b72      	ldr	r3, [pc, #456]	; (800c90c <icmp_input+0x234>)
 800c742:	695a      	ldr	r2, [r3, #20]
 800c744:	4b71      	ldr	r3, [pc, #452]	; (800c90c <icmp_input+0x234>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f000 fbf0 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	f040 80d0 	bne.w	800c8f8 <icmp_input+0x220>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	891b      	ldrh	r3, [r3, #8]
 800c75c:	2b07      	cmp	r3, #7
 800c75e:	f240 80c4 	bls.w	800c8ea <icmp_input+0x212>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7fc ff6b 	bl	800963e <inet_chksum_pbuf>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d003      	beq.n	800c776 <icmp_input+0x9e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7fe f910 	bl	800a994 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
        MIB2_STATS_INC(mib2.icmpinerrors);
        return;
 800c774:	e0c7      	b.n	800c906 <icmp_input+0x22e>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c778:	330e      	adds	r3, #14
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	b21b      	sxth	r3, r3
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7fe f8e3 	bl	800a94c <pbuf_header>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d046      	beq.n	800c81a <icmp_input+0x142>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	891a      	ldrh	r2, [r3, #8]
 800c790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c792:	4413      	add	r3, r2
 800c794:	b29b      	uxth	r3, r3
 800c796:	2200      	movs	r2, #0
 800c798:	4619      	mov	r1, r3
 800c79a:	2002      	movs	r0, #2
 800c79c:	f7fd fd8c 	bl	800a2b8 <pbuf_alloc>
 800c7a0:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 80a9 	beq.w	800c8fc <icmp_input+0x224>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	895b      	ldrh	r3, [r3, #10]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d203      	bcs.n	800c7c0 <icmp_input+0xe8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c7b8:	69b8      	ldr	r0, [r7, #24]
 800c7ba:	f7fe f8eb 	bl	800a994 <pbuf_free>
        goto icmperr;
 800c7be:	e09e      	b.n	800c8fe <icmp_input+0x226>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f002 fe94 	bl	800f4f6 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c7ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7d0:	425b      	negs	r3, r3
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	b21b      	sxth	r3, r3
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	69b8      	ldr	r0, [r7, #24]
 800c7da:	f7fe f8b7 	bl	800a94c <pbuf_header>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d009      	beq.n	800c7f8 <icmp_input+0x120>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c7e4:	4b4b      	ldr	r3, [pc, #300]	; (800c914 <icmp_input+0x23c>)
 800c7e6:	22af      	movs	r2, #175	; 0xaf
 800c7e8:	494b      	ldr	r1, [pc, #300]	; (800c918 <icmp_input+0x240>)
 800c7ea:	484c      	ldr	r0, [pc, #304]	; (800c91c <icmp_input+0x244>)
 800c7ec:	f002 fe96 	bl	800f51c <iprintf>
        pbuf_free(r);
 800c7f0:	69b8      	ldr	r0, [r7, #24]
 800c7f2:	f7fe f8cf 	bl	800a994 <pbuf_free>
        goto icmperr;
 800c7f6:	e082      	b.n	800c8fe <icmp_input+0x226>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c7f8:	6879      	ldr	r1, [r7, #4]
 800c7fa:	69b8      	ldr	r0, [r7, #24]
 800c7fc:	f7fe f9fe 	bl	800abfc <pbuf_copy>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <icmp_input+0x136>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c806:	69b8      	ldr	r0, [r7, #24]
 800c808:	f7fe f8c4 	bl	800a994 <pbuf_free>
        goto icmperr;
 800c80c:	e077      	b.n	800c8fe <icmp_input+0x226>
      }
      /* free the original p */
      pbuf_free(p);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7fe f8c0 	bl	800a994 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	607b      	str	r3, [r7, #4]
 800c818:	e015      	b.n	800c846 <icmp_input+0x16e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c81a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c81c:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c820:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c824:	33f2      	adds	r3, #242	; 0xf2
 800c826:	b29b      	uxth	r3, r3
 800c828:	b21b      	sxth	r3, r3
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7fe f88d 	bl	800a94c <pbuf_header>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d006      	beq.n	800c846 <icmp_input+0x16e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c838:	4b36      	ldr	r3, [pc, #216]	; (800c914 <icmp_input+0x23c>)
 800c83a:	22c0      	movs	r2, #192	; 0xc0
 800c83c:	4938      	ldr	r1, [pc, #224]	; (800c920 <icmp_input+0x248>)
 800c83e:	4837      	ldr	r0, [pc, #220]	; (800c91c <icmp_input+0x244>)
 800c840:	f002 fe6c 	bl	800f51c <iprintf>
        goto icmperr;
 800c844:	e05b      	b.n	800c8fe <icmp_input+0x226>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c84c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7fe f87a 	bl	800a94c <pbuf_header>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d13c      	bne.n	800c8d8 <icmp_input+0x200>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c86c:	4b27      	ldr	r3, [pc, #156]	; (800c90c <icmp_input+0x234>)
 800c86e:	691a      	ldr	r2, [r3, #16]
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2200      	movs	r2, #0
 800c878:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	885b      	ldrh	r3, [r3, #2]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c884:	4293      	cmp	r3, r2
 800c886:	d907      	bls.n	800c898 <icmp_input+0x1c0>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	885b      	ldrh	r3, [r3, #2]
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	3309      	adds	r3, #9
 800c890:	b29a      	uxth	r2, r3
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	805a      	strh	r2, [r3, #2]
 800c896:	e006      	b.n	800c8a6 <icmp_input+0x1ce>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	885b      	ldrh	r3, [r3, #2]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3308      	adds	r3, #8
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	22ff      	movs	r2, #255	; 0xff
 800c8aa:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	729a      	strb	r2, [r3, #10]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	9302      	str	r3, [sp, #8]
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	2300      	movs	r3, #0
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	23ff      	movs	r3, #255	; 0xff
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	69f9      	ldr	r1, [r7, #28]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fa5f 	bl	800cd8c <ip4_output_if>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c8d2:	e001      	b.n	800c8d8 <icmp_input+0x200>
    break;
 800c8d4:	bf00      	nop
 800c8d6:	e000      	b.n	800c8da <icmp_input+0x202>
    break;
 800c8d8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7fe f85a 	bl	800a994 <pbuf_free>
  return;
 800c8e0:	e011      	b.n	800c906 <icmp_input+0x22e>
    goto lenerr;
 800c8e2:	bf00      	nop
 800c8e4:	e002      	b.n	800c8ec <icmp_input+0x214>
    goto lenerr;
 800c8e6:	bf00      	nop
 800c8e8:	e000      	b.n	800c8ec <icmp_input+0x214>
      goto lenerr;
 800c8ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7fe f851 	bl	800a994 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c8f2:	e008      	b.n	800c906 <icmp_input+0x22e>
      goto icmperr;
 800c8f4:	bf00      	nop
 800c8f6:	e002      	b.n	800c8fe <icmp_input+0x226>
      goto icmperr;
 800c8f8:	bf00      	nop
 800c8fa:	e000      	b.n	800c8fe <icmp_input+0x226>
        goto icmperr;
 800c8fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7fe f848 	bl	800a994 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c904:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c906:	3728      	adds	r7, #40	; 0x28
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	240001f8 	.word	0x240001f8
 800c910:	2400020c 	.word	0x2400020c
 800c914:	0801156c 	.word	0x0801156c
 800c918:	080115a4 	.word	0x080115a4
 800c91c:	080115dc 	.word	0x080115dc
 800c920:	08011604 	.word	0x08011604

0800c924 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	461a      	mov	r2, r3
 800c934:	2103      	movs	r1, #3
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f814 	bl	800c964 <icmp_send_response>
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	461a      	mov	r2, r3
 800c954:	210b      	movs	r1, #11
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f804 	bl	800c964 <icmp_send_response>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08c      	sub	sp, #48	; 0x30
 800c968:	af04      	add	r7, sp, #16
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
 800c970:	4613      	mov	r3, r2
 800c972:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c974:	2200      	movs	r2, #0
 800c976:	2124      	movs	r1, #36	; 0x24
 800c978:	2001      	movs	r0, #1
 800c97a:	f7fd fc9d 	bl	800a2b8 <pbuf_alloc>
 800c97e:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d056      	beq.n	800ca34 <icmp_send_response+0xd0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	895b      	ldrh	r3, [r3, #10]
 800c98a:	2b23      	cmp	r3, #35	; 0x23
 800c98c:	d806      	bhi.n	800c99c <icmp_send_response+0x38>
 800c98e:	4b2b      	ldr	r3, [pc, #172]	; (800ca3c <icmp_send_response+0xd8>)
 800c990:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c994:	492a      	ldr	r1, [pc, #168]	; (800ca40 <icmp_send_response+0xdc>)
 800c996:	482b      	ldr	r0, [pc, #172]	; (800ca44 <icmp_send_response+0xe0>)
 800c998:	f002 fdc0 	bl	800f51c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	78fa      	ldrb	r2, [r7, #3]
 800c9ac:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	78ba      	ldrb	r2, [r7, #2]
 800c9b2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	711a      	strb	r2, [r3, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	719a      	strb	r2, [r3, #6]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	f103 0008 	add.w	r0, r3, #8
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	221c      	movs	r2, #28
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	f002 fd8d 	bl	800f4f6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c9e2:	f107 030c 	add.w	r3, r7, #12
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 f82e 	bl	800ca48 <ip4_route>
 800c9ec:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01b      	beq.n	800ca2c <icmp_send_response+0xc8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	709a      	strb	r2, [r3, #2]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	895b      	ldrh	r3, [r3, #10]
 800ca02:	4619      	mov	r1, r3
 800ca04:	6938      	ldr	r0, [r7, #16]
 800ca06:	f7fc fe08 	bl	800961a <inet_chksum>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ca12:	f107 020c 	add.w	r2, r7, #12
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	9302      	str	r3, [sp, #8]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	9301      	str	r3, [sp, #4]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	23ff      	movs	r3, #255	; 0xff
 800ca24:	2100      	movs	r1, #0
 800ca26:	69b8      	ldr	r0, [r7, #24]
 800ca28:	f000 f9b0 	bl	800cd8c <ip4_output_if>
  }
  pbuf_free(q);
 800ca2c:	69b8      	ldr	r0, [r7, #24]
 800ca2e:	f7fd ffb1 	bl	800a994 <pbuf_free>
 800ca32:	e000      	b.n	800ca36 <icmp_send_response+0xd2>
    return;
 800ca34:	bf00      	nop
}
 800ca36:	3720      	adds	r7, #32
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	0801156c 	.word	0x0801156c
 800ca40:	08011638 	.word	0x08011638
 800ca44:	080115dc 	.word	0x080115dc

0800ca48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ca50:	4b30      	ldr	r3, [pc, #192]	; (800cb14 <ip4_route+0xcc>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	e036      	b.n	800cac6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d02b      	beq.n	800cac0 <ip4_route+0x78>
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca6e:	089b      	lsrs	r3, r3, #2
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d022      	beq.n	800cac0 <ip4_route+0x78>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d01d      	beq.n	800cac0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	405a      	eors	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3308      	adds	r3, #8
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4013      	ands	r3, r2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	e033      	b.n	800cb08 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caa6:	f003 0302 	and.w	r3, r3, #2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d108      	bne.n	800cac0 <ip4_route+0x78>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	330c      	adds	r3, #12
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d101      	bne.n	800cac0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	e023      	b.n	800cb08 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1c5      	bne.n	800ca58 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cacc:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <ip4_route+0xd0>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d015      	beq.n	800cb00 <ip4_route+0xb8>
 800cad4:	4b10      	ldr	r3, [pc, #64]	; (800cb18 <ip4_route+0xd0>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cadc:	f003 0301 	and.w	r3, r3, #1
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00d      	beq.n	800cb00 <ip4_route+0xb8>
 800cae4:	4b0c      	ldr	r3, [pc, #48]	; (800cb18 <ip4_route+0xd0>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caec:	f003 0304 	and.w	r3, r3, #4
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d005      	beq.n	800cb00 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800caf4:	4b08      	ldr	r3, [pc, #32]	; (800cb18 <ip4_route+0xd0>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	3304      	adds	r3, #4
 800cafa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d101      	bne.n	800cb04 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	e001      	b.n	800cb08 <ip4_route+0xc0>
  }

  return netif_default;
 800cb04:	4b04      	ldr	r3, [pc, #16]	; (800cb18 <ip4_route+0xd0>)
 800cb06:	681b      	ldr	r3, [r3, #0]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr
 800cb14:	24003670 	.word	0x24003670
 800cb18:	24003674 	.word	0x24003674

0800cb1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	60fb      	str	r3, [r7, #12]
  if (IPH_V(iphdr) != 4) {
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	091b      	lsrs	r3, r3, #4
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	2b04      	cmp	r3, #4
 800cb36:	d004      	beq.n	800cb42 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7fd ff2b 	bl	800a994 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	e11c      	b.n	800cd7c <ip4_input+0x260>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f003 030f 	and.w	r3, r3, #15
 800cb4c:	813b      	strh	r3, [r7, #8]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800cb4e:	893b      	ldrh	r3, [r7, #8]
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	813b      	strh	r3, [r7, #8]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	885b      	ldrh	r3, [r3, #2]
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fc fcf2 	bl	8009544 <lwip_htons>
 800cb60:	4603      	mov	r3, r0
 800cb62:	817b      	strh	r3, [r7, #10]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	891b      	ldrh	r3, [r3, #8]
 800cb68:	897a      	ldrh	r2, [r7, #10]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d204      	bcs.n	800cb78 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800cb6e:	897b      	ldrh	r3, [r7, #10]
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7fd fd9a 	bl	800a6ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	895b      	ldrh	r3, [r3, #10]
 800cb7c:	893a      	ldrh	r2, [r7, #8]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d807      	bhi.n	800cb92 <ip4_input+0x76>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	891b      	ldrh	r3, [r3, #8]
 800cb86:	897a      	ldrh	r2, [r7, #10]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d802      	bhi.n	800cb92 <ip4_input+0x76>
 800cb8c:	893b      	ldrh	r3, [r7, #8]
 800cb8e:	2b13      	cmp	r3, #19
 800cb90:	d804      	bhi.n	800cb9c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7fd fefe 	bl	800a994 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	e0ef      	b.n	800cd7c <ip4_input+0x260>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	4a78      	ldr	r2, [pc, #480]	; (800cd84 <ip4_input+0x268>)
 800cba2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	4a76      	ldr	r2, [pc, #472]	; (800cd84 <ip4_input+0x268>)
 800cbaa:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cbac:	4b75      	ldr	r3, [pc, #468]	; (800cd84 <ip4_input+0x268>)
 800cbae:	695b      	ldr	r3, [r3, #20]
 800cbb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbb4:	2be0      	cmp	r3, #224	; 0xe0
 800cbb6:	d112      	bne.n	800cbde <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbbe:	f003 0301 	and.w	r3, r3, #1
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d007      	beq.n	800cbd8 <ip4_input+0xbc>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	3304      	adds	r3, #4
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <ip4_input+0xbc>
      netif = inp;
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	613b      	str	r3, [r7, #16]
 800cbd6:	e043      	b.n	800cc60 <ip4_input+0x144>
    } else {
      netif = NULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	e040      	b.n	800cc60 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	617b      	str	r3, [r7, #20]
    netif = inp;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d014      	beq.n	800cc20 <ip4_input+0x104>
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00f      	beq.n	800cc20 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc00:	4b60      	ldr	r3, [pc, #384]	; (800cd84 <ip4_input+0x268>)
 800cc02:	695a      	ldr	r2, [r3, #20]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	3304      	adds	r3, #4
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d027      	beq.n	800cc5e <ip4_input+0x142>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cc0e:	4b5d      	ldr	r3, [pc, #372]	; (800cd84 <ip4_input+0x268>)
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	6939      	ldr	r1, [r7, #16]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 f98b 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800cc1a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d11e      	bne.n	800cc5e <ip4_input+0x142>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00d      	beq.n	800cc42 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800cc26:	4b57      	ldr	r3, [pc, #348]	; (800cd84 <ip4_input+0x268>)
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc2e:	d102      	bne.n	800cc36 <ip4_input+0x11a>
          netif = NULL;
 800cc30:	2300      	movs	r3, #0
 800cc32:	613b      	str	r3, [r7, #16]
          break;
 800cc34:	e014      	b.n	800cc60 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800cc36:	2300      	movs	r3, #0
 800cc38:	617b      	str	r3, [r7, #20]
        netif = netif_list;
 800cc3a:	4b53      	ldr	r3, [pc, #332]	; (800cd88 <ip4_input+0x26c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	613b      	str	r3, [r7, #16]
 800cc40:	e002      	b.n	800cc48 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d102      	bne.n	800cc56 <ip4_input+0x13a>
        netif = netif->next;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1c4      	bne.n	800cbe6 <ip4_input+0xca>
 800cc5c:	e000      	b.n	800cc60 <ip4_input+0x144>
          break;
 800cc5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc60:	4b48      	ldr	r3, [pc, #288]	; (800cd84 <ip4_input+0x268>)
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 f962 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d105      	bne.n	800cc7e <ip4_input+0x162>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cc72:	4b44      	ldr	r3, [pc, #272]	; (800cd84 <ip4_input+0x268>)
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc7a:	2be0      	cmp	r3, #224	; 0xe0
 800cc7c:	d104      	bne.n	800cc88 <ip4_input+0x16c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7fd fe88 	bl	800a994 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	e079      	b.n	800cd7c <ip4_input+0x260>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d104      	bne.n	800cc98 <ip4_input+0x17c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7fd fe80 	bl	800a994 <pbuf_free>
    return ERR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e071      	b.n	800cd7c <ip4_input+0x260>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	88db      	ldrh	r3, [r3, #6]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cca4:	4013      	ands	r3, r2
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00b      	beq.n	800ccc2 <ip4_input+0x1a6>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fc86 	bl	800d5bc <ip4_reass>
 800ccb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <ip4_input+0x1a0>
      return ERR_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	e05f      	b.n	800cd7c <ip4_input+0x260>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	60fb      	str	r3, [r7, #12]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ccc2:	4a30      	ldr	r2, [pc, #192]	; (800cd84 <ip4_input+0x268>)
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ccc8:	4a2e      	ldr	r2, [pc, #184]	; (800cd84 <ip4_input+0x268>)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ccce:	4a2d      	ldr	r2, [pc, #180]	; (800cd84 <ip4_input+0x268>)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	f003 030f 	and.w	r3, r3, #15
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	4b27      	ldr	r3, [pc, #156]	; (800cd84 <ip4_input+0x268>)
 800cce6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800cce8:	893b      	ldrh	r3, [r7, #8]
 800ccea:	425b      	negs	r3, r3
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	b21b      	sxth	r3, r3
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7fd fe2a 	bl	800a94c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	7a5b      	ldrb	r3, [r3, #9]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d006      	beq.n	800cd0e <ip4_input+0x1f2>
 800cd00:	2b11      	cmp	r3, #17
 800cd02:	d109      	bne.n	800cd18 <ip4_input+0x1fc>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7fe fa7e 	bl	800b208 <udp_input>
      break;
 800cd0c:	e023      	b.n	800cd56 <ip4_input+0x23a>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800cd0e:	6839      	ldr	r1, [r7, #0]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7ff fce1 	bl	800c6d8 <icmp_input>
      break;
 800cd16:	e01e      	b.n	800cd56 <ip4_input+0x23a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cd18:	4b1a      	ldr	r3, [pc, #104]	; (800cd84 <ip4_input+0x268>)
 800cd1a:	695b      	ldr	r3, [r3, #20]
 800cd1c:	6939      	ldr	r1, [r7, #16]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f906 	bl	800cf30 <ip4_addr_isbroadcast_u32>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d112      	bne.n	800cd50 <ip4_input+0x234>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd2a:	4b16      	ldr	r3, [pc, #88]	; (800cd84 <ip4_input+0x268>)
 800cd2c:	695b      	ldr	r3, [r3, #20]
 800cd2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cd32:	2be0      	cmp	r3, #224	; 0xe0
 800cd34:	d00c      	beq.n	800cd50 <ip4_input+0x234>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800cd36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7fd fe17 	bl	800a970 <pbuf_header_force>
        p->payload = iphdr;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cd48:	2102      	movs	r1, #2
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff fdea 	bl	800c924 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7fd fe1f 	bl	800a994 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cd56:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <ip4_input+0x268>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cd5c:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <ip4_input+0x268>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cd62:	4b08      	ldr	r3, [pc, #32]	; (800cd84 <ip4_input+0x268>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cd68:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <ip4_input+0x268>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cd6e:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <ip4_input+0x268>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cd74:	4b03      	ldr	r3, [pc, #12]	; (800cd84 <ip4_input+0x268>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	240001f8 	.word	0x240001f8
 800cd88:	24003670 	.word	0x24003670

0800cd8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08a      	sub	sp, #40	; 0x28
 800cd90:	af04      	add	r7, sp, #16
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d009      	beq.n	800cdb8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <ip4_output_if+0x26>
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d102      	bne.n	800cdb8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cdb8:	78fa      	ldrb	r2, [r7, #3]
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	9302      	str	r3, [sp, #8]
 800cdbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	6979      	ldr	r1, [r7, #20]
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 f805 	bl	800cde0 <ip4_output_if_src>
 800cdd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
 800cdec:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	89db      	ldrh	r3, [r3, #14]
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d006      	beq.n	800ce04 <ip4_output_if_src+0x24>
 800cdf6:	4b48      	ldr	r3, [pc, #288]	; (800cf18 <ip4_output_if_src+0x138>)
 800cdf8:	f240 3233 	movw	r2, #819	; 0x333
 800cdfc:	4947      	ldr	r1, [pc, #284]	; (800cf1c <ip4_output_if_src+0x13c>)
 800cdfe:	4848      	ldr	r0, [pc, #288]	; (800cf20 <ip4_output_if_src+0x140>)
 800ce00:	f002 fb8c 	bl	800f51c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d060      	beq.n	800cecc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ce0a:	2314      	movs	r3, #20
 800ce0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800ce0e:	2114      	movs	r1, #20
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7fd fd9b 	bl	800a94c <pbuf_header>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ce1c:	f06f 0301 	mvn.w	r3, #1
 800ce20:	e075      	b.n	800cf0e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	895b      	ldrh	r3, [r3, #10]
 800ce2c:	2b13      	cmp	r3, #19
 800ce2e:	d806      	bhi.n	800ce3e <ip4_output_if_src+0x5e>
 800ce30:	4b39      	ldr	r3, [pc, #228]	; (800cf18 <ip4_output_if_src+0x138>)
 800ce32:	f240 3261 	movw	r2, #865	; 0x361
 800ce36:	493b      	ldr	r1, [pc, #236]	; (800cf24 <ip4_output_if_src+0x144>)
 800ce38:	4839      	ldr	r0, [pc, #228]	; (800cf20 <ip4_output_if_src+0x140>)
 800ce3a:	f002 fb6f 	bl	800f51c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	78fa      	ldrb	r2, [r7, #3]
 800ce42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ce4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ce54:	8b7b      	ldrh	r3, [r7, #26]
 800ce56:	089b      	lsrs	r3, r3, #2
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ce6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	891b      	ldrh	r3, [r3, #8]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fc fb66 	bl	8009544 <lwip_htons>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	2200      	movs	r2, #0
 800ce84:	719a      	strb	r2, [r3, #6]
 800ce86:	2200      	movs	r2, #0
 800ce88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ce8a:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <ip4_output_if_src+0x148>)
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fc fb58 	bl	8009544 <lwip_htons>
 800ce94:	4603      	mov	r3, r0
 800ce96:	461a      	mov	r2, r3
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ce9c:	4b22      	ldr	r3, [pc, #136]	; (800cf28 <ip4_output_if_src+0x148>)
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	4b20      	ldr	r3, [pc, #128]	; (800cf28 <ip4_output_if_src+0x148>)
 800cea6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d104      	bne.n	800ceb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ceae:	4b1f      	ldr	r3, [pc, #124]	; (800cf2c <ip4_output_if_src+0x14c>)
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	60da      	str	r2, [r3, #12]
 800ceb6:	e003      	b.n	800cec0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	2200      	movs	r2, #0
 800cec4:	729a      	strb	r2, [r3, #10]
 800cec6:	2200      	movs	r2, #0
 800cec8:	72da      	strb	r2, [r3, #11]
 800ceca:	e008      	b.n	800cede <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ced8:	f107 0314 	add.w	r3, r7, #20
 800cedc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00c      	beq.n	800cf00 <ip4_output_if_src+0x120>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	891a      	ldrh	r2, [r3, #8]
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d906      	bls.n	800cf00 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f000 fd0c 	bl	800d914 <ip4_frag>
 800cefc:	4603      	mov	r3, r0
 800cefe:	e006      	b.n	800cf0e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf0a:	4798      	blx	r3
 800cf0c:	4603      	mov	r3, r0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3720      	adds	r7, #32
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	08011664 	.word	0x08011664
 800cf1c:	08011698 	.word	0x08011698
 800cf20:	080116a4 	.word	0x080116a4
 800cf24:	080116cc 	.word	0x080116cc
 800cf28:	240001d6 	.word	0x240001d6
 800cf2c:	08011aa4 	.word	0x08011aa4

0800cf30 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf44:	d002      	beq.n	800cf4c <ip4_addr_isbroadcast_u32+0x1c>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e02a      	b.n	800cfa6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e021      	b.n	800cfa6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	3304      	adds	r3, #4
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d101      	bne.n	800cf72 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e019      	b.n	800cfa6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	3304      	adds	r3, #4
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	405a      	eors	r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	3308      	adds	r3, #8
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4013      	ands	r3, r2
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10d      	bne.n	800cfa4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	3308      	adds	r3, #8
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	43da      	mvns	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	3308      	adds	r3, #8
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d101      	bne.n	800cfa4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e000      	b.n	800cfa6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cfa4:	2300      	movs	r3, #0
  }
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
	...

0800cfb4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cfbe:	4b12      	ldr	r3, [pc, #72]	; (800d008 <ip_reass_tmr+0x54>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cfc4:	e018      	b.n	800cff8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	7fdb      	ldrb	r3, [r3, #31]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00b      	beq.n	800cfe6 <ip_reass_tmr+0x32>
      r->timer--;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	7fdb      	ldrb	r3, [r3, #31]
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]
 800cfe4:	e008      	b.n	800cff8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f80a 	bl	800d00c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e3      	bne.n	800cfc6 <ip_reass_tmr+0x12>
     }
   }
}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	240001d8 	.word	0x240001d8

0800d00c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d105      	bne.n	800d02e <ip_reass_free_complete_datagram+0x22>
 800d022:	4b45      	ldr	r3, [pc, #276]	; (800d138 <ip_reass_free_complete_datagram+0x12c>)
 800d024:	22ab      	movs	r2, #171	; 0xab
 800d026:	4945      	ldr	r1, [pc, #276]	; (800d13c <ip_reass_free_complete_datagram+0x130>)
 800d028:	4845      	ldr	r0, [pc, #276]	; (800d140 <ip_reass_free_complete_datagram+0x134>)
 800d02a:	f002 fa77 	bl	800f51c <iprintf>
  if (prev != NULL) {
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00a      	beq.n	800d04a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d005      	beq.n	800d04a <ip_reass_free_complete_datagram+0x3e>
 800d03e:	4b3e      	ldr	r3, [pc, #248]	; (800d138 <ip_reass_free_complete_datagram+0x12c>)
 800d040:	22ad      	movs	r2, #173	; 0xad
 800d042:	4940      	ldr	r1, [pc, #256]	; (800d144 <ip_reass_free_complete_datagram+0x138>)
 800d044:	483e      	ldr	r0, [pc, #248]	; (800d140 <ip_reass_free_complete_datagram+0x134>)
 800d046:	f002 fa69 	bl	800f51c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	889b      	ldrh	r3, [r3, #4]
 800d056:	b29b      	uxth	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d12a      	bne.n	800d0b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	6858      	ldr	r0, [r3, #4]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3308      	adds	r3, #8
 800d072:	2214      	movs	r2, #20
 800d074:	4619      	mov	r1, r3
 800d076:	f002 fa3e 	bl	800f4f6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d07a:	2101      	movs	r1, #1
 800d07c:	69b8      	ldr	r0, [r7, #24]
 800d07e:	f7ff fc61 	bl	800c944 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d082:	69b8      	ldr	r0, [r7, #24]
 800d084:	f7fd fd1a 	bl	800aabc <pbuf_clen>
 800d088:	4603      	mov	r3, r0
 800d08a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d08c:	8bfa      	ldrh	r2, [r7, #30]
 800d08e:	8a7b      	ldrh	r3, [r7, #18]
 800d090:	4413      	add	r3, r2
 800d092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d096:	db05      	blt.n	800d0a4 <ip_reass_free_complete_datagram+0x98>
 800d098:	4b27      	ldr	r3, [pc, #156]	; (800d138 <ip_reass_free_complete_datagram+0x12c>)
 800d09a:	22bc      	movs	r2, #188	; 0xbc
 800d09c:	492a      	ldr	r1, [pc, #168]	; (800d148 <ip_reass_free_complete_datagram+0x13c>)
 800d09e:	4828      	ldr	r0, [pc, #160]	; (800d140 <ip_reass_free_complete_datagram+0x134>)
 800d0a0:	f002 fa3c 	bl	800f51c <iprintf>
    pbufs_freed += clen;
 800d0a4:	8bfa      	ldrh	r2, [r7, #30]
 800d0a6:	8a7b      	ldrh	r3, [r7, #18]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d0ac:	69b8      	ldr	r0, [r7, #24]
 800d0ae:	f7fd fc71 	bl	800a994 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d0b8:	e01f      	b.n	800d0fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f7fd fcf6 	bl	800aabc <pbuf_clen>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d0d4:	8bfa      	ldrh	r2, [r7, #30]
 800d0d6:	8a7b      	ldrh	r3, [r7, #18]
 800d0d8:	4413      	add	r3, r2
 800d0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0de:	db05      	blt.n	800d0ec <ip_reass_free_complete_datagram+0xe0>
 800d0e0:	4b15      	ldr	r3, [pc, #84]	; (800d138 <ip_reass_free_complete_datagram+0x12c>)
 800d0e2:	22cc      	movs	r2, #204	; 0xcc
 800d0e4:	4918      	ldr	r1, [pc, #96]	; (800d148 <ip_reass_free_complete_datagram+0x13c>)
 800d0e6:	4816      	ldr	r0, [pc, #88]	; (800d140 <ip_reass_free_complete_datagram+0x134>)
 800d0e8:	f002 fa18 	bl	800f51c <iprintf>
    pbufs_freed += clen;
 800d0ec:	8bfa      	ldrh	r2, [r7, #30]
 800d0ee:	8a7b      	ldrh	r3, [r7, #18]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7fd fc4d 	bl	800a994 <pbuf_free>
  while (p != NULL) {
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1dc      	bne.n	800d0ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f8c2 	bl	800d28c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d108:	4b10      	ldr	r3, [pc, #64]	; (800d14c <ip_reass_free_complete_datagram+0x140>)
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	8bfa      	ldrh	r2, [r7, #30]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d905      	bls.n	800d11e <ip_reass_free_complete_datagram+0x112>
 800d112:	4b09      	ldr	r3, [pc, #36]	; (800d138 <ip_reass_free_complete_datagram+0x12c>)
 800d114:	22d2      	movs	r2, #210	; 0xd2
 800d116:	490e      	ldr	r1, [pc, #56]	; (800d150 <ip_reass_free_complete_datagram+0x144>)
 800d118:	4809      	ldr	r0, [pc, #36]	; (800d140 <ip_reass_free_complete_datagram+0x134>)
 800d11a:	f002 f9ff 	bl	800f51c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d11e:	4b0b      	ldr	r3, [pc, #44]	; (800d14c <ip_reass_free_complete_datagram+0x140>)
 800d120:	881a      	ldrh	r2, [r3, #0]
 800d122:	8bfb      	ldrh	r3, [r7, #30]
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	b29a      	uxth	r2, r3
 800d128:	4b08      	ldr	r3, [pc, #32]	; (800d14c <ip_reass_free_complete_datagram+0x140>)
 800d12a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d12c:	8bfb      	ldrh	r3, [r7, #30]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3720      	adds	r7, #32
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	080116fc 	.word	0x080116fc
 800d13c:	08011738 	.word	0x08011738
 800d140:	08011744 	.word	0x08011744
 800d144:	0801176c 	.word	0x0801176c
 800d148:	08011780 	.word	0x08011780
 800d14c:	240001dc 	.word	0x240001dc
 800d150:	080117a0 	.word	0x080117a0

0800d154 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b08a      	sub	sp, #40	; 0x28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d15e:	2300      	movs	r3, #0
 800d160:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d166:	2300      	movs	r3, #0
 800d168:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d172:	4b28      	ldr	r3, [pc, #160]	; (800d214 <ip_reass_remove_oldest_datagram+0xc0>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d178:	e030      	b.n	800d1dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	695a      	ldr	r2, [r3, #20]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	429a      	cmp	r2, r3
 800d184:	d10c      	bne.n	800d1a0 <ip_reass_remove_oldest_datagram+0x4c>
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	699a      	ldr	r2, [r3, #24]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d106      	bne.n	800d1a0 <ip_reass_remove_oldest_datagram+0x4c>
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	899a      	ldrh	r2, [r3, #12]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	889b      	ldrh	r3, [r3, #4]
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d014      	beq.n	800d1ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d104      	bne.n	800d1b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	61bb      	str	r3, [r7, #24]
 800d1b4:	e009      	b.n	800d1ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b8:	7fda      	ldrb	r2, [r3, #31]
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	7fdb      	ldrb	r3, [r3, #31]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d803      	bhi.n	800d1ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1cb      	bne.n	800d17a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d008      	beq.n	800d1fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d1e8:	69b9      	ldr	r1, [r7, #24]
 800d1ea:	6a38      	ldr	r0, [r7, #32]
 800d1ec:	f7ff ff0e 	bl	800d00c <ip_reass_free_complete_datagram>
 800d1f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	da02      	bge.n	800d208 <ip_reass_remove_oldest_datagram+0xb4>
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	2b01      	cmp	r3, #1
 800d206:	dcac      	bgt.n	800d162 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d208:	697b      	ldr	r3, [r7, #20]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3728      	adds	r7, #40	; 0x28
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	240001d8 	.word	0x240001d8

0800d218 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d222:	2001      	movs	r0, #1
 800d224:	f7fc fdf8 	bl	8009e18 <memp_malloc>
 800d228:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d110      	bne.n	800d252 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7ff ff8e 	bl	800d154 <ip_reass_remove_oldest_datagram>
 800d238:	4602      	mov	r2, r0
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	4293      	cmp	r3, r2
 800d23e:	dc03      	bgt.n	800d248 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d240:	2001      	movs	r0, #1
 800d242:	f7fc fde9 	bl	8009e18 <memp_malloc>
 800d246:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	e016      	b.n	800d280 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d252:	2220      	movs	r2, #32
 800d254:	2100      	movs	r1, #0
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f002 f958 	bl	800f50c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2203      	movs	r2, #3
 800d260:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d262:	4b09      	ldr	r3, [pc, #36]	; (800d288 <ip_reass_enqueue_new_datagram+0x70>)
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d26a:	4a07      	ldr	r2, [pc, #28]	; (800d288 <ip_reass_enqueue_new_datagram+0x70>)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3308      	adds	r3, #8
 800d274:	2214      	movs	r2, #20
 800d276:	6879      	ldr	r1, [r7, #4]
 800d278:	4618      	mov	r0, r3
 800d27a:	f002 f93c 	bl	800f4f6 <memcpy>
  return ipr;
 800d27e:	68fb      	ldr	r3, [r7, #12]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	240001d8 	.word	0x240001d8

0800d28c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d296:	4b10      	ldr	r3, [pc, #64]	; (800d2d8 <ip_reass_dequeue_datagram+0x4c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d104      	bne.n	800d2aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a0c      	ldr	r2, [pc, #48]	; (800d2d8 <ip_reass_dequeue_datagram+0x4c>)
 800d2a6:	6013      	str	r3, [r2, #0]
 800d2a8:	e00d      	b.n	800d2c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <ip_reass_dequeue_datagram+0x32>
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <ip_reass_dequeue_datagram+0x50>)
 800d2b2:	f240 1245 	movw	r2, #325	; 0x145
 800d2b6:	490a      	ldr	r1, [pc, #40]	; (800d2e0 <ip_reass_dequeue_datagram+0x54>)
 800d2b8:	480a      	ldr	r0, [pc, #40]	; (800d2e4 <ip_reass_dequeue_datagram+0x58>)
 800d2ba:	f002 f92f 	bl	800f51c <iprintf>
    prev->next = ipr->next;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d2c6:	6879      	ldr	r1, [r7, #4]
 800d2c8:	2001      	movs	r0, #1
 800d2ca:	f7fc fe15 	bl	8009ef8 <memp_free>
}
 800d2ce:	bf00      	nop
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	240001d8 	.word	0x240001d8
 800d2dc:	080116fc 	.word	0x080116fc
 800d2e0:	080117bc 	.word	0x080117bc
 800d2e4:	08011744 	.word	0x08011744

0800d2e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b08c      	sub	sp, #48	; 0x30
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	885b      	ldrh	r3, [r3, #2]
 800d306:	b29b      	uxth	r3, r3
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fc f91b 	bl	8009544 <lwip_htons>
 800d30e:	4603      	mov	r3, r0
 800d310:	461a      	mov	r2, r3
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	b29b      	uxth	r3, r3
 800d318:	f003 030f 	and.w	r3, r3, #15
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	b29b      	uxth	r3, r3
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	88db      	ldrh	r3, [r3, #6]
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fc f909 	bl	8009544 <lwip_htons>
 800d332:	4603      	mov	r3, r0
 800d334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d338:	b29b      	uxth	r3, r3
 800d33a:	00db      	lsls	r3, r3, #3
 800d33c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	2200      	movs	r2, #0
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	2200      	movs	r2, #0
 800d34c:	705a      	strb	r2, [r3, #1]
 800d34e:	2200      	movs	r2, #0
 800d350:	709a      	strb	r2, [r3, #2]
 800d352:	2200      	movs	r2, #0
 800d354:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	8b3a      	ldrh	r2, [r7, #24]
 800d35a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d35c:	8b3a      	ldrh	r2, [r7, #24]
 800d35e:	8b7b      	ldrh	r3, [r7, #26]
 800d360:	4413      	add	r3, r2
 800d362:	b29a      	uxth	r2, r3
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	627b      	str	r3, [r7, #36]	; 0x24
 800d36e:	e061      	b.n	800d434 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	889b      	ldrh	r3, [r3, #4]
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	889b      	ldrh	r3, [r3, #4]
 800d380:	b29b      	uxth	r3, r3
 800d382:	429a      	cmp	r2, r3
 800d384:	d232      	bcs.n	800d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d38a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d01f      	beq.n	800d3d2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d394:	889b      	ldrh	r3, [r3, #4]
 800d396:	b29a      	uxth	r2, r3
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	88db      	ldrh	r3, [r3, #6]
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	f0c0 80e3 	bcc.w	800d56a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	88db      	ldrh	r3, [r3, #6]
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	889b      	ldrh	r3, [r3, #4]
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	f200 80da 	bhi.w	800d56a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3be:	88db      	ldrh	r3, [r3, #6]
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	889b      	ldrh	r3, [r3, #4]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d037      	beq.n	800d43c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d3d0:	e034      	b.n	800d43c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	88db      	ldrh	r3, [r3, #6]
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	889b      	ldrh	r3, [r3, #4]
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	f200 80c5 	bhi.w	800d56e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	605a      	str	r2, [r3, #4]
      break;
 800d3ea:	e027      	b.n	800d43c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	889b      	ldrh	r3, [r3, #4]
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	889b      	ldrh	r3, [r3, #4]
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	f000 80ba 	beq.w	800d572 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	889b      	ldrh	r3, [r3, #4]
 800d402:	b29a      	uxth	r2, r3
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	88db      	ldrh	r3, [r3, #6]
 800d408:	b29b      	uxth	r3, r3
 800d40a:	429a      	cmp	r2, r3
 800d40c:	f0c0 80b3 	bcc.w	800d576 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d412:	2b00      	cmp	r3, #0
 800d414:	d009      	beq.n	800d42a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d418:	88db      	ldrh	r3, [r3, #6]
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	889b      	ldrh	r3, [r3, #4]
 800d420:	b29b      	uxth	r3, r3
 800d422:	429a      	cmp	r2, r3
 800d424:	d001      	beq.n	800d42a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	d19a      	bne.n	800d370 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d43a:	e000      	b.n	800d43e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d43c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	2b00      	cmp	r3, #0
 800d442:	d12d      	bne.n	800d4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01c      	beq.n	800d484 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	88db      	ldrh	r3, [r3, #6]
 800d44e:	b29a      	uxth	r2, r3
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	889b      	ldrh	r3, [r3, #4]
 800d454:	b29b      	uxth	r3, r3
 800d456:	429a      	cmp	r2, r3
 800d458:	d906      	bls.n	800d468 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d45a:	4b51      	ldr	r3, [pc, #324]	; (800d5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d45c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d460:	4950      	ldr	r1, [pc, #320]	; (800d5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d462:	4851      	ldr	r0, [pc, #324]	; (800d5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d464:	f002 f85a 	bl	800f51c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d470:	88db      	ldrh	r3, [r3, #6]
 800d472:	b29a      	uxth	r2, r3
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	889b      	ldrh	r3, [r3, #4]
 800d478:	b29b      	uxth	r3, r3
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d010      	beq.n	800d4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	623b      	str	r3, [r7, #32]
 800d482:	e00d      	b.n	800d4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d006      	beq.n	800d49a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d48c:	4b44      	ldr	r3, [pc, #272]	; (800d5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d48e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800d492:	4946      	ldr	r1, [pc, #280]	; (800d5ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d494:	4844      	ldr	r0, [pc, #272]	; (800d5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d496:	f002 f841 	bl	800f51c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d105      	bne.n	800d4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	7f9b      	ldrb	r3, [r3, #30]
 800d4aa:	f003 0301 	and.w	r3, r3, #1
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d059      	beq.n	800d566 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d04f      	beq.n	800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d006      	beq.n	800d4ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	889b      	ldrh	r3, [r3, #4]
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	623b      	str	r3, [r7, #32]
 800d4d2:	e041      	b.n	800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d4de:	e012      	b.n	800d506 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e8:	88db      	ldrh	r3, [r3, #6]
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ee:	889b      	ldrh	r3, [r3, #4]
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d002      	beq.n	800d4fc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	623b      	str	r3, [r7, #32]
            break;
 800d4fa:	e007      	b.n	800d50c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1e9      	bne.n	800d4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d022      	beq.n	800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d106      	bne.n	800d528 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d51a:	4b21      	ldr	r3, [pc, #132]	; (800d5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d51c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d520:	4923      	ldr	r1, [pc, #140]	; (800d5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d522:	4821      	ldr	r0, [pc, #132]	; (800d5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d524:	f001 fffa 	bl	800f51c <iprintf>
          LWIP_ASSERT("sanity check",
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d530:	429a      	cmp	r2, r3
 800d532:	d106      	bne.n	800d542 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d534:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d536:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d53a:	491d      	ldr	r1, [pc, #116]	; (800d5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d53c:	481a      	ldr	r0, [pc, #104]	; (800d5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d53e:	f001 ffed 	bl	800f51c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d006      	beq.n	800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d54a:	4b15      	ldr	r3, [pc, #84]	; (800d5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d54c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800d550:	4918      	ldr	r1, [pc, #96]	; (800d5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d552:	4815      	ldr	r0, [pc, #84]	; (800d5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d554:	f001 ffe2 	bl	800f51c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d558:	6a3b      	ldr	r3, [r7, #32]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	bf14      	ite	ne
 800d55e:	2301      	movne	r3, #1
 800d560:	2300      	moveq	r3, #0
 800d562:	b2db      	uxtb	r3, r3
 800d564:	e018      	b.n	800d598 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d566:	2300      	movs	r3, #0
 800d568:	e016      	b.n	800d598 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800d56a:	bf00      	nop
 800d56c:	e004      	b.n	800d578 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d56e:	bf00      	nop
 800d570:	e002      	b.n	800d578 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d572:	bf00      	nop
 800d574:	e000      	b.n	800d578 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d576:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d578:	68b8      	ldr	r0, [r7, #8]
 800d57a:	f7fd fa9f 	bl	800aabc <pbuf_clen>
 800d57e:	4603      	mov	r3, r0
 800d580:	461a      	mov	r2, r3
 800d582:	4b0d      	ldr	r3, [pc, #52]	; (800d5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	1a9b      	subs	r3, r3, r2
 800d588:	b29a      	uxth	r2, r3
 800d58a:	4b0b      	ldr	r3, [pc, #44]	; (800d5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d58c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d58e:	68b8      	ldr	r0, [r7, #8]
 800d590:	f7fd fa00 	bl	800a994 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3730      	adds	r7, #48	; 0x30
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	080116fc 	.word	0x080116fc
 800d5a4:	080117d8 	.word	0x080117d8
 800d5a8:	08011744 	.word	0x08011744
 800d5ac:	080117f8 	.word	0x080117f8
 800d5b0:	08011830 	.word	0x08011830
 800d5b4:	08011840 	.word	0x08011840
 800d5b8:	240001dc 	.word	0x240001dc

0800d5bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08e      	sub	sp, #56	; 0x38
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	f003 030f 	and.w	r3, r3, #15
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	2b14      	cmp	r3, #20
 800d5d6:	f040 8131 	bne.w	800d83c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5dc:	88db      	ldrh	r3, [r3, #6]
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fb ffaf 	bl	8009544 <lwip_htons>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	885b      	ldrh	r3, [r3, #2]
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fb ffa3 	bl	8009544 <lwip_htons>
 800d5fe:	4603      	mov	r3, r0
 800d600:	461a      	mov	r2, r3
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	b29b      	uxth	r3, r3
 800d608:	f003 030f 	and.w	r3, r3, #15
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	b29b      	uxth	r3, r3
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7fd fa50 	bl	800aabc <pbuf_clen>
 800d61c:	4603      	mov	r3, r0
 800d61e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d620:	4b8e      	ldr	r3, [pc, #568]	; (800d85c <ip4_reass+0x2a0>)
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	461a      	mov	r2, r3
 800d626:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d628:	4413      	add	r3, r2
 800d62a:	2b0a      	cmp	r3, #10
 800d62c:	dd10      	ble.n	800d650 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d62e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d630:	4619      	mov	r1, r3
 800d632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d634:	f7ff fd8e 	bl	800d154 <ip_reass_remove_oldest_datagram>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f000 8100 	beq.w	800d840 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d640:	4b86      	ldr	r3, [pc, #536]	; (800d85c <ip4_reass+0x2a0>)
 800d642:	881b      	ldrh	r3, [r3, #0]
 800d644:	461a      	mov	r2, r3
 800d646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d648:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d64a:	2b0a      	cmp	r3, #10
 800d64c:	f300 80f8 	bgt.w	800d840 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d650:	4b83      	ldr	r3, [pc, #524]	; (800d860 <ip4_reass+0x2a4>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	633b      	str	r3, [r7, #48]	; 0x30
 800d656:	e015      	b.n	800d684 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65a:	695a      	ldr	r2, [r3, #20]
 800d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	429a      	cmp	r2, r3
 800d662:	d10c      	bne.n	800d67e <ip4_reass+0xc2>
 800d664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d666:	699a      	ldr	r2, [r3, #24]
 800d668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d106      	bne.n	800d67e <ip4_reass+0xc2>
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	899a      	ldrh	r2, [r3, #12]
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	889b      	ldrh	r3, [r3, #4]
 800d678:	b29b      	uxth	r3, r3
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d006      	beq.n	800d68c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	633b      	str	r3, [r7, #48]	; 0x30
 800d684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1e6      	bne.n	800d658 <ip4_reass+0x9c>
 800d68a:	e000      	b.n	800d68e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d68c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d690:	2b00      	cmp	r3, #0
 800d692:	d109      	bne.n	800d6a8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d696:	4619      	mov	r1, r3
 800d698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d69a:	f7ff fdbd 	bl	800d218 <ip_reass_enqueue_new_datagram>
 800d69e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d11c      	bne.n	800d6e0 <ip4_reass+0x124>
      goto nullreturn;
 800d6a6:	e0d0      	b.n	800d84a <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	88db      	ldrh	r3, [r3, #6]
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fb ff48 	bl	8009544 <lwip_htons>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d110      	bne.n	800d6e0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c0:	89db      	ldrh	r3, [r3, #14]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fb ff3e 	bl	8009544 <lwip_htons>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d006      	beq.n	800d6e0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	2214      	movs	r2, #20
 800d6d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f001 ff0b 	bl	800f4f6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	88db      	ldrh	r3, [r3, #6]
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	f003 0320 	and.w	r3, r3, #32
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	bf0c      	ite	eq
 800d6ee:	2301      	moveq	r3, #1
 800d6f0:	2300      	movne	r3, #0
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00e      	beq.n	800d71a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800d6fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d700:	4413      	add	r3, r2
 800d702:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d704:	8b7a      	ldrh	r2, [r7, #26]
 800d706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d708:	429a      	cmp	r2, r3
 800d70a:	f0c0 809b 	bcc.w	800d844 <ip4_reass+0x288>
 800d70e:	8b7b      	ldrh	r3, [r7, #26]
 800d710:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d714:	4293      	cmp	r3, r2
 800d716:	f200 8095 	bhi.w	800d844 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d71a:	69fa      	ldr	r2, [r7, #28]
 800d71c:	6879      	ldr	r1, [r7, #4]
 800d71e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d720:	f7ff fde2 	bl	800d2e8 <ip_reass_chain_frag_into_datagram_and_validate>
 800d724:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d72c:	f000 808c 	beq.w	800d848 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d730:	4b4a      	ldr	r3, [pc, #296]	; (800d85c <ip4_reass+0x2a0>)
 800d732:	881a      	ldrh	r2, [r3, #0]
 800d734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d736:	4413      	add	r3, r2
 800d738:	b29a      	uxth	r2, r3
 800d73a:	4b48      	ldr	r3, [pc, #288]	; (800d85c <ip4_reass+0x2a0>)
 800d73c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00d      	beq.n	800d760 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d744:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d748:	4413      	add	r3, r2
 800d74a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	8a7a      	ldrh	r2, [r7, #18]
 800d750:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d754:	7f9b      	ldrb	r3, [r3, #30]
 800d756:	f043 0301 	orr.w	r3, r3, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d168      	bne.n	800d838 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	8b9b      	ldrh	r3, [r3, #28]
 800d76a:	3314      	adds	r3, #20
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	3308      	adds	r3, #8
 800d788:	2214      	movs	r2, #20
 800d78a:	4619      	mov	r1, r3
 800d78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d78e:	f001 feb2 	bl	800f4f6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	8b9b      	ldrh	r3, [r3, #28]
 800d796:	4618      	mov	r0, r3
 800d798:	f7fb fed4 	bl	8009544 <lwip_htons>
 800d79c:	4603      	mov	r3, r0
 800d79e:	461a      	mov	r2, r3
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	719a      	strb	r2, [r3, #6]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	729a      	strb	r2, [r3, #10]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d7be:	e00e      	b.n	800d7de <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d7c6:	f06f 0113 	mvn.w	r1, #19
 800d7ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7cc:	f7fd f8be 	bl	800a94c <pbuf_header>
      pbuf_cat(p, r);
 800d7d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7fd f9ac 	bl	800ab30 <pbuf_cat>
      r = iprh->next_pbuf;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 800d7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1ed      	bne.n	800d7c0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d7e4:	4b1e      	ldr	r3, [pc, #120]	; (800d860 <ip4_reass+0x2a4>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d102      	bne.n	800d7f4 <ip4_reass+0x238>
      ipr_prev = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800d7f2:	e010      	b.n	800d816 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d7f4:	4b1a      	ldr	r3, [pc, #104]	; (800d860 <ip4_reass+0x2a4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	637b      	str	r3, [r7, #52]	; 0x34
 800d7fa:	e007      	b.n	800d80c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800d7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d802:	429a      	cmp	r2, r3
 800d804:	d006      	beq.n	800d814 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	637b      	str	r3, [r7, #52]	; 0x34
 800d80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1f4      	bne.n	800d7fc <ip4_reass+0x240>
 800d812:	e000      	b.n	800d816 <ip4_reass+0x25a>
          break;
 800d814:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d816:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d81a:	f7ff fd37 	bl	800d28c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7fd f94c 	bl	800aabc <pbuf_clen>
 800d824:	4603      	mov	r3, r0
 800d826:	461a      	mov	r2, r3
 800d828:	4b0c      	ldr	r3, [pc, #48]	; (800d85c <ip4_reass+0x2a0>)
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	1a9b      	subs	r3, r3, r2
 800d82e:	b29a      	uxth	r2, r3
 800d830:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <ip4_reass+0x2a0>)
 800d832:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	e00c      	b.n	800d852 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d838:	2300      	movs	r3, #0
 800d83a:	e00a      	b.n	800d852 <ip4_reass+0x296>
    goto nullreturn;
 800d83c:	bf00      	nop
 800d83e:	e004      	b.n	800d84a <ip4_reass+0x28e>
      goto nullreturn;
 800d840:	bf00      	nop
 800d842:	e002      	b.n	800d84a <ip4_reass+0x28e>

nullreturn:
 800d844:	bf00      	nop
 800d846:	e000      	b.n	800d84a <ip4_reass+0x28e>
    goto nullreturn;
 800d848:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7fd f8a2 	bl	800a994 <pbuf_free>
  return NULL;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3738      	adds	r7, #56	; 0x38
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	240001dc 	.word	0x240001dc
 800d860:	240001d8 	.word	0x240001d8

0800d864 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d868:	2002      	movs	r0, #2
 800d86a:	f7fc fad5 	bl	8009e18 <memp_malloc>
 800d86e:	4603      	mov	r3, r0
}
 800d870:	4618      	mov	r0, r3
 800d872:	bd80      	pop	{r7, pc}

0800d874 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d106      	bne.n	800d890 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d882:	4b07      	ldr	r3, [pc, #28]	; (800d8a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d884:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d888:	4906      	ldr	r1, [pc, #24]	; (800d8a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d88a:	4807      	ldr	r0, [pc, #28]	; (800d8a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d88c:	f001 fe46 	bl	800f51c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d890:	6879      	ldr	r1, [r7, #4]
 800d892:	2002      	movs	r0, #2
 800d894:	f7fc fb30 	bl	8009ef8 <memp_free>
}
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	080116fc 	.word	0x080116fc
 800d8a4:	08011864 	.word	0x08011864
 800d8a8:	08011744 	.word	0x08011744

0800d8ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d106      	bne.n	800d8cc <ipfrag_free_pbuf_custom+0x20>
 800d8be:	4b11      	ldr	r3, [pc, #68]	; (800d904 <ipfrag_free_pbuf_custom+0x58>)
 800d8c0:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d8c4:	4910      	ldr	r1, [pc, #64]	; (800d908 <ipfrag_free_pbuf_custom+0x5c>)
 800d8c6:	4811      	ldr	r0, [pc, #68]	; (800d90c <ipfrag_free_pbuf_custom+0x60>)
 800d8c8:	f001 fe28 	bl	800f51c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d006      	beq.n	800d8e2 <ipfrag_free_pbuf_custom+0x36>
 800d8d4:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <ipfrag_free_pbuf_custom+0x58>)
 800d8d6:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d8da:	490d      	ldr	r1, [pc, #52]	; (800d910 <ipfrag_free_pbuf_custom+0x64>)
 800d8dc:	480b      	ldr	r0, [pc, #44]	; (800d90c <ipfrag_free_pbuf_custom+0x60>)
 800d8de:	f001 fe1d 	bl	800f51c <iprintf>
  if (pcr->original != NULL) {
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	695b      	ldr	r3, [r3, #20]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d004      	beq.n	800d8f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fd f850 	bl	800a994 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f7ff ffbd 	bl	800d874 <ip_frag_free_pbuf_custom_ref>
}
 800d8fa:	bf00      	nop
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	080116fc 	.word	0x080116fc
 800d908:	08011870 	.word	0x08011870
 800d90c:	08011744 	.word	0x08011744
 800d910:	0801187c 	.word	0x0801187c

0800d914 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b092      	sub	sp, #72	; 0x48
 800d918:	af02      	add	r7, sp, #8
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d920:	2300      	movs	r3, #0
 800d922:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d928:	3b14      	subs	r3, #20
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	da00      	bge.n	800d930 <ip4_frag+0x1c>
 800d92e:	3307      	adds	r3, #7
 800d930:	10db      	asrs	r3, r3, #3
 800d932:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d934:	2314      	movs	r3, #20
 800d936:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d940:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f003 030f 	and.w	r3, r3, #15
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	2b14      	cmp	r3, #20
 800d94e:	d009      	beq.n	800d964 <ip4_frag+0x50>
 800d950:	4b79      	ldr	r3, [pc, #484]	; (800db38 <ip4_frag+0x224>)
 800d952:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d956:	4979      	ldr	r1, [pc, #484]	; (800db3c <ip4_frag+0x228>)
 800d958:	4879      	ldr	r0, [pc, #484]	; (800db40 <ip4_frag+0x22c>)
 800d95a:	f001 fddf 	bl	800f51c <iprintf>
 800d95e:	f06f 0305 	mvn.w	r3, #5
 800d962:	e0e5      	b.n	800db30 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d966:	88db      	ldrh	r3, [r3, #6]
 800d968:	b29b      	uxth	r3, r3
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7fb fdea 	bl	8009544 <lwip_htons>
 800d970:	4603      	mov	r3, r0
 800d972:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d974:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d976:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d97a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d97c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d97e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d009      	beq.n	800d99a <ip4_frag+0x86>
 800d986:	4b6c      	ldr	r3, [pc, #432]	; (800db38 <ip4_frag+0x224>)
 800d988:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d98c:	496d      	ldr	r1, [pc, #436]	; (800db44 <ip4_frag+0x230>)
 800d98e:	486c      	ldr	r0, [pc, #432]	; (800db40 <ip4_frag+0x22c>)
 800d990:	f001 fdc4 	bl	800f51c <iprintf>
 800d994:	f06f 0305 	mvn.w	r3, #5
 800d998:	e0ca      	b.n	800db30 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	891b      	ldrh	r3, [r3, #8]
 800d99e:	3b14      	subs	r3, #20
 800d9a0:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d9a2:	e0bc      	b.n	800db1e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d9a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d9a6:	00da      	lsls	r2, r3, #3
 800d9a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	bfa8      	it	ge
 800d9ae:	4613      	movge	r3, r2
 800d9b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	2114      	movs	r1, #20
 800d9b6:	2002      	movs	r0, #2
 800d9b8:	f7fc fc7e 	bl	800a2b8 <pbuf_alloc>
 800d9bc:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d9be:	6a3b      	ldr	r3, [r7, #32]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f000 80b2 	beq.w	800db2a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	895b      	ldrh	r3, [r3, #10]
 800d9ca:	2b13      	cmp	r3, #19
 800d9cc:	d806      	bhi.n	800d9dc <ip4_frag+0xc8>
 800d9ce:	4b5a      	ldr	r3, [pc, #360]	; (800db38 <ip4_frag+0x224>)
 800d9d0:	f240 3209 	movw	r2, #777	; 0x309
 800d9d4:	495c      	ldr	r1, [pc, #368]	; (800db48 <ip4_frag+0x234>)
 800d9d6:	485a      	ldr	r0, [pc, #360]	; (800db40 <ip4_frag+0x22c>)
 800d9d8:	f001 fda0 	bl	800f51c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d9dc:	6a3b      	ldr	r3, [r7, #32]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	2214      	movs	r2, #20
 800d9e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f001 fd86 	bl	800f4f6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d9f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d9f4:	e04f      	b.n	800da96 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	895a      	ldrh	r2, [r3, #10]
 800d9fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800da00:	8b7a      	ldrh	r2, [r7, #26]
 800da02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da04:	4293      	cmp	r3, r2
 800da06:	bf28      	it	cs
 800da08:	4613      	movcs	r3, r2
 800da0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800da0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d105      	bne.n	800da1e <ip4_frag+0x10a>
        poff = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	60fb      	str	r3, [r7, #12]
        continue;
 800da1c:	e03b      	b.n	800da96 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800da1e:	f7ff ff21 	bl	800d864 <ip_frag_alloc_pbuf_custom_ref>
 800da22:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d103      	bne.n	800da32 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800da2a:	6a38      	ldr	r0, [r7, #32]
 800da2c:	f7fc ffb2 	bl	800a994 <pbuf_free>
        goto memerr;
 800da30:	e07c      	b.n	800db2c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800da32:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800da38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da3a:	4413      	add	r3, r2
 800da3c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800da3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800da40:	9201      	str	r2, [sp, #4]
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	4603      	mov	r3, r0
 800da46:	2202      	movs	r2, #2
 800da48:	2004      	movs	r0, #4
 800da4a:	f7fc fdc5 	bl	800a5d8 <pbuf_alloced_custom>
 800da4e:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800da56:	6978      	ldr	r0, [r7, #20]
 800da58:	f7ff ff0c 	bl	800d874 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800da5c:	6a38      	ldr	r0, [r7, #32]
 800da5e:	f7fc ff99 	bl	800a994 <pbuf_free>
        goto memerr;
 800da62:	e063      	b.n	800db2c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7fd f841 	bl	800aaec <pbuf_ref>
      pcr->original = p;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	4a36      	ldr	r2, [pc, #216]	; (800db4c <ip4_frag+0x238>)
 800da74:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800da76:	6939      	ldr	r1, [r7, #16]
 800da78:	6a38      	ldr	r0, [r7, #32]
 800da7a:	f7fd f859 	bl	800ab30 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800da7e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800da80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800da86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d004      	beq.n	800da96 <ip4_frag+0x182>
        poff = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800da96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1ac      	bne.n	800d9f6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800da9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800daa0:	4413      	add	r3, r2
 800daa2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800daa4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800daaa:	3b14      	subs	r3, #20
 800daac:	429a      	cmp	r2, r3
 800daae:	bfd4      	ite	le
 800dab0:	2301      	movle	r3, #1
 800dab2:	2300      	movgt	r3, #0
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dab8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800daba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dabe:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d103      	bne.n	800dace <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800dac6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dacc:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dace:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fb fd37 	bl	8009544 <lwip_htons>
 800dad6:	4603      	mov	r3, r0
 800dad8:	461a      	mov	r2, r3
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dadc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800dade:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dae0:	3314      	adds	r3, #20
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fb fd2d 	bl	8009544 <lwip_htons>
 800daea:	4603      	mov	r3, r0
 800daec:	461a      	mov	r2, r3
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf4:	2200      	movs	r2, #0
 800daf6:	729a      	strb	r2, [r3, #10]
 800daf8:	2200      	movs	r2, #0
 800dafa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	6a39      	ldr	r1, [r7, #32]
 800db04:	68b8      	ldr	r0, [r7, #8]
 800db06:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800db08:	6a38      	ldr	r0, [r7, #32]
 800db0a:	f7fc ff43 	bl	800a994 <pbuf_free>
    left -= fragsize;
 800db0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800db16:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800db18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800db1a:	4413      	add	r3, r2
 800db1c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800db1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db20:	2b00      	cmp	r3, #0
 800db22:	f47f af3f 	bne.w	800d9a4 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	e002      	b.n	800db30 <ip4_frag+0x21c>
      goto memerr;
 800db2a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800db2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800db30:	4618      	mov	r0, r3
 800db32:	3740      	adds	r7, #64	; 0x40
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	080116fc 	.word	0x080116fc
 800db3c:	08011888 	.word	0x08011888
 800db40:	08011744 	.word	0x08011744
 800db44:	080118b0 	.word	0x080118b0
 800db48:	080118cc 	.word	0x080118cc
 800db4c:	0800d8ad 	.word	0x0800d8ad

0800db50 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800db5a:	230e      	movs	r3, #14
 800db5c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	895b      	ldrh	r3, [r3, #10]
 800db62:	2b0e      	cmp	r3, #14
 800db64:	d977      	bls.n	800dc56 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	7b1a      	ldrb	r2, [r3, #12]
 800db70:	7b5b      	ldrb	r3, [r3, #13]
 800db72:	021b      	lsls	r3, r3, #8
 800db74:	4313      	orrs	r3, r2
 800db76:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	f003 0301 	and.w	r3, r3, #1
 800db80:	2b00      	cmp	r3, #0
 800db82:	d023      	beq.n	800dbcc <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d10f      	bne.n	800dbac <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	785b      	ldrb	r3, [r3, #1]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d11b      	bne.n	800dbcc <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db98:	2b5e      	cmp	r3, #94	; 0x5e
 800db9a:	d117      	bne.n	800dbcc <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	7b5b      	ldrb	r3, [r3, #13]
 800dba0:	f043 0310 	orr.w	r3, r3, #16
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	735a      	strb	r2, [r3, #13]
 800dbaa:	e00f      	b.n	800dbcc <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	2206      	movs	r2, #6
 800dbb0:	4931      	ldr	r1, [pc, #196]	; (800dc78 <ethernet_input+0x128>)
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f001 fc90 	bl	800f4d8 <memcmp>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	7b5b      	ldrb	r3, [r3, #13]
 800dbc2:	f043 0308 	orr.w	r3, r3, #8
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800dbcc:	89fb      	ldrh	r3, [r7, #14]
 800dbce:	2b08      	cmp	r3, #8
 800dbd0:	d003      	beq.n	800dbda <ethernet_input+0x8a>
 800dbd2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dbd6:	d01e      	beq.n	800dc16 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dbd8:	e046      	b.n	800dc68 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbe0:	f003 0308 	and.w	r3, r3, #8
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d038      	beq.n	800dc5a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	895b      	ldrh	r3, [r3, #10]
 800dbec:	461a      	mov	r2, r3
 800dbee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	db33      	blt.n	800dc5e <ethernet_input+0x10e>
 800dbf6:	8afb      	ldrh	r3, [r7, #22]
 800dbf8:	425b      	negs	r3, r3
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	b21b      	sxth	r3, r3
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7fc fea3 	bl	800a94c <pbuf_header>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d128      	bne.n	800dc5e <ethernet_input+0x10e>
        ip4_input(p, netif);
 800dc0c:	6839      	ldr	r1, [r7, #0]
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7fe ff84 	bl	800cb1c <ip4_input>
      break;
 800dc14:	e01d      	b.n	800dc52 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dc1c:	f003 0308 	and.w	r3, r3, #8
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d01e      	beq.n	800dc62 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	895b      	ldrh	r3, [r3, #10]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	db19      	blt.n	800dc66 <ethernet_input+0x116>
 800dc32:	8afb      	ldrh	r3, [r7, #22]
 800dc34:	425b      	negs	r3, r3
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	b21b      	sxth	r3, r3
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7fc fe85 	bl	800a94c <pbuf_header>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10e      	bne.n	800dc66 <ethernet_input+0x116>
        etharp_input(p, netif);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7fe f928 	bl	800bea0 <etharp_input>
      break;
 800dc50:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800dc52:	2300      	movs	r3, #0
 800dc54:	e00c      	b.n	800dc70 <ethernet_input+0x120>
    goto free_and_return;
 800dc56:	bf00      	nop
 800dc58:	e006      	b.n	800dc68 <ethernet_input+0x118>
        goto free_and_return;
 800dc5a:	bf00      	nop
 800dc5c:	e004      	b.n	800dc68 <ethernet_input+0x118>
        goto free_and_return;
 800dc5e:	bf00      	nop
 800dc60:	e002      	b.n	800dc68 <ethernet_input+0x118>
        goto free_and_return;
 800dc62:	bf00      	nop
 800dc64:	e000      	b.n	800dc68 <ethernet_input+0x118>
        goto free_and_return;
 800dc66:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7fc fe93 	bl	800a994 <pbuf_free>
  return ERR_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3718      	adds	r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	08011aa8 	.word	0x08011aa8

0800dc7c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dc8a:	8c3b      	ldrh	r3, [r7, #32]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fb fc59 	bl	8009544 <lwip_htons>
 800dc92:	4603      	mov	r3, r0
 800dc94:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800dc96:	210e      	movs	r1, #14
 800dc98:	68b8      	ldr	r0, [r7, #8]
 800dc9a:	f7fc fe57 	bl	800a94c <pbuf_header>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d125      	bne.n	800dcf0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	8afa      	ldrh	r2, [r7, #22]
 800dcae:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	2206      	movs	r2, #6
 800dcb4:	6839      	ldr	r1, [r7, #0]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f001 fc1d 	bl	800f4f6 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	3306      	adds	r3, #6
 800dcc0:	2206      	movs	r2, #6
 800dcc2:	6879      	ldr	r1, [r7, #4]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f001 fc16 	bl	800f4f6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcd0:	2b06      	cmp	r3, #6
 800dcd2:	d006      	beq.n	800dce2 <ethernet_output+0x66>
 800dcd4:	4b0a      	ldr	r3, [pc, #40]	; (800dd00 <ethernet_output+0x84>)
 800dcd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dcda:	490a      	ldr	r1, [pc, #40]	; (800dd04 <ethernet_output+0x88>)
 800dcdc:	480a      	ldr	r0, [pc, #40]	; (800dd08 <ethernet_output+0x8c>)
 800dcde:	f001 fc1d 	bl	800f51c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	699b      	ldr	r3, [r3, #24]
 800dce6:	68b9      	ldr	r1, [r7, #8]
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	4798      	blx	r3
 800dcec:	4603      	mov	r3, r0
 800dcee:	e002      	b.n	800dcf6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800dcf0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800dcf2:	f06f 0301 	mvn.w	r3, #1
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	080118ec 	.word	0x080118ec
 800dd04:	08011924 	.word	0x08011924
 800dd08:	08011958 	.word	0x08011958

0800dd0c <ethernet_link_status_updated>:
  * @brief  Notify the User about the nework interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  if (netif_is_link_up(netif))
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd1a:	089b      	lsrs	r3, r3, #2
 800dd1c:	f003 0301 	and.w	r3, r3, #1
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d006      	beq.n	800dd34 <ethernet_link_status_updated+0x28>
#elif defined(USE_LCD)   
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#else
    BSP_LED_On(LED1);
 800dd26:	2000      	movs	r0, #0
 800dd28:	f001 f8c6 	bl	800eeb8 <BSP_LED_On>
    BSP_LED_Off(LED2);
 800dd2c:	2001      	movs	r0, #1
 800dd2e:	f001 f8dd 	bl	800eeec <BSP_LED_Off>
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  } 
}
 800dd32:	e005      	b.n	800dd40 <ethernet_link_status_updated+0x34>
    BSP_LED_Off(LED1);
 800dd34:	2000      	movs	r0, #0
 800dd36:	f001 f8d9 	bl	800eeec <BSP_LED_Off>
    BSP_LED_On(LED2);
 800dd3a:	2001      	movs	r0, #1
 800dd3c:	f001 f8bc 	bl	800eeb8 <BSP_LED_On>
}
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif 
  * @retval None
  */
void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800dd50:	f7f2 fe80 	bl	8000a54 <HAL_GetTick>
 800dd54:	4602      	mov	r2, r0
 800dd56:	4b08      	ldr	r3, [pc, #32]	; (800dd78 <Ethernet_Link_Periodic_Handle+0x30>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	2b63      	cmp	r3, #99	; 0x63
 800dd5e:	d907      	bls.n	800dd70 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800dd60:	f7f2 fe78 	bl	8000a54 <HAL_GetTick>
 800dd64:	4602      	mov	r2, r0
 800dd66:	4b04      	ldr	r3, [pc, #16]	; (800dd78 <Ethernet_Link_Periodic_Handle+0x30>)
 800dd68:	601a      	str	r2, [r3, #0]
    ethernet_link_check_state(netif);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fb3c 	bl	800e3e8 <ethernet_link_check_state>
  }
}
 800dd70:	bf00      	nop
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	2400367c 	.word	0x2400367c

0800dd7c <SCB_InvalidateDCache_by_Addr>:
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b087      	sub	sp, #28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800dd8e:	2320      	movs	r3, #32
 800dd90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800dd92:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800dd96:	e00b      	b.n	800ddb0 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800dd98:	4a0c      	ldr	r2, [pc, #48]	; (800ddcc <SCB_InvalidateDCache_by_Addr+0x50>)
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	4413      	add	r3, r2
 800dda6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800dda8:	697a      	ldr	r2, [r7, #20]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	dcf0      	bgt.n	800dd98 <SCB_InvalidateDCache_by_Addr+0x1c>
 800ddb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ddba:	f3bf 8f6f 	isb	sy
}
 800ddbe:	bf00      	nop
 800ddc0:	371c      	adds	r7, #28
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	e000ed00 	.word	0xe000ed00

0800ddd0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08e      	sub	sp, #56	; 0x38
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ddd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dddc:	2200      	movs	r2, #0
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	605a      	str	r2, [r3, #4]
 800dde2:	609a      	str	r2, [r3, #8]
 800dde4:	60da      	str	r2, [r3, #12]
 800dde6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a61      	ldr	r2, [pc, #388]	; (800df74 <HAL_ETH_MspInit+0x1a4>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	f040 80bb 	bne.w	800df6a <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800ddf4:	4b60      	ldr	r3, [pc, #384]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800ddf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddfa:	4a5f      	ldr	r2, [pc, #380]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800ddfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800de04:	4b5c      	ldr	r3, [pc, #368]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de0e:	623b      	str	r3, [r7, #32]
 800de10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800de12:	4b59      	ldr	r3, [pc, #356]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de18:	4a57      	ldr	r2, [pc, #348]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800de22:	4b55      	ldr	r3, [pc, #340]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de2c:	61fb      	str	r3, [r7, #28]
 800de2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800de30:	4b51      	ldr	r3, [pc, #324]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de36:	4a50      	ldr	r2, [pc, #320]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800de40:	4b4d      	ldr	r3, [pc, #308]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800de46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de4a:	61bb      	str	r3, [r7, #24]
 800de4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de4e:	4b4a      	ldr	r3, [pc, #296]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de54:	4a48      	ldr	r2, [pc, #288]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de56:	f043 0304 	orr.w	r3, r3, #4
 800de5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de5e:	4b46      	ldr	r3, [pc, #280]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de64:	f003 0304 	and.w	r3, r3, #4
 800de68:	617b      	str	r3, [r7, #20]
 800de6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de6c:	4b42      	ldr	r3, [pc, #264]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de72:	4a41      	ldr	r2, [pc, #260]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de74:	f043 0301 	orr.w	r3, r3, #1
 800de78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de7c:	4b3e      	ldr	r3, [pc, #248]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	613b      	str	r3, [r7, #16]
 800de88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de8a:	4b3b      	ldr	r3, [pc, #236]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de90:	4a39      	ldr	r2, [pc, #228]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de92:	f043 0302 	orr.w	r3, r3, #2
 800de96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de9a:	4b37      	ldr	r3, [pc, #220]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800de9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dea0:	f003 0302 	and.w	r3, r3, #2
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800dea8:	4b33      	ldr	r3, [pc, #204]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800deaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800deae:	4a32      	ldr	r2, [pc, #200]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800deb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800deb8:	4b2f      	ldr	r3, [pc, #188]	; (800df78 <HAL_ETH_MspInit+0x1a8>)
 800deba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800debe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec2:	60bb      	str	r3, [r7, #8]
 800dec4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800dec6:	2332      	movs	r3, #50	; 0x32
 800dec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deca:	2302      	movs	r3, #2
 800decc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ded2:	2300      	movs	r3, #0
 800ded4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ded6:	230b      	movs	r3, #11
 800ded8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800deda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dede:	4619      	mov	r1, r3
 800dee0:	4826      	ldr	r0, [pc, #152]	; (800df7c <HAL_ETH_MspInit+0x1ac>)
 800dee2:	f7f4 ff1f 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800dee6:	2386      	movs	r3, #134	; 0x86
 800dee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deea:	2302      	movs	r3, #2
 800deec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deee:	2300      	movs	r3, #0
 800def0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800def2:	2300      	movs	r3, #0
 800def4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800def6:	230b      	movs	r3, #11
 800def8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800defa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800defe:	4619      	mov	r1, r3
 800df00:	481f      	ldr	r0, [pc, #124]	; (800df80 <HAL_ETH_MspInit+0x1b0>)
 800df02:	f7f4 ff0f 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800df06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df0c:	2302      	movs	r3, #2
 800df0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df10:	2300      	movs	r3, #0
 800df12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df14:	2300      	movs	r3, #0
 800df16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800df18:	230b      	movs	r3, #11
 800df1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800df1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df20:	4619      	mov	r1, r3
 800df22:	4818      	ldr	r0, [pc, #96]	; (800df84 <HAL_ETH_MspInit+0x1b4>)
 800df24:	f7f4 fefe 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800df28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df2e:	2302      	movs	r3, #2
 800df30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df32:	2300      	movs	r3, #0
 800df34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df36:	2300      	movs	r3, #0
 800df38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800df3a:	230b      	movs	r3, #11
 800df3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800df3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df42:	4619      	mov	r1, r3
 800df44:	4810      	ldr	r0, [pc, #64]	; (800df88 <HAL_ETH_MspInit+0x1b8>)
 800df46:	f7f4 feed 	bl	8002d24 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800df4a:	2200      	movs	r2, #0
 800df4c:	2100      	movs	r1, #0
 800df4e:	203d      	movs	r0, #61	; 0x3d
 800df50:	f7f2 feca 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800df54:	203d      	movs	r0, #61	; 0x3d
 800df56:	f7f2 fef1 	bl	8000d3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800df5a:	2200      	movs	r2, #0
 800df5c:	2100      	movs	r1, #0
 800df5e:	203e      	movs	r0, #62	; 0x3e
 800df60:	f7f2 fec2 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800df64:	203e      	movs	r0, #62	; 0x3e
 800df66:	f7f2 fee9 	bl	8000d3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800df6a:	bf00      	nop
 800df6c:	3738      	adds	r7, #56	; 0x38
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	40028000 	.word	0x40028000
 800df78:	58024400 	.word	0x58024400
 800df7c:	58020800 	.word	0x58020800
 800df80:	58020000 	.word	0x58020000
 800df84:	58020400 	.word	0x58020400
 800df88:	58021800 	.word	0x58021800

0800df8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800df98:	4b4a      	ldr	r3, [pc, #296]	; (800e0c4 <low_level_init+0x138>)
 800df9a:	4a4b      	ldr	r2, [pc, #300]	; (800e0c8 <low_level_init+0x13c>)
 800df9c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800dfa2:	2380      	movs	r3, #128	; 0x80
 800dfa4:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800dfa6:	23e1      	movs	r3, #225	; 0xe1
 800dfa8:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800dfb6:	4a43      	ldr	r2, [pc, #268]	; (800e0c4 <low_level_init+0x138>)
 800dfb8:	f107 030c 	add.w	r3, r7, #12
 800dfbc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800dfbe:	4b41      	ldr	r3, [pc, #260]	; (800e0c4 <low_level_init+0x138>)
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800dfc4:	4b3f      	ldr	r3, [pc, #252]	; (800e0c4 <low_level_init+0x138>)
 800dfc6:	4a41      	ldr	r2, [pc, #260]	; (800e0cc <low_level_init+0x140>)
 800dfc8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800dfca:	4b3e      	ldr	r3, [pc, #248]	; (800e0c4 <low_level_init+0x138>)
 800dfcc:	4a40      	ldr	r2, [pc, #256]	; (800e0d0 <low_level_init+0x144>)
 800dfce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800dfd0:	4b3c      	ldr	r3, [pc, #240]	; (800e0c4 <low_level_init+0x138>)
 800dfd2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800dfd6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800dfd8:	483a      	ldr	r0, [pc, #232]	; (800e0c4 <low_level_init+0x138>)
 800dfda:	f7f3 f87f 	bl	80010dc <HAL_ETH_Init>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800dfe2:	2234      	movs	r2, #52	; 0x34
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	483b      	ldr	r0, [pc, #236]	; (800e0d4 <low_level_init+0x148>)
 800dfe8:	f001 fa90 	bl	800f50c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800dfec:	4b39      	ldr	r3, [pc, #228]	; (800e0d4 <low_level_init+0x148>)
 800dfee:	2221      	movs	r2, #33	; 0x21
 800dff0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800dff2:	4b38      	ldr	r3, [pc, #224]	; (800e0d4 <low_level_init+0x148>)
 800dff4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800dff8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800dffa:	4b36      	ldr	r3, [pc, #216]	; (800e0d4 <low_level_init+0x148>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e000:	4835      	ldr	r0, [pc, #212]	; (800e0d8 <low_level_init+0x14c>)
 800e002:	f7fb fe73 	bl	8009cec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2206      	movs	r2, #6
 800e00a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e00e:	4b2d      	ldr	r3, [pc, #180]	; (800e0c4 <low_level_init+0x138>)
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	781a      	ldrb	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e01a:	4b2a      	ldr	r3, [pc, #168]	; (800e0c4 <low_level_init+0x138>)
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	785a      	ldrb	r2, [r3, #1]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e026:	4b27      	ldr	r3, [pc, #156]	; (800e0c4 <low_level_init+0x138>)
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	789a      	ldrb	r2, [r3, #2]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e032:	4b24      	ldr	r3, [pc, #144]	; (800e0c4 <low_level_init+0x138>)
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	78da      	ldrb	r2, [r3, #3]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e03e:	4b21      	ldr	r3, [pc, #132]	; (800e0c4 <low_level_init+0x138>)
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	791a      	ldrb	r2, [r3, #4]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e04a:	4b1e      	ldr	r3, [pc, #120]	; (800e0c4 <low_level_init+0x138>)
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	795a      	ldrb	r2, [r3, #5]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e05c:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e064:	f043 030a 	orr.w	r3, r3, #10
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e070:	2300      	movs	r3, #0
 800e072:	617b      	str	r3, [r7, #20]
 800e074:	e00e      	b.n	800e094 <low_level_init+0x108>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	4613      	mov	r3, r2
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	4413      	add	r3, r2
 800e07e:	025b      	lsls	r3, r3, #9
 800e080:	4a16      	ldr	r2, [pc, #88]	; (800e0dc <low_level_init+0x150>)
 800e082:	441a      	add	r2, r3
 800e084:	2300      	movs	r3, #0
 800e086:	6979      	ldr	r1, [r7, #20]
 800e088:	480e      	ldr	r0, [pc, #56]	; (800e0c4 <low_level_init+0x138>)
 800e08a:	f7f3 f901 	bl	8001290 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	3301      	adds	r3, #1
 800e092:	617b      	str	r3, [r7, #20]
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	2b03      	cmp	r3, #3
 800e098:	d9ed      	bls.n	800e076 <low_level_init+0xea>
      
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e09a:	4911      	ldr	r1, [pc, #68]	; (800e0e0 <low_level_init+0x154>)
 800e09c:	4811      	ldr	r0, [pc, #68]	; (800e0e4 <low_level_init+0x158>)
 800e09e:	f7f2 faf7 	bl	8000690 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e0a2:	4810      	ldr	r0, [pc, #64]	; (800e0e4 <low_level_init+0x158>)
 800e0a4:	f7f2 fb26 	bl	80006f4 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e0a8:	7cfb      	ldrb	r3, [r7, #19]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d103      	bne.n	800e0b6 <low_level_init+0x12a>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f99a 	bl	800e3e8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800e0b4:	e001      	b.n	800e0ba <low_level_init+0x12e>
    Error_Handler();
 800e0b6:	f000 fe37 	bl	800ed28 <Error_Handler>
}
 800e0ba:	bf00      	nop
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	2400376c 	.word	0x2400376c
 800e0c8:	40028000 	.word	0x40028000
 800e0cc:	30040060 	.word	0x30040060
 800e0d0:	30040000 	.word	0x30040000
 800e0d4:	240037dc 	.word	0x240037dc
 800e0d8:	08011ab8 	.word	0x08011ab8
 800e0dc:	30040200 	.word	0x30040200
 800e0e0:	24000008 	.word	0x24000008
 800e0e4:	2400374c 	.word	0x2400374c

0800e0e8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b092      	sub	sp, #72	; 0x48
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	647b      	str	r3, [r7, #68]	; 0x44
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e100:	f107 0308 	add.w	r3, r7, #8
 800e104:	2230      	movs	r2, #48	; 0x30
 800e106:	2100      	movs	r1, #0
 800e108:	4618      	mov	r0, r3
 800e10a:	f001 f9ff 	bl	800f50c <memset>
  
  for(q = p; q != NULL; q = q->next)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e112:	e04f      	b.n	800e1b4 <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800e114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e116:	2b03      	cmp	r3, #3
 800e118:	d902      	bls.n	800e120 <low_level_output+0x38>
      return ERR_IF;
 800e11a:	f06f 030b 	mvn.w	r3, #11
 800e11e:	e05a      	b.n	800e1d6 <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800e120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e122:	6859      	ldr	r1, [r3, #4]
 800e124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e126:	4613      	mov	r3, r2
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	4413      	add	r3, r2
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e132:	4413      	add	r3, r2
 800e134:	3b40      	subs	r3, #64	; 0x40
 800e136:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13a:	895b      	ldrh	r3, [r3, #10]
 800e13c:	4619      	mov	r1, r3
 800e13e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e140:	4613      	mov	r3, r2
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	4413      	add	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e14c:	4413      	add	r3, r2
 800e14e:	3b3c      	subs	r3, #60	; 0x3c
 800e150:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800e152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e154:	895b      	ldrh	r3, [r3, #10]
 800e156:	461a      	mov	r2, r3
 800e158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e15a:	4413      	add	r3, r2
 800e15c:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800e15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e160:	2b00      	cmp	r3, #0
 800e162:	d012      	beq.n	800e18a <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e166:	1e5a      	subs	r2, r3, #1
 800e168:	f107 0008 	add.w	r0, r7, #8
 800e16c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e16e:	460b      	mov	r3, r1
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	440b      	add	r3, r1
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	18c1      	adds	r1, r0, r3
 800e178:	4613      	mov	r3, r2
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	4413      	add	r3, r2
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e184:	4413      	add	r3, r2
 800e186:	3b38      	subs	r3, #56	; 0x38
 800e188:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800e18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10a      	bne.n	800e1a8 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800e192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e194:	4613      	mov	r3, r2
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	4413      	add	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e1a0:	4413      	add	r3, r2
 800e1a2:	3b38      	subs	r3, #56	; 0x38
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800e1a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1ac      	bne.n	800e114 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800e1ba:	4a09      	ldr	r2, [pc, #36]	; (800e1e0 <low_level_output+0xf8>)
 800e1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1be:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e1c0:	4a07      	ldr	r2, [pc, #28]	; (800e1e0 <low_level_output+0xf8>)
 800e1c2:	f107 0308 	add.w	r3, r7, #8
 800e1c6:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e1c8:	2214      	movs	r2, #20
 800e1ca:	4905      	ldr	r1, [pc, #20]	; (800e1e0 <low_level_output+0xf8>)
 800e1cc:	4805      	ldr	r0, [pc, #20]	; (800e1e4 <low_level_output+0xfc>)
 800e1ce:	f7f3 f94c 	bl	800146a <HAL_ETH_Transmit>
  
  return errval;
 800e1d2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3748      	adds	r7, #72	; 0x48
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	240037dc 	.word	0x240037dc
 800e1e4:	2400376c 	.word	0x2400376c

0800e1e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	; 0x28
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  
  if (HAL_ETH_IsRxDataAvailable(&heth))
 800e1f8:	481a      	ldr	r0, [pc, #104]	; (800e264 <low_level_input+0x7c>)
 800e1fa:	f7f3 f9c2 	bl	8001582 <HAL_ETH_IsRxDataAvailable>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d02a      	beq.n	800e25a <low_level_input+0x72>
  {
    HAL_ETH_GetRxDataBuffer(&heth, &RxBuff);
 800e204:	f107 030c 	add.w	r3, r7, #12
 800e208:	4619      	mov	r1, r3
 800e20a:	4816      	ldr	r0, [pc, #88]	; (800e264 <low_level_input+0x7c>)
 800e20c:	f7f3 fa97 	bl	800173e <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800e210:	f107 0308 	add.w	r3, r7, #8
 800e214:	4619      	mov	r1, r3
 800e216:	4813      	ldr	r0, [pc, #76]	; (800e264 <low_level_input+0x7c>)
 800e218:	f7f3 fb2f 	bl	800187a <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800e21c:	4811      	ldr	r0, [pc, #68]	; (800e264 <low_level_input+0x7c>)
 800e21e:	f7f3 fb5f 	bl	80018e0 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	68ba      	ldr	r2, [r7, #8]
 800e226:	4611      	mov	r1, r2
 800e228:	4618      	mov	r0, r3
 800e22a:	f7ff fda7 	bl	800dd7c <SCB_InvalidateDCache_by_Addr>
#endif
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e22e:	480e      	ldr	r0, [pc, #56]	; (800e268 <low_level_input+0x80>)
 800e230:	f7fb fdd0 	bl	8009dd4 <memp_malloc_pool>
 800e234:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	4a0c      	ldr	r2, [pc, #48]	; (800e26c <low_level_input+0x84>)
 800e23a:	611a      	str	r2, [r3, #16]
    
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	b299      	uxth	r1, r3
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e246:	9201      	str	r2, [sp, #4]
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	69bb      	ldr	r3, [r7, #24]
 800e24c:	2202      	movs	r2, #2
 800e24e:	2004      	movs	r0, #4
 800e250:	f7fc f9c2 	bl	800a5d8 <pbuf_alloced_custom>
 800e254:	61f8      	str	r0, [r7, #28]
    
    return p;
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	e000      	b.n	800e25c <low_level_input+0x74>
  }
  else
  {
    return NULL;
 800e25a:	2300      	movs	r3, #0
  }
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3720      	adds	r7, #32
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	2400376c 	.word	0x2400376c
 800e268:	08011ab8 	.word	0x08011ab8
 800e26c:	0800e30d 	.word	0x0800e30d

0800e270 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff ffb5 	bl	800e1e8 <low_level_input>
 800e27e:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d010      	beq.n	800e2a8 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	6879      	ldr	r1, [r7, #4]
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	4798      	blx	r3
 800e290:	4603      	mov	r3, r0
 800e292:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800e294:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d006      	beq.n	800e2aa <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f7fc fb79 	bl	800a994 <pbuf_free>
    p = NULL;    
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60fb      	str	r3, [r7, #12]
 800e2a6:	e000      	b.n	800e2aa <ethernetif_input+0x3a>
  if (p == NULL) return;
 800e2a8:	bf00      	nop
  }
  
}
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d106      	bne.n	800e2cc <ethernetif_init+0x1c>
 800e2be:	4b0e      	ldr	r3, [pc, #56]	; (800e2f8 <ethernetif_init+0x48>)
 800e2c0:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 800e2c4:	490d      	ldr	r1, [pc, #52]	; (800e2fc <ethernetif_init+0x4c>)
 800e2c6:	480e      	ldr	r0, [pc, #56]	; (800e300 <ethernetif_init+0x50>)
 800e2c8:	f001 f928 	bl	800f51c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2273      	movs	r2, #115	; 0x73
 800e2d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2274      	movs	r2, #116	; 0x74
 800e2d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4a09      	ldr	r2, [pc, #36]	; (800e304 <ethernetif_init+0x54>)
 800e2e0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4a08      	ldr	r2, [pc, #32]	; (800e308 <ethernetif_init+0x58>)
 800e2e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff fe4f 	bl	800df8c <low_level_init>

  return ERR_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	08011998 	.word	0x08011998
 800e2fc:	080119ac 	.word	0x080119ac
 800e300:	080119bc 	.word	0x080119bc
 800e304:	0800c0e9 	.word	0x0800c0e9
 800e308:	0800e0e9 	.word	0x0800e0e9

0800e30c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	891b      	ldrh	r3, [r3, #8]
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f7ff fd2a 	bl	800dd7c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e328:	68f9      	ldr	r1, [r7, #12]
 800e32a:	4803      	ldr	r0, [pc, #12]	; (800e338 <pbuf_free_custom+0x2c>)
 800e32c:	f7fb fdc0 	bl	8009eb0 <memp_free_pool>
}
 800e330:	bf00      	nop
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	08011ab8 	.word	0x08011ab8

0800e33c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e340:	f7f2 fb88 	bl	8000a54 <HAL_GetTick>
 800e344:	4603      	mov	r3, r0
}
 800e346:	4618      	mov	r0, r3
 800e348:	bd80      	pop	{r7, pc}
	...

0800e34c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e350:	4802      	ldr	r0, [pc, #8]	; (800e35c <ETH_PHY_IO_Init+0x10>)
 800e352:	f7f3 feff 	bl	8002154 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	2400376c 	.word	0x2400376c

0800e360 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e360:	b480      	push	{r7}
 800e362:	af00      	add	r7, sp, #0
  return 0;
 800e364:	2300      	movs	r3, #0
}
 800e366:	4618      	mov	r0, r3
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	68f9      	ldr	r1, [r7, #12]
 800e382:	4807      	ldr	r0, [pc, #28]	; (800e3a0 <ETH_PHY_IO_ReadReg+0x30>)
 800e384:	f7f3 fc50 	bl	8001c28 <HAL_ETH_ReadPHYRegister>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e38e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e392:	e000      	b.n	800e396 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	2400376c 	.word	0x2400376c

0800e3a4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	68f9      	ldr	r1, [r7, #12]
 800e3b6:	4807      	ldr	r0, [pc, #28]	; (800e3d4 <ETH_PHY_IO_WriteReg+0x30>)
 800e3b8:	f7f3 fc8a 	bl	8001cd0 <HAL_ETH_WritePHYRegister>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d002      	beq.n	800e3c8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e3c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3c6:	e000      	b.n	800e3ca <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	2400376c 	.word	0x2400376c

0800e3d8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e3dc:	f7f2 fb3a 	bl	8000a54 <HAL_GetTick>
 800e3e0:	4603      	mov	r3, r0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	bd80      	pop	{r7, pc}
	...

0800e3e8 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b0a0      	sub	sp, #128	; 0x80
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	67bb      	str	r3, [r7, #120]	; 0x78
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	677b      	str	r3, [r7, #116]	; 0x74
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e3fc:	483a      	ldr	r0, [pc, #232]	; (800e4e8 <ethernet_link_check_state+0x100>)
 800e3fe:	f7f2 fa20 	bl	8000842 <LAN8742_GetLinkState>
 800e402:	4603      	mov	r3, r0
 800e404:	673b      	str	r3, [r7, #112]	; 0x70
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e40c:	089b      	lsrs	r3, r3, #2
 800e40e:	f003 0301 	and.w	r3, r3, #1
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00c      	beq.n	800e432 <ethernet_link_check_state+0x4a>
 800e418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d809      	bhi.n	800e432 <ethernet_link_check_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 800e41e:	4833      	ldr	r0, [pc, #204]	; (800e4ec <ethernet_link_check_state+0x104>)
 800e420:	f7f2 ffd3 	bl	80013ca <HAL_ETH_Stop>
    netif_set_down(netif);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7fb fec9 	bl	800a1bc <netif_set_down>
    netif_set_link_down(netif);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7fb ff13 	bl	800a256 <netif_set_link_down>
 800e430:	e04c      	b.n	800e4cc <ethernet_link_check_state+0xe4>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e438:	f003 0304 	and.w	r3, r3, #4
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d145      	bne.n	800e4cc <ethernet_link_check_state+0xe4>
 800e440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e442:	2b01      	cmp	r3, #1
 800e444:	d942      	bls.n	800e4cc <ethernet_link_check_state+0xe4>
  {
    switch (PHYLinkState)
 800e446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e448:	3b02      	subs	r3, #2
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d82a      	bhi.n	800e4a4 <ethernet_link_check_state+0xbc>
 800e44e:	a201      	add	r2, pc, #4	; (adr r2, 800e454 <ethernet_link_check_state+0x6c>)
 800e450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e454:	0800e465 	.word	0x0800e465
 800e458:	0800e477 	.word	0x0800e477
 800e45c:	0800e487 	.word	0x0800e487
 800e460:	0800e497 	.word	0x0800e497
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e468:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e46a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e46e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e470:	2301      	movs	r3, #1
 800e472:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e474:	e017      	b.n	800e4a6 <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e476:	2300      	movs	r3, #0
 800e478:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e47a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e47e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e480:	2301      	movs	r3, #1
 800e482:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e484:	e00f      	b.n	800e4a6 <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e48a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e48c:	2300      	movs	r3, #0
 800e48e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e490:	2301      	movs	r3, #1
 800e492:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e494:	e007      	b.n	800e4a6 <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e496:	2300      	movs	r3, #0
 800e498:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e49a:	2300      	movs	r3, #0
 800e49c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e4a2:	e000      	b.n	800e4a6 <ethernet_link_check_state+0xbe>
    default:
      break;      
 800e4a4:	bf00      	nop
    }
    
    if(linkchanged)
 800e4a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00f      	beq.n	800e4cc <ethernet_link_check_state+0xe4>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800e4ac:	f107 030c 	add.w	r3, r7, #12
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	480e      	ldr	r0, [pc, #56]	; (800e4ec <ethernet_link_check_state+0x104>)
 800e4b4:	f7f3 fc60 	bl	8001d78 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4ba:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800e4bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4be:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e4c0:	f107 030c 	add.w	r3, r7, #12
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4809      	ldr	r0, [pc, #36]	; (800e4ec <ethernet_link_check_state+0x104>)
 800e4c8:	f7f3 fe2a 	bl	8002120 <HAL_ETH_SetMACConfig>
    }
  }
  HAL_ETH_Start(&heth);
 800e4cc:	4807      	ldr	r0, [pc, #28]	; (800e4ec <ethernet_link_check_state+0x104>)
 800e4ce:	f7f2 ff20 	bl	8001312 <HAL_ETH_Start>
  netif_set_up(netif);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7fb fe2e 	bl	800a134 <netif_set_up>
  netif_set_link_up(netif);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7fb fe91 	bl	800a200 <netif_set_link_up>

/* USER CODE BEGIN ETH link code for User BSP */ 
    
/* USER CODE END ETH link code for User BSP */

}
 800e4de:	bf00      	nop
 800e4e0:	3780      	adds	r7, #128	; 0x80
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	2400374c 	.word	0x2400374c
 800e4ec:	2400376c 	.word	0x2400376c

0800e4f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b08c      	sub	sp, #48	; 0x30
 800e4f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4f6:	f107 031c 	add.w	r3, r7, #28
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	605a      	str	r2, [r3, #4]
 800e500:	609a      	str	r2, [r3, #8]
 800e502:	60da      	str	r2, [r3, #12]
 800e504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e506:	4b53      	ldr	r3, [pc, #332]	; (800e654 <MX_GPIO_Init+0x164>)
 800e508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e50c:	4a51      	ldr	r2, [pc, #324]	; (800e654 <MX_GPIO_Init+0x164>)
 800e50e:	f043 0304 	orr.w	r3, r3, #4
 800e512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e516:	4b4f      	ldr	r3, [pc, #316]	; (800e654 <MX_GPIO_Init+0x164>)
 800e518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e51c:	f003 0304 	and.w	r3, r3, #4
 800e520:	61bb      	str	r3, [r7, #24]
 800e522:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e524:	4b4b      	ldr	r3, [pc, #300]	; (800e654 <MX_GPIO_Init+0x164>)
 800e526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e52a:	4a4a      	ldr	r2, [pc, #296]	; (800e654 <MX_GPIO_Init+0x164>)
 800e52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e534:	4b47      	ldr	r3, [pc, #284]	; (800e654 <MX_GPIO_Init+0x164>)
 800e536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e53a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e542:	4b44      	ldr	r3, [pc, #272]	; (800e654 <MX_GPIO_Init+0x164>)
 800e544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e548:	4a42      	ldr	r2, [pc, #264]	; (800e654 <MX_GPIO_Init+0x164>)
 800e54a:	f043 0301 	orr.w	r3, r3, #1
 800e54e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e552:	4b40      	ldr	r3, [pc, #256]	; (800e654 <MX_GPIO_Init+0x164>)
 800e554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e558:	f003 0301 	and.w	r3, r3, #1
 800e55c:	613b      	str	r3, [r7, #16]
 800e55e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e560:	4b3c      	ldr	r3, [pc, #240]	; (800e654 <MX_GPIO_Init+0x164>)
 800e562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e566:	4a3b      	ldr	r2, [pc, #236]	; (800e654 <MX_GPIO_Init+0x164>)
 800e568:	f043 0302 	orr.w	r3, r3, #2
 800e56c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e570:	4b38      	ldr	r3, [pc, #224]	; (800e654 <MX_GPIO_Init+0x164>)
 800e572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e576:	f003 0302 	and.w	r3, r3, #2
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e57e:	4b35      	ldr	r3, [pc, #212]	; (800e654 <MX_GPIO_Init+0x164>)
 800e580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e584:	4a33      	ldr	r2, [pc, #204]	; (800e654 <MX_GPIO_Init+0x164>)
 800e586:	f043 0308 	orr.w	r3, r3, #8
 800e58a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e58e:	4b31      	ldr	r3, [pc, #196]	; (800e654 <MX_GPIO_Init+0x164>)
 800e590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e594:	f003 0308 	and.w	r3, r3, #8
 800e598:	60bb      	str	r3, [r7, #8]
 800e59a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e59c:	4b2d      	ldr	r3, [pc, #180]	; (800e654 <MX_GPIO_Init+0x164>)
 800e59e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5a2:	4a2c      	ldr	r2, [pc, #176]	; (800e654 <MX_GPIO_Init+0x164>)
 800e5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e5ac:	4b29      	ldr	r3, [pc, #164]	; (800e654 <MX_GPIO_Init+0x164>)
 800e5ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5b6:	607b      	str	r3, [r7, #4]
 800e5b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800e5c0:	4825      	ldr	r0, [pc, #148]	; (800e658 <MX_GPIO_Init+0x168>)
 800e5c2:	f7f4 fe5f 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	2140      	movs	r1, #64	; 0x40
 800e5ca:	4824      	ldr	r0, [pc, #144]	; (800e65c <MX_GPIO_Init+0x16c>)
 800e5cc:	f7f4 fe5a 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800e5d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e5d6:	4b22      	ldr	r3, [pc, #136]	; (800e660 <MX_GPIO_Init+0x170>)
 800e5d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800e5de:	f107 031c 	add.w	r3, r7, #28
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	481f      	ldr	r0, [pc, #124]	; (800e664 <MX_GPIO_Init+0x174>)
 800e5e6:	f7f4 fb9d 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800e5ea:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800e5ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5fc:	f107 031c 	add.w	r3, r7, #28
 800e600:	4619      	mov	r1, r3
 800e602:	4815      	ldr	r0, [pc, #84]	; (800e658 <MX_GPIO_Init+0x168>)
 800e604:	f7f4 fb8e 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800e608:	2340      	movs	r3, #64	; 0x40
 800e60a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e60c:	2301      	movs	r3, #1
 800e60e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e610:	2300      	movs	r3, #0
 800e612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e614:	2300      	movs	r3, #0
 800e616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e618:	f107 031c 	add.w	r3, r7, #28
 800e61c:	4619      	mov	r1, r3
 800e61e:	480f      	ldr	r0, [pc, #60]	; (800e65c <MX_GPIO_Init+0x16c>)
 800e620:	f7f4 fb80 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800e624:	2380      	movs	r3, #128	; 0x80
 800e626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e628:	2300      	movs	r3, #0
 800e62a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e62c:	2300      	movs	r3, #0
 800e62e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e630:	f107 031c 	add.w	r3, r7, #28
 800e634:	4619      	mov	r1, r3
 800e636:	4809      	ldr	r0, [pc, #36]	; (800e65c <MX_GPIO_Init+0x16c>)
 800e638:	f7f4 fb74 	bl	8002d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e63c:	2200      	movs	r2, #0
 800e63e:	2100      	movs	r1, #0
 800e640:	2028      	movs	r0, #40	; 0x28
 800e642:	f7f2 fb51 	bl	8000ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e646:	2028      	movs	r0, #40	; 0x28
 800e648:	f7f2 fb78 	bl	8000d3c <HAL_NVIC_EnableIRQ>

}
 800e64c:	bf00      	nop
 800e64e:	3730      	adds	r7, #48	; 0x30
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	58024400 	.word	0x58024400
 800e658:	58020400 	.word	0x58020400
 800e65c:	58021800 	.word	0x58021800
 800e660:	11110000 	.word	0x11110000
 800e664:	58020800 	.word	0x58020800

0800e668 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e66e:	4b8b      	ldr	r3, [pc, #556]	; (800e89c <MX_LWIP_Init+0x234>)
 800e670:	22c0      	movs	r2, #192	; 0xc0
 800e672:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e674:	4b89      	ldr	r3, [pc, #548]	; (800e89c <MX_LWIP_Init+0x234>)
 800e676:	22a8      	movs	r2, #168	; 0xa8
 800e678:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800e67a:	4b88      	ldr	r3, [pc, #544]	; (800e89c <MX_LWIP_Init+0x234>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800e680:	4b86      	ldr	r3, [pc, #536]	; (800e89c <MX_LWIP_Init+0x234>)
 800e682:	220a      	movs	r2, #10
 800e684:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e686:	4b86      	ldr	r3, [pc, #536]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e688:	22ff      	movs	r2, #255	; 0xff
 800e68a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e68c:	4b84      	ldr	r3, [pc, #528]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e68e:	22ff      	movs	r2, #255	; 0xff
 800e690:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800e692:	4b83      	ldr	r3, [pc, #524]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e694:	22ff      	movs	r2, #255	; 0xff
 800e696:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e698:	4b81      	ldr	r3, [pc, #516]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800e69e:	4b81      	ldr	r3, [pc, #516]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800e6a4:	4b7f      	ldr	r3, [pc, #508]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e6aa:	4b7e      	ldr	r3, [pc, #504]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800e6b0:	4b7c      	ldr	r3, [pc, #496]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e6b6:	f7fb f80c 	bl	80096d2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e6ba:	4b78      	ldr	r3, [pc, #480]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	061a      	lsls	r2, r3, #24
 800e6c0:	4b76      	ldr	r3, [pc, #472]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6c2:	785b      	ldrb	r3, [r3, #1]
 800e6c4:	041b      	lsls	r3, r3, #16
 800e6c6:	431a      	orrs	r2, r3
 800e6c8:	4b74      	ldr	r3, [pc, #464]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6ca:	789b      	ldrb	r3, [r3, #2]
 800e6cc:	021b      	lsls	r3, r3, #8
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	4a72      	ldr	r2, [pc, #456]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6d2:	78d2      	ldrb	r2, [r2, #3]
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	061a      	lsls	r2, r3, #24
 800e6d8:	4b70      	ldr	r3, [pc, #448]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	0619      	lsls	r1, r3, #24
 800e6de:	4b6f      	ldr	r3, [pc, #444]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6e0:	785b      	ldrb	r3, [r3, #1]
 800e6e2:	041b      	lsls	r3, r3, #16
 800e6e4:	4319      	orrs	r1, r3
 800e6e6:	4b6d      	ldr	r3, [pc, #436]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6e8:	789b      	ldrb	r3, [r3, #2]
 800e6ea:	021b      	lsls	r3, r3, #8
 800e6ec:	430b      	orrs	r3, r1
 800e6ee:	496b      	ldr	r1, [pc, #428]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6f0:	78c9      	ldrb	r1, [r1, #3]
 800e6f2:	430b      	orrs	r3, r1
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6fa:	431a      	orrs	r2, r3
 800e6fc:	4b67      	ldr	r3, [pc, #412]	; (800e89c <MX_LWIP_Init+0x234>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	0619      	lsls	r1, r3, #24
 800e702:	4b66      	ldr	r3, [pc, #408]	; (800e89c <MX_LWIP_Init+0x234>)
 800e704:	785b      	ldrb	r3, [r3, #1]
 800e706:	041b      	lsls	r3, r3, #16
 800e708:	4319      	orrs	r1, r3
 800e70a:	4b64      	ldr	r3, [pc, #400]	; (800e89c <MX_LWIP_Init+0x234>)
 800e70c:	789b      	ldrb	r3, [r3, #2]
 800e70e:	021b      	lsls	r3, r3, #8
 800e710:	430b      	orrs	r3, r1
 800e712:	4962      	ldr	r1, [pc, #392]	; (800e89c <MX_LWIP_Init+0x234>)
 800e714:	78c9      	ldrb	r1, [r1, #3]
 800e716:	430b      	orrs	r3, r1
 800e718:	0a1b      	lsrs	r3, r3, #8
 800e71a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e71e:	431a      	orrs	r2, r3
 800e720:	4b5e      	ldr	r3, [pc, #376]	; (800e89c <MX_LWIP_Init+0x234>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	0619      	lsls	r1, r3, #24
 800e726:	4b5d      	ldr	r3, [pc, #372]	; (800e89c <MX_LWIP_Init+0x234>)
 800e728:	785b      	ldrb	r3, [r3, #1]
 800e72a:	041b      	lsls	r3, r3, #16
 800e72c:	4319      	orrs	r1, r3
 800e72e:	4b5b      	ldr	r3, [pc, #364]	; (800e89c <MX_LWIP_Init+0x234>)
 800e730:	789b      	ldrb	r3, [r3, #2]
 800e732:	021b      	lsls	r3, r3, #8
 800e734:	430b      	orrs	r3, r1
 800e736:	4959      	ldr	r1, [pc, #356]	; (800e89c <MX_LWIP_Init+0x234>)
 800e738:	78c9      	ldrb	r1, [r1, #3]
 800e73a:	430b      	orrs	r3, r1
 800e73c:	0e1b      	lsrs	r3, r3, #24
 800e73e:	4313      	orrs	r3, r2
 800e740:	4a59      	ldr	r2, [pc, #356]	; (800e8a8 <MX_LWIP_Init+0x240>)
 800e742:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e744:	4b56      	ldr	r3, [pc, #344]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	061a      	lsls	r2, r3, #24
 800e74a:	4b55      	ldr	r3, [pc, #340]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e74c:	785b      	ldrb	r3, [r3, #1]
 800e74e:	041b      	lsls	r3, r3, #16
 800e750:	431a      	orrs	r2, r3
 800e752:	4b53      	ldr	r3, [pc, #332]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e754:	789b      	ldrb	r3, [r3, #2]
 800e756:	021b      	lsls	r3, r3, #8
 800e758:	4313      	orrs	r3, r2
 800e75a:	4a51      	ldr	r2, [pc, #324]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e75c:	78d2      	ldrb	r2, [r2, #3]
 800e75e:	4313      	orrs	r3, r2
 800e760:	061a      	lsls	r2, r3, #24
 800e762:	4b4f      	ldr	r3, [pc, #316]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	0619      	lsls	r1, r3, #24
 800e768:	4b4d      	ldr	r3, [pc, #308]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e76a:	785b      	ldrb	r3, [r3, #1]
 800e76c:	041b      	lsls	r3, r3, #16
 800e76e:	4319      	orrs	r1, r3
 800e770:	4b4b      	ldr	r3, [pc, #300]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e772:	789b      	ldrb	r3, [r3, #2]
 800e774:	021b      	lsls	r3, r3, #8
 800e776:	430b      	orrs	r3, r1
 800e778:	4949      	ldr	r1, [pc, #292]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e77a:	78c9      	ldrb	r1, [r1, #3]
 800e77c:	430b      	orrs	r3, r1
 800e77e:	021b      	lsls	r3, r3, #8
 800e780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e784:	431a      	orrs	r2, r3
 800e786:	4b46      	ldr	r3, [pc, #280]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	0619      	lsls	r1, r3, #24
 800e78c:	4b44      	ldr	r3, [pc, #272]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e78e:	785b      	ldrb	r3, [r3, #1]
 800e790:	041b      	lsls	r3, r3, #16
 800e792:	4319      	orrs	r1, r3
 800e794:	4b42      	ldr	r3, [pc, #264]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e796:	789b      	ldrb	r3, [r3, #2]
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	430b      	orrs	r3, r1
 800e79c:	4940      	ldr	r1, [pc, #256]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e79e:	78c9      	ldrb	r1, [r1, #3]
 800e7a0:	430b      	orrs	r3, r1
 800e7a2:	0a1b      	lsrs	r3, r3, #8
 800e7a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	4b3d      	ldr	r3, [pc, #244]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	0619      	lsls	r1, r3, #24
 800e7b0:	4b3b      	ldr	r3, [pc, #236]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e7b2:	785b      	ldrb	r3, [r3, #1]
 800e7b4:	041b      	lsls	r3, r3, #16
 800e7b6:	4319      	orrs	r1, r3
 800e7b8:	4b39      	ldr	r3, [pc, #228]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e7ba:	789b      	ldrb	r3, [r3, #2]
 800e7bc:	021b      	lsls	r3, r3, #8
 800e7be:	430b      	orrs	r3, r1
 800e7c0:	4937      	ldr	r1, [pc, #220]	; (800e8a0 <MX_LWIP_Init+0x238>)
 800e7c2:	78c9      	ldrb	r1, [r1, #3]
 800e7c4:	430b      	orrs	r3, r1
 800e7c6:	0e1b      	lsrs	r3, r3, #24
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	4a38      	ldr	r2, [pc, #224]	; (800e8ac <MX_LWIP_Init+0x244>)
 800e7cc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e7ce:	4b35      	ldr	r3, [pc, #212]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	061a      	lsls	r2, r3, #24
 800e7d4:	4b33      	ldr	r3, [pc, #204]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e7d6:	785b      	ldrb	r3, [r3, #1]
 800e7d8:	041b      	lsls	r3, r3, #16
 800e7da:	431a      	orrs	r2, r3
 800e7dc:	4b31      	ldr	r3, [pc, #196]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e7de:	789b      	ldrb	r3, [r3, #2]
 800e7e0:	021b      	lsls	r3, r3, #8
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	4a2f      	ldr	r2, [pc, #188]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e7e6:	78d2      	ldrb	r2, [r2, #3]
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	061a      	lsls	r2, r3, #24
 800e7ec:	4b2d      	ldr	r3, [pc, #180]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	0619      	lsls	r1, r3, #24
 800e7f2:	4b2c      	ldr	r3, [pc, #176]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e7f4:	785b      	ldrb	r3, [r3, #1]
 800e7f6:	041b      	lsls	r3, r3, #16
 800e7f8:	4319      	orrs	r1, r3
 800e7fa:	4b2a      	ldr	r3, [pc, #168]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e7fc:	789b      	ldrb	r3, [r3, #2]
 800e7fe:	021b      	lsls	r3, r3, #8
 800e800:	430b      	orrs	r3, r1
 800e802:	4928      	ldr	r1, [pc, #160]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e804:	78c9      	ldrb	r1, [r1, #3]
 800e806:	430b      	orrs	r3, r1
 800e808:	021b      	lsls	r3, r3, #8
 800e80a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e80e:	431a      	orrs	r2, r3
 800e810:	4b24      	ldr	r3, [pc, #144]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	0619      	lsls	r1, r3, #24
 800e816:	4b23      	ldr	r3, [pc, #140]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e818:	785b      	ldrb	r3, [r3, #1]
 800e81a:	041b      	lsls	r3, r3, #16
 800e81c:	4319      	orrs	r1, r3
 800e81e:	4b21      	ldr	r3, [pc, #132]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e820:	789b      	ldrb	r3, [r3, #2]
 800e822:	021b      	lsls	r3, r3, #8
 800e824:	430b      	orrs	r3, r1
 800e826:	491f      	ldr	r1, [pc, #124]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e828:	78c9      	ldrb	r1, [r1, #3]
 800e82a:	430b      	orrs	r3, r1
 800e82c:	0a1b      	lsrs	r3, r3, #8
 800e82e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e832:	431a      	orrs	r2, r3
 800e834:	4b1b      	ldr	r3, [pc, #108]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	0619      	lsls	r1, r3, #24
 800e83a:	4b1a      	ldr	r3, [pc, #104]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e83c:	785b      	ldrb	r3, [r3, #1]
 800e83e:	041b      	lsls	r3, r3, #16
 800e840:	4319      	orrs	r1, r3
 800e842:	4b18      	ldr	r3, [pc, #96]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e844:	789b      	ldrb	r3, [r3, #2]
 800e846:	021b      	lsls	r3, r3, #8
 800e848:	430b      	orrs	r3, r1
 800e84a:	4916      	ldr	r1, [pc, #88]	; (800e8a4 <MX_LWIP_Init+0x23c>)
 800e84c:	78c9      	ldrb	r1, [r1, #3]
 800e84e:	430b      	orrs	r3, r1
 800e850:	0e1b      	lsrs	r3, r3, #24
 800e852:	4313      	orrs	r3, r2
 800e854:	4a16      	ldr	r2, [pc, #88]	; (800e8b0 <MX_LWIP_Init+0x248>)
 800e856:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e858:	4b16      	ldr	r3, [pc, #88]	; (800e8b4 <MX_LWIP_Init+0x24c>)
 800e85a:	9302      	str	r3, [sp, #8]
 800e85c:	4b16      	ldr	r3, [pc, #88]	; (800e8b8 <MX_LWIP_Init+0x250>)
 800e85e:	9301      	str	r3, [sp, #4]
 800e860:	2300      	movs	r3, #0
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	4b12      	ldr	r3, [pc, #72]	; (800e8b0 <MX_LWIP_Init+0x248>)
 800e866:	4a11      	ldr	r2, [pc, #68]	; (800e8ac <MX_LWIP_Init+0x244>)
 800e868:	490f      	ldr	r1, [pc, #60]	; (800e8a8 <MX_LWIP_Init+0x240>)
 800e86a:	4814      	ldr	r0, [pc, #80]	; (800e8bc <MX_LWIP_Init+0x254>)
 800e86c:	f7fb fb76 	bl	8009f5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e870:	4812      	ldr	r0, [pc, #72]	; (800e8bc <MX_LWIP_Init+0x254>)
 800e872:	f7fb fc4f 	bl	800a114 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e876:	4b11      	ldr	r3, [pc, #68]	; (800e8bc <MX_LWIP_Init+0x254>)
 800e878:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e87c:	089b      	lsrs	r3, r3, #2
 800e87e:	f003 0301 	and.w	r3, r3, #1
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d003      	beq.n	800e890 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e888:	480c      	ldr	r0, [pc, #48]	; (800e8bc <MX_LWIP_Init+0x254>)
 800e88a:	f7fb fc53 	bl	800a134 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e88e:	e002      	b.n	800e896 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 800e890:	480a      	ldr	r0, [pc, #40]	; (800e8bc <MX_LWIP_Init+0x254>)
 800e892:	f7fb fc93 	bl	800a1bc <netif_set_down>
}
 800e896:	bf00      	nop
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	24003850 	.word	0x24003850
 800e8a0:	2400384c 	.word	0x2400384c
 800e8a4:	24003810 	.word	0x24003810
 800e8a8:	24003848 	.word	0x24003848
 800e8ac:	24003854 	.word	0x24003854
 800e8b0:	24003858 	.word	0x24003858
 800e8b4:	0800db51 	.word	0x0800db51
 800e8b8:	0800e2b1 	.word	0x0800e2b1
 800e8bc:	24003814 	.word	0x24003814

0800e8c0 <SCB_EnableICache>:
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e8c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e8c8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800e8cc:	4b0b      	ldr	r3, [pc, #44]	; (800e8fc <SCB_EnableICache+0x3c>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800e8d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e8d8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800e8dc:	4b07      	ldr	r3, [pc, #28]	; (800e8fc <SCB_EnableICache+0x3c>)
 800e8de:	695b      	ldr	r3, [r3, #20]
 800e8e0:	4a06      	ldr	r2, [pc, #24]	; (800e8fc <SCB_EnableICache+0x3c>)
 800e8e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e8e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e8ec:	f3bf 8f6f 	isb	sy
}
 800e8f0:	bf00      	nop
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	e000ed00 	.word	0xe000ed00

0800e900 <SCB_EnableDCache>:
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800e906:	4b1d      	ldr	r3, [pc, #116]	; (800e97c <SCB_EnableDCache+0x7c>)
 800e908:	2200      	movs	r2, #0
 800e90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800e90e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800e912:	4b1a      	ldr	r3, [pc, #104]	; (800e97c <SCB_EnableDCache+0x7c>)
 800e914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e918:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	0b5b      	lsrs	r3, r3, #13
 800e91e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e922:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	08db      	lsrs	r3, r3, #3
 800e928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e92c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	015a      	lsls	r2, r3, #5
 800e932:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800e936:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800e938:	68ba      	ldr	r2, [r7, #8]
 800e93a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e93c:	490f      	ldr	r1, [pc, #60]	; (800e97c <SCB_EnableDCache+0x7c>)
 800e93e:	4313      	orrs	r3, r2
 800e940:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	1e5a      	subs	r2, r3, #1
 800e948:	60ba      	str	r2, [r7, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d1ef      	bne.n	800e92e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	1e5a      	subs	r2, r3, #1
 800e952:	60fa      	str	r2, [r7, #12]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d1e5      	bne.n	800e924 <SCB_EnableDCache+0x24>
 800e958:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800e95c:	4b07      	ldr	r3, [pc, #28]	; (800e97c <SCB_EnableDCache+0x7c>)
 800e95e:	695b      	ldr	r3, [r3, #20]
 800e960:	4a06      	ldr	r2, [pc, #24]	; (800e97c <SCB_EnableDCache+0x7c>)
 800e962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e966:	6153      	str	r3, [r2, #20]
 800e968:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e96c:	f3bf 8f6f 	isb	sy
}
 800e970:	bf00      	nop
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	e000ed00 	.word	0xe000ed00

0800e980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 800e98a:	f000 f989 	bl	800eca0 <MPU_Config>
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800e98e:	f7ff ff97 	bl	800e8c0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800e992:	f7ff ffb5 	bl	800e900 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e996:	f7f1 ffdb 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e99a:	f000 f863 	bl	800ea64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e99e:	f7ff fda7 	bl	800e4f0 <MX_GPIO_Init>
//  MX_MDMA_Init();
  MX_USART3_UART_Init();
 800e9a2:	f000 fcb5 	bl	800f310 <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
  MX_LWIP_Init();
 800e9a6:	f7ff fe5f 	bl	800e668 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	BSP_Config();
 800e9aa:	f000 f927 	bl	800ebfc <BSP_Config>
	/* Configure the Network interface */
	Netif_Config();
 800e9ae:	f000 f943 	bl	800ec38 <Netif_Config>

	/* UDP client connect */
	udp_echoclient_connect();
 800e9b2:	f000 fc0b 	bl	800f1cc <udp_echoclient_connect>
	printf("Start UDP echo client\n");
 800e9b6:	4828      	ldr	r0, [pc, #160]	; (800ea58 <main+0xd8>)
 800e9b8:	f000 fe24 	bl	800f604 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint16_t   data[5000+1] = {0};
 800e9bc:	4b27      	ldr	r3, [pc, #156]	; (800ea5c <main+0xdc>)
 800e9be:	f242 7218 	movw	r2, #10008	; 0x2718
 800e9c2:	443a      	add	r2, r7
 800e9c4:	4413      	add	r3, r2
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f242 7312 	movw	r3, #10002	; 0x2712
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	f000 fd9c 	bl	800f50c <memset>
	while (1)
	{
		  for (uint16_t i = 5000; i > 0; i--)
 800e9d4:	f241 3388 	movw	r3, #5000	; 0x1388
 800e9d8:	f242 7216 	movw	r2, #10006	; 0x2716
 800e9dc:	443a      	add	r2, r7
 800e9de:	8013      	strh	r3, [r2, #0]
 800e9e0:	e01c      	b.n	800ea1c <main+0x9c>
		  {
			  data[i] = i * 6;
 800e9e2:	f242 7316 	movw	r3, #10006	; 0x2716
 800e9e6:	443b      	add	r3, r7
 800e9e8:	881a      	ldrh	r2, [r3, #0]
 800e9ea:	f242 7316 	movw	r3, #10006	; 0x2716
 800e9ee:	443b      	add	r3, r7
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	0049      	lsls	r1, r1, #1
 800e9f6:	440b      	add	r3, r1
 800e9f8:	005b      	lsls	r3, r3, #1
 800e9fa:	b299      	uxth	r1, r3
 800e9fc:	4b17      	ldr	r3, [pc, #92]	; (800ea5c <main+0xdc>)
 800e9fe:	f242 7018 	movw	r0, #10008	; 0x2718
 800ea02:	4438      	add	r0, r7
 800ea04:	4403      	add	r3, r0
 800ea06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for (uint16_t i = 5000; i > 0; i--)
 800ea0a:	f242 7316 	movw	r3, #10006	; 0x2716
 800ea0e:	443b      	add	r3, r7
 800ea10:	881b      	ldrh	r3, [r3, #0]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	f242 7216 	movw	r2, #10006	; 0x2716
 800ea18:	443a      	add	r2, r7
 800ea1a:	8013      	strh	r3, [r2, #0]
 800ea1c:	f242 7316 	movw	r3, #10006	; 0x2716
 800ea20:	443b      	add	r3, r7
 800ea22:	881b      	ldrh	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1dc      	bne.n	800e9e2 <main+0x62>
		  }

		  udp_send_buff((uint8_t*)data, 5000*2);
 800ea28:	4b0c      	ldr	r3, [pc, #48]	; (800ea5c <main+0xdc>)
 800ea2a:	f242 7218 	movw	r2, #10008	; 0x2718
 800ea2e:	443a      	add	r2, r7
 800ea30:	4413      	add	r3, r2
 800ea32:	f242 7110 	movw	r1, #10000	; 0x2710
 800ea36:	4618      	mov	r0, r3
 800ea38:	f000 fc2e 	bl	800f298 <udp_send_buff>

		  HAL_Delay(1000);
 800ea3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ea40:	f7f2 f814 	bl	8000a6c <HAL_Delay>


		/* Read a received packet from the Ethernet buffers and send it
	       to the lwIP for handling */
		ethernetif_input(&gnetif);
 800ea44:	4806      	ldr	r0, [pc, #24]	; (800ea60 <main+0xe0>)
 800ea46:	f7ff fc13 	bl	800e270 <ethernetif_input>

		/* Handle timeouts */
		sys_check_timeouts();
 800ea4a:	f7fc fb17 	bl	800b07c <sys_check_timeouts>

#if LWIP_NETIF_LINK_CALLBACK
		Ethernet_Link_Periodic_Handle(&gnetif);
 800ea4e:	4804      	ldr	r0, [pc, #16]	; (800ea60 <main+0xe0>)
 800ea50:	f7ff f97a 	bl	800dd48 <Ethernet_Link_Periodic_Handle>
		  for (uint16_t i = 5000; i > 0; i--)
 800ea54:	e7be      	b.n	800e9d4 <main+0x54>
 800ea56:	bf00      	nop
 800ea58:	080119e4 	.word	0x080119e4
 800ea5c:	ffffd8ec 	.word	0xffffd8ec
 800ea60:	24003814 	.word	0x24003814

0800ea64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b0cc      	sub	sp, #304	; 0x130
 800ea68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ea6a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ea6e:	224c      	movs	r2, #76	; 0x4c
 800ea70:	2100      	movs	r1, #0
 800ea72:	4618      	mov	r0, r3
 800ea74:	f000 fd4a 	bl	800f50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ea78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ea7c:	2220      	movs	r2, #32
 800ea7e:	2100      	movs	r1, #0
 800ea80:	4618      	mov	r0, r3
 800ea82:	f000 fd43 	bl	800f50c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ea86:	f107 0308 	add.w	r3, r7, #8
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	23bc      	movs	r3, #188	; 0xbc
 800ea8e:	461a      	mov	r2, r3
 800ea90:	2100      	movs	r1, #0
 800ea92:	f000 fd3b 	bl	800f50c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ea96:	2002      	movs	r0, #2
 800ea98:	f7f4 fc40 	bl	800331c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800ea9c:	1d3b      	adds	r3, r7, #4
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	4b4a      	ldr	r3, [pc, #296]	; (800ebcc <SystemClock_Config+0x168>)
 800eaa4:	699b      	ldr	r3, [r3, #24]
 800eaa6:	4a49      	ldr	r2, [pc, #292]	; (800ebcc <SystemClock_Config+0x168>)
 800eaa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eaac:	6193      	str	r3, [r2, #24]
 800eaae:	4b47      	ldr	r3, [pc, #284]	; (800ebcc <SystemClock_Config+0x168>)
 800eab0:	699b      	ldr	r3, [r3, #24]
 800eab2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800eab6:	1d3b      	adds	r3, r7, #4
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	4b45      	ldr	r3, [pc, #276]	; (800ebd0 <SystemClock_Config+0x16c>)
 800eabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabe:	4a44      	ldr	r2, [pc, #272]	; (800ebd0 <SystemClock_Config+0x16c>)
 800eac0:	f043 0301 	orr.w	r3, r3, #1
 800eac4:	62d3      	str	r3, [r2, #44]	; 0x2c
 800eac6:	4b42      	ldr	r3, [pc, #264]	; (800ebd0 <SystemClock_Config+0x16c>)
 800eac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaca:	f003 0201 	and.w	r2, r3, #1
 800eace:	1d3b      	adds	r3, r7, #4
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	1d3b      	adds	r3, r7, #4
 800ead4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800ead6:	bf00      	nop
 800ead8:	4b3c      	ldr	r3, [pc, #240]	; (800ebcc <SystemClock_Config+0x168>)
 800eada:	699b      	ldr	r3, [r3, #24]
 800eadc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eae4:	d1f8      	bne.n	800ead8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800eae6:	2301      	movs	r3, #1
 800eae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800eaec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800eaf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800eaf4:	2302      	movs	r3, #2
 800eaf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800eafa:	2302      	movs	r3, #2
 800eafc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800eb00:	2301      	movs	r3, #1
 800eb02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 800eb06:	2378      	movs	r3, #120	; 0x78
 800eb08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800eb0c:	2302      	movs	r3, #2
 800eb0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800eb12:	2314      	movs	r3, #20
 800eb14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800eb18:	2302      	movs	r3, #2
 800eb1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800eb1e:	230c      	movs	r3, #12
 800eb20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800eb24:	2300      	movs	r3, #0
 800eb26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800eb30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7f4 fc45 	bl	80033c4 <HAL_RCC_OscConfig>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800eb40:	f000 f8f2 	bl	800ed28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800eb44:	233f      	movs	r3, #63	; 0x3f
 800eb46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800eb50:	2300      	movs	r3, #0
 800eb52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800eb56:	2308      	movs	r3, #8
 800eb58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800eb5c:	2340      	movs	r3, #64	; 0x40
 800eb5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800eb62:	2340      	movs	r3, #64	; 0x40
 800eb64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800eb68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800eb70:	2340      	movs	r3, #64	; 0x40
 800eb72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800eb76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800eb7a:	2104      	movs	r1, #4
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f5 f901 	bl	8003d84 <HAL_RCC_ClockConfig>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <SystemClock_Config+0x128>
  {
    Error_Handler();
 800eb88:	f000 f8ce 	bl	800ed28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800eb8c:	f107 0308 	add.w	r3, r7, #8
 800eb90:	4a10      	ldr	r2, [pc, #64]	; (800ebd4 <SystemClock_Config+0x170>)
 800eb92:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800eb94:	f107 0308 	add.w	r3, r7, #8
 800eb98:	2200      	movs	r2, #0
 800eb9a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800eb9c:	f107 0308 	add.w	r3, r7, #8
 800eba0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800eba8:	f107 0308 	add.w	r3, r7, #8
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7f5 fe01 	bl	80047b4 <HAL_RCCEx_PeriphCLKConfig>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <SystemClock_Config+0x158>
  {
    Error_Handler();
 800ebb8:	f000 f8b6 	bl	800ed28 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ebbc:	f7f4 fbf2 	bl	80033a4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800ebc0:	bf00      	nop
 800ebc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	58024800 	.word	0x58024800
 800ebd0:	58000400 	.word	0x58000400
 800ebd4:	00040002 	.word	0x00040002

0800ebd8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800ebe0:	1d39      	adds	r1, r7, #4
 800ebe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	4803      	ldr	r0, [pc, #12]	; (800ebf8 <__io_putchar+0x20>)
 800ebea:	f7f7 fd65 	bl	80066b8 <HAL_UART_Transmit>

  return ch;
 800ebee:	687b      	ldr	r3, [r7, #4]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	240038c4 	.word	0x240038c4

0800ebfc <BSP_Config>:

static void BSP_Config(void)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800ec00:	2101      	movs	r1, #1
 800ec02:	2000      	movs	r0, #0
 800ec04:	f000 f98c 	bl	800ef20 <BSP_PB_Init>
  LCD_LOG_SetFooter((uint8_t *)"STM32H743I-EVAL board");

  LCD_UsrLog("  State: Ethernet Initialization ...\n");

#else
  BSP_LED_Init(LED1);
 800ec08:	2000      	movs	r0, #0
 800ec0a:	f000 f903 	bl	800ee14 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800ec0e:	2001      	movs	r0, #1
 800ec10:	f000 f900 	bl	800ee14 <BSP_LED_Init>
#endif
}
 800ec14:	bf00      	nop
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	4603      	mov	r3, r0
 800ec20:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == KEY_BUTTON_PIN)
 800ec22:	88fb      	ldrh	r3, [r7, #6]
 800ec24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec28:	d101      	bne.n	800ec2e <HAL_GPIO_EXTI_Callback+0x16>
  {
     /* send udp echo */
     udp_echoclient_send();
 800ec2a:	f000 fafd 	bl	800f228 <udp_echoclient_send>
  }
}
 800ec2e:	bf00      	nop
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <Netif_Config>:
 * @brief  Setup the network interface
 * @param  None
 * @retval None
 */
static void Netif_Config(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af04      	add	r7, sp, #16
	ip_addr_set_zero_ip4(&netmask);
	ip_addr_set_zero_ip4(&gw);
#else

	/* IP address default setting */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800ec3e:	4b12      	ldr	r3, [pc, #72]	; (800ec88 <Netif_Config+0x50>)
 800ec40:	60fb      	str	r3, [r7, #12]
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 800ec42:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ec46:	60bb      	str	r3, [r7, #8]
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800ec48:	4b10      	ldr	r3, [pc, #64]	; (800ec8c <Netif_Config+0x54>)
 800ec4a:	607b      	str	r3, [r7, #4]

#endif

	/* add the network interface */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ec4c:	1d38      	adds	r0, r7, #4
 800ec4e:	f107 0208 	add.w	r2, r7, #8
 800ec52:	f107 010c 	add.w	r1, r7, #12
 800ec56:	4b0e      	ldr	r3, [pc, #56]	; (800ec90 <Netif_Config+0x58>)
 800ec58:	9302      	str	r3, [sp, #8]
 800ec5a:	4b0e      	ldr	r3, [pc, #56]	; (800ec94 <Netif_Config+0x5c>)
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	4603      	mov	r3, r0
 800ec64:	480c      	ldr	r0, [pc, #48]	; (800ec98 <Netif_Config+0x60>)
 800ec66:	f7fb f979 	bl	8009f5c <netif_add>

	/*  Registers the default network interface */
	netif_set_default(&gnetif);
 800ec6a:	480b      	ldr	r0, [pc, #44]	; (800ec98 <Netif_Config+0x60>)
 800ec6c:	f7fb fa52 	bl	800a114 <netif_set_default>

	ethernet_link_status_updated(&gnetif);
 800ec70:	4809      	ldr	r0, [pc, #36]	; (800ec98 <Netif_Config+0x60>)
 800ec72:	f7ff f84b 	bl	800dd0c <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ec76:	4909      	ldr	r1, [pc, #36]	; (800ec9c <Netif_Config+0x64>)
 800ec78:	4807      	ldr	r0, [pc, #28]	; (800ec98 <Netif_Config+0x60>)
 800ec7a:	f7fb fb0c 	bl	800a296 <netif_set_link_callback>
#endif
}
 800ec7e:	bf00      	nop
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	0a00a8c0 	.word	0x0a00a8c0
 800ec8c:	0100a8c0 	.word	0x0100a8c0
 800ec90:	0800db51 	.word	0x0800db51
 800ec94:	0800e2b1 	.word	0x0800e2b1
 800ec98:	24003814 	.word	0x24003814
 800ec9c:	0800dd0d 	.word	0x0800dd0d

0800eca0 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800eca6:	f7f2 f86d 	bl	8000d84 <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800ecae:	4b1c      	ldr	r3, [pc, #112]	; (800ed20 <MPU_Config+0x80>)
 800ecb0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800ecb2:	2307      	movs	r3, #7
 800ecb4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ecb6:	2303      	movs	r3, #3
 800ecb8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ecd6:	463b      	mov	r3, r7
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7f2 f887 	bl	8000dec <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ecde:	2301      	movs	r3, #1
 800ece0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 800ece2:	4b10      	ldr	r3, [pc, #64]	; (800ed24 <MPU_Config+0x84>)
 800ece4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800ece6:	230d      	movs	r3, #13
 800ece8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ecea:	2303      	movs	r3, #3
 800ecec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800ed02:	2300      	movs	r3, #0
 800ed04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800ed06:	2300      	movs	r3, #0
 800ed08:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ed0a:	463b      	mov	r3, r7
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7f2 f86d 	bl	8000dec <HAL_MPU_ConfigRegion>

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
#endif

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800ed12:	2004      	movs	r0, #4
 800ed14:	f7f2 f84c 	bl	8000db0 <HAL_MPU_Enable>
}
 800ed18:	bf00      	nop
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	30040000 	.word	0x30040000
 800ed24:	30044000 	.word	0x30044000

0800ed28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ed2c:	bf00      	nop
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr

0800ed36 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
 800ed3e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800ed40:	bf00      	nop
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ed52:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <HAL_MspInit+0x30>)
 800ed54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed58:	4a08      	ldr	r2, [pc, #32]	; (800ed7c <HAL_MspInit+0x30>)
 800ed5a:	f043 0302 	orr.w	r3, r3, #2
 800ed5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ed62:	4b06      	ldr	r3, [pc, #24]	; (800ed7c <HAL_MspInit+0x30>)
 800ed64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed68:	f003 0302 	and.w	r3, r3, #2
 800ed6c:	607b      	str	r3, [r7, #4]
 800ed6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	58024400 	.word	0x58024400

0800ed80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ed80:	b480      	push	{r7}
 800ed82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ed84:	bf00      	nop
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr

0800ed8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ed8e:	b480      	push	{r7}
 800ed90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ed92:	e7fe      	b.n	800ed92 <HardFault_Handler+0x4>

0800ed94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ed94:	b480      	push	{r7}
 800ed96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ed98:	e7fe      	b.n	800ed98 <MemManage_Handler+0x4>

0800ed9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ed9e:	e7fe      	b.n	800ed9e <BusFault_Handler+0x4>

0800eda0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800eda0:	b480      	push	{r7}
 800eda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800eda4:	e7fe      	b.n	800eda4 <UsageFault_Handler+0x4>

0800eda6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800eda6:	b480      	push	{r7}
 800eda8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800edaa:	bf00      	nop
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800edb4:	b480      	push	{r7}
 800edb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800edb8:	bf00      	nop
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr

0800edc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800edc2:	b480      	push	{r7}
 800edc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800edc6:	bf00      	nop
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800edd4:	f7f1 fe2a 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800edd8:	bf00      	nop
 800edda:	bd80      	pop	{r7, pc}

0800eddc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ede0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ede4:	f7f4 fa82 	bl	80032ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ede8:	bf00      	nop
 800edea:	bd80      	pop	{r7, pc}

0800edec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800edf0:	4802      	ldr	r0, [pc, #8]	; (800edfc <ETH_IRQHandler+0x10>)
 800edf2:	f7f2 fde9 	bl	80019c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800edf6:	bf00      	nop
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	2400376c 	.word	0x2400376c

0800ee00 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800ee04:	4802      	ldr	r0, [pc, #8]	; (800ee10 <ETH_WKUP_IRQHandler+0x10>)
 800ee06:	f7f2 fddf 	bl	80019c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800ee0a:	bf00      	nop
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	2400376c 	.word	0x2400376c

0800ee14 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b08a      	sub	sp, #40	; 0x28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800ee1e:	79fb      	ldrb	r3, [r7, #7]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10f      	bne.n	800ee44 <BSP_LED_Init+0x30>
 800ee24:	4b21      	ldr	r3, [pc, #132]	; (800eeac <BSP_LED_Init+0x98>)
 800ee26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee2a:	4a20      	ldr	r2, [pc, #128]	; (800eeac <BSP_LED_Init+0x98>)
 800ee2c:	f043 0302 	orr.w	r3, r3, #2
 800ee30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee34:	4b1d      	ldr	r3, [pc, #116]	; (800eeac <BSP_LED_Init+0x98>)
 800ee36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee3a:	f003 0302 	and.w	r3, r3, #2
 800ee3e:	613b      	str	r3, [r7, #16]
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	e00e      	b.n	800ee62 <BSP_LED_Init+0x4e>
 800ee44:	4b19      	ldr	r3, [pc, #100]	; (800eeac <BSP_LED_Init+0x98>)
 800ee46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee4a:	4a18      	ldr	r2, [pc, #96]	; (800eeac <BSP_LED_Init+0x98>)
 800ee4c:	f043 0302 	orr.w	r3, r3, #2
 800ee50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee54:	4b15      	ldr	r3, [pc, #84]	; (800eeac <BSP_LED_Init+0x98>)
 800ee56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee5a:	f003 0302 	and.w	r3, r3, #2
 800ee5e:	60fb      	str	r3, [r7, #12]
 800ee60:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	4a12      	ldr	r2, [pc, #72]	; (800eeb0 <BSP_LED_Init+0x9c>)
 800ee66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee74:	2303      	movs	r3, #3
 800ee76:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800ee78:	79fb      	ldrb	r3, [r7, #7]
 800ee7a:	4a0e      	ldr	r2, [pc, #56]	; (800eeb4 <BSP_LED_Init+0xa0>)
 800ee7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee80:	f107 0214 	add.w	r2, r7, #20
 800ee84:	4611      	mov	r1, r2
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7f3 ff4c 	bl	8002d24 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	4a09      	ldr	r2, [pc, #36]	; (800eeb4 <BSP_LED_Init+0xa0>)
 800ee90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	4a06      	ldr	r2, [pc, #24]	; (800eeb0 <BSP_LED_Init+0x9c>)
 800ee98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	4619      	mov	r1, r3
 800eea0:	f7f4 f9f0 	bl	8003284 <HAL_GPIO_WritePin>
}
 800eea4:	bf00      	nop
 800eea6:	3728      	adds	r7, #40	; 0x28
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	58024400 	.word	0x58024400
 800eeb0:	08011ac8 	.word	0x08011ac8
 800eeb4:	2400001c 	.word	0x2400001c

0800eeb8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	4a07      	ldr	r2, [pc, #28]	; (800eee4 <BSP_LED_On+0x2c>)
 800eec6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eeca:	79fb      	ldrb	r3, [r7, #7]
 800eecc:	4a06      	ldr	r2, [pc, #24]	; (800eee8 <BSP_LED_On+0x30>)
 800eece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eed2:	2201      	movs	r2, #1
 800eed4:	4619      	mov	r1, r3
 800eed6:	f7f4 f9d5 	bl	8003284 <HAL_GPIO_WritePin>
}
 800eeda:	bf00      	nop
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	2400001c 	.word	0x2400001c
 800eee8:	08011ac8 	.word	0x08011ac8

0800eeec <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800eef6:	79fb      	ldrb	r3, [r7, #7]
 800eef8:	4a07      	ldr	r2, [pc, #28]	; (800ef18 <BSP_LED_Off+0x2c>)
 800eefa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eefe:	79fb      	ldrb	r3, [r7, #7]
 800ef00:	4a06      	ldr	r2, [pc, #24]	; (800ef1c <BSP_LED_Off+0x30>)
 800ef02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef06:	2200      	movs	r2, #0
 800ef08:	4619      	mov	r1, r3
 800ef0a:	f7f4 f9bb 	bl	8003284 <HAL_GPIO_WritePin>
}
 800ef0e:	bf00      	nop
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	2400001c 	.word	0x2400001c
 800ef1c:	08011ac8 	.word	0x08011ac8

0800ef20 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b088      	sub	sp, #32
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	460a      	mov	r2, r1
 800ef2a:	71fb      	strb	r3, [r7, #7]
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800ef30:	4b24      	ldr	r3, [pc, #144]	; (800efc4 <BSP_PB_Init+0xa4>)
 800ef32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef36:	4a23      	ldr	r2, [pc, #140]	; (800efc4 <BSP_PB_Init+0xa4>)
 800ef38:	f043 0304 	orr.w	r3, r3, #4
 800ef3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ef40:	4b20      	ldr	r3, [pc, #128]	; (800efc4 <BSP_PB_Init+0xa4>)
 800ef42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef46:	f003 0304 	and.w	r3, r3, #4
 800ef4a:	60bb      	str	r3, [r7, #8]
 800ef4c:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800ef4e:	79bb      	ldrb	r3, [r7, #6]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d112      	bne.n	800ef7a <BSP_PB_Init+0x5a>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800ef54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ef5e:	2302      	movs	r3, #2
 800ef60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef62:	2303      	movs	r3, #3
 800ef64:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ef66:	79fb      	ldrb	r3, [r7, #7]
 800ef68:	4a17      	ldr	r2, [pc, #92]	; (800efc8 <BSP_PB_Init+0xa8>)
 800ef6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef6e:	f107 020c 	add.w	r2, r7, #12
 800ef72:	4611      	mov	r1, r2
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7f3 fed5 	bl	8002d24 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 800ef7a:	79bb      	ldrb	r3, [r7, #6]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d11c      	bne.n	800efba <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800ef80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800ef8a:	4b10      	ldr	r3, [pc, #64]	; (800efcc <BSP_PB_Init+0xac>)
 800ef8c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ef8e:	79fb      	ldrb	r3, [r7, #7]
 800ef90:	4a0d      	ldr	r2, [pc, #52]	; (800efc8 <BSP_PB_Init+0xa8>)
 800ef92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef96:	f107 020c 	add.w	r2, r7, #12
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7f3 fec1 	bl	8002d24 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800efa2:	2328      	movs	r3, #40	; 0x28
 800efa4:	b21b      	sxth	r3, r3
 800efa6:	2200      	movs	r2, #0
 800efa8:	210f      	movs	r1, #15
 800efaa:	4618      	mov	r0, r3
 800efac:	f7f1 fe9c 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800efb0:	2328      	movs	r3, #40	; 0x28
 800efb2:	b21b      	sxth	r3, r3
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7f1 fec1 	bl	8000d3c <HAL_NVIC_EnableIRQ>
  }
}
 800efba:	bf00      	nop
 800efbc:	3720      	adds	r7, #32
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	58024400 	.word	0x58024400
 800efc8:	24000028 	.word	0x24000028
 800efcc:	11210000 	.word	0x11210000

0800efd0 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b086      	sub	sp, #24
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800efdc:	2300      	movs	r3, #0
 800efde:	617b      	str	r3, [r7, #20]
 800efe0:	e009      	b.n	800eff6 <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	60ba      	str	r2, [r7, #8]
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	4618      	mov	r0, r3
 800efec:	f7ff fdf4 	bl	800ebd8 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	3301      	adds	r3, #1
 800eff4:	617b      	str	r3, [r7, #20]
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	429a      	cmp	r2, r3
 800effc:	dbf1      	blt.n	800efe2 <_write+0x12>
		}
	return len;
 800effe:	687b      	ldr	r3, [r7, #4]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <_close>:

int _close(int file)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
	return -1;
 800f010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f014:	4618      	mov	r0, r3
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <_fstat>:

int _fstat(int file, struct stat *st)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f030:	605a      	str	r2, [r3, #4]
	return 0;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <_isatty>:

int _isatty(int file)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
	return 1;
 800f048:	2301      	movs	r3, #1
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	370c      	adds	r7, #12
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f056:	b480      	push	{r7}
 800f058:	b085      	sub	sp, #20
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	60b9      	str	r1, [r7, #8]
 800f060:	607a      	str	r2, [r7, #4]
	return 0;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3714      	adds	r7, #20
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <_read>:

int _read(int file, char *ptr, int len)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f07c:	2300      	movs	r3, #0
 800f07e:	617b      	str	r3, [r7, #20]
 800f080:	e00a      	b.n	800f098 <_read+0x28>
	{
	  *ptr++ = __io_getchar();
 800f082:	f3af 8000 	nop.w
 800f086:	4601      	mov	r1, r0
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	60ba      	str	r2, [r7, #8]
 800f08e:	b2ca      	uxtb	r2, r1
 800f090:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	3301      	adds	r3, #1
 800f096:	617b      	str	r3, [r7, #20]
 800f098:	697a      	ldr	r2, [r7, #20]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	dbf0      	blt.n	800f082 <_read+0x12>
	}

   return len;
 800f0a0:	687b      	ldr	r3, [r7, #4]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3718      	adds	r7, #24
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
	...

0800f0ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f0b4:	4b11      	ldr	r3, [pc, #68]	; (800f0fc <_sbrk+0x50>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d102      	bne.n	800f0c2 <_sbrk+0x16>
		heap_end = &end;
 800f0bc:	4b0f      	ldr	r3, [pc, #60]	; (800f0fc <_sbrk+0x50>)
 800f0be:	4a10      	ldr	r2, [pc, #64]	; (800f100 <_sbrk+0x54>)
 800f0c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800f0c2:	4b0e      	ldr	r3, [pc, #56]	; (800f0fc <_sbrk+0x50>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800f0c8:	4b0c      	ldr	r3, [pc, #48]	; (800f0fc <_sbrk+0x50>)
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	466a      	mov	r2, sp
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d905      	bls.n	800f0e2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	; (800f104 <_sbrk+0x58>)
 800f0d8:	220c      	movs	r2, #12
 800f0da:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800f0dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0e0:	e006      	b.n	800f0f0 <_sbrk+0x44>
	}

	heap_end += incr;
 800f0e2:	4b06      	ldr	r3, [pc, #24]	; (800f0fc <_sbrk+0x50>)
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	4a04      	ldr	r2, [pc, #16]	; (800f0fc <_sbrk+0x50>)
 800f0ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3714      	adds	r7, #20
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	240001e4 	.word	0x240001e4
 800f100:	24003958 	.word	0x24003958
 800f104:	24003950 	.word	0x24003950

0800f108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800f108:	b480      	push	{r7}
 800f10a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f10c:	4b29      	ldr	r3, [pc, #164]	; (800f1b4 <SystemInit+0xac>)
 800f10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f112:	4a28      	ldr	r2, [pc, #160]	; (800f1b4 <SystemInit+0xac>)
 800f114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800f11c:	4b26      	ldr	r3, [pc, #152]	; (800f1b8 <SystemInit+0xb0>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4a25      	ldr	r2, [pc, #148]	; (800f1b8 <SystemInit+0xb0>)
 800f122:	f043 0301 	orr.w	r3, r3, #1
 800f126:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f128:	4b23      	ldr	r3, [pc, #140]	; (800f1b8 <SystemInit+0xb0>)
 800f12a:	2200      	movs	r2, #0
 800f12c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800f12e:	4b22      	ldr	r3, [pc, #136]	; (800f1b8 <SystemInit+0xb0>)
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	4921      	ldr	r1, [pc, #132]	; (800f1b8 <SystemInit+0xb0>)
 800f134:	4b21      	ldr	r3, [pc, #132]	; (800f1bc <SystemInit+0xb4>)
 800f136:	4013      	ands	r3, r2
 800f138:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800f13a:	4b1f      	ldr	r3, [pc, #124]	; (800f1b8 <SystemInit+0xb0>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800f140:	4b1d      	ldr	r3, [pc, #116]	; (800f1b8 <SystemInit+0xb0>)
 800f142:	2200      	movs	r2, #0
 800f144:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800f146:	4b1c      	ldr	r3, [pc, #112]	; (800f1b8 <SystemInit+0xb0>)
 800f148:	2200      	movs	r2, #0
 800f14a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800f14c:	4b1a      	ldr	r3, [pc, #104]	; (800f1b8 <SystemInit+0xb0>)
 800f14e:	2200      	movs	r2, #0
 800f150:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800f152:	4b19      	ldr	r3, [pc, #100]	; (800f1b8 <SystemInit+0xb0>)
 800f154:	2200      	movs	r2, #0
 800f156:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800f158:	4b17      	ldr	r3, [pc, #92]	; (800f1b8 <SystemInit+0xb0>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800f15e:	4b16      	ldr	r3, [pc, #88]	; (800f1b8 <SystemInit+0xb0>)
 800f160:	2200      	movs	r2, #0
 800f162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800f164:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <SystemInit+0xb0>)
 800f166:	2200      	movs	r2, #0
 800f168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800f16a:	4b13      	ldr	r3, [pc, #76]	; (800f1b8 <SystemInit+0xb0>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800f170:	4b11      	ldr	r3, [pc, #68]	; (800f1b8 <SystemInit+0xb0>)
 800f172:	2200      	movs	r2, #0
 800f174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800f176:	4b10      	ldr	r3, [pc, #64]	; (800f1b8 <SystemInit+0xb0>)
 800f178:	2200      	movs	r2, #0
 800f17a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f17c:	4b0e      	ldr	r3, [pc, #56]	; (800f1b8 <SystemInit+0xb0>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a0d      	ldr	r2, [pc, #52]	; (800f1b8 <SystemInit+0xb0>)
 800f182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f186:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800f188:	4b0b      	ldr	r3, [pc, #44]	; (800f1b8 <SystemInit+0xb0>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800f18e:	4b0c      	ldr	r3, [pc, #48]	; (800f1c0 <SystemInit+0xb8>)
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	4b0c      	ldr	r3, [pc, #48]	; (800f1c4 <SystemInit+0xbc>)
 800f194:	4013      	ands	r3, r2
 800f196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f19a:	d202      	bcs.n	800f1a2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800f19c:	4b0a      	ldr	r3, [pc, #40]	; (800f1c8 <SystemInit+0xc0>)
 800f19e:	2201      	movs	r2, #1
 800f1a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f1a2:	4b04      	ldr	r3, [pc, #16]	; (800f1b4 <SystemInit+0xac>)
 800f1a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f1a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800f1aa:	bf00      	nop
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr
 800f1b4:	e000ed00 	.word	0xe000ed00
 800f1b8:	58024400 	.word	0x58024400
 800f1bc:	eaf6ed7f 	.word	0xeaf6ed7f
 800f1c0:	5c001000 	.word	0x5c001000
 800f1c4:	ffff0000 	.word	0xffff0000
 800f1c8:	51008108 	.word	0x51008108

0800f1cc <udp_echoclient_connect>:
  * @brief  Connect to UDP echo server
  * @param  None
  * @retval None
  */
void udp_echoclient_connect(void)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
  ip_addr_t DestIPaddr;
  err_t err;
  
  /* Create a new UDP control block  */
  upcb = udp_new();
 800f1d2:	f7fc faf5 	bl	800b7c0 <udp_new>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	4b10      	ldr	r3, [pc, #64]	; (800f21c <udp_echoclient_connect+0x50>)
 800f1da:	601a      	str	r2, [r3, #0]
  
  if (upcb!=NULL)
 800f1dc:	4b0f      	ldr	r3, [pc, #60]	; (800f21c <udp_echoclient_connect+0x50>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d016      	beq.n	800f212 <udp_echoclient_connect+0x46>
  {
    /*assign destination IP address */
    IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 800f1e4:	4b0e      	ldr	r3, [pc, #56]	; (800f220 <udp_echoclient_connect+0x54>)
 800f1e6:	603b      	str	r3, [r7, #0]
    
    /* configure destination IP address and port */
    err= udp_connect(upcb, &DestIPaddr, UDP_SERVER_PORT);
 800f1e8:	4b0c      	ldr	r3, [pc, #48]	; (800f21c <udp_echoclient_connect+0x50>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4639      	mov	r1, r7
 800f1ee:	f641 6261 	movw	r2, #7777	; 0x1e61
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fc fa7c 	bl	800b6f0 <udp_connect>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 800f1fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d106      	bne.n	800f212 <udp_echoclient_connect+0x46>
    {
      /* Set a receive callback for the upcb */
      udp_recv(upcb, udp_receive_callback, NULL);  
 800f204:	4b05      	ldr	r3, [pc, #20]	; (800f21c <udp_echoclient_connect+0x50>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2200      	movs	r2, #0
 800f20a:	4906      	ldr	r1, [pc, #24]	; (800f224 <udp_echoclient_connect+0x58>)
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fc fac5 	bl	800b79c <udp_recv>
    }
  }
}
 800f212:	bf00      	nop
 800f214:	3708      	adds	r7, #8
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	2400385c 	.word	0x2400385c
 800f220:	0e00a8c0 	.word	0x0e00a8c0
 800f224:	0800f2e5 	.word	0x0800f2e5

0800f228 <udp_echoclient_send>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoclient_send(void)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
  struct pbuf *p;
  
  sprintf((char*)data, "sending udp client message %d", (int)message_count);
 800f22e:	4b16      	ldr	r3, [pc, #88]	; (800f288 <udp_echoclient_send+0x60>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	461a      	mov	r2, r3
 800f234:	4915      	ldr	r1, [pc, #84]	; (800f28c <udp_echoclient_send+0x64>)
 800f236:	4816      	ldr	r0, [pc, #88]	; (800f290 <udp_echoclient_send+0x68>)
 800f238:	f000 f9ec 	bl	800f614 <siprintf>

  /* allocate pbuf from pool*/
  p = pbuf_alloc(PBUF_TRANSPORT,strlen((char*)data), PBUF_RAM);
 800f23c:	4814      	ldr	r0, [pc, #80]	; (800f290 <udp_echoclient_send+0x68>)
 800f23e:	f7f1 f84f 	bl	80002e0 <strlen>
 800f242:	4603      	mov	r3, r0
 800f244:	b29b      	uxth	r3, r3
 800f246:	2200      	movs	r2, #0
 800f248:	4619      	mov	r1, r3
 800f24a:	2000      	movs	r0, #0
 800f24c:	f7fb f834 	bl	800a2b8 <pbuf_alloc>
 800f250:	6078      	str	r0, [r7, #4]
  
  if (p != NULL)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d012      	beq.n	800f27e <udp_echoclient_send+0x56>
  {
    /* copy data to pbuf */
    pbuf_take(p, (char*)data, strlen((char*)data));
 800f258:	480d      	ldr	r0, [pc, #52]	; (800f290 <udp_echoclient_send+0x68>)
 800f25a:	f7f1 f841 	bl	80002e0 <strlen>
 800f25e:	4603      	mov	r3, r0
 800f260:	b29b      	uxth	r3, r3
 800f262:	461a      	mov	r2, r3
 800f264:	490a      	ldr	r1, [pc, #40]	; (800f290 <udp_echoclient_send+0x68>)
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f7fb fd94 	bl	800ad94 <pbuf_take>
    
    /* send udp data */
    udp_send(upcb, p); 
 800f26c:	4b09      	ldr	r3, [pc, #36]	; (800f294 <udp_echoclient_send+0x6c>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	4618      	mov	r0, r3
 800f274:	f7fc f8b2 	bl	800b3dc <udp_send>
    
    /* free pbuf */
    pbuf_free(p);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7fb fb8b 	bl	800a994 <pbuf_free>
  }
}
 800f27e:	bf00      	nop
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	240001e8 	.word	0x240001e8
 800f28c:	080119fc 	.word	0x080119fc
 800f290:	24003860 	.word	0x24003860
 800f294:	2400385c 	.word	0x2400385c

0800f298 <udp_send_buff>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_send_buff(uint8_t* buff, uint16_t len)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;

  /* allocate pbuf from pool*/
  p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f2a4:	887b      	ldrh	r3, [r7, #2]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	f7fb f804 	bl	800a2b8 <pbuf_alloc>
 800f2b0:	60f8      	str	r0, [r7, #12]

  if (p != NULL)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00e      	beq.n	800f2d6 <udp_send_buff+0x3e>
  {
    /* copy data to pbuf */
    pbuf_take(p, (uint16_t*)buff, len);
 800f2b8:	887b      	ldrh	r3, [r7, #2]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	6879      	ldr	r1, [r7, #4]
 800f2be:	68f8      	ldr	r0, [r7, #12]
 800f2c0:	f7fb fd68 	bl	800ad94 <pbuf_take>

    /* send udp data */
    udp_send(upcb, p);
 800f2c4:	4b06      	ldr	r3, [pc, #24]	; (800f2e0 <udp_send_buff+0x48>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68f9      	ldr	r1, [r7, #12]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fc f886 	bl	800b3dc <udp_send>

    /* free pbuf */
    pbuf_free(p);
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f7fb fb5f 	bl	800a994 <pbuf_free>
  }
}
 800f2d6:	bf00      	nop
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	2400385c 	.word	0x2400385c

0800f2e4 <udp_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
 800f2f0:	603b      	str	r3, [r7, #0]
  /*increment message count */
  message_count++;
 800f2f2:	4b06      	ldr	r3, [pc, #24]	; (800f30c <udp_receive_callback+0x28>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	4a04      	ldr	r2, [pc, #16]	; (800f30c <udp_receive_callback+0x28>)
 800f2fa:	6013      	str	r3, [r2, #0]
  
  /* Free receive pbuf */
  pbuf_free(p);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7fb fb49 	bl	800a994 <pbuf_free>
}
 800f302:	bf00      	nop
 800f304:	3710      	adds	r7, #16
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	240001e8 	.word	0x240001e8

0800f310 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800f314:	4b22      	ldr	r3, [pc, #136]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f316:	4a23      	ldr	r2, [pc, #140]	; (800f3a4 <MX_USART3_UART_Init+0x94>)
 800f318:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800f31a:	4b21      	ldr	r3, [pc, #132]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f31c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f320:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f322:	4b1f      	ldr	r3, [pc, #124]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f324:	2200      	movs	r2, #0
 800f326:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f328:	4b1d      	ldr	r3, [pc, #116]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f32a:	2200      	movs	r2, #0
 800f32c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f32e:	4b1c      	ldr	r3, [pc, #112]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f330:	2200      	movs	r2, #0
 800f332:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f334:	4b1a      	ldr	r3, [pc, #104]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f336:	220c      	movs	r2, #12
 800f338:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f33a:	4b19      	ldr	r3, [pc, #100]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f340:	4b17      	ldr	r3, [pc, #92]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f342:	2200      	movs	r2, #0
 800f344:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f346:	4b16      	ldr	r3, [pc, #88]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f348:	2200      	movs	r2, #0
 800f34a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800f34c:	4b14      	ldr	r3, [pc, #80]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f34e:	2200      	movs	r2, #0
 800f350:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f352:	4b13      	ldr	r3, [pc, #76]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f354:	2200      	movs	r2, #0
 800f356:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800f358:	4811      	ldr	r0, [pc, #68]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f35a:	f7f7 f8df 	bl	800651c <HAL_UART_Init>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800f364:	f7ff fce0 	bl	800ed28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f368:	2100      	movs	r1, #0
 800f36a:	480d      	ldr	r0, [pc, #52]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f36c:	f7f9 ff4e 	bl	800920c <HAL_UARTEx_SetTxFifoThreshold>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d001      	beq.n	800f37a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800f376:	f7ff fcd7 	bl	800ed28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f37a:	2100      	movs	r1, #0
 800f37c:	4808      	ldr	r0, [pc, #32]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f37e:	f7f9 ffdf 	bl	8009340 <HAL_UARTEx_SetRxFifoThreshold>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d001      	beq.n	800f38c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800f388:	f7ff fcce 	bl	800ed28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800f38c:	4804      	ldr	r0, [pc, #16]	; (800f3a0 <MX_USART3_UART_Init+0x90>)
 800f38e:	f7f9 fec7 	bl	8009120 <HAL_UARTEx_DisableFifoMode>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800f398:	f7ff fcc6 	bl	800ed28 <Error_Handler>
  }

}
 800f39c:	bf00      	nop
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	240038c4 	.word	0x240038c4
 800f3a4:	40004800 	.word	0x40004800

0800f3a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b08a      	sub	sp, #40	; 0x28
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3b0:	f107 0314 	add.w	r3, r7, #20
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	605a      	str	r2, [r3, #4]
 800f3ba:	609a      	str	r2, [r3, #8]
 800f3bc:	60da      	str	r2, [r3, #12]
 800f3be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4a1a      	ldr	r2, [pc, #104]	; (800f430 <HAL_UART_MspInit+0x88>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d12e      	bne.n	800f428 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800f3ca:	4b1a      	ldr	r3, [pc, #104]	; (800f434 <HAL_UART_MspInit+0x8c>)
 800f3cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f3d0:	4a18      	ldr	r2, [pc, #96]	; (800f434 <HAL_UART_MspInit+0x8c>)
 800f3d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f3d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f3da:	4b16      	ldr	r3, [pc, #88]	; (800f434 <HAL_UART_MspInit+0x8c>)
 800f3dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f3e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f3e4:	613b      	str	r3, [r7, #16]
 800f3e6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f3e8:	4b12      	ldr	r3, [pc, #72]	; (800f434 <HAL_UART_MspInit+0x8c>)
 800f3ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3ee:	4a11      	ldr	r2, [pc, #68]	; (800f434 <HAL_UART_MspInit+0x8c>)
 800f3f0:	f043 0308 	orr.w	r3, r3, #8
 800f3f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3f8:	4b0e      	ldr	r3, [pc, #56]	; (800f434 <HAL_UART_MspInit+0x8c>)
 800f3fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3fe:	f003 0308 	and.w	r3, r3, #8
 800f402:	60fb      	str	r3, [r7, #12]
 800f404:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800f406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f40a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f40c:	2302      	movs	r3, #2
 800f40e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f410:	2300      	movs	r3, #0
 800f412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f414:	2300      	movs	r3, #0
 800f416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f418:	2307      	movs	r3, #7
 800f41a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f41c:	f107 0314 	add.w	r3, r7, #20
 800f420:	4619      	mov	r1, r3
 800f422:	4805      	ldr	r0, [pc, #20]	; (800f438 <HAL_UART_MspInit+0x90>)
 800f424:	f7f3 fc7e 	bl	8002d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800f428:	bf00      	nop
 800f42a:	3728      	adds	r7, #40	; 0x28
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	40004800 	.word	0x40004800
 800f434:	58024400 	.word	0x58024400
 800f438:	58020c00 	.word	0x58020c00

0800f43c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f43c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f442:	e003      	b.n	800f44c <LoopCopyDataInit>

0800f444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f444:	4b0c      	ldr	r3, [pc, #48]	; (800f478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f44a:	3104      	adds	r1, #4

0800f44c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f44c:	480b      	ldr	r0, [pc, #44]	; (800f47c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f44e:	4b0c      	ldr	r3, [pc, #48]	; (800f480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f454:	d3f6      	bcc.n	800f444 <CopyDataInit>
  ldr  r2, =_sbss
 800f456:	4a0b      	ldr	r2, [pc, #44]	; (800f484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f458:	e002      	b.n	800f460 <LoopFillZerobss>

0800f45a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f45a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f45c:	f842 3b04 	str.w	r3, [r2], #4

0800f460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f460:	4b09      	ldr	r3, [pc, #36]	; (800f488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f464:	d3f9      	bcc.n	800f45a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f466:	f7ff fe4f 	bl	800f108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f46a:	f000 f811 	bl	800f490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f46e:	f7ff fa87 	bl	800e980 <main>
  bx  lr    
 800f472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f474:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800f478:	08011b88 	.word	0x08011b88
  ldr  r0, =_sdata
 800f47c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800f480:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 800f484:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 800f488:	24003954 	.word	0x24003954

0800f48c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f48c:	e7fe      	b.n	800f48c <ADC3_IRQHandler>
	...

0800f490 <__libc_init_array>:
 800f490:	b570      	push	{r4, r5, r6, lr}
 800f492:	4e0d      	ldr	r6, [pc, #52]	; (800f4c8 <__libc_init_array+0x38>)
 800f494:	4c0d      	ldr	r4, [pc, #52]	; (800f4cc <__libc_init_array+0x3c>)
 800f496:	1ba4      	subs	r4, r4, r6
 800f498:	10a4      	asrs	r4, r4, #2
 800f49a:	2500      	movs	r5, #0
 800f49c:	42a5      	cmp	r5, r4
 800f49e:	d109      	bne.n	800f4b4 <__libc_init_array+0x24>
 800f4a0:	4e0b      	ldr	r6, [pc, #44]	; (800f4d0 <__libc_init_array+0x40>)
 800f4a2:	4c0c      	ldr	r4, [pc, #48]	; (800f4d4 <__libc_init_array+0x44>)
 800f4a4:	f001 f93c 	bl	8010720 <_init>
 800f4a8:	1ba4      	subs	r4, r4, r6
 800f4aa:	10a4      	asrs	r4, r4, #2
 800f4ac:	2500      	movs	r5, #0
 800f4ae:	42a5      	cmp	r5, r4
 800f4b0:	d105      	bne.n	800f4be <__libc_init_array+0x2e>
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}
 800f4b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4b8:	4798      	blx	r3
 800f4ba:	3501      	adds	r5, #1
 800f4bc:	e7ee      	b.n	800f49c <__libc_init_array+0xc>
 800f4be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4c2:	4798      	blx	r3
 800f4c4:	3501      	adds	r5, #1
 800f4c6:	e7f2      	b.n	800f4ae <__libc_init_array+0x1e>
 800f4c8:	08011b80 	.word	0x08011b80
 800f4cc:	08011b80 	.word	0x08011b80
 800f4d0:	08011b80 	.word	0x08011b80
 800f4d4:	08011b84 	.word	0x08011b84

0800f4d8 <memcmp>:
 800f4d8:	b530      	push	{r4, r5, lr}
 800f4da:	2400      	movs	r4, #0
 800f4dc:	42a2      	cmp	r2, r4
 800f4de:	d101      	bne.n	800f4e4 <memcmp+0xc>
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	e007      	b.n	800f4f4 <memcmp+0x1c>
 800f4e4:	5d03      	ldrb	r3, [r0, r4]
 800f4e6:	3401      	adds	r4, #1
 800f4e8:	190d      	adds	r5, r1, r4
 800f4ea:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f4ee:	42ab      	cmp	r3, r5
 800f4f0:	d0f4      	beq.n	800f4dc <memcmp+0x4>
 800f4f2:	1b58      	subs	r0, r3, r5
 800f4f4:	bd30      	pop	{r4, r5, pc}

0800f4f6 <memcpy>:
 800f4f6:	b510      	push	{r4, lr}
 800f4f8:	1e43      	subs	r3, r0, #1
 800f4fa:	440a      	add	r2, r1
 800f4fc:	4291      	cmp	r1, r2
 800f4fe:	d100      	bne.n	800f502 <memcpy+0xc>
 800f500:	bd10      	pop	{r4, pc}
 800f502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f50a:	e7f7      	b.n	800f4fc <memcpy+0x6>

0800f50c <memset>:
 800f50c:	4402      	add	r2, r0
 800f50e:	4603      	mov	r3, r0
 800f510:	4293      	cmp	r3, r2
 800f512:	d100      	bne.n	800f516 <memset+0xa>
 800f514:	4770      	bx	lr
 800f516:	f803 1b01 	strb.w	r1, [r3], #1
 800f51a:	e7f9      	b.n	800f510 <memset+0x4>

0800f51c <iprintf>:
 800f51c:	b40f      	push	{r0, r1, r2, r3}
 800f51e:	4b0a      	ldr	r3, [pc, #40]	; (800f548 <iprintf+0x2c>)
 800f520:	b513      	push	{r0, r1, r4, lr}
 800f522:	681c      	ldr	r4, [r3, #0]
 800f524:	b124      	cbz	r4, 800f530 <iprintf+0x14>
 800f526:	69a3      	ldr	r3, [r4, #24]
 800f528:	b913      	cbnz	r3, 800f530 <iprintf+0x14>
 800f52a:	4620      	mov	r0, r4
 800f52c:	f000 fa42 	bl	800f9b4 <__sinit>
 800f530:	ab05      	add	r3, sp, #20
 800f532:	9a04      	ldr	r2, [sp, #16]
 800f534:	68a1      	ldr	r1, [r4, #8]
 800f536:	9301      	str	r3, [sp, #4]
 800f538:	4620      	mov	r0, r4
 800f53a:	f000 fd4d 	bl	800ffd8 <_vfiprintf_r>
 800f53e:	b002      	add	sp, #8
 800f540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f544:	b004      	add	sp, #16
 800f546:	4770      	bx	lr
 800f548:	24000034 	.word	0x24000034

0800f54c <_puts_r>:
 800f54c:	b570      	push	{r4, r5, r6, lr}
 800f54e:	460e      	mov	r6, r1
 800f550:	4605      	mov	r5, r0
 800f552:	b118      	cbz	r0, 800f55c <_puts_r+0x10>
 800f554:	6983      	ldr	r3, [r0, #24]
 800f556:	b90b      	cbnz	r3, 800f55c <_puts_r+0x10>
 800f558:	f000 fa2c 	bl	800f9b4 <__sinit>
 800f55c:	69ab      	ldr	r3, [r5, #24]
 800f55e:	68ac      	ldr	r4, [r5, #8]
 800f560:	b913      	cbnz	r3, 800f568 <_puts_r+0x1c>
 800f562:	4628      	mov	r0, r5
 800f564:	f000 fa26 	bl	800f9b4 <__sinit>
 800f568:	4b23      	ldr	r3, [pc, #140]	; (800f5f8 <_puts_r+0xac>)
 800f56a:	429c      	cmp	r4, r3
 800f56c:	d117      	bne.n	800f59e <_puts_r+0x52>
 800f56e:	686c      	ldr	r4, [r5, #4]
 800f570:	89a3      	ldrh	r3, [r4, #12]
 800f572:	071b      	lsls	r3, r3, #28
 800f574:	d51d      	bpl.n	800f5b2 <_puts_r+0x66>
 800f576:	6923      	ldr	r3, [r4, #16]
 800f578:	b1db      	cbz	r3, 800f5b2 <_puts_r+0x66>
 800f57a:	3e01      	subs	r6, #1
 800f57c:	68a3      	ldr	r3, [r4, #8]
 800f57e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f582:	3b01      	subs	r3, #1
 800f584:	60a3      	str	r3, [r4, #8]
 800f586:	b9e9      	cbnz	r1, 800f5c4 <_puts_r+0x78>
 800f588:	2b00      	cmp	r3, #0
 800f58a:	da2e      	bge.n	800f5ea <_puts_r+0x9e>
 800f58c:	4622      	mov	r2, r4
 800f58e:	210a      	movs	r1, #10
 800f590:	4628      	mov	r0, r5
 800f592:	f000 f85f 	bl	800f654 <__swbuf_r>
 800f596:	3001      	adds	r0, #1
 800f598:	d011      	beq.n	800f5be <_puts_r+0x72>
 800f59a:	200a      	movs	r0, #10
 800f59c:	e011      	b.n	800f5c2 <_puts_r+0x76>
 800f59e:	4b17      	ldr	r3, [pc, #92]	; (800f5fc <_puts_r+0xb0>)
 800f5a0:	429c      	cmp	r4, r3
 800f5a2:	d101      	bne.n	800f5a8 <_puts_r+0x5c>
 800f5a4:	68ac      	ldr	r4, [r5, #8]
 800f5a6:	e7e3      	b.n	800f570 <_puts_r+0x24>
 800f5a8:	4b15      	ldr	r3, [pc, #84]	; (800f600 <_puts_r+0xb4>)
 800f5aa:	429c      	cmp	r4, r3
 800f5ac:	bf08      	it	eq
 800f5ae:	68ec      	ldreq	r4, [r5, #12]
 800f5b0:	e7de      	b.n	800f570 <_puts_r+0x24>
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	f000 f89f 	bl	800f6f8 <__swsetup_r>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d0dd      	beq.n	800f57a <_puts_r+0x2e>
 800f5be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	da04      	bge.n	800f5d2 <_puts_r+0x86>
 800f5c8:	69a2      	ldr	r2, [r4, #24]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	dc06      	bgt.n	800f5dc <_puts_r+0x90>
 800f5ce:	290a      	cmp	r1, #10
 800f5d0:	d004      	beq.n	800f5dc <_puts_r+0x90>
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	1c5a      	adds	r2, r3, #1
 800f5d6:	6022      	str	r2, [r4, #0]
 800f5d8:	7019      	strb	r1, [r3, #0]
 800f5da:	e7cf      	b.n	800f57c <_puts_r+0x30>
 800f5dc:	4622      	mov	r2, r4
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f000 f838 	bl	800f654 <__swbuf_r>
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d1c9      	bne.n	800f57c <_puts_r+0x30>
 800f5e8:	e7e9      	b.n	800f5be <_puts_r+0x72>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	200a      	movs	r0, #10
 800f5ee:	1c5a      	adds	r2, r3, #1
 800f5f0:	6022      	str	r2, [r4, #0]
 800f5f2:	7018      	strb	r0, [r3, #0]
 800f5f4:	e7e5      	b.n	800f5c2 <_puts_r+0x76>
 800f5f6:	bf00      	nop
 800f5f8:	08011b04 	.word	0x08011b04
 800f5fc:	08011b24 	.word	0x08011b24
 800f600:	08011ae4 	.word	0x08011ae4

0800f604 <puts>:
 800f604:	4b02      	ldr	r3, [pc, #8]	; (800f610 <puts+0xc>)
 800f606:	4601      	mov	r1, r0
 800f608:	6818      	ldr	r0, [r3, #0]
 800f60a:	f7ff bf9f 	b.w	800f54c <_puts_r>
 800f60e:	bf00      	nop
 800f610:	24000034 	.word	0x24000034

0800f614 <siprintf>:
 800f614:	b40e      	push	{r1, r2, r3}
 800f616:	b500      	push	{lr}
 800f618:	b09c      	sub	sp, #112	; 0x70
 800f61a:	ab1d      	add	r3, sp, #116	; 0x74
 800f61c:	9002      	str	r0, [sp, #8]
 800f61e:	9006      	str	r0, [sp, #24]
 800f620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f624:	4809      	ldr	r0, [pc, #36]	; (800f64c <siprintf+0x38>)
 800f626:	9107      	str	r1, [sp, #28]
 800f628:	9104      	str	r1, [sp, #16]
 800f62a:	4909      	ldr	r1, [pc, #36]	; (800f650 <siprintf+0x3c>)
 800f62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f630:	9105      	str	r1, [sp, #20]
 800f632:	6800      	ldr	r0, [r0, #0]
 800f634:	9301      	str	r3, [sp, #4]
 800f636:	a902      	add	r1, sp, #8
 800f638:	f000 fbac 	bl	800fd94 <_svfiprintf_r>
 800f63c:	9b02      	ldr	r3, [sp, #8]
 800f63e:	2200      	movs	r2, #0
 800f640:	701a      	strb	r2, [r3, #0]
 800f642:	b01c      	add	sp, #112	; 0x70
 800f644:	f85d eb04 	ldr.w	lr, [sp], #4
 800f648:	b003      	add	sp, #12
 800f64a:	4770      	bx	lr
 800f64c:	24000034 	.word	0x24000034
 800f650:	ffff0208 	.word	0xffff0208

0800f654 <__swbuf_r>:
 800f654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f656:	460e      	mov	r6, r1
 800f658:	4614      	mov	r4, r2
 800f65a:	4605      	mov	r5, r0
 800f65c:	b118      	cbz	r0, 800f666 <__swbuf_r+0x12>
 800f65e:	6983      	ldr	r3, [r0, #24]
 800f660:	b90b      	cbnz	r3, 800f666 <__swbuf_r+0x12>
 800f662:	f000 f9a7 	bl	800f9b4 <__sinit>
 800f666:	4b21      	ldr	r3, [pc, #132]	; (800f6ec <__swbuf_r+0x98>)
 800f668:	429c      	cmp	r4, r3
 800f66a:	d12a      	bne.n	800f6c2 <__swbuf_r+0x6e>
 800f66c:	686c      	ldr	r4, [r5, #4]
 800f66e:	69a3      	ldr	r3, [r4, #24]
 800f670:	60a3      	str	r3, [r4, #8]
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	071a      	lsls	r2, r3, #28
 800f676:	d52e      	bpl.n	800f6d6 <__swbuf_r+0x82>
 800f678:	6923      	ldr	r3, [r4, #16]
 800f67a:	b363      	cbz	r3, 800f6d6 <__swbuf_r+0x82>
 800f67c:	6923      	ldr	r3, [r4, #16]
 800f67e:	6820      	ldr	r0, [r4, #0]
 800f680:	1ac0      	subs	r0, r0, r3
 800f682:	6963      	ldr	r3, [r4, #20]
 800f684:	b2f6      	uxtb	r6, r6
 800f686:	4283      	cmp	r3, r0
 800f688:	4637      	mov	r7, r6
 800f68a:	dc04      	bgt.n	800f696 <__swbuf_r+0x42>
 800f68c:	4621      	mov	r1, r4
 800f68e:	4628      	mov	r0, r5
 800f690:	f000 f926 	bl	800f8e0 <_fflush_r>
 800f694:	bb28      	cbnz	r0, 800f6e2 <__swbuf_r+0x8e>
 800f696:	68a3      	ldr	r3, [r4, #8]
 800f698:	3b01      	subs	r3, #1
 800f69a:	60a3      	str	r3, [r4, #8]
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	1c5a      	adds	r2, r3, #1
 800f6a0:	6022      	str	r2, [r4, #0]
 800f6a2:	701e      	strb	r6, [r3, #0]
 800f6a4:	6963      	ldr	r3, [r4, #20]
 800f6a6:	3001      	adds	r0, #1
 800f6a8:	4283      	cmp	r3, r0
 800f6aa:	d004      	beq.n	800f6b6 <__swbuf_r+0x62>
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	07db      	lsls	r3, r3, #31
 800f6b0:	d519      	bpl.n	800f6e6 <__swbuf_r+0x92>
 800f6b2:	2e0a      	cmp	r6, #10
 800f6b4:	d117      	bne.n	800f6e6 <__swbuf_r+0x92>
 800f6b6:	4621      	mov	r1, r4
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	f000 f911 	bl	800f8e0 <_fflush_r>
 800f6be:	b190      	cbz	r0, 800f6e6 <__swbuf_r+0x92>
 800f6c0:	e00f      	b.n	800f6e2 <__swbuf_r+0x8e>
 800f6c2:	4b0b      	ldr	r3, [pc, #44]	; (800f6f0 <__swbuf_r+0x9c>)
 800f6c4:	429c      	cmp	r4, r3
 800f6c6:	d101      	bne.n	800f6cc <__swbuf_r+0x78>
 800f6c8:	68ac      	ldr	r4, [r5, #8]
 800f6ca:	e7d0      	b.n	800f66e <__swbuf_r+0x1a>
 800f6cc:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <__swbuf_r+0xa0>)
 800f6ce:	429c      	cmp	r4, r3
 800f6d0:	bf08      	it	eq
 800f6d2:	68ec      	ldreq	r4, [r5, #12]
 800f6d4:	e7cb      	b.n	800f66e <__swbuf_r+0x1a>
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	4628      	mov	r0, r5
 800f6da:	f000 f80d 	bl	800f6f8 <__swsetup_r>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d0cc      	beq.n	800f67c <__swbuf_r+0x28>
 800f6e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	08011b04 	.word	0x08011b04
 800f6f0:	08011b24 	.word	0x08011b24
 800f6f4:	08011ae4 	.word	0x08011ae4

0800f6f8 <__swsetup_r>:
 800f6f8:	4b32      	ldr	r3, [pc, #200]	; (800f7c4 <__swsetup_r+0xcc>)
 800f6fa:	b570      	push	{r4, r5, r6, lr}
 800f6fc:	681d      	ldr	r5, [r3, #0]
 800f6fe:	4606      	mov	r6, r0
 800f700:	460c      	mov	r4, r1
 800f702:	b125      	cbz	r5, 800f70e <__swsetup_r+0x16>
 800f704:	69ab      	ldr	r3, [r5, #24]
 800f706:	b913      	cbnz	r3, 800f70e <__swsetup_r+0x16>
 800f708:	4628      	mov	r0, r5
 800f70a:	f000 f953 	bl	800f9b4 <__sinit>
 800f70e:	4b2e      	ldr	r3, [pc, #184]	; (800f7c8 <__swsetup_r+0xd0>)
 800f710:	429c      	cmp	r4, r3
 800f712:	d10f      	bne.n	800f734 <__swsetup_r+0x3c>
 800f714:	686c      	ldr	r4, [r5, #4]
 800f716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	0715      	lsls	r5, r2, #28
 800f71e:	d42c      	bmi.n	800f77a <__swsetup_r+0x82>
 800f720:	06d0      	lsls	r0, r2, #27
 800f722:	d411      	bmi.n	800f748 <__swsetup_r+0x50>
 800f724:	2209      	movs	r2, #9
 800f726:	6032      	str	r2, [r6, #0]
 800f728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f72c:	81a3      	strh	r3, [r4, #12]
 800f72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f732:	e03e      	b.n	800f7b2 <__swsetup_r+0xba>
 800f734:	4b25      	ldr	r3, [pc, #148]	; (800f7cc <__swsetup_r+0xd4>)
 800f736:	429c      	cmp	r4, r3
 800f738:	d101      	bne.n	800f73e <__swsetup_r+0x46>
 800f73a:	68ac      	ldr	r4, [r5, #8]
 800f73c:	e7eb      	b.n	800f716 <__swsetup_r+0x1e>
 800f73e:	4b24      	ldr	r3, [pc, #144]	; (800f7d0 <__swsetup_r+0xd8>)
 800f740:	429c      	cmp	r4, r3
 800f742:	bf08      	it	eq
 800f744:	68ec      	ldreq	r4, [r5, #12]
 800f746:	e7e6      	b.n	800f716 <__swsetup_r+0x1e>
 800f748:	0751      	lsls	r1, r2, #29
 800f74a:	d512      	bpl.n	800f772 <__swsetup_r+0x7a>
 800f74c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f74e:	b141      	cbz	r1, 800f762 <__swsetup_r+0x6a>
 800f750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f754:	4299      	cmp	r1, r3
 800f756:	d002      	beq.n	800f75e <__swsetup_r+0x66>
 800f758:	4630      	mov	r0, r6
 800f75a:	f000 fa19 	bl	800fb90 <_free_r>
 800f75e:	2300      	movs	r3, #0
 800f760:	6363      	str	r3, [r4, #52]	; 0x34
 800f762:	89a3      	ldrh	r3, [r4, #12]
 800f764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f768:	81a3      	strh	r3, [r4, #12]
 800f76a:	2300      	movs	r3, #0
 800f76c:	6063      	str	r3, [r4, #4]
 800f76e:	6923      	ldr	r3, [r4, #16]
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	89a3      	ldrh	r3, [r4, #12]
 800f774:	f043 0308 	orr.w	r3, r3, #8
 800f778:	81a3      	strh	r3, [r4, #12]
 800f77a:	6923      	ldr	r3, [r4, #16]
 800f77c:	b94b      	cbnz	r3, 800f792 <__swsetup_r+0x9a>
 800f77e:	89a3      	ldrh	r3, [r4, #12]
 800f780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f788:	d003      	beq.n	800f792 <__swsetup_r+0x9a>
 800f78a:	4621      	mov	r1, r4
 800f78c:	4630      	mov	r0, r6
 800f78e:	f000 f9bf 	bl	800fb10 <__smakebuf_r>
 800f792:	89a2      	ldrh	r2, [r4, #12]
 800f794:	f012 0301 	ands.w	r3, r2, #1
 800f798:	d00c      	beq.n	800f7b4 <__swsetup_r+0xbc>
 800f79a:	2300      	movs	r3, #0
 800f79c:	60a3      	str	r3, [r4, #8]
 800f79e:	6963      	ldr	r3, [r4, #20]
 800f7a0:	425b      	negs	r3, r3
 800f7a2:	61a3      	str	r3, [r4, #24]
 800f7a4:	6923      	ldr	r3, [r4, #16]
 800f7a6:	b953      	cbnz	r3, 800f7be <__swsetup_r+0xc6>
 800f7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f7b0:	d1ba      	bne.n	800f728 <__swsetup_r+0x30>
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}
 800f7b4:	0792      	lsls	r2, r2, #30
 800f7b6:	bf58      	it	pl
 800f7b8:	6963      	ldrpl	r3, [r4, #20]
 800f7ba:	60a3      	str	r3, [r4, #8]
 800f7bc:	e7f2      	b.n	800f7a4 <__swsetup_r+0xac>
 800f7be:	2000      	movs	r0, #0
 800f7c0:	e7f7      	b.n	800f7b2 <__swsetup_r+0xba>
 800f7c2:	bf00      	nop
 800f7c4:	24000034 	.word	0x24000034
 800f7c8:	08011b04 	.word	0x08011b04
 800f7cc:	08011b24 	.word	0x08011b24
 800f7d0:	08011ae4 	.word	0x08011ae4

0800f7d4 <__sflush_r>:
 800f7d4:	898a      	ldrh	r2, [r1, #12]
 800f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7da:	4605      	mov	r5, r0
 800f7dc:	0710      	lsls	r0, r2, #28
 800f7de:	460c      	mov	r4, r1
 800f7e0:	d458      	bmi.n	800f894 <__sflush_r+0xc0>
 800f7e2:	684b      	ldr	r3, [r1, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	dc05      	bgt.n	800f7f4 <__sflush_r+0x20>
 800f7e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	dc02      	bgt.n	800f7f4 <__sflush_r+0x20>
 800f7ee:	2000      	movs	r0, #0
 800f7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7f6:	2e00      	cmp	r6, #0
 800f7f8:	d0f9      	beq.n	800f7ee <__sflush_r+0x1a>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f800:	682f      	ldr	r7, [r5, #0]
 800f802:	6a21      	ldr	r1, [r4, #32]
 800f804:	602b      	str	r3, [r5, #0]
 800f806:	d032      	beq.n	800f86e <__sflush_r+0x9a>
 800f808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f80a:	89a3      	ldrh	r3, [r4, #12]
 800f80c:	075a      	lsls	r2, r3, #29
 800f80e:	d505      	bpl.n	800f81c <__sflush_r+0x48>
 800f810:	6863      	ldr	r3, [r4, #4]
 800f812:	1ac0      	subs	r0, r0, r3
 800f814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f816:	b10b      	cbz	r3, 800f81c <__sflush_r+0x48>
 800f818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f81a:	1ac0      	subs	r0, r0, r3
 800f81c:	2300      	movs	r3, #0
 800f81e:	4602      	mov	r2, r0
 800f820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f822:	6a21      	ldr	r1, [r4, #32]
 800f824:	4628      	mov	r0, r5
 800f826:	47b0      	blx	r6
 800f828:	1c43      	adds	r3, r0, #1
 800f82a:	89a3      	ldrh	r3, [r4, #12]
 800f82c:	d106      	bne.n	800f83c <__sflush_r+0x68>
 800f82e:	6829      	ldr	r1, [r5, #0]
 800f830:	291d      	cmp	r1, #29
 800f832:	d848      	bhi.n	800f8c6 <__sflush_r+0xf2>
 800f834:	4a29      	ldr	r2, [pc, #164]	; (800f8dc <__sflush_r+0x108>)
 800f836:	40ca      	lsrs	r2, r1
 800f838:	07d6      	lsls	r6, r2, #31
 800f83a:	d544      	bpl.n	800f8c6 <__sflush_r+0xf2>
 800f83c:	2200      	movs	r2, #0
 800f83e:	6062      	str	r2, [r4, #4]
 800f840:	04d9      	lsls	r1, r3, #19
 800f842:	6922      	ldr	r2, [r4, #16]
 800f844:	6022      	str	r2, [r4, #0]
 800f846:	d504      	bpl.n	800f852 <__sflush_r+0x7e>
 800f848:	1c42      	adds	r2, r0, #1
 800f84a:	d101      	bne.n	800f850 <__sflush_r+0x7c>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b903      	cbnz	r3, 800f852 <__sflush_r+0x7e>
 800f850:	6560      	str	r0, [r4, #84]	; 0x54
 800f852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f854:	602f      	str	r7, [r5, #0]
 800f856:	2900      	cmp	r1, #0
 800f858:	d0c9      	beq.n	800f7ee <__sflush_r+0x1a>
 800f85a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f85e:	4299      	cmp	r1, r3
 800f860:	d002      	beq.n	800f868 <__sflush_r+0x94>
 800f862:	4628      	mov	r0, r5
 800f864:	f000 f994 	bl	800fb90 <_free_r>
 800f868:	2000      	movs	r0, #0
 800f86a:	6360      	str	r0, [r4, #52]	; 0x34
 800f86c:	e7c0      	b.n	800f7f0 <__sflush_r+0x1c>
 800f86e:	2301      	movs	r3, #1
 800f870:	4628      	mov	r0, r5
 800f872:	47b0      	blx	r6
 800f874:	1c41      	adds	r1, r0, #1
 800f876:	d1c8      	bne.n	800f80a <__sflush_r+0x36>
 800f878:	682b      	ldr	r3, [r5, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d0c5      	beq.n	800f80a <__sflush_r+0x36>
 800f87e:	2b1d      	cmp	r3, #29
 800f880:	d001      	beq.n	800f886 <__sflush_r+0xb2>
 800f882:	2b16      	cmp	r3, #22
 800f884:	d101      	bne.n	800f88a <__sflush_r+0xb6>
 800f886:	602f      	str	r7, [r5, #0]
 800f888:	e7b1      	b.n	800f7ee <__sflush_r+0x1a>
 800f88a:	89a3      	ldrh	r3, [r4, #12]
 800f88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f890:	81a3      	strh	r3, [r4, #12]
 800f892:	e7ad      	b.n	800f7f0 <__sflush_r+0x1c>
 800f894:	690f      	ldr	r7, [r1, #16]
 800f896:	2f00      	cmp	r7, #0
 800f898:	d0a9      	beq.n	800f7ee <__sflush_r+0x1a>
 800f89a:	0793      	lsls	r3, r2, #30
 800f89c:	680e      	ldr	r6, [r1, #0]
 800f89e:	bf08      	it	eq
 800f8a0:	694b      	ldreq	r3, [r1, #20]
 800f8a2:	600f      	str	r7, [r1, #0]
 800f8a4:	bf18      	it	ne
 800f8a6:	2300      	movne	r3, #0
 800f8a8:	eba6 0807 	sub.w	r8, r6, r7
 800f8ac:	608b      	str	r3, [r1, #8]
 800f8ae:	f1b8 0f00 	cmp.w	r8, #0
 800f8b2:	dd9c      	ble.n	800f7ee <__sflush_r+0x1a>
 800f8b4:	4643      	mov	r3, r8
 800f8b6:	463a      	mov	r2, r7
 800f8b8:	6a21      	ldr	r1, [r4, #32]
 800f8ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8bc:	4628      	mov	r0, r5
 800f8be:	47b0      	blx	r6
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	dc06      	bgt.n	800f8d2 <__sflush_r+0xfe>
 800f8c4:	89a3      	ldrh	r3, [r4, #12]
 800f8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8ca:	81a3      	strh	r3, [r4, #12]
 800f8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8d0:	e78e      	b.n	800f7f0 <__sflush_r+0x1c>
 800f8d2:	4407      	add	r7, r0
 800f8d4:	eba8 0800 	sub.w	r8, r8, r0
 800f8d8:	e7e9      	b.n	800f8ae <__sflush_r+0xda>
 800f8da:	bf00      	nop
 800f8dc:	20400001 	.word	0x20400001

0800f8e0 <_fflush_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	690b      	ldr	r3, [r1, #16]
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	b1db      	cbz	r3, 800f922 <_fflush_r+0x42>
 800f8ea:	b118      	cbz	r0, 800f8f4 <_fflush_r+0x14>
 800f8ec:	6983      	ldr	r3, [r0, #24]
 800f8ee:	b90b      	cbnz	r3, 800f8f4 <_fflush_r+0x14>
 800f8f0:	f000 f860 	bl	800f9b4 <__sinit>
 800f8f4:	4b0c      	ldr	r3, [pc, #48]	; (800f928 <_fflush_r+0x48>)
 800f8f6:	429c      	cmp	r4, r3
 800f8f8:	d109      	bne.n	800f90e <_fflush_r+0x2e>
 800f8fa:	686c      	ldr	r4, [r5, #4]
 800f8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f900:	b17b      	cbz	r3, 800f922 <_fflush_r+0x42>
 800f902:	4621      	mov	r1, r4
 800f904:	4628      	mov	r0, r5
 800f906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f90a:	f7ff bf63 	b.w	800f7d4 <__sflush_r>
 800f90e:	4b07      	ldr	r3, [pc, #28]	; (800f92c <_fflush_r+0x4c>)
 800f910:	429c      	cmp	r4, r3
 800f912:	d101      	bne.n	800f918 <_fflush_r+0x38>
 800f914:	68ac      	ldr	r4, [r5, #8]
 800f916:	e7f1      	b.n	800f8fc <_fflush_r+0x1c>
 800f918:	4b05      	ldr	r3, [pc, #20]	; (800f930 <_fflush_r+0x50>)
 800f91a:	429c      	cmp	r4, r3
 800f91c:	bf08      	it	eq
 800f91e:	68ec      	ldreq	r4, [r5, #12]
 800f920:	e7ec      	b.n	800f8fc <_fflush_r+0x1c>
 800f922:	2000      	movs	r0, #0
 800f924:	bd38      	pop	{r3, r4, r5, pc}
 800f926:	bf00      	nop
 800f928:	08011b04 	.word	0x08011b04
 800f92c:	08011b24 	.word	0x08011b24
 800f930:	08011ae4 	.word	0x08011ae4

0800f934 <std>:
 800f934:	2300      	movs	r3, #0
 800f936:	b510      	push	{r4, lr}
 800f938:	4604      	mov	r4, r0
 800f93a:	e9c0 3300 	strd	r3, r3, [r0]
 800f93e:	6083      	str	r3, [r0, #8]
 800f940:	8181      	strh	r1, [r0, #12]
 800f942:	6643      	str	r3, [r0, #100]	; 0x64
 800f944:	81c2      	strh	r2, [r0, #14]
 800f946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f94a:	6183      	str	r3, [r0, #24]
 800f94c:	4619      	mov	r1, r3
 800f94e:	2208      	movs	r2, #8
 800f950:	305c      	adds	r0, #92	; 0x5c
 800f952:	f7ff fddb 	bl	800f50c <memset>
 800f956:	4b05      	ldr	r3, [pc, #20]	; (800f96c <std+0x38>)
 800f958:	6263      	str	r3, [r4, #36]	; 0x24
 800f95a:	4b05      	ldr	r3, [pc, #20]	; (800f970 <std+0x3c>)
 800f95c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f95e:	4b05      	ldr	r3, [pc, #20]	; (800f974 <std+0x40>)
 800f960:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f962:	4b05      	ldr	r3, [pc, #20]	; (800f978 <std+0x44>)
 800f964:	6224      	str	r4, [r4, #32]
 800f966:	6323      	str	r3, [r4, #48]	; 0x30
 800f968:	bd10      	pop	{r4, pc}
 800f96a:	bf00      	nop
 800f96c:	08010535 	.word	0x08010535
 800f970:	08010557 	.word	0x08010557
 800f974:	0801058f 	.word	0x0801058f
 800f978:	080105b3 	.word	0x080105b3

0800f97c <_cleanup_r>:
 800f97c:	4901      	ldr	r1, [pc, #4]	; (800f984 <_cleanup_r+0x8>)
 800f97e:	f000 b885 	b.w	800fa8c <_fwalk_reent>
 800f982:	bf00      	nop
 800f984:	0800f8e1 	.word	0x0800f8e1

0800f988 <__sfmoreglue>:
 800f988:	b570      	push	{r4, r5, r6, lr}
 800f98a:	1e4a      	subs	r2, r1, #1
 800f98c:	2568      	movs	r5, #104	; 0x68
 800f98e:	4355      	muls	r5, r2
 800f990:	460e      	mov	r6, r1
 800f992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f996:	f000 f949 	bl	800fc2c <_malloc_r>
 800f99a:	4604      	mov	r4, r0
 800f99c:	b140      	cbz	r0, 800f9b0 <__sfmoreglue+0x28>
 800f99e:	2100      	movs	r1, #0
 800f9a0:	e9c0 1600 	strd	r1, r6, [r0]
 800f9a4:	300c      	adds	r0, #12
 800f9a6:	60a0      	str	r0, [r4, #8]
 800f9a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9ac:	f7ff fdae 	bl	800f50c <memset>
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	bd70      	pop	{r4, r5, r6, pc}

0800f9b4 <__sinit>:
 800f9b4:	6983      	ldr	r3, [r0, #24]
 800f9b6:	b510      	push	{r4, lr}
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	bb33      	cbnz	r3, 800fa0a <__sinit+0x56>
 800f9bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f9c0:	6503      	str	r3, [r0, #80]	; 0x50
 800f9c2:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <__sinit+0x58>)
 800f9c4:	4a12      	ldr	r2, [pc, #72]	; (800fa10 <__sinit+0x5c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6282      	str	r2, [r0, #40]	; 0x28
 800f9ca:	4298      	cmp	r0, r3
 800f9cc:	bf04      	itt	eq
 800f9ce:	2301      	moveq	r3, #1
 800f9d0:	6183      	streq	r3, [r0, #24]
 800f9d2:	f000 f81f 	bl	800fa14 <__sfp>
 800f9d6:	6060      	str	r0, [r4, #4]
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f000 f81b 	bl	800fa14 <__sfp>
 800f9de:	60a0      	str	r0, [r4, #8]
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f000 f817 	bl	800fa14 <__sfp>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	60e0      	str	r0, [r4, #12]
 800f9ea:	2104      	movs	r1, #4
 800f9ec:	6860      	ldr	r0, [r4, #4]
 800f9ee:	f7ff ffa1 	bl	800f934 <std>
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	2109      	movs	r1, #9
 800f9f6:	68a0      	ldr	r0, [r4, #8]
 800f9f8:	f7ff ff9c 	bl	800f934 <std>
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	2112      	movs	r1, #18
 800fa00:	68e0      	ldr	r0, [r4, #12]
 800fa02:	f7ff ff97 	bl	800f934 <std>
 800fa06:	2301      	movs	r3, #1
 800fa08:	61a3      	str	r3, [r4, #24]
 800fa0a:	bd10      	pop	{r4, pc}
 800fa0c:	08011ae0 	.word	0x08011ae0
 800fa10:	0800f97d 	.word	0x0800f97d

0800fa14 <__sfp>:
 800fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa16:	4b1b      	ldr	r3, [pc, #108]	; (800fa84 <__sfp+0x70>)
 800fa18:	681e      	ldr	r6, [r3, #0]
 800fa1a:	69b3      	ldr	r3, [r6, #24]
 800fa1c:	4607      	mov	r7, r0
 800fa1e:	b913      	cbnz	r3, 800fa26 <__sfp+0x12>
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7ff ffc7 	bl	800f9b4 <__sinit>
 800fa26:	3648      	adds	r6, #72	; 0x48
 800fa28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	d503      	bpl.n	800fa38 <__sfp+0x24>
 800fa30:	6833      	ldr	r3, [r6, #0]
 800fa32:	b133      	cbz	r3, 800fa42 <__sfp+0x2e>
 800fa34:	6836      	ldr	r6, [r6, #0]
 800fa36:	e7f7      	b.n	800fa28 <__sfp+0x14>
 800fa38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa3c:	b16d      	cbz	r5, 800fa5a <__sfp+0x46>
 800fa3e:	3468      	adds	r4, #104	; 0x68
 800fa40:	e7f4      	b.n	800fa2c <__sfp+0x18>
 800fa42:	2104      	movs	r1, #4
 800fa44:	4638      	mov	r0, r7
 800fa46:	f7ff ff9f 	bl	800f988 <__sfmoreglue>
 800fa4a:	6030      	str	r0, [r6, #0]
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d1f1      	bne.n	800fa34 <__sfp+0x20>
 800fa50:	230c      	movs	r3, #12
 800fa52:	603b      	str	r3, [r7, #0]
 800fa54:	4604      	mov	r4, r0
 800fa56:	4620      	mov	r0, r4
 800fa58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa5a:	4b0b      	ldr	r3, [pc, #44]	; (800fa88 <__sfp+0x74>)
 800fa5c:	6665      	str	r5, [r4, #100]	; 0x64
 800fa5e:	e9c4 5500 	strd	r5, r5, [r4]
 800fa62:	60a5      	str	r5, [r4, #8]
 800fa64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fa68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fa6c:	2208      	movs	r2, #8
 800fa6e:	4629      	mov	r1, r5
 800fa70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa74:	f7ff fd4a 	bl	800f50c <memset>
 800fa78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa80:	e7e9      	b.n	800fa56 <__sfp+0x42>
 800fa82:	bf00      	nop
 800fa84:	08011ae0 	.word	0x08011ae0
 800fa88:	ffff0001 	.word	0xffff0001

0800fa8c <_fwalk_reent>:
 800fa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	4680      	mov	r8, r0
 800fa92:	4689      	mov	r9, r1
 800fa94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa98:	2600      	movs	r6, #0
 800fa9a:	b914      	cbnz	r4, 800faa2 <_fwalk_reent+0x16>
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800faa6:	3f01      	subs	r7, #1
 800faa8:	d501      	bpl.n	800faae <_fwalk_reent+0x22>
 800faaa:	6824      	ldr	r4, [r4, #0]
 800faac:	e7f5      	b.n	800fa9a <_fwalk_reent+0xe>
 800faae:	89ab      	ldrh	r3, [r5, #12]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d907      	bls.n	800fac4 <_fwalk_reent+0x38>
 800fab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fab8:	3301      	adds	r3, #1
 800faba:	d003      	beq.n	800fac4 <_fwalk_reent+0x38>
 800fabc:	4629      	mov	r1, r5
 800fabe:	4640      	mov	r0, r8
 800fac0:	47c8      	blx	r9
 800fac2:	4306      	orrs	r6, r0
 800fac4:	3568      	adds	r5, #104	; 0x68
 800fac6:	e7ee      	b.n	800faa6 <_fwalk_reent+0x1a>

0800fac8 <__swhatbuf_r>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	460e      	mov	r6, r1
 800facc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad0:	2900      	cmp	r1, #0
 800fad2:	b096      	sub	sp, #88	; 0x58
 800fad4:	4614      	mov	r4, r2
 800fad6:	461d      	mov	r5, r3
 800fad8:	da07      	bge.n	800faea <__swhatbuf_r+0x22>
 800fada:	2300      	movs	r3, #0
 800fadc:	602b      	str	r3, [r5, #0]
 800fade:	89b3      	ldrh	r3, [r6, #12]
 800fae0:	061a      	lsls	r2, r3, #24
 800fae2:	d410      	bmi.n	800fb06 <__swhatbuf_r+0x3e>
 800fae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fae8:	e00e      	b.n	800fb08 <__swhatbuf_r+0x40>
 800faea:	466a      	mov	r2, sp
 800faec:	f000 fd88 	bl	8010600 <_fstat_r>
 800faf0:	2800      	cmp	r0, #0
 800faf2:	dbf2      	blt.n	800fada <__swhatbuf_r+0x12>
 800faf4:	9a01      	ldr	r2, [sp, #4]
 800faf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fafa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fafe:	425a      	negs	r2, r3
 800fb00:	415a      	adcs	r2, r3
 800fb02:	602a      	str	r2, [r5, #0]
 800fb04:	e7ee      	b.n	800fae4 <__swhatbuf_r+0x1c>
 800fb06:	2340      	movs	r3, #64	; 0x40
 800fb08:	2000      	movs	r0, #0
 800fb0a:	6023      	str	r3, [r4, #0]
 800fb0c:	b016      	add	sp, #88	; 0x58
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}

0800fb10 <__smakebuf_r>:
 800fb10:	898b      	ldrh	r3, [r1, #12]
 800fb12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb14:	079d      	lsls	r5, r3, #30
 800fb16:	4606      	mov	r6, r0
 800fb18:	460c      	mov	r4, r1
 800fb1a:	d507      	bpl.n	800fb2c <__smakebuf_r+0x1c>
 800fb1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	6123      	str	r3, [r4, #16]
 800fb24:	2301      	movs	r3, #1
 800fb26:	6163      	str	r3, [r4, #20]
 800fb28:	b002      	add	sp, #8
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
 800fb2c:	ab01      	add	r3, sp, #4
 800fb2e:	466a      	mov	r2, sp
 800fb30:	f7ff ffca 	bl	800fac8 <__swhatbuf_r>
 800fb34:	9900      	ldr	r1, [sp, #0]
 800fb36:	4605      	mov	r5, r0
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f000 f877 	bl	800fc2c <_malloc_r>
 800fb3e:	b948      	cbnz	r0, 800fb54 <__smakebuf_r+0x44>
 800fb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb44:	059a      	lsls	r2, r3, #22
 800fb46:	d4ef      	bmi.n	800fb28 <__smakebuf_r+0x18>
 800fb48:	f023 0303 	bic.w	r3, r3, #3
 800fb4c:	f043 0302 	orr.w	r3, r3, #2
 800fb50:	81a3      	strh	r3, [r4, #12]
 800fb52:	e7e3      	b.n	800fb1c <__smakebuf_r+0xc>
 800fb54:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <__smakebuf_r+0x7c>)
 800fb56:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	6020      	str	r0, [r4, #0]
 800fb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb60:	81a3      	strh	r3, [r4, #12]
 800fb62:	9b00      	ldr	r3, [sp, #0]
 800fb64:	6163      	str	r3, [r4, #20]
 800fb66:	9b01      	ldr	r3, [sp, #4]
 800fb68:	6120      	str	r0, [r4, #16]
 800fb6a:	b15b      	cbz	r3, 800fb84 <__smakebuf_r+0x74>
 800fb6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb70:	4630      	mov	r0, r6
 800fb72:	f000 fd57 	bl	8010624 <_isatty_r>
 800fb76:	b128      	cbz	r0, 800fb84 <__smakebuf_r+0x74>
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	f023 0303 	bic.w	r3, r3, #3
 800fb7e:	f043 0301 	orr.w	r3, r3, #1
 800fb82:	81a3      	strh	r3, [r4, #12]
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	431d      	orrs	r5, r3
 800fb88:	81a5      	strh	r5, [r4, #12]
 800fb8a:	e7cd      	b.n	800fb28 <__smakebuf_r+0x18>
 800fb8c:	0800f97d 	.word	0x0800f97d

0800fb90 <_free_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4605      	mov	r5, r0
 800fb94:	2900      	cmp	r1, #0
 800fb96:	d045      	beq.n	800fc24 <_free_r+0x94>
 800fb98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb9c:	1f0c      	subs	r4, r1, #4
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	bfb8      	it	lt
 800fba2:	18e4      	addlt	r4, r4, r3
 800fba4:	f000 fd79 	bl	801069a <__malloc_lock>
 800fba8:	4a1f      	ldr	r2, [pc, #124]	; (800fc28 <_free_r+0x98>)
 800fbaa:	6813      	ldr	r3, [r2, #0]
 800fbac:	4610      	mov	r0, r2
 800fbae:	b933      	cbnz	r3, 800fbbe <_free_r+0x2e>
 800fbb0:	6063      	str	r3, [r4, #4]
 800fbb2:	6014      	str	r4, [r2, #0]
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbba:	f000 bd6f 	b.w	801069c <__malloc_unlock>
 800fbbe:	42a3      	cmp	r3, r4
 800fbc0:	d90c      	bls.n	800fbdc <_free_r+0x4c>
 800fbc2:	6821      	ldr	r1, [r4, #0]
 800fbc4:	1862      	adds	r2, r4, r1
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	bf04      	itt	eq
 800fbca:	681a      	ldreq	r2, [r3, #0]
 800fbcc:	685b      	ldreq	r3, [r3, #4]
 800fbce:	6063      	str	r3, [r4, #4]
 800fbd0:	bf04      	itt	eq
 800fbd2:	1852      	addeq	r2, r2, r1
 800fbd4:	6022      	streq	r2, [r4, #0]
 800fbd6:	6004      	str	r4, [r0, #0]
 800fbd8:	e7ec      	b.n	800fbb4 <_free_r+0x24>
 800fbda:	4613      	mov	r3, r2
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	b10a      	cbz	r2, 800fbe4 <_free_r+0x54>
 800fbe0:	42a2      	cmp	r2, r4
 800fbe2:	d9fa      	bls.n	800fbda <_free_r+0x4a>
 800fbe4:	6819      	ldr	r1, [r3, #0]
 800fbe6:	1858      	adds	r0, r3, r1
 800fbe8:	42a0      	cmp	r0, r4
 800fbea:	d10b      	bne.n	800fc04 <_free_r+0x74>
 800fbec:	6820      	ldr	r0, [r4, #0]
 800fbee:	4401      	add	r1, r0
 800fbf0:	1858      	adds	r0, r3, r1
 800fbf2:	4282      	cmp	r2, r0
 800fbf4:	6019      	str	r1, [r3, #0]
 800fbf6:	d1dd      	bne.n	800fbb4 <_free_r+0x24>
 800fbf8:	6810      	ldr	r0, [r2, #0]
 800fbfa:	6852      	ldr	r2, [r2, #4]
 800fbfc:	605a      	str	r2, [r3, #4]
 800fbfe:	4401      	add	r1, r0
 800fc00:	6019      	str	r1, [r3, #0]
 800fc02:	e7d7      	b.n	800fbb4 <_free_r+0x24>
 800fc04:	d902      	bls.n	800fc0c <_free_r+0x7c>
 800fc06:	230c      	movs	r3, #12
 800fc08:	602b      	str	r3, [r5, #0]
 800fc0a:	e7d3      	b.n	800fbb4 <_free_r+0x24>
 800fc0c:	6820      	ldr	r0, [r4, #0]
 800fc0e:	1821      	adds	r1, r4, r0
 800fc10:	428a      	cmp	r2, r1
 800fc12:	bf04      	itt	eq
 800fc14:	6811      	ldreq	r1, [r2, #0]
 800fc16:	6852      	ldreq	r2, [r2, #4]
 800fc18:	6062      	str	r2, [r4, #4]
 800fc1a:	bf04      	itt	eq
 800fc1c:	1809      	addeq	r1, r1, r0
 800fc1e:	6021      	streq	r1, [r4, #0]
 800fc20:	605c      	str	r4, [r3, #4]
 800fc22:	e7c7      	b.n	800fbb4 <_free_r+0x24>
 800fc24:	bd38      	pop	{r3, r4, r5, pc}
 800fc26:	bf00      	nop
 800fc28:	240001ec 	.word	0x240001ec

0800fc2c <_malloc_r>:
 800fc2c:	b570      	push	{r4, r5, r6, lr}
 800fc2e:	1ccd      	adds	r5, r1, #3
 800fc30:	f025 0503 	bic.w	r5, r5, #3
 800fc34:	3508      	adds	r5, #8
 800fc36:	2d0c      	cmp	r5, #12
 800fc38:	bf38      	it	cc
 800fc3a:	250c      	movcc	r5, #12
 800fc3c:	2d00      	cmp	r5, #0
 800fc3e:	4606      	mov	r6, r0
 800fc40:	db01      	blt.n	800fc46 <_malloc_r+0x1a>
 800fc42:	42a9      	cmp	r1, r5
 800fc44:	d903      	bls.n	800fc4e <_malloc_r+0x22>
 800fc46:	230c      	movs	r3, #12
 800fc48:	6033      	str	r3, [r6, #0]
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	bd70      	pop	{r4, r5, r6, pc}
 800fc4e:	f000 fd24 	bl	801069a <__malloc_lock>
 800fc52:	4a21      	ldr	r2, [pc, #132]	; (800fcd8 <_malloc_r+0xac>)
 800fc54:	6814      	ldr	r4, [r2, #0]
 800fc56:	4621      	mov	r1, r4
 800fc58:	b991      	cbnz	r1, 800fc80 <_malloc_r+0x54>
 800fc5a:	4c20      	ldr	r4, [pc, #128]	; (800fcdc <_malloc_r+0xb0>)
 800fc5c:	6823      	ldr	r3, [r4, #0]
 800fc5e:	b91b      	cbnz	r3, 800fc68 <_malloc_r+0x3c>
 800fc60:	4630      	mov	r0, r6
 800fc62:	f000 fc57 	bl	8010514 <_sbrk_r>
 800fc66:	6020      	str	r0, [r4, #0]
 800fc68:	4629      	mov	r1, r5
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	f000 fc52 	bl	8010514 <_sbrk_r>
 800fc70:	1c43      	adds	r3, r0, #1
 800fc72:	d124      	bne.n	800fcbe <_malloc_r+0x92>
 800fc74:	230c      	movs	r3, #12
 800fc76:	6033      	str	r3, [r6, #0]
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f000 fd0f 	bl	801069c <__malloc_unlock>
 800fc7e:	e7e4      	b.n	800fc4a <_malloc_r+0x1e>
 800fc80:	680b      	ldr	r3, [r1, #0]
 800fc82:	1b5b      	subs	r3, r3, r5
 800fc84:	d418      	bmi.n	800fcb8 <_malloc_r+0x8c>
 800fc86:	2b0b      	cmp	r3, #11
 800fc88:	d90f      	bls.n	800fcaa <_malloc_r+0x7e>
 800fc8a:	600b      	str	r3, [r1, #0]
 800fc8c:	50cd      	str	r5, [r1, r3]
 800fc8e:	18cc      	adds	r4, r1, r3
 800fc90:	4630      	mov	r0, r6
 800fc92:	f000 fd03 	bl	801069c <__malloc_unlock>
 800fc96:	f104 000b 	add.w	r0, r4, #11
 800fc9a:	1d23      	adds	r3, r4, #4
 800fc9c:	f020 0007 	bic.w	r0, r0, #7
 800fca0:	1ac3      	subs	r3, r0, r3
 800fca2:	d0d3      	beq.n	800fc4c <_malloc_r+0x20>
 800fca4:	425a      	negs	r2, r3
 800fca6:	50e2      	str	r2, [r4, r3]
 800fca8:	e7d0      	b.n	800fc4c <_malloc_r+0x20>
 800fcaa:	428c      	cmp	r4, r1
 800fcac:	684b      	ldr	r3, [r1, #4]
 800fcae:	bf16      	itet	ne
 800fcb0:	6063      	strne	r3, [r4, #4]
 800fcb2:	6013      	streq	r3, [r2, #0]
 800fcb4:	460c      	movne	r4, r1
 800fcb6:	e7eb      	b.n	800fc90 <_malloc_r+0x64>
 800fcb8:	460c      	mov	r4, r1
 800fcba:	6849      	ldr	r1, [r1, #4]
 800fcbc:	e7cc      	b.n	800fc58 <_malloc_r+0x2c>
 800fcbe:	1cc4      	adds	r4, r0, #3
 800fcc0:	f024 0403 	bic.w	r4, r4, #3
 800fcc4:	42a0      	cmp	r0, r4
 800fcc6:	d005      	beq.n	800fcd4 <_malloc_r+0xa8>
 800fcc8:	1a21      	subs	r1, r4, r0
 800fcca:	4630      	mov	r0, r6
 800fccc:	f000 fc22 	bl	8010514 <_sbrk_r>
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d0cf      	beq.n	800fc74 <_malloc_r+0x48>
 800fcd4:	6025      	str	r5, [r4, #0]
 800fcd6:	e7db      	b.n	800fc90 <_malloc_r+0x64>
 800fcd8:	240001ec 	.word	0x240001ec
 800fcdc:	240001f0 	.word	0x240001f0

0800fce0 <__ssputs_r>:
 800fce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce4:	688e      	ldr	r6, [r1, #8]
 800fce6:	429e      	cmp	r6, r3
 800fce8:	4682      	mov	sl, r0
 800fcea:	460c      	mov	r4, r1
 800fcec:	4690      	mov	r8, r2
 800fcee:	4699      	mov	r9, r3
 800fcf0:	d837      	bhi.n	800fd62 <__ssputs_r+0x82>
 800fcf2:	898a      	ldrh	r2, [r1, #12]
 800fcf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fcf8:	d031      	beq.n	800fd5e <__ssputs_r+0x7e>
 800fcfa:	6825      	ldr	r5, [r4, #0]
 800fcfc:	6909      	ldr	r1, [r1, #16]
 800fcfe:	1a6f      	subs	r7, r5, r1
 800fd00:	6965      	ldr	r5, [r4, #20]
 800fd02:	2302      	movs	r3, #2
 800fd04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd08:	fb95 f5f3 	sdiv	r5, r5, r3
 800fd0c:	f109 0301 	add.w	r3, r9, #1
 800fd10:	443b      	add	r3, r7
 800fd12:	429d      	cmp	r5, r3
 800fd14:	bf38      	it	cc
 800fd16:	461d      	movcc	r5, r3
 800fd18:	0553      	lsls	r3, r2, #21
 800fd1a:	d530      	bpl.n	800fd7e <__ssputs_r+0x9e>
 800fd1c:	4629      	mov	r1, r5
 800fd1e:	f7ff ff85 	bl	800fc2c <_malloc_r>
 800fd22:	4606      	mov	r6, r0
 800fd24:	b950      	cbnz	r0, 800fd3c <__ssputs_r+0x5c>
 800fd26:	230c      	movs	r3, #12
 800fd28:	f8ca 3000 	str.w	r3, [sl]
 800fd2c:	89a3      	ldrh	r3, [r4, #12]
 800fd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd32:	81a3      	strh	r3, [r4, #12]
 800fd34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd3c:	463a      	mov	r2, r7
 800fd3e:	6921      	ldr	r1, [r4, #16]
 800fd40:	f7ff fbd9 	bl	800f4f6 <memcpy>
 800fd44:	89a3      	ldrh	r3, [r4, #12]
 800fd46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd4e:	81a3      	strh	r3, [r4, #12]
 800fd50:	6126      	str	r6, [r4, #16]
 800fd52:	6165      	str	r5, [r4, #20]
 800fd54:	443e      	add	r6, r7
 800fd56:	1bed      	subs	r5, r5, r7
 800fd58:	6026      	str	r6, [r4, #0]
 800fd5a:	60a5      	str	r5, [r4, #8]
 800fd5c:	464e      	mov	r6, r9
 800fd5e:	454e      	cmp	r6, r9
 800fd60:	d900      	bls.n	800fd64 <__ssputs_r+0x84>
 800fd62:	464e      	mov	r6, r9
 800fd64:	4632      	mov	r2, r6
 800fd66:	4641      	mov	r1, r8
 800fd68:	6820      	ldr	r0, [r4, #0]
 800fd6a:	f000 fc7d 	bl	8010668 <memmove>
 800fd6e:	68a3      	ldr	r3, [r4, #8]
 800fd70:	1b9b      	subs	r3, r3, r6
 800fd72:	60a3      	str	r3, [r4, #8]
 800fd74:	6823      	ldr	r3, [r4, #0]
 800fd76:	441e      	add	r6, r3
 800fd78:	6026      	str	r6, [r4, #0]
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	e7dc      	b.n	800fd38 <__ssputs_r+0x58>
 800fd7e:	462a      	mov	r2, r5
 800fd80:	f000 fc8d 	bl	801069e <_realloc_r>
 800fd84:	4606      	mov	r6, r0
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d1e2      	bne.n	800fd50 <__ssputs_r+0x70>
 800fd8a:	6921      	ldr	r1, [r4, #16]
 800fd8c:	4650      	mov	r0, sl
 800fd8e:	f7ff feff 	bl	800fb90 <_free_r>
 800fd92:	e7c8      	b.n	800fd26 <__ssputs_r+0x46>

0800fd94 <_svfiprintf_r>:
 800fd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd98:	461d      	mov	r5, r3
 800fd9a:	898b      	ldrh	r3, [r1, #12]
 800fd9c:	061f      	lsls	r7, r3, #24
 800fd9e:	b09d      	sub	sp, #116	; 0x74
 800fda0:	4680      	mov	r8, r0
 800fda2:	460c      	mov	r4, r1
 800fda4:	4616      	mov	r6, r2
 800fda6:	d50f      	bpl.n	800fdc8 <_svfiprintf_r+0x34>
 800fda8:	690b      	ldr	r3, [r1, #16]
 800fdaa:	b96b      	cbnz	r3, 800fdc8 <_svfiprintf_r+0x34>
 800fdac:	2140      	movs	r1, #64	; 0x40
 800fdae:	f7ff ff3d 	bl	800fc2c <_malloc_r>
 800fdb2:	6020      	str	r0, [r4, #0]
 800fdb4:	6120      	str	r0, [r4, #16]
 800fdb6:	b928      	cbnz	r0, 800fdc4 <_svfiprintf_r+0x30>
 800fdb8:	230c      	movs	r3, #12
 800fdba:	f8c8 3000 	str.w	r3, [r8]
 800fdbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdc2:	e0c8      	b.n	800ff56 <_svfiprintf_r+0x1c2>
 800fdc4:	2340      	movs	r3, #64	; 0x40
 800fdc6:	6163      	str	r3, [r4, #20]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9309      	str	r3, [sp, #36]	; 0x24
 800fdcc:	2320      	movs	r3, #32
 800fdce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdd2:	2330      	movs	r3, #48	; 0x30
 800fdd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdd8:	9503      	str	r5, [sp, #12]
 800fdda:	f04f 0b01 	mov.w	fp, #1
 800fdde:	4637      	mov	r7, r6
 800fde0:	463d      	mov	r5, r7
 800fde2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fde6:	b10b      	cbz	r3, 800fdec <_svfiprintf_r+0x58>
 800fde8:	2b25      	cmp	r3, #37	; 0x25
 800fdea:	d13e      	bne.n	800fe6a <_svfiprintf_r+0xd6>
 800fdec:	ebb7 0a06 	subs.w	sl, r7, r6
 800fdf0:	d00b      	beq.n	800fe0a <_svfiprintf_r+0x76>
 800fdf2:	4653      	mov	r3, sl
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	4640      	mov	r0, r8
 800fdfa:	f7ff ff71 	bl	800fce0 <__ssputs_r>
 800fdfe:	3001      	adds	r0, #1
 800fe00:	f000 80a4 	beq.w	800ff4c <_svfiprintf_r+0x1b8>
 800fe04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe06:	4453      	add	r3, sl
 800fe08:	9309      	str	r3, [sp, #36]	; 0x24
 800fe0a:	783b      	ldrb	r3, [r7, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f000 809d 	beq.w	800ff4c <_svfiprintf_r+0x1b8>
 800fe12:	2300      	movs	r3, #0
 800fe14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe1c:	9304      	str	r3, [sp, #16]
 800fe1e:	9307      	str	r3, [sp, #28]
 800fe20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe24:	931a      	str	r3, [sp, #104]	; 0x68
 800fe26:	462f      	mov	r7, r5
 800fe28:	2205      	movs	r2, #5
 800fe2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fe2e:	4850      	ldr	r0, [pc, #320]	; (800ff70 <_svfiprintf_r+0x1dc>)
 800fe30:	f7f0 fa5e 	bl	80002f0 <memchr>
 800fe34:	9b04      	ldr	r3, [sp, #16]
 800fe36:	b9d0      	cbnz	r0, 800fe6e <_svfiprintf_r+0xda>
 800fe38:	06d9      	lsls	r1, r3, #27
 800fe3a:	bf44      	itt	mi
 800fe3c:	2220      	movmi	r2, #32
 800fe3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe42:	071a      	lsls	r2, r3, #28
 800fe44:	bf44      	itt	mi
 800fe46:	222b      	movmi	r2, #43	; 0x2b
 800fe48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe4c:	782a      	ldrb	r2, [r5, #0]
 800fe4e:	2a2a      	cmp	r2, #42	; 0x2a
 800fe50:	d015      	beq.n	800fe7e <_svfiprintf_r+0xea>
 800fe52:	9a07      	ldr	r2, [sp, #28]
 800fe54:	462f      	mov	r7, r5
 800fe56:	2000      	movs	r0, #0
 800fe58:	250a      	movs	r5, #10
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe60:	3b30      	subs	r3, #48	; 0x30
 800fe62:	2b09      	cmp	r3, #9
 800fe64:	d94d      	bls.n	800ff02 <_svfiprintf_r+0x16e>
 800fe66:	b1b8      	cbz	r0, 800fe98 <_svfiprintf_r+0x104>
 800fe68:	e00f      	b.n	800fe8a <_svfiprintf_r+0xf6>
 800fe6a:	462f      	mov	r7, r5
 800fe6c:	e7b8      	b.n	800fde0 <_svfiprintf_r+0x4c>
 800fe6e:	4a40      	ldr	r2, [pc, #256]	; (800ff70 <_svfiprintf_r+0x1dc>)
 800fe70:	1a80      	subs	r0, r0, r2
 800fe72:	fa0b f000 	lsl.w	r0, fp, r0
 800fe76:	4318      	orrs	r0, r3
 800fe78:	9004      	str	r0, [sp, #16]
 800fe7a:	463d      	mov	r5, r7
 800fe7c:	e7d3      	b.n	800fe26 <_svfiprintf_r+0x92>
 800fe7e:	9a03      	ldr	r2, [sp, #12]
 800fe80:	1d11      	adds	r1, r2, #4
 800fe82:	6812      	ldr	r2, [r2, #0]
 800fe84:	9103      	str	r1, [sp, #12]
 800fe86:	2a00      	cmp	r2, #0
 800fe88:	db01      	blt.n	800fe8e <_svfiprintf_r+0xfa>
 800fe8a:	9207      	str	r2, [sp, #28]
 800fe8c:	e004      	b.n	800fe98 <_svfiprintf_r+0x104>
 800fe8e:	4252      	negs	r2, r2
 800fe90:	f043 0302 	orr.w	r3, r3, #2
 800fe94:	9207      	str	r2, [sp, #28]
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	783b      	ldrb	r3, [r7, #0]
 800fe9a:	2b2e      	cmp	r3, #46	; 0x2e
 800fe9c:	d10c      	bne.n	800feb8 <_svfiprintf_r+0x124>
 800fe9e:	787b      	ldrb	r3, [r7, #1]
 800fea0:	2b2a      	cmp	r3, #42	; 0x2a
 800fea2:	d133      	bne.n	800ff0c <_svfiprintf_r+0x178>
 800fea4:	9b03      	ldr	r3, [sp, #12]
 800fea6:	1d1a      	adds	r2, r3, #4
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	9203      	str	r2, [sp, #12]
 800feac:	2b00      	cmp	r3, #0
 800feae:	bfb8      	it	lt
 800feb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800feb4:	3702      	adds	r7, #2
 800feb6:	9305      	str	r3, [sp, #20]
 800feb8:	4d2e      	ldr	r5, [pc, #184]	; (800ff74 <_svfiprintf_r+0x1e0>)
 800feba:	7839      	ldrb	r1, [r7, #0]
 800febc:	2203      	movs	r2, #3
 800febe:	4628      	mov	r0, r5
 800fec0:	f7f0 fa16 	bl	80002f0 <memchr>
 800fec4:	b138      	cbz	r0, 800fed6 <_svfiprintf_r+0x142>
 800fec6:	2340      	movs	r3, #64	; 0x40
 800fec8:	1b40      	subs	r0, r0, r5
 800feca:	fa03 f000 	lsl.w	r0, r3, r0
 800fece:	9b04      	ldr	r3, [sp, #16]
 800fed0:	4303      	orrs	r3, r0
 800fed2:	3701      	adds	r7, #1
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	7839      	ldrb	r1, [r7, #0]
 800fed8:	4827      	ldr	r0, [pc, #156]	; (800ff78 <_svfiprintf_r+0x1e4>)
 800feda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fede:	2206      	movs	r2, #6
 800fee0:	1c7e      	adds	r6, r7, #1
 800fee2:	f7f0 fa05 	bl	80002f0 <memchr>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d038      	beq.n	800ff5c <_svfiprintf_r+0x1c8>
 800feea:	4b24      	ldr	r3, [pc, #144]	; (800ff7c <_svfiprintf_r+0x1e8>)
 800feec:	bb13      	cbnz	r3, 800ff34 <_svfiprintf_r+0x1a0>
 800feee:	9b03      	ldr	r3, [sp, #12]
 800fef0:	3307      	adds	r3, #7
 800fef2:	f023 0307 	bic.w	r3, r3, #7
 800fef6:	3308      	adds	r3, #8
 800fef8:	9303      	str	r3, [sp, #12]
 800fefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fefc:	444b      	add	r3, r9
 800fefe:	9309      	str	r3, [sp, #36]	; 0x24
 800ff00:	e76d      	b.n	800fdde <_svfiprintf_r+0x4a>
 800ff02:	fb05 3202 	mla	r2, r5, r2, r3
 800ff06:	2001      	movs	r0, #1
 800ff08:	460f      	mov	r7, r1
 800ff0a:	e7a6      	b.n	800fe5a <_svfiprintf_r+0xc6>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	3701      	adds	r7, #1
 800ff10:	9305      	str	r3, [sp, #20]
 800ff12:	4619      	mov	r1, r3
 800ff14:	250a      	movs	r5, #10
 800ff16:	4638      	mov	r0, r7
 800ff18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff1c:	3a30      	subs	r2, #48	; 0x30
 800ff1e:	2a09      	cmp	r2, #9
 800ff20:	d903      	bls.n	800ff2a <_svfiprintf_r+0x196>
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d0c8      	beq.n	800feb8 <_svfiprintf_r+0x124>
 800ff26:	9105      	str	r1, [sp, #20]
 800ff28:	e7c6      	b.n	800feb8 <_svfiprintf_r+0x124>
 800ff2a:	fb05 2101 	mla	r1, r5, r1, r2
 800ff2e:	2301      	movs	r3, #1
 800ff30:	4607      	mov	r7, r0
 800ff32:	e7f0      	b.n	800ff16 <_svfiprintf_r+0x182>
 800ff34:	ab03      	add	r3, sp, #12
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	4622      	mov	r2, r4
 800ff3a:	4b11      	ldr	r3, [pc, #68]	; (800ff80 <_svfiprintf_r+0x1ec>)
 800ff3c:	a904      	add	r1, sp, #16
 800ff3e:	4640      	mov	r0, r8
 800ff40:	f3af 8000 	nop.w
 800ff44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ff48:	4681      	mov	r9, r0
 800ff4a:	d1d6      	bne.n	800fefa <_svfiprintf_r+0x166>
 800ff4c:	89a3      	ldrh	r3, [r4, #12]
 800ff4e:	065b      	lsls	r3, r3, #25
 800ff50:	f53f af35 	bmi.w	800fdbe <_svfiprintf_r+0x2a>
 800ff54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff56:	b01d      	add	sp, #116	; 0x74
 800ff58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff5c:	ab03      	add	r3, sp, #12
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	4622      	mov	r2, r4
 800ff62:	4b07      	ldr	r3, [pc, #28]	; (800ff80 <_svfiprintf_r+0x1ec>)
 800ff64:	a904      	add	r1, sp, #16
 800ff66:	4640      	mov	r0, r8
 800ff68:	f000 f9c2 	bl	80102f0 <_printf_i>
 800ff6c:	e7ea      	b.n	800ff44 <_svfiprintf_r+0x1b0>
 800ff6e:	bf00      	nop
 800ff70:	08011b44 	.word	0x08011b44
 800ff74:	08011b4a 	.word	0x08011b4a
 800ff78:	08011b4e 	.word	0x08011b4e
 800ff7c:	00000000 	.word	0x00000000
 800ff80:	0800fce1 	.word	0x0800fce1

0800ff84 <__sfputc_r>:
 800ff84:	6893      	ldr	r3, [r2, #8]
 800ff86:	3b01      	subs	r3, #1
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	b410      	push	{r4}
 800ff8c:	6093      	str	r3, [r2, #8]
 800ff8e:	da08      	bge.n	800ffa2 <__sfputc_r+0x1e>
 800ff90:	6994      	ldr	r4, [r2, #24]
 800ff92:	42a3      	cmp	r3, r4
 800ff94:	db01      	blt.n	800ff9a <__sfputc_r+0x16>
 800ff96:	290a      	cmp	r1, #10
 800ff98:	d103      	bne.n	800ffa2 <__sfputc_r+0x1e>
 800ff9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff9e:	f7ff bb59 	b.w	800f654 <__swbuf_r>
 800ffa2:	6813      	ldr	r3, [r2, #0]
 800ffa4:	1c58      	adds	r0, r3, #1
 800ffa6:	6010      	str	r0, [r2, #0]
 800ffa8:	7019      	strb	r1, [r3, #0]
 800ffaa:	4608      	mov	r0, r1
 800ffac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <__sfputs_r>:
 800ffb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb4:	4606      	mov	r6, r0
 800ffb6:	460f      	mov	r7, r1
 800ffb8:	4614      	mov	r4, r2
 800ffba:	18d5      	adds	r5, r2, r3
 800ffbc:	42ac      	cmp	r4, r5
 800ffbe:	d101      	bne.n	800ffc4 <__sfputs_r+0x12>
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	e007      	b.n	800ffd4 <__sfputs_r+0x22>
 800ffc4:	463a      	mov	r2, r7
 800ffc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffca:	4630      	mov	r0, r6
 800ffcc:	f7ff ffda 	bl	800ff84 <__sfputc_r>
 800ffd0:	1c43      	adds	r3, r0, #1
 800ffd2:	d1f3      	bne.n	800ffbc <__sfputs_r+0xa>
 800ffd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffd8 <_vfiprintf_r>:
 800ffd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffdc:	460c      	mov	r4, r1
 800ffde:	b09d      	sub	sp, #116	; 0x74
 800ffe0:	4617      	mov	r7, r2
 800ffe2:	461d      	mov	r5, r3
 800ffe4:	4606      	mov	r6, r0
 800ffe6:	b118      	cbz	r0, 800fff0 <_vfiprintf_r+0x18>
 800ffe8:	6983      	ldr	r3, [r0, #24]
 800ffea:	b90b      	cbnz	r3, 800fff0 <_vfiprintf_r+0x18>
 800ffec:	f7ff fce2 	bl	800f9b4 <__sinit>
 800fff0:	4b7c      	ldr	r3, [pc, #496]	; (80101e4 <_vfiprintf_r+0x20c>)
 800fff2:	429c      	cmp	r4, r3
 800fff4:	d158      	bne.n	80100a8 <_vfiprintf_r+0xd0>
 800fff6:	6874      	ldr	r4, [r6, #4]
 800fff8:	89a3      	ldrh	r3, [r4, #12]
 800fffa:	0718      	lsls	r0, r3, #28
 800fffc:	d55e      	bpl.n	80100bc <_vfiprintf_r+0xe4>
 800fffe:	6923      	ldr	r3, [r4, #16]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d05b      	beq.n	80100bc <_vfiprintf_r+0xe4>
 8010004:	2300      	movs	r3, #0
 8010006:	9309      	str	r3, [sp, #36]	; 0x24
 8010008:	2320      	movs	r3, #32
 801000a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801000e:	2330      	movs	r3, #48	; 0x30
 8010010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010014:	9503      	str	r5, [sp, #12]
 8010016:	f04f 0b01 	mov.w	fp, #1
 801001a:	46b8      	mov	r8, r7
 801001c:	4645      	mov	r5, r8
 801001e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010022:	b10b      	cbz	r3, 8010028 <_vfiprintf_r+0x50>
 8010024:	2b25      	cmp	r3, #37	; 0x25
 8010026:	d154      	bne.n	80100d2 <_vfiprintf_r+0xfa>
 8010028:	ebb8 0a07 	subs.w	sl, r8, r7
 801002c:	d00b      	beq.n	8010046 <_vfiprintf_r+0x6e>
 801002e:	4653      	mov	r3, sl
 8010030:	463a      	mov	r2, r7
 8010032:	4621      	mov	r1, r4
 8010034:	4630      	mov	r0, r6
 8010036:	f7ff ffbc 	bl	800ffb2 <__sfputs_r>
 801003a:	3001      	adds	r0, #1
 801003c:	f000 80c2 	beq.w	80101c4 <_vfiprintf_r+0x1ec>
 8010040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010042:	4453      	add	r3, sl
 8010044:	9309      	str	r3, [sp, #36]	; 0x24
 8010046:	f898 3000 	ldrb.w	r3, [r8]
 801004a:	2b00      	cmp	r3, #0
 801004c:	f000 80ba 	beq.w	80101c4 <_vfiprintf_r+0x1ec>
 8010050:	2300      	movs	r3, #0
 8010052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801005a:	9304      	str	r3, [sp, #16]
 801005c:	9307      	str	r3, [sp, #28]
 801005e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010062:	931a      	str	r3, [sp, #104]	; 0x68
 8010064:	46a8      	mov	r8, r5
 8010066:	2205      	movs	r2, #5
 8010068:	f818 1b01 	ldrb.w	r1, [r8], #1
 801006c:	485e      	ldr	r0, [pc, #376]	; (80101e8 <_vfiprintf_r+0x210>)
 801006e:	f7f0 f93f 	bl	80002f0 <memchr>
 8010072:	9b04      	ldr	r3, [sp, #16]
 8010074:	bb78      	cbnz	r0, 80100d6 <_vfiprintf_r+0xfe>
 8010076:	06d9      	lsls	r1, r3, #27
 8010078:	bf44      	itt	mi
 801007a:	2220      	movmi	r2, #32
 801007c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010080:	071a      	lsls	r2, r3, #28
 8010082:	bf44      	itt	mi
 8010084:	222b      	movmi	r2, #43	; 0x2b
 8010086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801008a:	782a      	ldrb	r2, [r5, #0]
 801008c:	2a2a      	cmp	r2, #42	; 0x2a
 801008e:	d02a      	beq.n	80100e6 <_vfiprintf_r+0x10e>
 8010090:	9a07      	ldr	r2, [sp, #28]
 8010092:	46a8      	mov	r8, r5
 8010094:	2000      	movs	r0, #0
 8010096:	250a      	movs	r5, #10
 8010098:	4641      	mov	r1, r8
 801009a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801009e:	3b30      	subs	r3, #48	; 0x30
 80100a0:	2b09      	cmp	r3, #9
 80100a2:	d969      	bls.n	8010178 <_vfiprintf_r+0x1a0>
 80100a4:	b360      	cbz	r0, 8010100 <_vfiprintf_r+0x128>
 80100a6:	e024      	b.n	80100f2 <_vfiprintf_r+0x11a>
 80100a8:	4b50      	ldr	r3, [pc, #320]	; (80101ec <_vfiprintf_r+0x214>)
 80100aa:	429c      	cmp	r4, r3
 80100ac:	d101      	bne.n	80100b2 <_vfiprintf_r+0xda>
 80100ae:	68b4      	ldr	r4, [r6, #8]
 80100b0:	e7a2      	b.n	800fff8 <_vfiprintf_r+0x20>
 80100b2:	4b4f      	ldr	r3, [pc, #316]	; (80101f0 <_vfiprintf_r+0x218>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	bf08      	it	eq
 80100b8:	68f4      	ldreq	r4, [r6, #12]
 80100ba:	e79d      	b.n	800fff8 <_vfiprintf_r+0x20>
 80100bc:	4621      	mov	r1, r4
 80100be:	4630      	mov	r0, r6
 80100c0:	f7ff fb1a 	bl	800f6f8 <__swsetup_r>
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d09d      	beq.n	8010004 <_vfiprintf_r+0x2c>
 80100c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100cc:	b01d      	add	sp, #116	; 0x74
 80100ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d2:	46a8      	mov	r8, r5
 80100d4:	e7a2      	b.n	801001c <_vfiprintf_r+0x44>
 80100d6:	4a44      	ldr	r2, [pc, #272]	; (80101e8 <_vfiprintf_r+0x210>)
 80100d8:	1a80      	subs	r0, r0, r2
 80100da:	fa0b f000 	lsl.w	r0, fp, r0
 80100de:	4318      	orrs	r0, r3
 80100e0:	9004      	str	r0, [sp, #16]
 80100e2:	4645      	mov	r5, r8
 80100e4:	e7be      	b.n	8010064 <_vfiprintf_r+0x8c>
 80100e6:	9a03      	ldr	r2, [sp, #12]
 80100e8:	1d11      	adds	r1, r2, #4
 80100ea:	6812      	ldr	r2, [r2, #0]
 80100ec:	9103      	str	r1, [sp, #12]
 80100ee:	2a00      	cmp	r2, #0
 80100f0:	db01      	blt.n	80100f6 <_vfiprintf_r+0x11e>
 80100f2:	9207      	str	r2, [sp, #28]
 80100f4:	e004      	b.n	8010100 <_vfiprintf_r+0x128>
 80100f6:	4252      	negs	r2, r2
 80100f8:	f043 0302 	orr.w	r3, r3, #2
 80100fc:	9207      	str	r2, [sp, #28]
 80100fe:	9304      	str	r3, [sp, #16]
 8010100:	f898 3000 	ldrb.w	r3, [r8]
 8010104:	2b2e      	cmp	r3, #46	; 0x2e
 8010106:	d10e      	bne.n	8010126 <_vfiprintf_r+0x14e>
 8010108:	f898 3001 	ldrb.w	r3, [r8, #1]
 801010c:	2b2a      	cmp	r3, #42	; 0x2a
 801010e:	d138      	bne.n	8010182 <_vfiprintf_r+0x1aa>
 8010110:	9b03      	ldr	r3, [sp, #12]
 8010112:	1d1a      	adds	r2, r3, #4
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	9203      	str	r2, [sp, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	bfb8      	it	lt
 801011c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010120:	f108 0802 	add.w	r8, r8, #2
 8010124:	9305      	str	r3, [sp, #20]
 8010126:	4d33      	ldr	r5, [pc, #204]	; (80101f4 <_vfiprintf_r+0x21c>)
 8010128:	f898 1000 	ldrb.w	r1, [r8]
 801012c:	2203      	movs	r2, #3
 801012e:	4628      	mov	r0, r5
 8010130:	f7f0 f8de 	bl	80002f0 <memchr>
 8010134:	b140      	cbz	r0, 8010148 <_vfiprintf_r+0x170>
 8010136:	2340      	movs	r3, #64	; 0x40
 8010138:	1b40      	subs	r0, r0, r5
 801013a:	fa03 f000 	lsl.w	r0, r3, r0
 801013e:	9b04      	ldr	r3, [sp, #16]
 8010140:	4303      	orrs	r3, r0
 8010142:	f108 0801 	add.w	r8, r8, #1
 8010146:	9304      	str	r3, [sp, #16]
 8010148:	f898 1000 	ldrb.w	r1, [r8]
 801014c:	482a      	ldr	r0, [pc, #168]	; (80101f8 <_vfiprintf_r+0x220>)
 801014e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010152:	2206      	movs	r2, #6
 8010154:	f108 0701 	add.w	r7, r8, #1
 8010158:	f7f0 f8ca 	bl	80002f0 <memchr>
 801015c:	2800      	cmp	r0, #0
 801015e:	d037      	beq.n	80101d0 <_vfiprintf_r+0x1f8>
 8010160:	4b26      	ldr	r3, [pc, #152]	; (80101fc <_vfiprintf_r+0x224>)
 8010162:	bb1b      	cbnz	r3, 80101ac <_vfiprintf_r+0x1d4>
 8010164:	9b03      	ldr	r3, [sp, #12]
 8010166:	3307      	adds	r3, #7
 8010168:	f023 0307 	bic.w	r3, r3, #7
 801016c:	3308      	adds	r3, #8
 801016e:	9303      	str	r3, [sp, #12]
 8010170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010172:	444b      	add	r3, r9
 8010174:	9309      	str	r3, [sp, #36]	; 0x24
 8010176:	e750      	b.n	801001a <_vfiprintf_r+0x42>
 8010178:	fb05 3202 	mla	r2, r5, r2, r3
 801017c:	2001      	movs	r0, #1
 801017e:	4688      	mov	r8, r1
 8010180:	e78a      	b.n	8010098 <_vfiprintf_r+0xc0>
 8010182:	2300      	movs	r3, #0
 8010184:	f108 0801 	add.w	r8, r8, #1
 8010188:	9305      	str	r3, [sp, #20]
 801018a:	4619      	mov	r1, r3
 801018c:	250a      	movs	r5, #10
 801018e:	4640      	mov	r0, r8
 8010190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010194:	3a30      	subs	r2, #48	; 0x30
 8010196:	2a09      	cmp	r2, #9
 8010198:	d903      	bls.n	80101a2 <_vfiprintf_r+0x1ca>
 801019a:	2b00      	cmp	r3, #0
 801019c:	d0c3      	beq.n	8010126 <_vfiprintf_r+0x14e>
 801019e:	9105      	str	r1, [sp, #20]
 80101a0:	e7c1      	b.n	8010126 <_vfiprintf_r+0x14e>
 80101a2:	fb05 2101 	mla	r1, r5, r1, r2
 80101a6:	2301      	movs	r3, #1
 80101a8:	4680      	mov	r8, r0
 80101aa:	e7f0      	b.n	801018e <_vfiprintf_r+0x1b6>
 80101ac:	ab03      	add	r3, sp, #12
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	4622      	mov	r2, r4
 80101b2:	4b13      	ldr	r3, [pc, #76]	; (8010200 <_vfiprintf_r+0x228>)
 80101b4:	a904      	add	r1, sp, #16
 80101b6:	4630      	mov	r0, r6
 80101b8:	f3af 8000 	nop.w
 80101bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80101c0:	4681      	mov	r9, r0
 80101c2:	d1d5      	bne.n	8010170 <_vfiprintf_r+0x198>
 80101c4:	89a3      	ldrh	r3, [r4, #12]
 80101c6:	065b      	lsls	r3, r3, #25
 80101c8:	f53f af7e 	bmi.w	80100c8 <_vfiprintf_r+0xf0>
 80101cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ce:	e77d      	b.n	80100cc <_vfiprintf_r+0xf4>
 80101d0:	ab03      	add	r3, sp, #12
 80101d2:	9300      	str	r3, [sp, #0]
 80101d4:	4622      	mov	r2, r4
 80101d6:	4b0a      	ldr	r3, [pc, #40]	; (8010200 <_vfiprintf_r+0x228>)
 80101d8:	a904      	add	r1, sp, #16
 80101da:	4630      	mov	r0, r6
 80101dc:	f000 f888 	bl	80102f0 <_printf_i>
 80101e0:	e7ec      	b.n	80101bc <_vfiprintf_r+0x1e4>
 80101e2:	bf00      	nop
 80101e4:	08011b04 	.word	0x08011b04
 80101e8:	08011b44 	.word	0x08011b44
 80101ec:	08011b24 	.word	0x08011b24
 80101f0:	08011ae4 	.word	0x08011ae4
 80101f4:	08011b4a 	.word	0x08011b4a
 80101f8:	08011b4e 	.word	0x08011b4e
 80101fc:	00000000 	.word	0x00000000
 8010200:	0800ffb3 	.word	0x0800ffb3

08010204 <_printf_common>:
 8010204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010208:	4691      	mov	r9, r2
 801020a:	461f      	mov	r7, r3
 801020c:	688a      	ldr	r2, [r1, #8]
 801020e:	690b      	ldr	r3, [r1, #16]
 8010210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010214:	4293      	cmp	r3, r2
 8010216:	bfb8      	it	lt
 8010218:	4613      	movlt	r3, r2
 801021a:	f8c9 3000 	str.w	r3, [r9]
 801021e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010222:	4606      	mov	r6, r0
 8010224:	460c      	mov	r4, r1
 8010226:	b112      	cbz	r2, 801022e <_printf_common+0x2a>
 8010228:	3301      	adds	r3, #1
 801022a:	f8c9 3000 	str.w	r3, [r9]
 801022e:	6823      	ldr	r3, [r4, #0]
 8010230:	0699      	lsls	r1, r3, #26
 8010232:	bf42      	ittt	mi
 8010234:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010238:	3302      	addmi	r3, #2
 801023a:	f8c9 3000 	strmi.w	r3, [r9]
 801023e:	6825      	ldr	r5, [r4, #0]
 8010240:	f015 0506 	ands.w	r5, r5, #6
 8010244:	d107      	bne.n	8010256 <_printf_common+0x52>
 8010246:	f104 0a19 	add.w	sl, r4, #25
 801024a:	68e3      	ldr	r3, [r4, #12]
 801024c:	f8d9 2000 	ldr.w	r2, [r9]
 8010250:	1a9b      	subs	r3, r3, r2
 8010252:	42ab      	cmp	r3, r5
 8010254:	dc28      	bgt.n	80102a8 <_printf_common+0xa4>
 8010256:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801025a:	6822      	ldr	r2, [r4, #0]
 801025c:	3300      	adds	r3, #0
 801025e:	bf18      	it	ne
 8010260:	2301      	movne	r3, #1
 8010262:	0692      	lsls	r2, r2, #26
 8010264:	d42d      	bmi.n	80102c2 <_printf_common+0xbe>
 8010266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801026a:	4639      	mov	r1, r7
 801026c:	4630      	mov	r0, r6
 801026e:	47c0      	blx	r8
 8010270:	3001      	adds	r0, #1
 8010272:	d020      	beq.n	80102b6 <_printf_common+0xb2>
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	68e5      	ldr	r5, [r4, #12]
 8010278:	f8d9 2000 	ldr.w	r2, [r9]
 801027c:	f003 0306 	and.w	r3, r3, #6
 8010280:	2b04      	cmp	r3, #4
 8010282:	bf08      	it	eq
 8010284:	1aad      	subeq	r5, r5, r2
 8010286:	68a3      	ldr	r3, [r4, #8]
 8010288:	6922      	ldr	r2, [r4, #16]
 801028a:	bf0c      	ite	eq
 801028c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010290:	2500      	movne	r5, #0
 8010292:	4293      	cmp	r3, r2
 8010294:	bfc4      	itt	gt
 8010296:	1a9b      	subgt	r3, r3, r2
 8010298:	18ed      	addgt	r5, r5, r3
 801029a:	f04f 0900 	mov.w	r9, #0
 801029e:	341a      	adds	r4, #26
 80102a0:	454d      	cmp	r5, r9
 80102a2:	d11a      	bne.n	80102da <_printf_common+0xd6>
 80102a4:	2000      	movs	r0, #0
 80102a6:	e008      	b.n	80102ba <_printf_common+0xb6>
 80102a8:	2301      	movs	r3, #1
 80102aa:	4652      	mov	r2, sl
 80102ac:	4639      	mov	r1, r7
 80102ae:	4630      	mov	r0, r6
 80102b0:	47c0      	blx	r8
 80102b2:	3001      	adds	r0, #1
 80102b4:	d103      	bne.n	80102be <_printf_common+0xba>
 80102b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102be:	3501      	adds	r5, #1
 80102c0:	e7c3      	b.n	801024a <_printf_common+0x46>
 80102c2:	18e1      	adds	r1, r4, r3
 80102c4:	1c5a      	adds	r2, r3, #1
 80102c6:	2030      	movs	r0, #48	; 0x30
 80102c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102cc:	4422      	add	r2, r4
 80102ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102d6:	3302      	adds	r3, #2
 80102d8:	e7c5      	b.n	8010266 <_printf_common+0x62>
 80102da:	2301      	movs	r3, #1
 80102dc:	4622      	mov	r2, r4
 80102de:	4639      	mov	r1, r7
 80102e0:	4630      	mov	r0, r6
 80102e2:	47c0      	blx	r8
 80102e4:	3001      	adds	r0, #1
 80102e6:	d0e6      	beq.n	80102b6 <_printf_common+0xb2>
 80102e8:	f109 0901 	add.w	r9, r9, #1
 80102ec:	e7d8      	b.n	80102a0 <_printf_common+0x9c>
	...

080102f0 <_printf_i>:
 80102f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80102f8:	460c      	mov	r4, r1
 80102fa:	7e09      	ldrb	r1, [r1, #24]
 80102fc:	b085      	sub	sp, #20
 80102fe:	296e      	cmp	r1, #110	; 0x6e
 8010300:	4617      	mov	r7, r2
 8010302:	4606      	mov	r6, r0
 8010304:	4698      	mov	r8, r3
 8010306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010308:	f000 80b3 	beq.w	8010472 <_printf_i+0x182>
 801030c:	d822      	bhi.n	8010354 <_printf_i+0x64>
 801030e:	2963      	cmp	r1, #99	; 0x63
 8010310:	d036      	beq.n	8010380 <_printf_i+0x90>
 8010312:	d80a      	bhi.n	801032a <_printf_i+0x3a>
 8010314:	2900      	cmp	r1, #0
 8010316:	f000 80b9 	beq.w	801048c <_printf_i+0x19c>
 801031a:	2958      	cmp	r1, #88	; 0x58
 801031c:	f000 8083 	beq.w	8010426 <_printf_i+0x136>
 8010320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010324:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010328:	e032      	b.n	8010390 <_printf_i+0xa0>
 801032a:	2964      	cmp	r1, #100	; 0x64
 801032c:	d001      	beq.n	8010332 <_printf_i+0x42>
 801032e:	2969      	cmp	r1, #105	; 0x69
 8010330:	d1f6      	bne.n	8010320 <_printf_i+0x30>
 8010332:	6820      	ldr	r0, [r4, #0]
 8010334:	6813      	ldr	r3, [r2, #0]
 8010336:	0605      	lsls	r5, r0, #24
 8010338:	f103 0104 	add.w	r1, r3, #4
 801033c:	d52a      	bpl.n	8010394 <_printf_i+0xa4>
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	6011      	str	r1, [r2, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	da03      	bge.n	801034e <_printf_i+0x5e>
 8010346:	222d      	movs	r2, #45	; 0x2d
 8010348:	425b      	negs	r3, r3
 801034a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801034e:	486f      	ldr	r0, [pc, #444]	; (801050c <_printf_i+0x21c>)
 8010350:	220a      	movs	r2, #10
 8010352:	e039      	b.n	80103c8 <_printf_i+0xd8>
 8010354:	2973      	cmp	r1, #115	; 0x73
 8010356:	f000 809d 	beq.w	8010494 <_printf_i+0x1a4>
 801035a:	d808      	bhi.n	801036e <_printf_i+0x7e>
 801035c:	296f      	cmp	r1, #111	; 0x6f
 801035e:	d020      	beq.n	80103a2 <_printf_i+0xb2>
 8010360:	2970      	cmp	r1, #112	; 0x70
 8010362:	d1dd      	bne.n	8010320 <_printf_i+0x30>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	f043 0320 	orr.w	r3, r3, #32
 801036a:	6023      	str	r3, [r4, #0]
 801036c:	e003      	b.n	8010376 <_printf_i+0x86>
 801036e:	2975      	cmp	r1, #117	; 0x75
 8010370:	d017      	beq.n	80103a2 <_printf_i+0xb2>
 8010372:	2978      	cmp	r1, #120	; 0x78
 8010374:	d1d4      	bne.n	8010320 <_printf_i+0x30>
 8010376:	2378      	movs	r3, #120	; 0x78
 8010378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801037c:	4864      	ldr	r0, [pc, #400]	; (8010510 <_printf_i+0x220>)
 801037e:	e055      	b.n	801042c <_printf_i+0x13c>
 8010380:	6813      	ldr	r3, [r2, #0]
 8010382:	1d19      	adds	r1, r3, #4
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	6011      	str	r1, [r2, #0]
 8010388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801038c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010390:	2301      	movs	r3, #1
 8010392:	e08c      	b.n	80104ae <_printf_i+0x1be>
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	6011      	str	r1, [r2, #0]
 8010398:	f010 0f40 	tst.w	r0, #64	; 0x40
 801039c:	bf18      	it	ne
 801039e:	b21b      	sxthne	r3, r3
 80103a0:	e7cf      	b.n	8010342 <_printf_i+0x52>
 80103a2:	6813      	ldr	r3, [r2, #0]
 80103a4:	6825      	ldr	r5, [r4, #0]
 80103a6:	1d18      	adds	r0, r3, #4
 80103a8:	6010      	str	r0, [r2, #0]
 80103aa:	0628      	lsls	r0, r5, #24
 80103ac:	d501      	bpl.n	80103b2 <_printf_i+0xc2>
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	e002      	b.n	80103b8 <_printf_i+0xc8>
 80103b2:	0668      	lsls	r0, r5, #25
 80103b4:	d5fb      	bpl.n	80103ae <_printf_i+0xbe>
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	4854      	ldr	r0, [pc, #336]	; (801050c <_printf_i+0x21c>)
 80103ba:	296f      	cmp	r1, #111	; 0x6f
 80103bc:	bf14      	ite	ne
 80103be:	220a      	movne	r2, #10
 80103c0:	2208      	moveq	r2, #8
 80103c2:	2100      	movs	r1, #0
 80103c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103c8:	6865      	ldr	r5, [r4, #4]
 80103ca:	60a5      	str	r5, [r4, #8]
 80103cc:	2d00      	cmp	r5, #0
 80103ce:	f2c0 8095 	blt.w	80104fc <_printf_i+0x20c>
 80103d2:	6821      	ldr	r1, [r4, #0]
 80103d4:	f021 0104 	bic.w	r1, r1, #4
 80103d8:	6021      	str	r1, [r4, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d13d      	bne.n	801045a <_printf_i+0x16a>
 80103de:	2d00      	cmp	r5, #0
 80103e0:	f040 808e 	bne.w	8010500 <_printf_i+0x210>
 80103e4:	4665      	mov	r5, ip
 80103e6:	2a08      	cmp	r2, #8
 80103e8:	d10b      	bne.n	8010402 <_printf_i+0x112>
 80103ea:	6823      	ldr	r3, [r4, #0]
 80103ec:	07db      	lsls	r3, r3, #31
 80103ee:	d508      	bpl.n	8010402 <_printf_i+0x112>
 80103f0:	6923      	ldr	r3, [r4, #16]
 80103f2:	6862      	ldr	r2, [r4, #4]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	bfde      	ittt	le
 80103f8:	2330      	movle	r3, #48	; 0x30
 80103fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80103fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010402:	ebac 0305 	sub.w	r3, ip, r5
 8010406:	6123      	str	r3, [r4, #16]
 8010408:	f8cd 8000 	str.w	r8, [sp]
 801040c:	463b      	mov	r3, r7
 801040e:	aa03      	add	r2, sp, #12
 8010410:	4621      	mov	r1, r4
 8010412:	4630      	mov	r0, r6
 8010414:	f7ff fef6 	bl	8010204 <_printf_common>
 8010418:	3001      	adds	r0, #1
 801041a:	d14d      	bne.n	80104b8 <_printf_i+0x1c8>
 801041c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010420:	b005      	add	sp, #20
 8010422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010426:	4839      	ldr	r0, [pc, #228]	; (801050c <_printf_i+0x21c>)
 8010428:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801042c:	6813      	ldr	r3, [r2, #0]
 801042e:	6821      	ldr	r1, [r4, #0]
 8010430:	1d1d      	adds	r5, r3, #4
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	6015      	str	r5, [r2, #0]
 8010436:	060a      	lsls	r2, r1, #24
 8010438:	d50b      	bpl.n	8010452 <_printf_i+0x162>
 801043a:	07ca      	lsls	r2, r1, #31
 801043c:	bf44      	itt	mi
 801043e:	f041 0120 	orrmi.w	r1, r1, #32
 8010442:	6021      	strmi	r1, [r4, #0]
 8010444:	b91b      	cbnz	r3, 801044e <_printf_i+0x15e>
 8010446:	6822      	ldr	r2, [r4, #0]
 8010448:	f022 0220 	bic.w	r2, r2, #32
 801044c:	6022      	str	r2, [r4, #0]
 801044e:	2210      	movs	r2, #16
 8010450:	e7b7      	b.n	80103c2 <_printf_i+0xd2>
 8010452:	064d      	lsls	r5, r1, #25
 8010454:	bf48      	it	mi
 8010456:	b29b      	uxthmi	r3, r3
 8010458:	e7ef      	b.n	801043a <_printf_i+0x14a>
 801045a:	4665      	mov	r5, ip
 801045c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010460:	fb02 3311 	mls	r3, r2, r1, r3
 8010464:	5cc3      	ldrb	r3, [r0, r3]
 8010466:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801046a:	460b      	mov	r3, r1
 801046c:	2900      	cmp	r1, #0
 801046e:	d1f5      	bne.n	801045c <_printf_i+0x16c>
 8010470:	e7b9      	b.n	80103e6 <_printf_i+0xf6>
 8010472:	6813      	ldr	r3, [r2, #0]
 8010474:	6825      	ldr	r5, [r4, #0]
 8010476:	6961      	ldr	r1, [r4, #20]
 8010478:	1d18      	adds	r0, r3, #4
 801047a:	6010      	str	r0, [r2, #0]
 801047c:	0628      	lsls	r0, r5, #24
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	d501      	bpl.n	8010486 <_printf_i+0x196>
 8010482:	6019      	str	r1, [r3, #0]
 8010484:	e002      	b.n	801048c <_printf_i+0x19c>
 8010486:	066a      	lsls	r2, r5, #25
 8010488:	d5fb      	bpl.n	8010482 <_printf_i+0x192>
 801048a:	8019      	strh	r1, [r3, #0]
 801048c:	2300      	movs	r3, #0
 801048e:	6123      	str	r3, [r4, #16]
 8010490:	4665      	mov	r5, ip
 8010492:	e7b9      	b.n	8010408 <_printf_i+0x118>
 8010494:	6813      	ldr	r3, [r2, #0]
 8010496:	1d19      	adds	r1, r3, #4
 8010498:	6011      	str	r1, [r2, #0]
 801049a:	681d      	ldr	r5, [r3, #0]
 801049c:	6862      	ldr	r2, [r4, #4]
 801049e:	2100      	movs	r1, #0
 80104a0:	4628      	mov	r0, r5
 80104a2:	f7ef ff25 	bl	80002f0 <memchr>
 80104a6:	b108      	cbz	r0, 80104ac <_printf_i+0x1bc>
 80104a8:	1b40      	subs	r0, r0, r5
 80104aa:	6060      	str	r0, [r4, #4]
 80104ac:	6863      	ldr	r3, [r4, #4]
 80104ae:	6123      	str	r3, [r4, #16]
 80104b0:	2300      	movs	r3, #0
 80104b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104b6:	e7a7      	b.n	8010408 <_printf_i+0x118>
 80104b8:	6923      	ldr	r3, [r4, #16]
 80104ba:	462a      	mov	r2, r5
 80104bc:	4639      	mov	r1, r7
 80104be:	4630      	mov	r0, r6
 80104c0:	47c0      	blx	r8
 80104c2:	3001      	adds	r0, #1
 80104c4:	d0aa      	beq.n	801041c <_printf_i+0x12c>
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	079b      	lsls	r3, r3, #30
 80104ca:	d413      	bmi.n	80104f4 <_printf_i+0x204>
 80104cc:	68e0      	ldr	r0, [r4, #12]
 80104ce:	9b03      	ldr	r3, [sp, #12]
 80104d0:	4298      	cmp	r0, r3
 80104d2:	bfb8      	it	lt
 80104d4:	4618      	movlt	r0, r3
 80104d6:	e7a3      	b.n	8010420 <_printf_i+0x130>
 80104d8:	2301      	movs	r3, #1
 80104da:	464a      	mov	r2, r9
 80104dc:	4639      	mov	r1, r7
 80104de:	4630      	mov	r0, r6
 80104e0:	47c0      	blx	r8
 80104e2:	3001      	adds	r0, #1
 80104e4:	d09a      	beq.n	801041c <_printf_i+0x12c>
 80104e6:	3501      	adds	r5, #1
 80104e8:	68e3      	ldr	r3, [r4, #12]
 80104ea:	9a03      	ldr	r2, [sp, #12]
 80104ec:	1a9b      	subs	r3, r3, r2
 80104ee:	42ab      	cmp	r3, r5
 80104f0:	dcf2      	bgt.n	80104d8 <_printf_i+0x1e8>
 80104f2:	e7eb      	b.n	80104cc <_printf_i+0x1dc>
 80104f4:	2500      	movs	r5, #0
 80104f6:	f104 0919 	add.w	r9, r4, #25
 80104fa:	e7f5      	b.n	80104e8 <_printf_i+0x1f8>
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1ac      	bne.n	801045a <_printf_i+0x16a>
 8010500:	7803      	ldrb	r3, [r0, #0]
 8010502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801050a:	e76c      	b.n	80103e6 <_printf_i+0xf6>
 801050c:	08011b55 	.word	0x08011b55
 8010510:	08011b66 	.word	0x08011b66

08010514 <_sbrk_r>:
 8010514:	b538      	push	{r3, r4, r5, lr}
 8010516:	4c06      	ldr	r4, [pc, #24]	; (8010530 <_sbrk_r+0x1c>)
 8010518:	2300      	movs	r3, #0
 801051a:	4605      	mov	r5, r0
 801051c:	4608      	mov	r0, r1
 801051e:	6023      	str	r3, [r4, #0]
 8010520:	f7fe fdc4 	bl	800f0ac <_sbrk>
 8010524:	1c43      	adds	r3, r0, #1
 8010526:	d102      	bne.n	801052e <_sbrk_r+0x1a>
 8010528:	6823      	ldr	r3, [r4, #0]
 801052a:	b103      	cbz	r3, 801052e <_sbrk_r+0x1a>
 801052c:	602b      	str	r3, [r5, #0]
 801052e:	bd38      	pop	{r3, r4, r5, pc}
 8010530:	24003950 	.word	0x24003950

08010534 <__sread>:
 8010534:	b510      	push	{r4, lr}
 8010536:	460c      	mov	r4, r1
 8010538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801053c:	f000 f8d6 	bl	80106ec <_read_r>
 8010540:	2800      	cmp	r0, #0
 8010542:	bfab      	itete	ge
 8010544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010546:	89a3      	ldrhlt	r3, [r4, #12]
 8010548:	181b      	addge	r3, r3, r0
 801054a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801054e:	bfac      	ite	ge
 8010550:	6563      	strge	r3, [r4, #84]	; 0x54
 8010552:	81a3      	strhlt	r3, [r4, #12]
 8010554:	bd10      	pop	{r4, pc}

08010556 <__swrite>:
 8010556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055a:	461f      	mov	r7, r3
 801055c:	898b      	ldrh	r3, [r1, #12]
 801055e:	05db      	lsls	r3, r3, #23
 8010560:	4605      	mov	r5, r0
 8010562:	460c      	mov	r4, r1
 8010564:	4616      	mov	r6, r2
 8010566:	d505      	bpl.n	8010574 <__swrite+0x1e>
 8010568:	2302      	movs	r3, #2
 801056a:	2200      	movs	r2, #0
 801056c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010570:	f000 f868 	bl	8010644 <_lseek_r>
 8010574:	89a3      	ldrh	r3, [r4, #12]
 8010576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801057a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801057e:	81a3      	strh	r3, [r4, #12]
 8010580:	4632      	mov	r2, r6
 8010582:	463b      	mov	r3, r7
 8010584:	4628      	mov	r0, r5
 8010586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801058a:	f000 b817 	b.w	80105bc <_write_r>

0801058e <__sseek>:
 801058e:	b510      	push	{r4, lr}
 8010590:	460c      	mov	r4, r1
 8010592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010596:	f000 f855 	bl	8010644 <_lseek_r>
 801059a:	1c43      	adds	r3, r0, #1
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	bf15      	itete	ne
 80105a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80105a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80105a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80105aa:	81a3      	strheq	r3, [r4, #12]
 80105ac:	bf18      	it	ne
 80105ae:	81a3      	strhne	r3, [r4, #12]
 80105b0:	bd10      	pop	{r4, pc}

080105b2 <__sclose>:
 80105b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105b6:	f000 b813 	b.w	80105e0 <_close_r>
	...

080105bc <_write_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	4c07      	ldr	r4, [pc, #28]	; (80105dc <_write_r+0x20>)
 80105c0:	4605      	mov	r5, r0
 80105c2:	4608      	mov	r0, r1
 80105c4:	4611      	mov	r1, r2
 80105c6:	2200      	movs	r2, #0
 80105c8:	6022      	str	r2, [r4, #0]
 80105ca:	461a      	mov	r2, r3
 80105cc:	f7fe fd00 	bl	800efd0 <_write>
 80105d0:	1c43      	adds	r3, r0, #1
 80105d2:	d102      	bne.n	80105da <_write_r+0x1e>
 80105d4:	6823      	ldr	r3, [r4, #0]
 80105d6:	b103      	cbz	r3, 80105da <_write_r+0x1e>
 80105d8:	602b      	str	r3, [r5, #0]
 80105da:	bd38      	pop	{r3, r4, r5, pc}
 80105dc:	24003950 	.word	0x24003950

080105e0 <_close_r>:
 80105e0:	b538      	push	{r3, r4, r5, lr}
 80105e2:	4c06      	ldr	r4, [pc, #24]	; (80105fc <_close_r+0x1c>)
 80105e4:	2300      	movs	r3, #0
 80105e6:	4605      	mov	r5, r0
 80105e8:	4608      	mov	r0, r1
 80105ea:	6023      	str	r3, [r4, #0]
 80105ec:	f7fe fd0c 	bl	800f008 <_close>
 80105f0:	1c43      	adds	r3, r0, #1
 80105f2:	d102      	bne.n	80105fa <_close_r+0x1a>
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	b103      	cbz	r3, 80105fa <_close_r+0x1a>
 80105f8:	602b      	str	r3, [r5, #0]
 80105fa:	bd38      	pop	{r3, r4, r5, pc}
 80105fc:	24003950 	.word	0x24003950

08010600 <_fstat_r>:
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	4c07      	ldr	r4, [pc, #28]	; (8010620 <_fstat_r+0x20>)
 8010604:	2300      	movs	r3, #0
 8010606:	4605      	mov	r5, r0
 8010608:	4608      	mov	r0, r1
 801060a:	4611      	mov	r1, r2
 801060c:	6023      	str	r3, [r4, #0]
 801060e:	f7fe fd07 	bl	800f020 <_fstat>
 8010612:	1c43      	adds	r3, r0, #1
 8010614:	d102      	bne.n	801061c <_fstat_r+0x1c>
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	b103      	cbz	r3, 801061c <_fstat_r+0x1c>
 801061a:	602b      	str	r3, [r5, #0]
 801061c:	bd38      	pop	{r3, r4, r5, pc}
 801061e:	bf00      	nop
 8010620:	24003950 	.word	0x24003950

08010624 <_isatty_r>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4c06      	ldr	r4, [pc, #24]	; (8010640 <_isatty_r+0x1c>)
 8010628:	2300      	movs	r3, #0
 801062a:	4605      	mov	r5, r0
 801062c:	4608      	mov	r0, r1
 801062e:	6023      	str	r3, [r4, #0]
 8010630:	f7fe fd06 	bl	800f040 <_isatty>
 8010634:	1c43      	adds	r3, r0, #1
 8010636:	d102      	bne.n	801063e <_isatty_r+0x1a>
 8010638:	6823      	ldr	r3, [r4, #0]
 801063a:	b103      	cbz	r3, 801063e <_isatty_r+0x1a>
 801063c:	602b      	str	r3, [r5, #0]
 801063e:	bd38      	pop	{r3, r4, r5, pc}
 8010640:	24003950 	.word	0x24003950

08010644 <_lseek_r>:
 8010644:	b538      	push	{r3, r4, r5, lr}
 8010646:	4c07      	ldr	r4, [pc, #28]	; (8010664 <_lseek_r+0x20>)
 8010648:	4605      	mov	r5, r0
 801064a:	4608      	mov	r0, r1
 801064c:	4611      	mov	r1, r2
 801064e:	2200      	movs	r2, #0
 8010650:	6022      	str	r2, [r4, #0]
 8010652:	461a      	mov	r2, r3
 8010654:	f7fe fcff 	bl	800f056 <_lseek>
 8010658:	1c43      	adds	r3, r0, #1
 801065a:	d102      	bne.n	8010662 <_lseek_r+0x1e>
 801065c:	6823      	ldr	r3, [r4, #0]
 801065e:	b103      	cbz	r3, 8010662 <_lseek_r+0x1e>
 8010660:	602b      	str	r3, [r5, #0]
 8010662:	bd38      	pop	{r3, r4, r5, pc}
 8010664:	24003950 	.word	0x24003950

08010668 <memmove>:
 8010668:	4288      	cmp	r0, r1
 801066a:	b510      	push	{r4, lr}
 801066c:	eb01 0302 	add.w	r3, r1, r2
 8010670:	d807      	bhi.n	8010682 <memmove+0x1a>
 8010672:	1e42      	subs	r2, r0, #1
 8010674:	4299      	cmp	r1, r3
 8010676:	d00a      	beq.n	801068e <memmove+0x26>
 8010678:	f811 4b01 	ldrb.w	r4, [r1], #1
 801067c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010680:	e7f8      	b.n	8010674 <memmove+0xc>
 8010682:	4283      	cmp	r3, r0
 8010684:	d9f5      	bls.n	8010672 <memmove+0xa>
 8010686:	1881      	adds	r1, r0, r2
 8010688:	1ad2      	subs	r2, r2, r3
 801068a:	42d3      	cmn	r3, r2
 801068c:	d100      	bne.n	8010690 <memmove+0x28>
 801068e:	bd10      	pop	{r4, pc}
 8010690:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010694:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010698:	e7f7      	b.n	801068a <memmove+0x22>

0801069a <__malloc_lock>:
 801069a:	4770      	bx	lr

0801069c <__malloc_unlock>:
 801069c:	4770      	bx	lr

0801069e <_realloc_r>:
 801069e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a0:	4607      	mov	r7, r0
 80106a2:	4614      	mov	r4, r2
 80106a4:	460e      	mov	r6, r1
 80106a6:	b921      	cbnz	r1, 80106b2 <_realloc_r+0x14>
 80106a8:	4611      	mov	r1, r2
 80106aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80106ae:	f7ff babd 	b.w	800fc2c <_malloc_r>
 80106b2:	b922      	cbnz	r2, 80106be <_realloc_r+0x20>
 80106b4:	f7ff fa6c 	bl	800fb90 <_free_r>
 80106b8:	4625      	mov	r5, r4
 80106ba:	4628      	mov	r0, r5
 80106bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106be:	f000 f827 	bl	8010710 <_malloc_usable_size_r>
 80106c2:	42a0      	cmp	r0, r4
 80106c4:	d20f      	bcs.n	80106e6 <_realloc_r+0x48>
 80106c6:	4621      	mov	r1, r4
 80106c8:	4638      	mov	r0, r7
 80106ca:	f7ff faaf 	bl	800fc2c <_malloc_r>
 80106ce:	4605      	mov	r5, r0
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d0f2      	beq.n	80106ba <_realloc_r+0x1c>
 80106d4:	4631      	mov	r1, r6
 80106d6:	4622      	mov	r2, r4
 80106d8:	f7fe ff0d 	bl	800f4f6 <memcpy>
 80106dc:	4631      	mov	r1, r6
 80106de:	4638      	mov	r0, r7
 80106e0:	f7ff fa56 	bl	800fb90 <_free_r>
 80106e4:	e7e9      	b.n	80106ba <_realloc_r+0x1c>
 80106e6:	4635      	mov	r5, r6
 80106e8:	e7e7      	b.n	80106ba <_realloc_r+0x1c>
	...

080106ec <_read_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	4c07      	ldr	r4, [pc, #28]	; (801070c <_read_r+0x20>)
 80106f0:	4605      	mov	r5, r0
 80106f2:	4608      	mov	r0, r1
 80106f4:	4611      	mov	r1, r2
 80106f6:	2200      	movs	r2, #0
 80106f8:	6022      	str	r2, [r4, #0]
 80106fa:	461a      	mov	r2, r3
 80106fc:	f7fe fcb8 	bl	800f070 <_read>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d102      	bne.n	801070a <_read_r+0x1e>
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	b103      	cbz	r3, 801070a <_read_r+0x1e>
 8010708:	602b      	str	r3, [r5, #0]
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	24003950 	.word	0x24003950

08010710 <_malloc_usable_size_r>:
 8010710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010714:	1f18      	subs	r0, r3, #4
 8010716:	2b00      	cmp	r3, #0
 8010718:	bfbc      	itt	lt
 801071a:	580b      	ldrlt	r3, [r1, r0]
 801071c:	18c0      	addlt	r0, r0, r3
 801071e:	4770      	bx	lr

08010720 <_init>:
 8010720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010722:	bf00      	nop
 8010724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010726:	bc08      	pop	{r3}
 8010728:	469e      	mov	lr, r3
 801072a:	4770      	bx	lr

0801072c <_fini>:
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	bf00      	nop
 8010730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010732:	bc08      	pop	{r3}
 8010734:	469e      	mov	lr, r3
 8010736:	4770      	bx	lr
