
CISYNTH_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010370  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001440  08010610  08010610  00020610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a50  08011a50  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08011a50  08011a50  00021a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a58  08011a58  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a58  08011a58  00021a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a5c  08011a5c  00021a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08011a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038bc  24000098  08011af8  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24003954  08011af8  00033954  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  08011af8  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036f60  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000607b  00000000  00000000  00067026  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001498  00000000  00000000  0006d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001230  00000000  00000000  0006e540  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00040cee  00000000  00000000  0006f770  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002190b  00000000  00000000  000b045e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0016a52c  00000000  00000000  000d1d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0023c295  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057d0  00000000  00000000  0023c310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080105f8 	.word	0x080105f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	080105f8 	.word	0x080105f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00b      	beq.n	80006b8 <LAN8742_RegisterBusIO+0x28>
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d007      	beq.n	80006b8 <LAN8742_RegisterBusIO+0x28>
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <LAN8742_RegisterBusIO+0x28>
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006bc:	e014      	b.n	80006e8 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	691a      	ldr	r2, [r3, #16]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d17b      	bne.n	800080c <LAN8742_Init+0x118>
   {
     if(pObj->IO.Init != 0)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2220      	movs	r2, #32
 8000726:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	e01c      	b.n	8000768 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2112      	movs	r1, #18
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	4798      	blx	r3
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	da03      	bge.n	800074a <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000742:	f06f 0304 	mvn.w	r3, #4
 8000746:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000748:	e00b      	b.n	8000762 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	429a      	cmp	r2, r3
 8000754:	d105      	bne.n	8000762 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
         break;
 8000760:	e005      	b.n	800076e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	2b1f      	cmp	r3, #31
 800076c:	d9df      	bls.n	800072e <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b1f      	cmp	r3, #31
 8000774:	d902      	bls.n	800077c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000776:	f06f 0302 	mvn.w	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d144      	bne.n	800080c <LAN8742_Init+0x118>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	6810      	ldr	r0, [r2, #0]
 800078a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800078e:	2100      	movs	r1, #0
 8000790:	4798      	blx	r3
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	db36      	blt.n	8000806 <LAN8742_Init+0x112>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6810      	ldr	r0, [r2, #0]
 80007a0:	f107 0208 	add.w	r2, r7, #8
 80007a4:	2100      	movs	r1, #0
 80007a6:	4798      	blx	r3
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db27      	blt.n	80007fe <LAN8742_Init+0x10a>
         { 
           tickstart = pObj->IO.GetTick();
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4798      	blx	r3
 80007b4:	4603      	mov	r3, r0
 80007b6:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80007b8:	e01b      	b.n	80007f2 <LAN8742_Init+0xfe>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4798      	blx	r3
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007cc:	d80e      	bhi.n	80007ec <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6810      	ldr	r0, [r2, #0]
 80007d6:	f107 0208 	add.w	r2, r7, #8
 80007da:	2100      	movs	r1, #0
 80007dc:	4798      	blx	r3
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da06      	bge.n	80007f2 <LAN8742_Init+0xfe>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80007e4:	f06f 0304 	mvn.w	r3, #4
 80007e8:	613b      	str	r3, [r7, #16]
                 break;
 80007ea:	e00f      	b.n	800080c <LAN8742_Init+0x118>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80007ec:	f06f 0301 	mvn.w	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1de      	bne.n	80007ba <LAN8742_Init+0xc6>
 80007fc:	e006      	b.n	800080c <LAN8742_Init+0x118>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80007fe:	f06f 0304 	mvn.w	r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	e002      	b.n	800080c <LAN8742_Init+0x118>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000806:	f06f 0303 	mvn.w	r3, #3
 800080a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d112      	bne.n	8000838 <LAN8742_Init+0x144>
   {
     tickstart =  pObj->IO.GetTick();
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4798      	blx	r3
 8000818:	4603      	mov	r3, r0
 800081a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800081c:	bf00      	nop
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4798      	blx	r3
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000830:	d9f5      	bls.n	800081e <LAN8742_Init+0x12a>
     {
     }
     pObj->Is_Initialized = 1;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000838:	693b      	ldr	r3, [r7, #16]
 }
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	6810      	ldr	r0, [r2, #0]
 8000856:	f107 020c 	add.w	r2, r7, #12
 800085a:	2101      	movs	r1, #1
 800085c:	4798      	blx	r3
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	da02      	bge.n	800086a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000864:	f06f 0304 	mvn.w	r3, #4
 8000868:	e06e      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	6810      	ldr	r0, [r2, #0]
 8000872:	f107 020c 	add.w	r2, r7, #12
 8000876:	2101      	movs	r1, #1
 8000878:	4798      	blx	r3
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	da02      	bge.n	8000886 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000880:	f06f 0304 	mvn.w	r3, #4
 8000884:	e060      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000890:	2301      	movs	r3, #1
 8000892:	e059      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6810      	ldr	r0, [r2, #0]
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	2100      	movs	r1, #0
 80008a2:	4798      	blx	r3
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da02      	bge.n	80008b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80008aa:	f06f 0304 	mvn.w	r3, #4
 80008ae:	e04b      	b.n	8000948 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d11b      	bne.n	80008f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d006      	beq.n	80008d2 <LAN8742_GetLinkState+0x90>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80008ce:	2302      	movs	r3, #2
 80008d0:	e03a      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80008dc:	2303      	movs	r3, #3
 80008de:	e033      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80008ea:	2304      	movs	r3, #4
 80008ec:	e02c      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80008ee:	2305      	movs	r3, #5
 80008f0:	e02a      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6810      	ldr	r0, [r2, #0]
 80008fa:	f107 020c 	add.w	r2, r7, #12
 80008fe:	211f      	movs	r1, #31
 8000900:	4798      	blx	r3
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	da02      	bge.n	800090e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000908:	f06f 0304 	mvn.w	r3, #4
 800090c:	e01c      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000918:	2306      	movs	r3, #6
 800091a:	e015      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 031c 	and.w	r3, r3, #28
 8000922:	2b18      	cmp	r3, #24
 8000924:	d101      	bne.n	800092a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000926:	2302      	movs	r3, #2
 8000928:	e00e      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f003 031c 	and.w	r3, r3, #28
 8000930:	2b08      	cmp	r3, #8
 8000932:	d101      	bne.n	8000938 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000934:	2303      	movs	r3, #3
 8000936:	e007      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 031c 	and.w	r3, r3, #28
 800093e:	2b14      	cmp	r3, #20
 8000940:	d101      	bne.n	8000946 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000942:	2304      	movs	r3, #4
 8000944:	e000      	b.n	8000948 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000946:	2305      	movs	r3, #5
    }				
  }
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f985 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800095a:	f003 fd4f 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 800095e:	4601      	mov	r1, r0
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <HAL_Init+0x60>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <HAL_Init+0x64>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	fa21 f303 	lsr.w	r3, r1, r3
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_Init+0x68>)
 8000978:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_Init+0x68>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_Init+0x60>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	490b      	ldr	r1, [pc, #44]	; (80009b4 <HAL_Init+0x64>)
 8000988:	5ccb      	ldrb	r3, [r1, r3]
 800098a:	f003 031f 	and.w	r3, r3, #31
 800098e:	fa22 f303 	lsr.w	r3, r2, r3
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_Init+0x6c>)
 8000994:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f812 	bl	80009c0 <HAL_InitTick>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e002      	b.n	80009ac <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009a6:	f00e f963 	bl	800ec70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	58024400 	.word	0x58024400
 80009b4:	080119a8 	.word	0x080119a8
 80009b8:	2400002c 	.word	0x2400002c
 80009bc:	24000030 	.word	0x24000030

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_InitTick+0x60>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e021      	b.n	8000a18 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_InitTick+0x64>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_InitTick+0x60>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f99c 	bl	8000d28 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 f94c 	bl	8000ca4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	; (8000a28 <HAL_InitTick+0x68>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24000004 	.word	0x24000004
 8000a24:	2400002c 	.word	0x2400002c
 8000a28:	24000000 	.word	0x24000000

08000a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	24000004 	.word	0x24000004
 8000a50:	240001f4 	.word	0x240001f4

08000a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	240001f4 	.word	0x240001f4

08000a6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetREVID+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	0c1b      	lsrs	r3, r3, #16
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	5c001000 	.word	0x5c001000

08000a84 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000a98:	d004      	beq.n	8000aa4 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8000a9a:	f240 2153 	movw	r1, #595	; 0x253
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 8000aa0:	f00e f8db 	bl	800ec5a <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000aac:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	604b      	str	r3, [r1, #4]
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08010610 	.word	0x08010610
 8000ac0:	58000400 	.word	0x58000400

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	05fa0000 	.word	0x05fa0000

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	f7ff ff8e 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d00f      	beq.n	8000c92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	d00c      	beq.n	8000c92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	d009      	beq.n	8000c92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d006      	beq.n	8000c92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d003      	beq.n	8000c92 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c8a:	2192      	movs	r1, #146	; 0x92
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c8e:	f00d ffe4 	bl	800ec5a <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff16 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08010644 	.word	0x08010644

08000ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d903      	bls.n	8000cc0 <HAL_NVIC_SetPriority+0x1c>
 8000cb8:	21aa      	movs	r1, #170	; 0xaa
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <HAL_NVIC_SetPriority+0x50>)
 8000cbc:	f00d ffcd 	bl	800ec5a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	d903      	bls.n	8000cce <HAL_NVIC_SetPriority+0x2a>
 8000cc6:	21ab      	movs	r1, #171	; 0xab
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <HAL_NVIC_SetPriority+0x50>)
 8000cca:	f00d ffc6 	bl	800ec5a <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff1d 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ff6d 	bl	8000bb8 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff3c 	bl	8000b64 <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	08010644 	.word	0x08010644

08000cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da03      	bge.n	8000d12 <HAL_NVIC_EnableIRQ+0x1a>
 8000d0a:	21be      	movs	r1, #190	; 0xbe
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d0e:	f00d ffa4 	bl	800ec5a <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff06 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	08010644 	.word	0x08010644

08000d28 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff75 	bl	8000c20 <SysTick_Config>
 8000d36:	4603      	mov	r3, r0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d44:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MPU_Disable+0x24>)
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4c:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <HAL_MPU_Disable+0x24>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_MPU_Disable+0x28>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	e000ed90 	.word	0xe000ed90

08000d6c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_MPU_Enable+0x34>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MPU_Enable+0x38>)
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MPU_Enable+0x38>)
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d88:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d8e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed90 	.word	0xe000ed90
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	785b      	ldrb	r3, [r3, #1]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d040      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d03c      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	785b      	ldrb	r3, [r3, #1]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d038      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d034      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d030      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	785b      	ldrb	r3, [r3, #1]
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	d02c      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d028      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	d024      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d020      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	2b09      	cmp	r3, #9
 8000dfe:	d01c      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	2b0a      	cmp	r3, #10
 8000e06:	d018      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	785b      	ldrb	r3, [r3, #1]
 8000e0c:	2b0b      	cmp	r3, #11
 8000e0e:	d014      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	d010      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	2b0d      	cmp	r3, #13
 8000e1e:	d00c      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	785b      	ldrb	r3, [r3, #1]
 8000e24:	2b0e      	cmp	r3, #14
 8000e26:	d008      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	785b      	ldrb	r3, [r3, #1]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d004      	beq.n	8000e3a <HAL_MPU_ConfigRegion+0x92>
 8000e30:	f240 112d 	movw	r1, #301	; 0x12d
 8000e34:	4896      	ldr	r0, [pc, #600]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000e36:	f00d ff10 	bl	800ec5a <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d008      	beq.n	8000e54 <HAL_MPU_ConfigRegion+0xac>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <HAL_MPU_ConfigRegion+0xac>
 8000e4a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8000e4e:	4890      	ldr	r0, [pc, #576]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000e50:	f00d ff03 	bl	800ec5a <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	785a      	ldrb	r2, [r3, #1]
 8000e58:	4b8e      	ldr	r3, [pc, #568]	; (8001094 <HAL_MPU_ConfigRegion+0x2ec>)
 8000e5a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 810a 	beq.w	800107a <HAL_MPU_ConfigRegion+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7b1b      	ldrb	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d008      	beq.n	8000e80 <HAL_MPU_ConfigRegion+0xd8>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7b1b      	ldrb	r3, [r3, #12]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d004      	beq.n	8000e80 <HAL_MPU_ConfigRegion+0xd8>
 8000e76:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000e7a:	4885      	ldr	r0, [pc, #532]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000e7c:	f00d feed 	bl	800ec5a <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7adb      	ldrb	r3, [r3, #11]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d018      	beq.n	8000eba <HAL_MPU_ConfigRegion+0x112>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7adb      	ldrb	r3, [r3, #11]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d014      	beq.n	8000eba <HAL_MPU_ConfigRegion+0x112>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7adb      	ldrb	r3, [r3, #11]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d010      	beq.n	8000eba <HAL_MPU_ConfigRegion+0x112>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7adb      	ldrb	r3, [r3, #11]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d00c      	beq.n	8000eba <HAL_MPU_ConfigRegion+0x112>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7adb      	ldrb	r3, [r3, #11]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d008      	beq.n	8000eba <HAL_MPU_ConfigRegion+0x112>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7adb      	ldrb	r3, [r3, #11]
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d004      	beq.n	8000eba <HAL_MPU_ConfigRegion+0x112>
 8000eb0:	f240 1137 	movw	r1, #311	; 0x137
 8000eb4:	4876      	ldr	r0, [pc, #472]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000eb6:	f00d fed0 	bl	800ec5a <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7a9b      	ldrb	r3, [r3, #10]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00c      	beq.n	8000edc <HAL_MPU_ConfigRegion+0x134>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	7a9b      	ldrb	r3, [r3, #10]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d008      	beq.n	8000edc <HAL_MPU_ConfigRegion+0x134>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7a9b      	ldrb	r3, [r3, #10]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d004      	beq.n	8000edc <HAL_MPU_ConfigRegion+0x134>
 8000ed2:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000ed6:	486e      	ldr	r0, [pc, #440]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000ed8:	f00d febf 	bl	800ec5a <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b5b      	ldrb	r3, [r3, #13]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d008      	beq.n	8000ef6 <HAL_MPU_ConfigRegion+0x14e>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b5b      	ldrb	r3, [r3, #13]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <HAL_MPU_ConfigRegion+0x14e>
 8000eec:	f240 1139 	movw	r1, #313	; 0x139
 8000ef0:	4867      	ldr	r0, [pc, #412]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000ef2:	f00d feb2 	bl	800ec5a <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7b9b      	ldrb	r3, [r3, #14]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d008      	beq.n	8000f10 <HAL_MPU_ConfigRegion+0x168>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7b9b      	ldrb	r3, [r3, #14]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <HAL_MPU_ConfigRegion+0x168>
 8000f06:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8000f0a:	4861      	ldr	r0, [pc, #388]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f0c:	f00d fea5 	bl	800ec5a <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7bdb      	ldrb	r3, [r3, #15]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d008      	beq.n	8000f2a <HAL_MPU_ConfigRegion+0x182>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7bdb      	ldrb	r3, [r3, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <HAL_MPU_ConfigRegion+0x182>
 8000f20:	f240 113b 	movw	r1, #315	; 0x13b
 8000f24:	485a      	ldr	r0, [pc, #360]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f26:	f00d fe98 	bl	800ec5a <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7a5b      	ldrb	r3, [r3, #9]
 8000f2e:	2bff      	cmp	r3, #255	; 0xff
 8000f30:	d104      	bne.n	8000f3c <HAL_MPU_ConfigRegion+0x194>
 8000f32:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8000f36:	4856      	ldr	r0, [pc, #344]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8000f38:	f00d fe8f 	bl	800ec5a <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7a1b      	ldrb	r3, [r3, #8]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d070      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7a1b      	ldrb	r3, [r3, #8]
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d06c      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7a1b      	ldrb	r3, [r3, #8]
 8000f50:	2b06      	cmp	r3, #6
 8000f52:	d068      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7a1b      	ldrb	r3, [r3, #8]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d064      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7a1b      	ldrb	r3, [r3, #8]
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d060      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7a1b      	ldrb	r3, [r3, #8]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d05c      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7a1b      	ldrb	r3, [r3, #8]
 8000f70:	2b0a      	cmp	r3, #10
 8000f72:	d058      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7a1b      	ldrb	r3, [r3, #8]
 8000f78:	2b0b      	cmp	r3, #11
 8000f7a:	d054      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7a1b      	ldrb	r3, [r3, #8]
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d050      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7a1b      	ldrb	r3, [r3, #8]
 8000f88:	2b0d      	cmp	r3, #13
 8000f8a:	d04c      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7a1b      	ldrb	r3, [r3, #8]
 8000f90:	2b0e      	cmp	r3, #14
 8000f92:	d048      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a1b      	ldrb	r3, [r3, #8]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d044      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7a1b      	ldrb	r3, [r3, #8]
 8000fa0:	2b10      	cmp	r3, #16
 8000fa2:	d040      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7a1b      	ldrb	r3, [r3, #8]
 8000fa8:	2b11      	cmp	r3, #17
 8000faa:	d03c      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7a1b      	ldrb	r3, [r3, #8]
 8000fb0:	2b12      	cmp	r3, #18
 8000fb2:	d038      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7a1b      	ldrb	r3, [r3, #8]
 8000fb8:	2b13      	cmp	r3, #19
 8000fba:	d034      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7a1b      	ldrb	r3, [r3, #8]
 8000fc0:	2b14      	cmp	r3, #20
 8000fc2:	d030      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7a1b      	ldrb	r3, [r3, #8]
 8000fc8:	2b15      	cmp	r3, #21
 8000fca:	d02c      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7a1b      	ldrb	r3, [r3, #8]
 8000fd0:	2b16      	cmp	r3, #22
 8000fd2:	d028      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7a1b      	ldrb	r3, [r3, #8]
 8000fd8:	2b17      	cmp	r3, #23
 8000fda:	d024      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a1b      	ldrb	r3, [r3, #8]
 8000fe0:	2b18      	cmp	r3, #24
 8000fe2:	d020      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7a1b      	ldrb	r3, [r3, #8]
 8000fe8:	2b19      	cmp	r3, #25
 8000fea:	d01c      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7a1b      	ldrb	r3, [r3, #8]
 8000ff0:	2b1a      	cmp	r3, #26
 8000ff2:	d018      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7a1b      	ldrb	r3, [r3, #8]
 8000ff8:	2b1b      	cmp	r3, #27
 8000ffa:	d014      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	2b1c      	cmp	r3, #28
 8001002:	d010      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7a1b      	ldrb	r3, [r3, #8]
 8001008:	2b1d      	cmp	r3, #29
 800100a:	d00c      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	2b1e      	cmp	r3, #30
 8001012:	d008      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a1b      	ldrb	r3, [r3, #8]
 8001018:	2b1f      	cmp	r3, #31
 800101a:	d004      	beq.n	8001026 <HAL_MPU_ConfigRegion+0x27e>
 800101c:	f240 113d 	movw	r1, #317	; 0x13d
 8001020:	481b      	ldr	r0, [pc, #108]	; (8001090 <HAL_MPU_ConfigRegion+0x2e8>)
 8001022:	f00d fe1a 	bl	800ec5a <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_MPU_ConfigRegion+0x2ec>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7b1b      	ldrb	r3, [r3, #12]
 8001032:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7adb      	ldrb	r3, [r3, #11]
 8001038:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800103a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7a9b      	ldrb	r3, [r3, #10]
 8001040:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001042:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7b5b      	ldrb	r3, [r3, #13]
 8001048:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800104a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7b9b      	ldrb	r3, [r3, #14]
 8001050:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001052:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7bdb      	ldrb	r3, [r3, #15]
 8001058:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800105a:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7a5b      	ldrb	r3, [r3, #9]
 8001060:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001062:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7a1b      	ldrb	r3, [r3, #8]
 8001068:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800106a:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MPU_ConfigRegion+0x2ec>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001074:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001076:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001078:	e005      	b.n	8001086 <HAL_MPU_ConfigRegion+0x2de>
    MPU->RBAR = 0x00;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MPU_ConfigRegion+0x2ec>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_MPU_ConfigRegion+0x2ec>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	08010644 	.word	0x08010644
 8001094:	e000ed90 	.word	0xe000ed90

08001098 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0c6      	b.n	8001238 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f00c fe68 	bl	800dd88 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2223      	movs	r2, #35	; 0x23
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b60      	ldr	r3, [pc, #384]	; (8001240 <HAL_ETH_Init+0x1a8>)
 80010c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010c4:	4a5e      	ldr	r2, [pc, #376]	; (8001240 <HAL_ETH_Init+0x1a8>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ce:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <HAL_ETH_Init+0x1a8>)
 80010d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7a1b      	ldrb	r3, [r3, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fccd 	bl	8000a84 <HAL_SYSCFG_ETHInterfaceSelect>
 80010ea:	e003      	b.n	80010f4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80010ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80010f0:	f7ff fcc8 	bl	8000a84 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800110a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800110c:	f7ff fca2 	bl	8000a54 <HAL_GetTick>
 8001110:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001112:	e00f      	b.n	8001134 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001114:	f7ff fc9e 	bl	8000a54 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001122:	d907      	bls.n	8001134 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2204      	movs	r2, #4
 8001128:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	22e0      	movs	r2, #224	; 0xe0
 800112e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e081      	b.n	8001238 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1e6      	bne.n	8001114 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f001 fa7a 	bl	8002640 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800114c:	f003 fac8 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8001150:	4602      	mov	r2, r0
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <HAL_ETH_Init+0x1ac>)
 8001154:	fba3 2302 	umull	r2, r3, r3, r2
 8001158:	0c9a      	lsrs	r2, r3, #18
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3a01      	subs	r2, #1
 8001160:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f001 f9cd 	bl	8002504 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001180:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001184:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	22e0      	movs	r2, #224	; 0xe0
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e04a      	b.n	8001238 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80011aa:	4413      	add	r3, r2
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_ETH_Init+0x1b0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6952      	ldr	r2, [r2, #20]
 80011b6:	0052      	lsls	r2, r2, #1
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	6809      	ldr	r1, [r1, #0]
 80011bc:	431a      	orrs	r2, r3
 80011be:	f241 1308 	movw	r3, #4360	; 0x1108
 80011c2:	440b      	add	r3, r1
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 fa92 	bl	80026f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f001 fad6 	bl	800277e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	3305      	adds	r3, #5
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	021a      	lsls	r2, r3, #8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	3304      	adds	r3, #4
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	3303      	adds	r3, #3
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	061a      	lsls	r2, r3, #24
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	3302      	adds	r3, #2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001210:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800121e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001220:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2210      	movs	r2, #16
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2210      	movs	r2, #16
 8001234:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58024400 	.word	0x58024400
 8001244:	431bde83 	.word	0x431bde83
 8001248:	ffff8001 	.word	0xffff8001

0800124c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	330a      	adds	r3, #10
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_ETH_DescAssignMemory+0x28>
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d904      	bls.n	800127e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e021      	b.n	80012c2 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d14c      	bne.n	8001378 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2223      	movs	r2, #35	; 0x23
 80012e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0202 	orr.w	r2, r2, #2
 80012f2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0201 	orr.w	r2, r2, #1
 8001314:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6811      	ldr	r1, [r2, #0]
 8001328:	f043 0201 	orr.w	r2, r3, #1
 800132c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001330:	440b      	add	r3, r1
 8001332:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f241 1308 	movw	r3, #4360	; 0x1108
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	f241 1308 	movw	r3, #4360	; 0x1108
 800134c:	440b      	add	r3, r1
 800134e:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001362:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001366:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2210      	movs	r2, #16
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2222      	movs	r2, #34	; 0x22
 8001372:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e000      	b.n	800137a <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
  }
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	2b00      	cmp	r3, #0
 8001394:	d040      	beq.n	8001418 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2223      	movs	r2, #35	; 0x23
 800139a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	f241 1304 	movw	r3, #4356	; 0x1104
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	6811      	ldr	r1, [r2, #0]
 80013ac:	f023 0201 	bic.w	r2, r3, #1
 80013b0:	f241 1304 	movw	r3, #4356	; 0x1104
 80013b4:	440b      	add	r3, r1
 80013b6:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80013c0:	4413      	add	r3, r2
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6811      	ldr	r1, [r2, #0]
 80013c8:	f023 0201 	bic.w	r2, r3, #1
 80013cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80013d0:	440b      	add	r3, r1
 80013d2:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0202 	bic.w	r2, r2, #2
 8001406:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2210      	movs	r2, #16
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2210      	movs	r2, #16
 8001412:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	e000      	b.n	800141a <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
  }
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d107      	bne.n	8001448 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e076      	b.n	8001536 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	2b10      	cmp	r3, #16
 800144e:	d171      	bne.n	8001534 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001450:	2200      	movs	r2, #0
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f001 f9ef 	bl	8002838 <ETH_Prepare_Tx_Descriptors>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001464:	f043 0202 	orr.w	r2, r3, #2
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e062      	b.n	8001536 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3206      	adds	r2, #6
 8001478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	2b03      	cmp	r3, #3
 800148e:	d904      	bls.n	800149a <HAL_ETH_Transmit+0x74>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	1f1a      	subs	r2, r3, #4
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	3106      	adds	r1, #6
 80014a6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80014aa:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80014ae:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80014b0:	f7ff fad0 	bl	8000a54 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80014b6:	e034      	b.n	8001522 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d011      	beq.n	80014ee <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ce:	f043 0208 	orr.w	r2, r3, #8
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	22e0      	movs	r2, #224	; 0xe0
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e023      	b.n	8001536 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f4:	d015      	beq.n	8001522 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80014f6:	f7ff faad 	bl	8000a54 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <HAL_ETH_Transmit+0xe6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10a      	bne.n	8001522 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	f043 0204 	orr.w	r2, r3, #4
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2210      	movs	r2, #16
 800151c:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e009      	b.n	8001536 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dbc6      	blt.n	80014b8 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2210      	movs	r2, #16
 800152e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e000      	b.n	8001536 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
  }
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800153e:	b480      	push	{r7}
 8001540:	b089      	sub	sp, #36	; 0x24
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	332c      	adds	r3, #44	; 0x2c
 800154a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d06b      	beq.n	8001648 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001570:	2300      	movs	r3, #0
 8001572:	e0bc      	b.n	80016ee <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3301      	adds	r3, #1
 8001578:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3301      	adds	r3, #1
 800158a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d902      	bls.n	80015a8 <HAL_ETH_IsRxDataAvailable+0x6a>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b04      	subs	r3, #4
 80015a6:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db11      	blt.n	80015de <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2201      	movs	r2, #1
 80015ca:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d902      	bls.n	80015de <HAL_ETH_IsRxDataAvailable+0xa0>
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	3b04      	subs	r3, #4
 80015dc:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e07c      	b.n	80016ee <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d012      	beq.n	8001626 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	3301      	adds	r3, #1
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d902      	bls.n	800161a <HAL_ETH_IsRxDataAvailable+0xdc>
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	3b04      	subs	r3, #4
 8001618:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	e010      	b.n	8001648 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3301      	adds	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d902      	bls.n	800163e <HAL_ETH_IsRxDataAvailable+0x100>
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	3b04      	subs	r3, #4
 800163c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db02      	blt.n	8001656 <HAL_ETH_IsRxDataAvailable+0x118>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d98e      	bls.n	8001574 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d044      	beq.n	80016e6 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e036      	b.n	80016de <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800167e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d009      	beq.n	800169c <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d902      	bls.n	80016ce <HAL_ETH_IsRxDataAvailable+0x190>
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	3b04      	subs	r3, #4
 80016cc:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3301      	adds	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3c4      	bcc.n	8001670 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]

  return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b08a      	sub	sp, #40	; 0x28
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	332c      	adds	r3, #44	; 0x2c
 8001708:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07d      	b.n	800182e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10f      	bne.n	800175a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff feff 	bl	800153e <HAL_ETH_IsRxDataAvailable>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e071      	b.n	800182e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001758:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	e031      	b.n	80017c4 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	461a      	mov	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	461a      	mov	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800179a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	3301      	adds	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d902      	bls.n	80017ae <HAL_ETH_GetRxDataBuffer+0xb4>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3b04      	subs	r3, #4
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	3301      	adds	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	6a3a      	ldr	r2, [r7, #32]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d3c7      	bcc.n	8001760 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	461a      	mov	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d803      	bhi.n	80017fa <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	e018      	b.n	800182c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d012      	beq.n	8001828 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	461a      	mov	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	1ad2      	subs	r2, r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e001      	b.n	800182c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	332c      	adds	r3, #44	; 0x2c
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fe72 	bl	800153e <HAL_ETH_IsRxDataAvailable>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e017      	b.n	8001894 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	4413      	add	r3, r2
 800186c:	3b01      	subs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d902      	bls.n	800187c <HAL_ETH_GetRxDataLength+0x46>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3b04      	subs	r3, #4
 800187a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	332c      	adds	r3, #44	; 0x2c
 80018a8:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e055      	b.n	8001978 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	e03c      	b.n	800195a <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ee:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d009      	beq.n	800190c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	3b01      	subs	r3, #1
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d20d      	bcs.n	8001954 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	3301      	adds	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d902      	bls.n	800194a <HAL_ETH_BuildRxDescriptors+0xae>
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	3b04      	subs	r3, #4
 8001948:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	3301      	adds	r3, #1
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3be      	bcc.n	80018e0 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6819      	ldr	r1, [r3, #0]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	f241 1328 	movw	r3, #4392	; 0x1128
 800196c:	440b      	add	r3, r1
 800196e:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	d113      	bne.n	80019c6 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f241 1334 	movw	r3, #4404	; 0x1134
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d109      	bne.n	80019c6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f8da 	bl	8001b6c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019c0:	f248 0240 	movw	r2, #32832	; 0x8040
 80019c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d113      	bne.n	8001a00 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	f241 1334 	movw	r3, #4404	; 0x1134
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d109      	bne.n	8001a00 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f8b3 	bl	8001b58 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019fa:	f248 0201 	movw	r2, #32769	; 0x8001
 80019fe:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a12:	d149      	bne.n	8001aa8 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a1c:	4413      	add	r3, r2
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a28:	d13e      	bne.n	8001aa8 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	f043 0208 	orr.w	r2, r3, #8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a48:	d11b      	bne.n	8001a82 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	f241 1302 	movw	r3, #4354	; 0x1102
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a66:	4413      	add	r3, r2
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6811      	ldr	r1, [r2, #0]
 8001a6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a72:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a76:	440b      	add	r3, r1
 8001a78:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	22e0      	movs	r2, #224	; 0xe0
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a80:	e00f      	b.n	8001aa2 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001a9c:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001aa0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f86c 	bl	8001b80 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ab0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001ab4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	22e0      	movs	r2, #224	; 0xe0
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f861 	bl	8001b94 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d10d      	bne.n	8001b04 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001af0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f855 	bl	8001ba8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d10d      	bne.n	8001b30 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b1c:	f003 020f 	and.w	r2, r3, #15
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f849 	bl	8001bbc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_ETH_IRQHandler+0x1d0>)
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_ETH_IRQHandler+0x1d0>)
 8001b3e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f843 	bl	8001bd0 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	58000080 	.word	0x58000080

08001b58 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e03e      	b.n	8001c84 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c0e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	055b      	lsls	r3, r3, #21
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f043 030c 	orr.w	r3, r3, #12
 8001c32:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001c46:	f7fe ff05 	bl	8000a54 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c4c:	e009      	b.n	8001c62 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001c4e:	f7fe ff01 	bl	8000a54 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c5c:	d901      	bls.n	8001c62 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e010      	b.n	8001c84 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ed      	bne.n	8001c4e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e03c      	b.n	8001d28 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cb6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	055b      	lsls	r3, r3, #21
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f023 030c 	bic.w	r3, r3, #12
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_ETH_WritePHYRegister+0xa4>)
 8001cee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_ETH_WritePHYRegister+0xa4>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001cfa:	f7fe feab 	bl	8000a54 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d00:	e009      	b.n	8001d16 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001d02:	f7fe fea7 	bl	8000a54 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d10:	d901      	bls.n	8001d16 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e008      	b.n	8001d28 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40028000 	.word	0x40028000

08001d34 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e1c3      	b.n	80020d0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf14      	ite	ne
 8001e7c:	2301      	movne	r3, #1
 8001e7e:	2300      	moveq	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf14      	ite	ne
 8001ef2:	2301      	movne	r3, #1
 8001ef4:	2300      	moveq	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0e5b      	lsrs	r3, r3, #25
 8001f92:	f003 021f 	and.w	r2, r3, #31
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	b29a      	uxth	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800205c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800206c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf14      	ite	ne
 80020a2:	2301      	movne	r3, #1
 80020a4:	2300      	moveq	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00a      	b.n	8002106 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d105      	bne.n	8002104 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f860 	bl	80021c0 <ETH_SetMACConfig>

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002120:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002128:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800212a:	f002 fad9 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 800212e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d908      	bls.n	800214a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d804      	bhi.n	800214a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e027      	b.n	800219a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d908      	bls.n	8002164 <HAL_ETH_SetMDIOClockRange+0x54>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d804      	bhi.n	8002164 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e01a      	b.n	800219a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d903      	bls.n	8002174 <HAL_ETH_SetMDIOClockRange+0x64>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d911      	bls.n	8002198 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d908      	bls.n	800218e <HAL_ETH_SetMDIOClockRange+0x7e>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_ETH_SetMDIOClockRange+0xac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d804      	bhi.n	800218e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e005      	b.n	800219a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e000      	b.n	800219a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002198:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	01312cff 	.word	0x01312cff
 80021b0:	02160ebf 	.word	0x02160ebf
 80021b4:	039386ff 	.word	0x039386ff
 80021b8:	05f5e0ff 	.word	0x05f5e0ff
 80021bc:	08f0d17f 	.word	0x08f0d17f

080021c0 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80021d2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	791b      	ldrb	r3, [r3, #4]
 80021d8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80021da:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7b1b      	ldrb	r3, [r3, #12]
 80021e0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80021e2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	7b5b      	ldrb	r3, [r3, #13]
 80021e8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021ea:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	7b9b      	ldrb	r3, [r3, #14]
 80021f0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80021f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7bdb      	ldrb	r3, [r3, #15]
 80021f8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021fa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	7c12      	ldrb	r2, [r2, #16]
 8002200:	2a00      	cmp	r2, #0
 8002202:	d102      	bne.n	800220a <ETH_SetMACConfig+0x4a>
 8002204:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002208:	e000      	b.n	800220c <ETH_SetMACConfig+0x4c>
 800220a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800220c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	7c52      	ldrb	r2, [r2, #17]
 8002212:	2a00      	cmp	r2, #0
 8002214:	d102      	bne.n	800221c <ETH_SetMACConfig+0x5c>
 8002216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800221a:	e000      	b.n	800221e <ETH_SetMACConfig+0x5e>
 800221c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800221e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	7c9b      	ldrb	r3, [r3, #18]
 8002224:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002226:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800222c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002232:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7f1b      	ldrb	r3, [r3, #28]
 8002238:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800223a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7f5b      	ldrb	r3, [r3, #29]
 8002240:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002242:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	7f92      	ldrb	r2, [r2, #30]
 8002248:	2a00      	cmp	r2, #0
 800224a:	d102      	bne.n	8002252 <ETH_SetMACConfig+0x92>
 800224c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002250:	e000      	b.n	8002254 <ETH_SetMACConfig+0x94>
 8002252:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002254:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	7fdb      	ldrb	r3, [r3, #31]
 800225a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800225c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002264:	2a00      	cmp	r2, #0
 8002266:	d102      	bne.n	800226e <ETH_SetMACConfig+0xae>
 8002268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226c:	e000      	b.n	8002270 <ETH_SetMACConfig+0xb0>
 800226e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002270:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002276:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800227e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002280:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b56      	ldr	r3, [pc, #344]	; (80023ec <ETH_SetMACConfig+0x22c>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	430b      	orrs	r3, r1
 800229c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022ac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022b6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022be:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022c0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d102      	bne.n	80022d2 <ETH_SetMACConfig+0x112>
 80022cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022d0:	e000      	b.n	80022d4 <ETH_SetMACConfig+0x114>
 80022d2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022d4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <ETH_SetMACConfig+0x230>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	68f9      	ldr	r1, [r7, #12]
 80022ee:	430b      	orrs	r3, r1
 80022f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <ETH_SetMACConfig+0x234>)
 800230a:	4013      	ands	r3, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	430b      	orrs	r3, r1
 8002314:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800231c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002322:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800232a:	2a00      	cmp	r2, #0
 800232c:	d101      	bne.n	8002332 <ETH_SetMACConfig+0x172>
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	e000      	b.n	8002334 <ETH_SetMACConfig+0x174>
 8002332:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002334:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002346:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	68f9      	ldr	r1, [r7, #12]
 8002352:	430b      	orrs	r3, r1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800235c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002364:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	f023 0103 	bic.w	r1, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	430a      	orrs	r2, r1
 800237e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800238a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d101      	bne.n	80023ae <ETH_SetMACConfig+0x1ee>
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	e000      	b.n	80023b0 <ETH_SetMACConfig+0x1f0>
 80023ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80023b0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80023b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023ba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	430a      	orrs	r2, r1
 80023dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	00048083 	.word	0x00048083
 80023f0:	c0f88000 	.word	0xc0f88000
 80023f4:	fffffef0 	.word	0xfffffef0

080023f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <ETH_SetDMAConfig+0xf8>)
 800240e:	4013      	ands	r3, r2
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	6809      	ldr	r1, [r1, #0]
 8002418:	431a      	orrs	r2, r3
 800241a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800241e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	791b      	ldrb	r3, [r3, #4]
 8002424:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800242a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7b1b      	ldrb	r3, [r3, #12]
 8002430:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f241 0304 	movw	r3, #4100	; 0x1004
 800243e:	4413      	add	r3, r2
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <ETH_SetDMAConfig+0xfc>)
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6811      	ldr	r1, [r2, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	431a      	orrs	r2, r3
 800244e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002452:	440b      	add	r3, r1
 8002454:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	7b5b      	ldrb	r3, [r3, #13]
 800245a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <ETH_SetDMAConfig+0x100>)
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6811      	ldr	r1, [r2, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	431a      	orrs	r2, r3
 800247a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800247e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	7d1b      	ldrb	r3, [r3, #20]
 8002488:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800248a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	7f5b      	ldrb	r3, [r3, #29]
 8002490:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f241 1304 	movw	r3, #4356	; 0x1104
 800249e:	4413      	add	r3, r2
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <ETH_SetDMAConfig+0x104>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6811      	ldr	r1, [r2, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	f241 1304 	movw	r3, #4356	; 0x1104
 80024b2:	440b      	add	r3, r1
 80024b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	7f1b      	ldrb	r3, [r3, #28]
 80024ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80024cc:	4413      	add	r3, r2
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <ETH_SetDMAConfig+0x108>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6811      	ldr	r1, [r2, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	431a      	orrs	r2, r3
 80024dc:	f241 1308 	movw	r3, #4360	; 0x1108
 80024e0:	440b      	add	r3, r1
 80024e2:	601a      	str	r2, [r3, #0]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	ffff87fd 	.word	0xffff87fd
 80024f4:	ffff2ffe 	.word	0xffff2ffe
 80024f8:	fffec000 	.word	0xfffec000
 80024fc:	ffc0efef 	.word	0xffc0efef
 8002500:	7fc0ffff 	.word	0x7fc0ffff

08002504 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b0a4      	sub	sp, #144	; 0x90
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002512:	2300      	movs	r3, #0
 8002514:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800252e:	2301      	movs	r3, #1
 8002530:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002544:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800254c:	2300      	movs	r3, #0
 800254e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800255c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002560:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002568:	2300      	movs	r3, #0
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800257e:	2300      	movs	r3, #0
 8002580:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002582:	2300      	movs	r3, #0
 8002584:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002586:	2300      	movs	r3, #0
 8002588:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800259c:	2320      	movs	r3, #32
 800259e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80025de:	2300      	movs	r3, #0
 80025e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fde6 	bl	80021c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025f4:	2301      	movs	r3, #1
 80025f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025f8:	2301      	movs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800260e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002612:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002618:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800261c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002624:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fee1 	bl	80023f8 <ETH_SetDMAConfig>
}
 8002636:	bf00      	nop
 8002638:	3790      	adds	r7, #144	; 0x90
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002650:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002658:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800265a:	f002 f841 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 800265e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d908      	bls.n	800267a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d804      	bhi.n	800267a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e027      	b.n	80026ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d908      	bls.n	8002694 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d804      	bhi.n	8002694 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e01a      	b.n	80026ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d903      	bls.n	80026a4 <ETH_MAC_MDIO_ClkConfig+0x64>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d911      	bls.n	80026c8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d908      	bls.n	80026be <ETH_MAC_MDIO_ClkConfig+0x7e>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <ETH_MAC_MDIO_ClkConfig+0xac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d804      	bhi.n	80026be <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e005      	b.n	80026ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e000      	b.n	80026ca <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80026c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	01312cff 	.word	0x01312cff
 80026e0:	02160ebf 	.word	0x02160ebf
 80026e4:	039386ff 	.word	0x039386ff
 80026e8:	05f5e0ff 	.word	0x05f5e0ff
 80026ec:	08f0d17f 	.word	0x08f0d17f

080026f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e01d      	b.n	800273a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68d9      	ldr	r1, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	3206      	adds	r2, #6
 8002730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3301      	adds	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d9de      	bls.n	80026fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f241 132c 	movw	r3, #4396	; 0x112c
 800274e:	4413      	add	r3, r2
 8002750:	2203      	movs	r2, #3
 8002752:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68d9      	ldr	r1, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002760:	4413      	add	r3, r2
 8002762:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002770:	601a      	str	r2, [r3, #0]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	e024      	b.n	80027d6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6919      	ldr	r1, [r3, #16]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	330a      	adds	r3, #10
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3301      	adds	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d9d7      	bls.n	800278c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f241 1330 	movw	r3, #4400	; 0x1130
 8002802:	4413      	add	r3, r2
 8002804:	2203      	movs	r2, #3
 8002806:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6919      	ldr	r1, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	f241 131c 	movw	r3, #4380	; 0x111c
 8002814:	4413      	add	r3, r2
 8002816:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f241 1328 	movw	r3, #4392	; 0x1128
 8002828:	4413      	add	r3, r2
 800282a:	6019      	str	r1, [r3, #0]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002838:	b480      	push	{r7}
 800283a:	b08d      	sub	sp, #52	; 0x34
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3318      	adds	r3, #24
 8002848:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002856:	2300      	movs	r3, #0
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002862:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002876:	d101      	bne.n	800287c <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002878:	2302      	movs	r3, #2
 800287a:	e223      	b.n	8002cc4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d044      	beq.n	8002912 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	4b72      	ldr	r3, [pc, #456]	; (8002a58 <ETH_Prepare_Tx_Descriptors+0x220>)
 800288e:	4013      	ands	r3, r2
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002894:	431a      	orrs	r2, r3
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d027      	beq.n	8002912 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	431a      	orrs	r2, r3
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002900:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002910:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00e      	beq.n	800293c <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <ETH_Prepare_Tx_Descriptors+0x224>)
 8002924:	4013      	ands	r3, r2
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	6992      	ldr	r2, [r2, #24]
 800292a:	431a      	orrs	r2, r3
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <ETH_Prepare_Tx_Descriptors+0x11c>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d030      	beq.n	80029b6 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	3301      	adds	r3, #1
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	2b03      	cmp	r3, #3
 8002976:	d902      	bls.n	800297e <ETH_Prepare_Tx_Descriptors+0x146>
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	3b04      	subs	r3, #4
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002986:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	3301      	adds	r3, #1
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299a:	d10c      	bne.n	80029b6 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80029b2:	2302      	movs	r3, #2
 80029b4:	e186      	b.n	8002cc4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	3301      	adds	r3, #1
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <ETH_Prepare_Tx_Descriptors+0x224>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	6852      	ldr	r2, [r2, #4]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <ETH_Prepare_Tx_Descriptors+0x228>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	6852      	ldr	r2, [r2, #4]
 80029fc:	0412      	lsls	r2, r2, #16
 80029fe:	431a      	orrs	r2, r3
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e008      	b.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d021      	beq.n	8002a68 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	04db      	lsls	r3, r3, #19
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	69d2      	ldr	r2, [r2, #28]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	e02e      	b.n	8002ab6 <ETH_Prepare_Tx_Descriptors+0x27e>
 8002a58:	ffff0000 	.word	0xffff0000
 8002a5c:	ffffc000 	.word	0xffffc000
 8002a60:	c000ffff 	.word	0xc000ffff
 8002a64:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b98      	ldr	r3, [pc, #608]	; (8002cd0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	6852      	ldr	r2, [r2, #4]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80c0 	beq.w	8002c86 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b18:	e0b5      	b.n	8002c86 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	3301      	adds	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d902      	bls.n	8002b38 <ETH_Prepare_Tx_Descriptors+0x300>
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	3b04      	subs	r3, #4
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b5a:	d126      	bne.n	8002baa <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b68:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	e016      	b.n	8002b9e <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	3301      	adds	r3, #1
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d902      	bls.n	8002b8e <ETH_Prepare_Tx_Descriptors+0x356>
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b96:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3e4      	bcc.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e08c      	b.n	8002cc4 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	3301      	adds	r3, #1
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	6852      	ldr	r2, [r2, #4]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	6852      	ldr	r2, [r2, #4]
 8002bf6:	0412      	lsls	r2, r2, #16
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	e008      	b.n	8002c12 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2200      	movs	r2, #0
 8002c04:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	4b33      	ldr	r3, [pc, #204]	; (8002cd8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00f      	beq.n	8002c3e <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	69d2      	ldr	r2, [r2, #28]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	e017      	b.n	8002c6e <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	6852      	ldr	r2, [r2, #4]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f47f af45 	bne.w	8002b1a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	e005      	b.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc0:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3734      	adds	r7, #52	; 0x34
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	ffff8000 	.word	0xffff8000
 8002cd4:	ffffc000 	.word	0xffffc000
 8002cd8:	c000ffff 	.word	0xc000ffff
 8002cdc:	fffc0000 	.word	0xfffc0000

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_GPIO_Init+0x12c>)
 8002cf0:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <HAL_GPIO_Init+0x130>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02b      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a45      	ldr	r2, [pc, #276]	; (8002e14 <HAL_GPIO_Init+0x134>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d027      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a44      	ldr	r2, [pc, #272]	; (8002e18 <HAL_GPIO_Init+0x138>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d023      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a43      	ldr	r2, [pc, #268]	; (8002e1c <HAL_GPIO_Init+0x13c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01f      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <HAL_GPIO_Init+0x140>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d01b      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_GPIO_Init+0x144>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d017      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a40      	ldr	r2, [pc, #256]	; (8002e28 <HAL_GPIO_Init+0x148>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <HAL_GPIO_Init+0x14c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00f      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <HAL_GPIO_Init+0x150>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00b      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <HAL_GPIO_Init+0x154>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <HAL_GPIO_Init+0x158>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x72>
 8002d4a:	21bb      	movs	r1, #187	; 0xbb
 8002d4c:	483b      	ldr	r0, [pc, #236]	; (8002e3c <HAL_GPIO_Init+0x15c>)
 8002d4e:	f00b ff84 	bl	800ec5a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_GPIO_Init+0x88>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_GPIO_Init+0x160>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x90>
 8002d68:	21bc      	movs	r1, #188	; 0xbc
 8002d6a:	4834      	ldr	r0, [pc, #208]	; (8002e3c <HAL_GPIO_Init+0x15c>)
 8002d6c:	f00b ff75 	bl	800ec5a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d035      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d031      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b11      	cmp	r3, #17
 8002d86:	d02d      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d029      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b12      	cmp	r3, #18
 8002d96:	d025      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <HAL_GPIO_Init+0x164>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d020      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <HAL_GPIO_Init+0x168>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d01b      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_GPIO_Init+0x16c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d016      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a25      	ldr	r2, [pc, #148]	; (8002e50 <HAL_GPIO_Init+0x170>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d011      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <HAL_GPIO_Init+0x174>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00c      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_GPIO_Init+0x178>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x104>
 8002ddc:	21bd      	movs	r1, #189	; 0xbd
 8002dde:	4817      	ldr	r0, [pc, #92]	; (8002e3c <HAL_GPIO_Init+0x15c>)
 8002de0:	f00b ff3b 	bl	800ec5a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 821a 	beq.w	8003222 <HAL_GPIO_Init+0x542>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	f000 8215 	beq.w	8003222 <HAL_GPIO_Init+0x542>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f000 8210 	beq.w	8003222 <HAL_GPIO_Init+0x542>
 8002e02:	21be      	movs	r1, #190	; 0xbe
 8002e04:	480d      	ldr	r0, [pc, #52]	; (8002e3c <HAL_GPIO_Init+0x15c>)
 8002e06:	f00b ff28 	bl	800ec5a <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e0a:	e20a      	b.n	8003222 <HAL_GPIO_Init+0x542>
 8002e0c:	58000080 	.word	0x58000080
 8002e10:	58020000 	.word	0x58020000
 8002e14:	58020400 	.word	0x58020400
 8002e18:	58020800 	.word	0x58020800
 8002e1c:	58020c00 	.word	0x58020c00
 8002e20:	58021000 	.word	0x58021000
 8002e24:	58021400 	.word	0x58021400
 8002e28:	58021800 	.word	0x58021800
 8002e2c:	58021c00 	.word	0x58021c00
 8002e30:	58022000 	.word	0x58022000
 8002e34:	58022400 	.word	0x58022400
 8002e38:	58022800 	.word	0x58022800
 8002e3c:	08010680 	.word	0x08010680
 8002e40:	ffff0000 	.word	0xffff0000
 8002e44:	11110000 	.word	0x11110000
 8002e48:	11210000 	.word	0x11210000
 8002e4c:	11310000 	.word	0x11310000
 8002e50:	11120000 	.word	0x11120000
 8002e54:	11220000 	.word	0x11220000
 8002e58:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 81d4 	beq.w	800321c <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x1a4>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d15b      	bne.n	8002f3c <HAL_GPIO_Init+0x25c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4aa2      	ldr	r2, [pc, #648]	; (8003110 <HAL_GPIO_Init+0x430>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d02b      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4aa1      	ldr	r2, [pc, #644]	; (8003114 <HAL_GPIO_Init+0x434>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4aa0      	ldr	r2, [pc, #640]	; (8003118 <HAL_GPIO_Init+0x438>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d023      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a9f      	ldr	r2, [pc, #636]	; (800311c <HAL_GPIO_Init+0x43c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d01f      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a9e      	ldr	r2, [pc, #632]	; (8003120 <HAL_GPIO_Init+0x440>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d01b      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a9d      	ldr	r2, [pc, #628]	; (8003124 <HAL_GPIO_Init+0x444>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d017      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a9c      	ldr	r2, [pc, #624]	; (8003128 <HAL_GPIO_Init+0x448>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a9b      	ldr	r2, [pc, #620]	; (800312c <HAL_GPIO_Init+0x44c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00f      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a9a      	ldr	r2, [pc, #616]	; (8003130 <HAL_GPIO_Init+0x450>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a99      	ldr	r2, [pc, #612]	; (8003134 <HAL_GPIO_Init+0x454>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a98      	ldr	r2, [pc, #608]	; (8003138 <HAL_GPIO_Init+0x458>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x204>
 8002edc:	21cd      	movs	r1, #205	; 0xcd
 8002ede:	4897      	ldr	r0, [pc, #604]	; (800313c <HAL_GPIO_Init+0x45c>)
 8002ee0:	f00b febb 	bl	800ec5a <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b0f      	cmp	r3, #15
 8002eea:	d903      	bls.n	8002ef4 <HAL_GPIO_Init+0x214>
 8002eec:	21ce      	movs	r1, #206	; 0xce
 8002eee:	4893      	ldr	r0, [pc, #588]	; (800313c <HAL_GPIO_Init+0x45c>)
 8002ef0:	f00b feb3 	bl	800ec5a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	08da      	lsrs	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3208      	adds	r2, #8
 8002efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0203 	and.w	r2, r3, #3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d00b      	beq.n	8002f90 <HAL_GPIO_Init+0x2b0>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d007      	beq.n	8002f90 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f84:	2b11      	cmp	r3, #17
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x2b0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b12      	cmp	r3, #18
 8002f8e:	d144      	bne.n	800301a <HAL_GPIO_Init+0x33a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00f      	beq.n	8002fb8 <HAL_GPIO_Init+0x2d8>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_GPIO_Init+0x2d8>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d007      	beq.n	8002fb8 <HAL_GPIO_Init+0x2d8>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2d8>
 8002fb0:	21e2      	movs	r1, #226	; 0xe2
 8002fb2:	4862      	ldr	r0, [pc, #392]	; (800313c <HAL_GPIO_Init+0x45c>)
 8002fb4:	f00b fe51 	bl	800ec5a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 0201 	and.w	r2, r3, #1
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80e2 	beq.w	800321c <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_GPIO_Init+0x460>)
 800305a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800305e:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_GPIO_Init+0x460>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_GPIO_Init+0x460>)
 800306a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003076:	4a33      	ldr	r2, [pc, #204]	; (8003144 <HAL_GPIO_Init+0x464>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_GPIO_Init+0x430>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d054      	beq.n	800314c <HAL_GPIO_Init+0x46c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <HAL_GPIO_Init+0x434>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d04e      	beq.n	8003148 <HAL_GPIO_Init+0x468>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <HAL_GPIO_Init+0x438>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02b      	beq.n	800310a <HAL_GPIO_Init+0x42a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_GPIO_Init+0x43c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d025      	beq.n	8003106 <HAL_GPIO_Init+0x426>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_GPIO_Init+0x440>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01f      	beq.n	8003102 <HAL_GPIO_Init+0x422>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_GPIO_Init+0x444>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x41e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_GPIO_Init+0x448>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x41a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a15      	ldr	r2, [pc, #84]	; (800312c <HAL_GPIO_Init+0x44c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x416>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <HAL_GPIO_Init+0x450>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x412>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a13      	ldr	r2, [pc, #76]	; (8003134 <HAL_GPIO_Init+0x454>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x40e>
 80030ea:	2309      	movs	r3, #9
 80030ec:	e02f      	b.n	800314e <HAL_GPIO_Init+0x46e>
 80030ee:	230a      	movs	r3, #10
 80030f0:	e02d      	b.n	800314e <HAL_GPIO_Init+0x46e>
 80030f2:	2308      	movs	r3, #8
 80030f4:	e02b      	b.n	800314e <HAL_GPIO_Init+0x46e>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e029      	b.n	800314e <HAL_GPIO_Init+0x46e>
 80030fa:	2306      	movs	r3, #6
 80030fc:	e027      	b.n	800314e <HAL_GPIO_Init+0x46e>
 80030fe:	2305      	movs	r3, #5
 8003100:	e025      	b.n	800314e <HAL_GPIO_Init+0x46e>
 8003102:	2304      	movs	r3, #4
 8003104:	e023      	b.n	800314e <HAL_GPIO_Init+0x46e>
 8003106:	2303      	movs	r3, #3
 8003108:	e021      	b.n	800314e <HAL_GPIO_Init+0x46e>
 800310a:	2302      	movs	r3, #2
 800310c:	e01f      	b.n	800314e <HAL_GPIO_Init+0x46e>
 800310e:	bf00      	nop
 8003110:	58020000 	.word	0x58020000
 8003114:	58020400 	.word	0x58020400
 8003118:	58020800 	.word	0x58020800
 800311c:	58020c00 	.word	0x58020c00
 8003120:	58021000 	.word	0x58021000
 8003124:	58021400 	.word	0x58021400
 8003128:	58021800 	.word	0x58021800
 800312c:	58021c00 	.word	0x58021c00
 8003130:	58022000 	.word	0x58022000
 8003134:	58022400 	.word	0x58022400
 8003138:	58022800 	.word	0x58022800
 800313c:	08010680 	.word	0x08010680
 8003140:	58024400 	.word	0x58024400
 8003144:	58000400 	.word	0x58000400
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_GPIO_Init+0x46e>
 800314c:	2300      	movs	r3, #0
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	f002 0203 	and.w	r2, r2, #3
 8003154:	0092      	lsls	r2, r2, #2
 8003156:	4093      	lsls	r3, r2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315e:	4937      	ldr	r1, [pc, #220]	; (800323c <HAL_GPIO_Init+0x55c>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	3301      	adds	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f ae15 	bne.w	8002e5c <HAL_GPIO_Init+0x17c>
  }
}
 8003232:	bf00      	nop
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	58000400 	.word	0x58000400

08003240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
 800324c:	4613      	mov	r3, r2
 800324e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_GPIO_WritePin+0x20>
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_GPIO_WritePin+0x60>)
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_GPIO_WritePin+0x2a>
 8003260:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003264:	480f      	ldr	r0, [pc, #60]	; (80032a4 <HAL_GPIO_WritePin+0x64>)
 8003266:	f00b fcf8 	bl	800ec5a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800326a:	787b      	ldrb	r3, [r7, #1]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_WritePin+0x40>
 8003270:	787b      	ldrb	r3, [r7, #1]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d004      	beq.n	8003280 <HAL_GPIO_WritePin+0x40>
 8003276:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800327a:	480a      	ldr	r0, [pc, #40]	; (80032a4 <HAL_GPIO_WritePin+0x64>)
 800327c:	f00b fced 	bl	800ec5a <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800328c:	e003      	b.n	8003296 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	ffff0000 	.word	0xffff0000
 80032a4:	08010680 	.word	0x08010680

080032a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f00b fc38 	bl	800eb3c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	58000080 	.word	0x58000080

080032d8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d006      	beq.n	80032f4 <HAL_PWREx_ConfigSupply+0x1c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d003      	beq.n	80032f4 <HAL_PWREx_ConfigSupply+0x1c>
 80032ec:	21ef      	movs	r1, #239	; 0xef
 80032ee:	481a      	ldr	r0, [pc, #104]	; (8003358 <HAL_PWREx_ConfigSupply+0x80>)
 80032f0:	f00b fcb3 	bl	800ec5a <assert_failed>

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <HAL_PWREx_ConfigSupply+0x84>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d008      	beq.n	8003312 <HAL_PWREx_ConfigSupply+0x3a>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003300:	4b16      	ldr	r3, [pc, #88]	; (800335c <HAL_PWREx_ConfigSupply+0x84>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_PWREx_ConfigSupply+0x3a>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e01d      	b.n	800334e <HAL_PWREx_ConfigSupply+0x76>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_PWREx_ConfigSupply+0x84>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4910      	ldr	r1, [pc, #64]	; (800335c <HAL_PWREx_ConfigSupply+0x84>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4313      	orrs	r3, r2
 8003320:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003322:	f7fd fb97 	bl	8000a54 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003328:	e009      	b.n	800333e <HAL_PWREx_ConfigSupply+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800332a:	f7fd fb93 	bl	8000a54 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003338:	d901      	bls.n	800333e <HAL_PWREx_ConfigSupply+0x66>
    {
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e007      	b.n	800334e <HAL_PWREx_ConfigSupply+0x76>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_PWREx_ConfigSupply+0x84>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334a:	d1ee      	bne.n	800332a <HAL_PWREx_ConfigSupply+0x52>
    }
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	080106bc 	.word	0x080106bc
 800335c:	58024800 	.word	0x58024800

08003360 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800336a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	58024800 	.word	0x58024800

08003380 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f000 bcc9 	b.w	8003d26 <HAL_RCC_OscConfig+0x9a6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d028      	beq.n	80033ee <HAL_RCC_OscConfig+0x6e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d122      	bne.n	80033ee <HAL_RCC_OscConfig+0x6e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11c      	bne.n	80033ee <HAL_RCC_OscConfig+0x6e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <HAL_RCC_OscConfig+0x6e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d110      	bne.n	80033ee <HAL_RCC_OscConfig+0x6e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <HAL_RCC_OscConfig+0x6e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <HAL_RCC_OscConfig+0x6e>
 80033e4:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80033e8:	48a2      	ldr	r0, [pc, #648]	; (8003674 <HAL_RCC_OscConfig+0x2f4>)
 80033ea:	f00b fc36 	bl	800ec5a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 809d 	beq.w	8003536 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_RCC_OscConfig+0xa2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d009      	beq.n	8003422 <HAL_RCC_OscConfig+0xa2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003416:	d004      	beq.n	8003422 <HAL_RCC_OscConfig+0xa2>
 8003418:	f240 1175 	movw	r1, #373	; 0x175
 800341c:	4895      	ldr	r0, [pc, #596]	; (8003674 <HAL_RCC_OscConfig+0x2f4>)
 800341e:	f00b fc1c 	bl	800ec5a <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003422:	4b95      	ldr	r3, [pc, #596]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800342c:	4b92      	ldr	r3, [pc, #584]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	2b10      	cmp	r3, #16
 8003436:	d007      	beq.n	8003448 <HAL_RCC_OscConfig+0xc8>
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	2b18      	cmp	r3, #24
 800343c:	d111      	bne.n	8003462 <HAL_RCC_OscConfig+0xe2>
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	4b8b      	ldr	r3, [pc, #556]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d06f      	beq.n	8003534 <HAL_RCC_OscConfig+0x1b4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d16b      	bne.n	8003534 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f000 bc62 	b.w	8003d26 <HAL_RCC_OscConfig+0x9a6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0xfa>
 800346c:	4b82      	ldr	r3, [pc, #520]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a81      	ldr	r2, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e02e      	b.n	80034d8 <HAL_RCC_OscConfig+0x158>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x11c>
 8003482:	4b7d      	ldr	r3, [pc, #500]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a79      	ldr	r2, [pc, #484]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e01d      	b.n	80034d8 <HAL_RCC_OscConfig+0x158>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x140>
 80034a6:	4b74      	ldr	r3, [pc, #464]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a73      	ldr	r2, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b71      	ldr	r3, [pc, #452]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a70      	ldr	r2, [pc, #448]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x158>
 80034c0:	4b6d      	ldr	r3, [pc, #436]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a6c      	ldr	r2, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a69      	ldr	r2, [pc, #420]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d014      	beq.n	800350a <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fd fab8 	bl	8000a54 <HAL_GetTick>
 80034e4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034e6:	e009      	b.n	80034fc <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fd fab4 	bl	8000a54 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d902      	bls.n	80034fc <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	f000 bc15 	b.w	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034fc:	4b5e      	ldr	r3, [pc, #376]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ef      	beq.n	80034e8 <HAL_RCC_OscConfig+0x168>
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fd faa3 	bl	8000a54 <HAL_GetTick>
 800350e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003510:	e009      	b.n	8003526 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003512:	f7fd fa9f 	bl	8000a54 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	; 0x64
 800351e:	d902      	bls.n	8003526 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	f000 bc00 	b.w	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_OscConfig+0x192>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80d8 	beq.w	80036f4 <HAL_RCC_OscConfig+0x374>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d018      	beq.n	800357e <HAL_RCC_OscConfig+0x1fe>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d014      	beq.n	800357e <HAL_RCC_OscConfig+0x1fe>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d010      	beq.n	800357e <HAL_RCC_OscConfig+0x1fe>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d00c      	beq.n	800357e <HAL_RCC_OscConfig+0x1fe>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b11      	cmp	r3, #17
 800356a:	d008      	beq.n	800357e <HAL_RCC_OscConfig+0x1fe>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b19      	cmp	r3, #25
 8003572:	d004      	beq.n	800357e <HAL_RCC_OscConfig+0x1fe>
 8003574:	f240 11a9 	movw	r1, #425	; 0x1a9
 8003578:	483e      	ldr	r0, [pc, #248]	; (8003674 <HAL_RCC_OscConfig+0x2f4>)
 800357a:	f00b fb6e 	bl	800ec5a <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b7f      	cmp	r3, #127	; 0x7f
 8003584:	d904      	bls.n	8003590 <HAL_RCC_OscConfig+0x210>
 8003586:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800358a:	483a      	ldr	r0, [pc, #232]	; (8003674 <HAL_RCC_OscConfig+0x2f4>)
 800358c:	f00b fb65 	bl	800ec5a <assert_failed>

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003598:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_RCC_OscConfig+0x236>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b18      	cmp	r3, #24
 80035aa:	d149      	bne.n	8003640 <HAL_RCC_OscConfig+0x2c0>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d144      	bne.n	8003640 <HAL_RCC_OscConfig+0x2c0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b6:	4b30      	ldr	r3, [pc, #192]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x24e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e3ab      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035ce:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 0219 	bic.w	r2, r3, #25
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4927      	ldr	r1, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd fa38 	bl	8000a54 <HAL_GetTick>
 80035e4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x27a>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fd fa34 	bl	8000a54 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x27a>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e395      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x268>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	f7fd fa31 	bl	8000a6c <HAL_GetREVID>
 800360a:	4602      	mov	r2, r0
 800360c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003610:	429a      	cmp	r2, r3
 8003612:	d80a      	bhi.n	800362a <HAL_RCC_OscConfig+0x2aa>
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	031b      	lsls	r3, r3, #12
 8003622:	4915      	ldr	r1, [pc, #84]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003628:	e064      	b.n	80036f4 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	061b      	lsls	r3, r3, #24
 8003638:	490f      	ldr	r1, [pc, #60]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363e:	e059      	b.n	80036f4 <HAL_RCC_OscConfig+0x374>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03c      	beq.n	80036c2 <HAL_RCC_OscConfig+0x342>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0219 	bic.w	r2, r3, #25
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4908      	ldr	r1, [pc, #32]	; (8003678 <HAL_RCC_OscConfig+0x2f8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fd f9fb 	bl	8000a54 <HAL_GetTick>
 800365e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003660:	e00c      	b.n	800367c <HAL_RCC_OscConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7fd f9f7 	bl	8000a54 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d905      	bls.n	800367c <HAL_RCC_OscConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e358      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
 8003674:	080106f8 	.word	0x080106f8
 8003678:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367c:	4b95      	ldr	r3, [pc, #596]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ec      	beq.n	8003662 <HAL_RCC_OscConfig+0x2e2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	f7fd f9f0 	bl	8000a6c <HAL_GetREVID>
 800368c:	4602      	mov	r2, r0
 800368e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003692:	429a      	cmp	r2, r3
 8003694:	d80a      	bhi.n	80036ac <HAL_RCC_OscConfig+0x32c>
 8003696:	4b8f      	ldr	r3, [pc, #572]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	031b      	lsls	r3, r3, #12
 80036a4:	498b      	ldr	r1, [pc, #556]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
 80036aa:	e023      	b.n	80036f4 <HAL_RCC_OscConfig+0x374>
 80036ac:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	4986      	ldr	r1, [pc, #536]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
 80036c0:	e018      	b.n	80036f4 <HAL_RCC_OscConfig+0x374>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	4b84      	ldr	r3, [pc, #528]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a83      	ldr	r2, [pc, #524]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fd f9c1 	bl	8000a54 <HAL_GetTick>
 80036d2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x368>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036d6:	f7fd f9bd 	bl	8000a54 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e31e      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036e8:	4b7a      	ldr	r3, [pc, #488]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x356>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a5 	beq.w	800384c <HAL_RCC_OscConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RCC_OscConfig+0x39c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d004      	beq.n	800371c <HAL_RCC_OscConfig+0x39c>
 8003712:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8003716:	4870      	ldr	r0, [pc, #448]	; (80038d8 <HAL_RCC_OscConfig+0x558>)
 8003718:	f00b fa9f 	bl	800ec5a <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	2b1f      	cmp	r3, #31
 8003722:	d904      	bls.n	800372e <HAL_RCC_OscConfig+0x3ae>
 8003724:	f240 11fb 	movw	r1, #507	; 0x1fb
 8003728:	486b      	ldr	r0, [pc, #428]	; (80038d8 <HAL_RCC_OscConfig+0x558>)
 800372a:	f00b fa96 	bl	800ec5a <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003736:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d007      	beq.n	8003754 <HAL_RCC_OscConfig+0x3d4>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b18      	cmp	r3, #24
 8003748:	d12d      	bne.n	80037a6 <HAL_RCC_OscConfig+0x426>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d128      	bne.n	80037a6 <HAL_RCC_OscConfig+0x426>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003754:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_OscConfig+0x3ec>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x3ec>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e2dc      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800376c:	f7fd f97e 	bl	8000a6c <HAL_GetREVID>
 8003770:	4602      	mov	r2, r0
 8003772:	f241 0303 	movw	r3, #4099	; 0x1003
 8003776:	429a      	cmp	r2, r3
 8003778:	d80a      	bhi.n	8003790 <HAL_RCC_OscConfig+0x410>
 800377a:	4b56      	ldr	r3, [pc, #344]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	069b      	lsls	r3, r3, #26
 8003788:	4952      	ldr	r1, [pc, #328]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800378e:	e05d      	b.n	800384c <HAL_RCC_OscConfig+0x4cc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003790:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	494d      	ldr	r1, [pc, #308]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037a4:	e052      	b.n	800384c <HAL_RCC_OscConfig+0x4cc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d035      	beq.n	800381a <HAL_RCC_OscConfig+0x49a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037ae:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a48      	ldr	r2, [pc, #288]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80037b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7fd f94b 	bl	8000a54 <HAL_GetTick>
 80037be:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037c2:	f7fd f947 	bl	8000a54 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e2a8      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037d4:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x442>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037e0:	f7fd f944 	bl	8000a6c <HAL_GetREVID>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d80a      	bhi.n	8003804 <HAL_RCC_OscConfig+0x484>
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	069b      	lsls	r3, r3, #26
 80037fc:	4935      	ldr	r1, [pc, #212]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
 8003802:	e023      	b.n	800384c <HAL_RCC_OscConfig+0x4cc>
 8003804:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	4930      	ldr	r1, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003814:	4313      	orrs	r3, r2
 8003816:	60cb      	str	r3, [r1, #12]
 8003818:	e018      	b.n	800384c <HAL_RCC_OscConfig+0x4cc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd f915 	bl	8000a54 <HAL_GetTick>
 800382a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800382e:	f7fd f911 	bl	8000a54 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e272      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x4ae>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d047      	beq.n	80038e8 <HAL_RCC_OscConfig+0x568>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_OscConfig+0x4f2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d004      	beq.n	8003872 <HAL_RCC_OscConfig+0x4f2>
 8003868:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800386c:	481a      	ldr	r0, [pc, #104]	; (80038d8 <HAL_RCC_OscConfig+0x558>)
 800386e:	f00b f9f4 	bl	800ec5a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d019      	beq.n	80038ae <HAL_RCC_OscConfig+0x52e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387a:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fd f8e5 	bl	8000a54 <HAL_GetTick>
 800388a:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388e:	f7fd f8e1 	bl	8000a54 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e242      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x50e>
 80038ac:	e01c      	b.n	80038e8 <HAL_RCC_OscConfig+0x568>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80038b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b2:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <HAL_RCC_OscConfig+0x554>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ba:	f7fd f8cb 	bl	8000a54 <HAL_GetTick>
 80038be:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038c0:	e00c      	b.n	80038dc <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c2:	f7fd f8c7 	bl	8000a54 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d905      	bls.n	80038dc <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e228      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
 80038d4:	58024400 	.word	0x58024400
 80038d8:	080106f8 	.word	0x080106f8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038dc:	4b71      	ldr	r3, [pc, #452]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ec      	bne.n	80038c2 <HAL_RCC_OscConfig+0x542>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d043      	beq.n	800397c <HAL_RCC_OscConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_OscConfig+0x58e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d004      	beq.n	800390e <HAL_RCC_OscConfig+0x58e>
 8003904:	f240 2167 	movw	r1, #615	; 0x267
 8003908:	4867      	ldr	r0, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x728>)
 800390a:	f00b f9a6 	bl	800ec5a <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d019      	beq.n	800394a <HAL_RCC_OscConfig+0x5ca>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003916:	4b63      	ldr	r3, [pc, #396]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a62      	ldr	r2, [pc, #392]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 800391c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003920:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003922:	f7fd f897 	bl	8000a54 <HAL_GetTick>
 8003926:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x5bc>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800392a:	f7fd f893 	bl	8000a54 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x5bc>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1f4      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x5aa>
 8003948:	e018      	b.n	800397c <HAL_RCC_OscConfig+0x5fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800394a:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a55      	ldr	r2, [pc, #340]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003954:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003956:	f7fd f87d 	bl	8000a54 <HAL_GetTick>
 800395a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x5f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800395e:	f7fd f879 	bl	8000a54 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x5f0>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e1da      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003970:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCC_OscConfig+0x5de>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8099 	beq.w	8003abc <HAL_RCC_OscConfig+0x73c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_RCC_OscConfig+0x62c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d008      	beq.n	80039ac <HAL_RCC_OscConfig+0x62c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d004      	beq.n	80039ac <HAL_RCC_OscConfig+0x62c>
 80039a2:	f240 2191 	movw	r1, #657	; 0x291
 80039a6:	4840      	ldr	r0, [pc, #256]	; (8003aa8 <HAL_RCC_OscConfig+0x728>)
 80039a8:	f00b f957 	bl	800ec5a <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039ac:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <HAL_RCC_OscConfig+0x72c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3e      	ldr	r2, [pc, #248]	; (8003aac <HAL_RCC_OscConfig+0x72c>)
 80039b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039b8:	f7fd f84c 	bl	8000a54 <HAL_GetTick>
 80039bc:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x652>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039c0:	f7fd f848 	bl	8000a54 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x652>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1a9      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d2:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x72c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x640>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x674>
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a2e      	ldr	r2, [pc, #184]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	e02d      	b.n	8003a50 <HAL_RCC_OscConfig+0x6d0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10c      	bne.n	8003a16 <HAL_RCC_OscConfig+0x696>
 80039fc:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	6713      	str	r3, [r2, #112]	; 0x70
 8003a08:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a0e:	f023 0304 	bic.w	r3, r3, #4
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x6d0>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x6b8>
 8003a1e:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x6d0>
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x704>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fc fffc 	bl	8000a54 <HAL_GetTick>
 8003a5c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x6f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fc fff8 	bl	8000a54 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x6f6>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e157      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_OscConfig+0x724>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x6e0>
 8003a82:	e01b      	b.n	8003abc <HAL_RCC_OscConfig+0x73c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fc ffe6 	bl	8000a54 <HAL_GetTick>
 8003a88:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a8a:	e011      	b.n	8003ab0 <HAL_RCC_OscConfig+0x730>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fc ffe2 	bl	8000a54 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d908      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x730>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e141      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
 8003aa2:	bf00      	nop
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	080106f8 	.word	0x080106f8
 8003aac:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ab0:	4b9f      	ldr	r3, [pc, #636]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e7      	bne.n	8003a8c <HAL_RCC_OscConfig+0x70c>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00c      	beq.n	8003ade <HAL_RCC_OscConfig+0x75e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_OscConfig+0x75e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d004      	beq.n	8003ade <HAL_RCC_OscConfig+0x75e>
 8003ad4:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003ad8:	4896      	ldr	r0, [pc, #600]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003ada:	f00b f8be 	bl	800ec5a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 811e 	beq.w	8003d24 <HAL_RCC_OscConfig+0x9a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ae8:	4b91      	ldr	r3, [pc, #580]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af0:	2b18      	cmp	r3, #24
 8003af2:	f000 8115 	beq.w	8003d20 <HAL_RCC_OscConfig+0x9a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	f040 80f6 	bne.w	8003cec <HAL_RCC_OscConfig+0x96c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d010      	beq.n	8003b2a <HAL_RCC_OscConfig+0x7aa>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_RCC_OscConfig+0x7aa>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d008      	beq.n	8003b2a <HAL_RCC_OscConfig+0x7aa>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d004      	beq.n	8003b2a <HAL_RCC_OscConfig+0x7aa>
 8003b20:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8003b24:	4883      	ldr	r0, [pc, #524]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003b26:	f00b f898 	bl	800ec5a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_OscConfig+0x7ba>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	2b3f      	cmp	r3, #63	; 0x3f
 8003b38:	d904      	bls.n	8003b44 <HAL_RCC_OscConfig+0x7c4>
 8003b3a:	f240 21cd 	movw	r1, #717	; 0x2cd
 8003b3e:	487d      	ldr	r0, [pc, #500]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003b40:	f00b f88b 	bl	800ec5a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d904      	bls.n	8003b56 <HAL_RCC_OscConfig+0x7d6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b54:	d904      	bls.n	8003b60 <HAL_RCC_OscConfig+0x7e0>
 8003b56:	f240 21ce 	movw	r1, #718	; 0x2ce
 8003b5a:	4876      	ldr	r0, [pc, #472]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003b5c:	f00b f87d 	bl	800ec5a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCC_OscConfig+0x7f0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d904      	bls.n	8003b7a <HAL_RCC_OscConfig+0x7fa>
 8003b70:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003b74:	486f      	ldr	r0, [pc, #444]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003b76:	f00b f870 	bl	800ec5a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_OscConfig+0x80a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	2b80      	cmp	r3, #128	; 0x80
 8003b88:	d904      	bls.n	8003b94 <HAL_RCC_OscConfig+0x814>
 8003b8a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8003b8e:	4869      	ldr	r0, [pc, #420]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003b90:	f00b f863 	bl	800ec5a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x824>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d904      	bls.n	8003bae <HAL_RCC_OscConfig+0x82e>
 8003ba4:	f240 21d1 	movw	r1, #721	; 0x2d1
 8003ba8:	4862      	ldr	r0, [pc, #392]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003baa:	f00b f856 	bl	800ec5a <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb6:	d304      	bcc.n	8003bc2 <HAL_RCC_OscConfig+0x842>
 8003bb8:	f240 21d2 	movw	r1, #722	; 0x2d2
 8003bbc:	485d      	ldr	r0, [pc, #372]	; (8003d34 <HAL_RCC_OscConfig+0x9b4>)
 8003bbe:	f00b f84c 	bl	800ec5a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b5b      	ldr	r3, [pc, #364]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a5a      	ldr	r2, [pc, #360]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fc ff41 	bl	8000a54 <HAL_GetTick>
 8003bd2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x868>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fc ff3d 	bl	8000a54 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x868>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e09e      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003be8:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x856>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf4:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <HAL_RCC_OscConfig+0x9b8>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	430a      	orrs	r2, r1
 8003c08:	4949      	ldr	r1, [pc, #292]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	628b      	str	r3, [r1, #40]	; 0x28
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	3b01      	subs	r3, #1
 8003c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	025b      	lsls	r3, r3, #9
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	3b01      	subs	r3, #1
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c3e:	493c      	ldr	r1, [pc, #240]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	4a39      	ldr	r2, [pc, #228]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c50:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c54:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x9bc>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c5c:	00d2      	lsls	r2, r2, #3
 8003c5e:	4934      	ldr	r1, [pc, #208]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f023 020c 	bic.w	r2, r3, #12
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	492f      	ldr	r1, [pc, #188]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c76:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f023 0202 	bic.w	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	492b      	ldr	r1, [pc, #172]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c88:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ca0:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fc fec6 	bl	8000a54 <HAL_GetTick>
 8003cc8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x95e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fc fec2 	bl	8000a54 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x95e>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e023      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cde:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x94c>
 8003cea:	e01b      	b.n	8003d24 <HAL_RCC_OscConfig+0x9a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fc feac 	bl	8000a54 <HAL_GetTick>
 8003cfc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x992>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fc fea8 	bl	8000a54 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x992>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e009      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <HAL_RCC_OscConfig+0x9b0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x980>
 8003d1e:	e001      	b.n	8003d24 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x9a6>
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3728      	adds	r7, #40	; 0x28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	58024400 	.word	0x58024400
 8003d34:	080106f8 	.word	0x080106f8
 8003d38:	fffffc0c 	.word	0xfffffc0c
 8003d3c:	ffff0007 	.word	0xffff0007

08003d40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e345      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x24>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b3f      	cmp	r3, #63	; 0x3f
 8003d62:	d904      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x2e>
 8003d64:	f240 3152 	movw	r1, #850	; 0x352
 8003d68:	4827      	ldr	r0, [pc, #156]	; (8003e08 <HAL_RCC_ClockConfig+0xc8>)
 8003d6a:	f00a ff76 	bl	800ec5a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d031      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d02e      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d02b      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d028      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d025      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	d022      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d01f      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b07      	cmp	r3, #7
 8003d9c:	d01c      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d019      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b0a      	cmp	r3, #10
 8003dae:	d013      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b0b      	cmp	r3, #11
 8003db4:	d010      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d00d      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b0d      	cmp	r3, #13
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b0e      	cmp	r3, #14
 8003dc6:	d007      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	d004      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x98>
 8003dce:	f240 3153 	movw	r1, #851	; 0x353
 8003dd2:	480d      	ldr	r0, [pc, #52]	; (8003e08 <HAL_RCC_ClockConfig+0xc8>)
 8003dd4:	f00a ff41 	bl	800ec5a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_ClockConfig+0xcc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d914      	bls.n	8003e10 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HAL_RCC_ClockConfig+0xcc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 020f 	bic.w	r2, r3, #15
 8003dee:	4907      	ldr	r1, [pc, #28]	; (8003e0c <HAL_RCC_ClockConfig+0xcc>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_ClockConfig+0xcc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e2eb      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
 8003e08:	080106f8 	.word	0x080106f8
 8003e0c:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d029      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x130>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	4b9a      	ldr	r3, [pc, #616]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d921      	bls.n	8003e70 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d014      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x11e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d010      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x11e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d00c      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x11e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b60      	cmp	r3, #96	; 0x60
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x11e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d004      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x11e>
 8003e54:	f240 316e 	movw	r1, #878	; 0x36e
 8003e58:	488d      	ldr	r0, [pc, #564]	; (8004090 <HAL_RCC_ClockConfig+0x350>)
 8003e5a:	f00a fefe 	bl	800ec5a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e5e:	4b8b      	ldr	r3, [pc, #556]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	4988      	ldr	r1, [pc, #544]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d029      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x190>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	4b82      	ldr	r3, [pc, #520]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d921      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d014      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d00c      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	2b60      	cmp	r3, #96	; 0x60
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d004      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
 8003eb4:	f44f 715e 	mov.w	r1, #888	; 0x378
 8003eb8:	4875      	ldr	r0, [pc, #468]	; (8004090 <HAL_RCC_ClockConfig+0x350>)
 8003eba:	f00a fece 	bl	800ec5a <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ebe:	4b73      	ldr	r3, [pc, #460]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4970      	ldr	r1, [pc, #448]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02d      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x1f8>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	4b6a      	ldr	r3, [pc, #424]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d925      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d018      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x1e6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d013      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x1e6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f06:	d00e      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x1e6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f10:	d009      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x1e6>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f1a:	d004      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x1e6>
 8003f1c:	f240 3182 	movw	r1, #898	; 0x382
 8003f20:	485b      	ldr	r0, [pc, #364]	; (8004090 <HAL_RCC_ClockConfig+0x350>)
 8003f22:	f00a fe9a 	bl	800ec5a <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f26:	4b59      	ldr	r3, [pc, #356]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	4956      	ldr	r1, [pc, #344]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d029      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x258>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	4b50      	ldr	r3, [pc, #320]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d921      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d014      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x246>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d010      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x246>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	2b50      	cmp	r3, #80	; 0x50
 8003f6a:	d00c      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x246>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b60      	cmp	r3, #96	; 0x60
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x246>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	2b70      	cmp	r3, #112	; 0x70
 8003f7a:	d004      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x246>
 8003f7c:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8003f80:	4843      	ldr	r0, [pc, #268]	; (8004090 <HAL_RCC_ClockConfig+0x350>)
 8003f82:	f00a fe6a 	bl	800ec5a <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f86:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	493e      	ldr	r1, [pc, #248]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d039      	beq.n	8004018 <HAL_RCC_ClockConfig+0x2d8>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d931      	bls.n	8004018 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d024      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d01c      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b0a      	cmp	r3, #10
 8003fd2:	d018      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b0b      	cmp	r3, #11
 8003fda:	d014      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d010      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b0d      	cmp	r3, #13
 8003fea:	d00c      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b0e      	cmp	r3, #14
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b0f      	cmp	r3, #15
 8003ffa:	d004      	beq.n	8004006 <HAL_RCC_ClockConfig+0x2c6>
 8003ffc:	f240 3197 	movw	r1, #919	; 0x397
 8004000:	4823      	ldr	r0, [pc, #140]	; (8004090 <HAL_RCC_ClockConfig+0x350>)
 8004002:	f00a fe2a 	bl	800ec5a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f023 020f 	bic.w	r2, r3, #15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	491e      	ldr	r1, [pc, #120]	; (800408c <HAL_RCC_ClockConfig+0x34c>)
 8004014:	4313      	orrs	r3, r2
 8004016:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a2 	beq.w	800416a <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d032      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004036:	d02d      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004040:	d028      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800404a:	d023      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004054:	d01e      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800405e:	d019      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004068:	d014      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004072:	d00f      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800407c:	d00a      	beq.n	8004094 <HAL_RCC_ClockConfig+0x354>
 800407e:	f240 319f 	movw	r1, #927	; 0x39f
 8004082:	4803      	ldr	r0, [pc, #12]	; (8004090 <HAL_RCC_ClockConfig+0x350>)
 8004084:	f00a fde9 	bl	800ec5a <assert_failed>
 8004088:	e004      	b.n	8004094 <HAL_RCC_ClockConfig+0x354>
 800408a:	bf00      	nop
 800408c:	58024400 	.word	0x58024400
 8004090:	080106f8 	.word	0x080106f8
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d010      	beq.n	80040be <HAL_RCC_ClockConfig+0x37e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <HAL_RCC_ClockConfig+0x37e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x37e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d004      	beq.n	80040be <HAL_RCC_ClockConfig+0x37e>
 80040b4:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80040b8:	4858      	ldr	r0, [pc, #352]	; (800421c <HAL_RCC_ClockConfig+0x4dc>)
 80040ba:	f00a fdce 	bl	800ec5a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040be:	4b58      	ldr	r3, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4955      	ldr	r1, [pc, #340]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040d8:	4b51      	ldr	r3, [pc, #324]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d121      	bne.n	8004128 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e17b      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f0:	4b4b      	ldr	r3, [pc, #300]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d115      	bne.n	8004128 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e16f      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004108:	4b45      	ldr	r3, [pc, #276]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e163      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004118:	4b41      	ldr	r3, [pc, #260]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e15b      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004128:	4b3d      	ldr	r3, [pc, #244]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	493a      	ldr	r1, [pc, #232]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fc fc8b 	bl	8000a54 <HAL_GetTick>
 800413e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004140:	e00a      	b.n	8004158 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004142:	f7fc fc87 	bl	8000a54 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e143      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004158:	4b31      	ldr	r3, [pc, #196]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	429a      	cmp	r2, r3
 8004168:	d1eb      	bne.n	8004142 <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d039      	beq.n	80041ea <HAL_RCC_ClockConfig+0x4aa>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	4b29      	ldr	r3, [pc, #164]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	429a      	cmp	r2, r3
 8004184:	d231      	bcs.n	80041ea <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d024      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b08      	cmp	r3, #8
 8004194:	d020      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b09      	cmp	r3, #9
 800419c:	d01c      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b0a      	cmp	r3, #10
 80041a4:	d018      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b0b      	cmp	r3, #11
 80041ac:	d014      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b0c      	cmp	r3, #12
 80041b4:	d010      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b0d      	cmp	r3, #13
 80041bc:	d00c      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b0e      	cmp	r3, #14
 80041c4:	d008      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d004      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x498>
 80041ce:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80041d2:	4812      	ldr	r0, [pc, #72]	; (800421c <HAL_RCC_ClockConfig+0x4dc>)
 80041d4:	f00a fd41 	bl	800ec5a <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f023 020f 	bic.w	r2, r3, #15
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x4e0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <HAL_RCC_ClockConfig+0x4e4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d217      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x4e4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	4908      	ldr	r1, [pc, #32]	; (8004224 <HAL_RCC_ClockConfig+0x4e4>)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RCC_ClockConfig+0x4e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d008      	beq.n	8004228 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0e2      	b.n	80043e0 <HAL_RCC_ClockConfig+0x6a0>
 800421a:	bf00      	nop
 800421c:	080106f8 	.word	0x080106f8
 8004220:	58024400 	.word	0x58024400
 8004224:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d029      	beq.n	8004288 <HAL_RCC_ClockConfig+0x548>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004240:	429a      	cmp	r2, r3
 8004242:	d221      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d014      	beq.n	8004276 <HAL_RCC_ClockConfig+0x536>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d010      	beq.n	8004276 <HAL_RCC_ClockConfig+0x536>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b50      	cmp	r3, #80	; 0x50
 800425a:	d00c      	beq.n	8004276 <HAL_RCC_ClockConfig+0x536>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b60      	cmp	r3, #96	; 0x60
 8004262:	d008      	beq.n	8004276 <HAL_RCC_ClockConfig+0x536>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b70      	cmp	r3, #112	; 0x70
 800426a:	d004      	beq.n	8004276 <HAL_RCC_ClockConfig+0x536>
 800426c:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8004270:	485e      	ldr	r0, [pc, #376]	; (80043ec <HAL_RCC_ClockConfig+0x6ac>)
 8004272:	f00a fcf2 	bl	800ec5a <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004276:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	4959      	ldr	r1, [pc, #356]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d029      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x5a8>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d221      	bcs.n	80042e8 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d014      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x596>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d010      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x596>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	2b50      	cmp	r3, #80	; 0x50
 80042ba:	d00c      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x596>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	2b60      	cmp	r3, #96	; 0x60
 80042c2:	d008      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x596>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	2b70      	cmp	r3, #112	; 0x70
 80042ca:	d004      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x596>
 80042cc:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80042d0:	4846      	ldr	r0, [pc, #280]	; (80043ec <HAL_RCC_ClockConfig+0x6ac>)
 80042d2:	f00a fcc2 	bl	800ec5a <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042d6:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4941      	ldr	r1, [pc, #260]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02d      	beq.n	8004350 <HAL_RCC_ClockConfig+0x610>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004300:	429a      	cmp	r2, r3
 8004302:	d225      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d018      	beq.n	800433e <HAL_RCC_ClockConfig+0x5fe>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004314:	d013      	beq.n	800433e <HAL_RCC_ClockConfig+0x5fe>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800431e:	d00e      	beq.n	800433e <HAL_RCC_ClockConfig+0x5fe>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004328:	d009      	beq.n	800433e <HAL_RCC_ClockConfig+0x5fe>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004332:	d004      	beq.n	800433e <HAL_RCC_ClockConfig+0x5fe>
 8004334:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8004338:	482c      	ldr	r0, [pc, #176]	; (80043ec <HAL_RCC_ClockConfig+0x6ac>)
 800433a:	f00a fc8e 	bl	800ec5a <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	4927      	ldr	r1, [pc, #156]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d029      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x670>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004368:	429a      	cmp	r2, r3
 800436a:	d221      	bcs.n	80043b0 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d014      	beq.n	800439e <HAL_RCC_ClockConfig+0x65e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x65e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	2b50      	cmp	r3, #80	; 0x50
 8004382:	d00c      	beq.n	800439e <HAL_RCC_ClockConfig+0x65e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b60      	cmp	r3, #96	; 0x60
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x65e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2b70      	cmp	r3, #112	; 0x70
 8004392:	d004      	beq.n	800439e <HAL_RCC_ClockConfig+0x65e>
 8004394:	f240 4112 	movw	r1, #1042	; 0x412
 8004398:	4814      	ldr	r0, [pc, #80]	; (80043ec <HAL_RCC_ClockConfig+0x6ac>)
 800439a:	f00a fc5e 	bl	800ec5a <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	490f      	ldr	r1, [pc, #60]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043b0:	f000 f824 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80043b4:	4601      	mov	r1, r0
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <HAL_RCC_ClockConfig+0x6a8>)
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x6b0>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa21 f303 	lsr.w	r3, r1, r3
 80043cc:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x6b4>)
 80043ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x6b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc faf3 	bl	80009c0 <HAL_InitTick>
 80043da:	4603      	mov	r3, r0
 80043dc:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80043de:	7afb      	ldrb	r3, [r7, #11]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	58024400 	.word	0x58024400
 80043ec:	080106f8 	.word	0x080106f8
 80043f0:	080119a8 	.word	0x080119a8
 80043f4:	2400002c 	.word	0x2400002c
 80043f8:	24000000 	.word	0x24000000

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004402:	4baf      	ldr	r3, [pc, #700]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800440a:	2b18      	cmp	r3, #24
 800440c:	f200 814e 	bhi.w	80046ac <HAL_RCC_GetSysClockFreq+0x2b0>
 8004410:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800447d 	.word	0x0800447d
 800441c:	080046ad 	.word	0x080046ad
 8004420:	080046ad 	.word	0x080046ad
 8004424:	080046ad 	.word	0x080046ad
 8004428:	080046ad 	.word	0x080046ad
 800442c:	080046ad 	.word	0x080046ad
 8004430:	080046ad 	.word	0x080046ad
 8004434:	080046ad 	.word	0x080046ad
 8004438:	080044a3 	.word	0x080044a3
 800443c:	080046ad 	.word	0x080046ad
 8004440:	080046ad 	.word	0x080046ad
 8004444:	080046ad 	.word	0x080046ad
 8004448:	080046ad 	.word	0x080046ad
 800444c:	080046ad 	.word	0x080046ad
 8004450:	080046ad 	.word	0x080046ad
 8004454:	080046ad 	.word	0x080046ad
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080046ad 	.word	0x080046ad
 8004460:	080046ad 	.word	0x080046ad
 8004464:	080046ad 	.word	0x080046ad
 8004468:	080046ad 	.word	0x080046ad
 800446c:	080046ad 	.word	0x080046ad
 8004470:	080046ad 	.word	0x080046ad
 8004474:	080046ad 	.word	0x080046ad
 8004478:	080044af 	.word	0x080044af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800447c:	4b90      	ldr	r3, [pc, #576]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004488:	4b8d      	ldr	r3, [pc, #564]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	08db      	lsrs	r3, r3, #3
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	4a8c      	ldr	r2, [pc, #560]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800449a:	e10a      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800449c:	4b89      	ldr	r3, [pc, #548]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800449e:	61bb      	str	r3, [r7, #24]
    break;
 80044a0:	e107      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044a2:	4b89      	ldr	r3, [pc, #548]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80044a4:	61bb      	str	r3, [r7, #24]
    break;
 80044a6:	e104      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044a8:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80044aa:	61bb      	str	r3, [r7, #24]
    break;
 80044ac:	e101      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044ae:	4b84      	ldr	r3, [pc, #528]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80044b8:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044c4:	4b7e      	ldr	r3, [pc, #504]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80044ce:	4b7c      	ldr	r3, [pc, #496]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80da 	beq.w	80046a6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d05a      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x1b2>
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d302      	bcc.n	8004502 <HAL_RCC_GetSysClockFreq+0x106>
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d078      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004500:	e099      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004502:	4b6f      	ldr	r3, [pc, #444]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02d      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800450e:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	4a6a      	ldr	r2, [pc, #424]	; (80046c4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	ee07 3a90 	vmov	s15, r3
 8004530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004538:	4b61      	ldr	r3, [pc, #388]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004548:	ed97 6a02 	vldr	s12, [r7, #8]
 800454c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800455c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004564:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004568:	e087      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004574:	eddf 6a57 	vldr	s13, [pc, #348]	; 80046d4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004590:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ac:	e065      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80046d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80045bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c0:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80045d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f0:	e043      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80046dc <HAL_RCC_GetSysClockFreq+0x2e0>
 8004600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004604:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004614:	ed97 6a02 	vldr	s12, [r7, #8]
 8004618:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800461c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004634:	e021      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	eddf 6a25 	vldr	s13, [pc, #148]	; 80046d8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004658:	ed97 6a02 	vldr	s12, [r7, #8]
 800465c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80046d0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004678:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	0a5b      	lsrs	r3, r3, #9
 8004680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004684:	3301      	adds	r3, #1
 8004686:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004692:	edd7 6a07 	vldr	s13, [r7, #28]
 8004696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469e:	ee17 3a90 	vmov	r3, s15
 80046a2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80046a4:	e005      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
    break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046ae:	61bb      	str	r3, [r7, #24]
    break;
 80046b0:	bf00      	nop
  }

  return sysclockfreq;
 80046b2:	69bb      	ldr	r3, [r7, #24]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3724      	adds	r7, #36	; 0x24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	003d0900 	.word	0x003d0900
 80046cc:	007a1200 	.word	0x007a1200
 80046d0:	46000000 	.word	0x46000000
 80046d4:	4c742400 	.word	0x4c742400
 80046d8:	4a742400 	.word	0x4a742400
 80046dc:	4af42400 	.word	0x4af42400

080046e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046e4:	f001 fc94 	bl	8006010 <HAL_RCCEx_GetD1SysClockFreq>
 80046e8:	4601      	mov	r1, r0
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <HAL_RCC_GetHCLKFreq+0x2c>)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	4a07      	ldr	r2, [pc, #28]	; (8004710 <HAL_RCC_GetHCLKFreq+0x30>)
 80046f4:	5cd3      	ldrb	r3, [r2, r3]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	fa21 f303 	lsr.w	r3, r1, r3
 80046fe:	4a05      	ldr	r2, [pc, #20]	; (8004714 <HAL_RCC_GetHCLKFreq+0x34>)
 8004700:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <HAL_RCC_GetHCLKFreq+0x34>)
 8004704:	681b      	ldr	r3, [r3, #0]
}
 8004706:	4618      	mov	r0, r3
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	58024400 	.word	0x58024400
 8004710:	080119a8 	.word	0x080119a8
 8004714:	24000030 	.word	0x24000030

08004718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800471c:	f7ff ffe0 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004720:	4601      	mov	r1, r0
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	f003 031f 	and.w	r3, r3, #31
 8004734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	58024400 	.word	0x58024400
 8004740:	080119a8 	.word	0x080119a8

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004748:	f7ff ffca 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 800474c:	4601      	mov	r1, r0
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <HAL_RCC_GetPCLK2Freq+0x28>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	58024400 	.word	0x58024400
 800476c:	080119a8 	.word	0x080119a8

08004770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800477c:	2300      	movs	r3, #0
 800477e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d03d      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004794:	d013      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d802      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80047a0:	e01f      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80047a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a6:	d013      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80047a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047ac:	d01c      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80047ae:	e018      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b0:	4baf      	ldr	r3, [pc, #700]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	4aae      	ldr	r2, [pc, #696]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047bc:	e015      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	2102      	movs	r1, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 fc3f 	bl	8006048 <RCCEx_PLL2_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047ce:	e00c      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	2102      	movs	r1, #2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 fd58 	bl	800628c <RCCEx_PLL3_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
      break;
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80047e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047f0:	4b9f      	ldr	r3, [pc, #636]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fc:	499c      	ldr	r1, [pc, #624]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	650b      	str	r3, [r1, #80]	; 0x50
 8004802:	e001      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004804:	7dfb      	ldrb	r3, [r7, #23]
 8004806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d03d      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	2b04      	cmp	r3, #4
 800481a:	d826      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004839 	.word	0x08004839
 8004828:	08004847 	.word	0x08004847
 800482c:	08004859 	.word	0x08004859
 8004830:	08004871 	.word	0x08004871
 8004834:	08004871 	.word	0x08004871
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004838:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4a8c      	ldr	r2, [pc, #560]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800483e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004842:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004844:	e015      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fbfb 	bl	8006048 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004856:	e00c      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3324      	adds	r3, #36	; 0x24
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fd14 	bl	800628c <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004868:	e003      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
      break;
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004878:	4b7d      	ldr	r3, [pc, #500]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	f023 0207 	bic.w	r2, r3, #7
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	497a      	ldr	r1, [pc, #488]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004886:	4313      	orrs	r3, r2
 8004888:	650b      	str	r3, [r1, #80]	; 0x50
 800488a:	e001      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03e      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d01c      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80048a4:	2b80      	cmp	r3, #128	; 0x80
 80048a6:	d804      	bhi.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d00d      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80048b0:	e01e      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80048b2:	2bc0      	cmp	r3, #192	; 0xc0
 80048b4:	d01f      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d01e      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048bc:	e018      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048be:	4b6c      	ldr	r3, [pc, #432]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a6b      	ldr	r2, [pc, #428]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048ca:	e017      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fbb8 	bl	8006048 <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048dc:	e00e      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3324      	adds	r3, #36	; 0x24
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 fcd1 	bl	800628c <RCCEx_PLL3_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048ee:	e005      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
      break;
 80048f4:	e002      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80048fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004902:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004906:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	4958      	ldr	r1, [pc, #352]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004910:	4313      	orrs	r3, r2
 8004912:	650b      	str	r3, [r1, #80]	; 0x50
 8004914:	e001      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004922:	2b00      	cmp	r3, #0
 8004924:	d044      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800492c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004930:	d01f      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004936:	d805      	bhi.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800493c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004940:	d00e      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004942:	e01f      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004944:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004948:	d01f      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800494a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800494e:	d01e      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004950:	e018      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004952:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	4a46      	ldr	r2, [pc, #280]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800495c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800495e:	e017      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fb6e 	bl	8006048 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004970:	e00e      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f001 fc87 	bl	800628c <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004982:	e005      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
      break;
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800498e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004996:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049a4:	4932      	ldr	r1, [pc, #200]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	658b      	str	r3, [r1, #88]	; 0x58
 80049aa:	e001      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
 80049ae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d044      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c6:	d01f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80049c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049cc:	d805      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80049d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d6:	d00e      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80049d8:	e01f      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80049da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049de:	d01f      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e4:	d01e      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80049e6:	e018      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049f4:	e017      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 fb23 	bl	8006048 <RCCEx_PLL2_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a06:	e00e      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3324      	adds	r3, #36	; 0x24
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fc3c 	bl	800628c <RCCEx_PLL3_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a18:	e005      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1e:	e002      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a3a:	490d      	ldr	r1, [pc, #52]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	658b      	str	r3, [r1, #88]	; 0x58
 8004a40:	e001      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d035      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d00c      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d802      	bhi.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01b      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004a62:	e017      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d00c      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004a68:	2b30      	cmp	r3, #48	; 0x30
 8004a6a:	d018      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004a6c:	e012      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004a6e:	bf00      	nop
 8004a70:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a74:	4baf      	ldr	r3, [pc, #700]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	4aae      	ldr	r2, [pc, #696]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a80:	e00e      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	2102      	movs	r1, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 fadd 	bl	8006048 <RCCEx_PLL2_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004a92:	e005      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
      break;
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004aa6:	4ba3      	ldr	r3, [pc, #652]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab2:	49a0      	ldr	r1, [pc, #640]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ab8:	e001      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
 8004abc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d042      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad2:	d01f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad8:	d805      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae2:	d00e      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004ae4:	e01f      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004ae6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aea:	d01f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af0:	d01e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004af2:	e018      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af4:	4b8f      	ldr	r3, [pc, #572]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	4a8e      	ldr	r2, [pc, #568]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b00:	e017      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 fa9d 	bl	8006048 <RCCEx_PLL2_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b12:	e00e      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3324      	adds	r3, #36	; 0x24
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 fbb6 	bl	800628c <RCCEx_PLL3_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b24:	e005      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004b2c:	bf00      	nop
 8004b2e:	e000      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b38:	4b7e      	ldr	r3, [pc, #504]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	497b      	ldr	r1, [pc, #492]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	650b      	str	r3, [r1, #80]	; 0x50
 8004b4a:	e001      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d042      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b64:	d01b      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b6a:	d805      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d022      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b76:	e01b      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004b78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b7c:	d01d      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b82:	d01c      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004b84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b88:	d01b      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004b8a:	e011      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 fa58 	bl	8006048 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004b9c:	e012      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3324      	adds	r3, #36	; 0x24
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fb71 	bl	800628c <RCCEx_PLL3_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bae:	e009      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bca:	4b5a      	ldr	r3, [pc, #360]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd6:	4957      	ldr	r1, [pc, #348]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	650b      	str	r3, [r1, #80]	; 0x50
 8004bdc:	e001      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d044      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf8:	d01b      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfe:	d805      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d022      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c0a:	e01b      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d01d      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c16:	d01c      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c1c:	d01b      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c1e:	e011      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	2101      	movs	r1, #1
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 fa0e 	bl	8006048 <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c30:	e012      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3324      	adds	r3, #36	; 0x24
 8004c36:	2101      	movs	r1, #1
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 fb27 	bl	800628c <RCCEx_PLL3_Config>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c42:	e009      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	75fb      	strb	r3, [r7, #23]
      break;
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e004      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c5e:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c6c:	4931      	ldr	r1, [pc, #196]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	658b      	str	r3, [r1, #88]	; 0x58
 8004c72:	e001      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02d      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c8c:	d005      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c92:	d009      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004c98:	e00f      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c9a:	4b26      	ldr	r3, [pc, #152]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ca6:	e00c      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	2101      	movs	r1, #1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f001 f9ca 	bl	8006048 <RCCEx_PLL2_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cb8:	e003      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc2:	7dfb      	ldrb	r3, [r7, #23]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cc8:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd4:	4917      	ldr	r1, [pc, #92]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	650b      	str	r3, [r1, #80]	; 0x50
 8004cda:	e001      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d037      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d81b      	bhi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d39 	.word	0x08004d39
 8004d00:	08004d0d 	.word	0x08004d0d
 8004d04:	08004d1b 	.word	0x08004d1b
 8004d08:	08004d39 	.word	0x08004d39
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d18:	e00f      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	2102      	movs	r1, #2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 f991 	bl	8006048 <RCCEx_PLL2_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d2a:	e006      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
      break;
 8004d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d44:	f023 0203 	bic.w	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4c:	4901      	ldr	r1, [pc, #4]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d52:	e003      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8004d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 829b 	beq.w	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d74:	f000 81a9 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d82:	f000 81a2 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d8c:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8004d90:	f000 819b 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d9a:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8004d9e:	f000 8194 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004da8:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8004dac:	f000 818d 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004db6:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8004dba:	f000 8186 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dc4:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8004dc8:	f000 817f 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dd2:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8004dd6:	f000 8178 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004de0:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8004de4:	f000 8171 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dee:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8004df2:	f000 816a 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dfc:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8004e00:	f000 8163 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e0a:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8004e0e:	f000 815c 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e18:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8004e1c:	f000 8155 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e26:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8004e2a:	f000 814e 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e34:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8004e38:	f000 8147 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e42:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8004e46:	f000 8140 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e50:	4aa8      	ldr	r2, [pc, #672]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	f000 8139 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e5e:	4aa6      	ldr	r2, [pc, #664]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	f000 8132 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e6c:	4aa3      	ldr	r2, [pc, #652]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	f000 812b 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e7a:	4aa1      	ldr	r2, [pc, #644]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	f000 8124 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e88:	4a9e      	ldr	r2, [pc, #632]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	f000 811d 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e96:	4a9c      	ldr	r2, [pc, #624]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	f000 8116 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ea4:	4a99      	ldr	r2, [pc, #612]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	f000 810f 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eb2:	4a97      	ldr	r2, [pc, #604]	; (8005110 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	f000 8108 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ec0:	4a94      	ldr	r2, [pc, #592]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f000 8101 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ece:	4a92      	ldr	r2, [pc, #584]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	f000 80fa 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004edc:	4a8f      	ldr	r2, [pc, #572]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f000 80f3 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eea:	4a8d      	ldr	r2, [pc, #564]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	f000 80ec 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ef8:	4a8a      	ldr	r2, [pc, #552]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	f000 80e5 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f06:	4a88      	ldr	r2, [pc, #544]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	f000 80de 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f14:	4a85      	ldr	r2, [pc, #532]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	f000 80d7 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f22:	4a83      	ldr	r2, [pc, #524]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	f000 80d0 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f30:	4a80      	ldr	r2, [pc, #512]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	f000 80c9 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f3e:	4a7e      	ldr	r2, [pc, #504]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	f000 80c2 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f4c:	4a7b      	ldr	r2, [pc, #492]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	f000 80bb 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f5a:	4a79      	ldr	r2, [pc, #484]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	f000 80b4 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f68:	4a76      	ldr	r2, [pc, #472]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	f000 80ad 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f76:	4a74      	ldr	r2, [pc, #464]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	f000 80a6 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f84:	4a71      	ldr	r2, [pc, #452]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f000 809f 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f92:	4a6f      	ldr	r2, [pc, #444]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	f000 8098 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fa0:	4a6c      	ldr	r2, [pc, #432]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	f000 8091 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fae:	4a6a      	ldr	r2, [pc, #424]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	f000 808a 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fbc:	4a67      	ldr	r2, [pc, #412]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f000 8083 	beq.w	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fca:	4a65      	ldr	r2, [pc, #404]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d07c      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fd6:	4a63      	ldr	r2, [pc, #396]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d076      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fe2:	4a61      	ldr	r2, [pc, #388]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d070      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fee:	4a5f      	ldr	r2, [pc, #380]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d06a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ffa:	4a5d      	ldr	r2, [pc, #372]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d064      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005006:	4a5b      	ldr	r2, [pc, #364]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d05e      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005012:	4a59      	ldr	r2, [pc, #356]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d058      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800501e:	4a57      	ldr	r2, [pc, #348]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d052      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800502a:	4a55      	ldr	r2, [pc, #340]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d04c      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005036:	4a53      	ldr	r2, [pc, #332]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d046      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005042:	4a51      	ldr	r2, [pc, #324]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d040      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800504e:	4a4f      	ldr	r2, [pc, #316]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d03a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800505a:	4a4d      	ldr	r2, [pc, #308]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d034      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005066:	4a4b      	ldr	r2, [pc, #300]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d02e      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005072:	4a49      	ldr	r2, [pc, #292]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d028      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800507e:	4a47      	ldr	r2, [pc, #284]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800508a:	4a45      	ldr	r2, [pc, #276]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01c      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005096:	4a43      	ldr	r2, [pc, #268]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d016      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050a2:	4a41      	ldr	r2, [pc, #260]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d010      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ae:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ba:	4a3d      	ldr	r2, [pc, #244]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80050c0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80050c4:	483b      	ldr	r0, [pc, #236]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80050c6:	f009 fdc8 	bl	800ec5a <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ca:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a3a      	ldr	r2, [pc, #232]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d6:	f7fb fcbd 	bl	8000a54 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050dc:	e06e      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050de:	f7fb fcb9 	bl	8000a54 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b64      	cmp	r3, #100	; 0x64
 80050ea:	d967      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	75fb      	strb	r3, [r7, #23]
        break;
 80050f0:	e06a      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 80050f2:	bf00      	nop
 80050f4:	00010300 	.word	0x00010300
 80050f8:	00011300 	.word	0x00011300
 80050fc:	00012300 	.word	0x00012300
 8005100:	00013300 	.word	0x00013300
 8005104:	00014300 	.word	0x00014300
 8005108:	00015300 	.word	0x00015300
 800510c:	00016300 	.word	0x00016300
 8005110:	00017300 	.word	0x00017300
 8005114:	00018300 	.word	0x00018300
 8005118:	00019300 	.word	0x00019300
 800511c:	0001a300 	.word	0x0001a300
 8005120:	0001b300 	.word	0x0001b300
 8005124:	0001c300 	.word	0x0001c300
 8005128:	0001d300 	.word	0x0001d300
 800512c:	0001e300 	.word	0x0001e300
 8005130:	0001f300 	.word	0x0001f300
 8005134:	00020300 	.word	0x00020300
 8005138:	00021300 	.word	0x00021300
 800513c:	00022300 	.word	0x00022300
 8005140:	00023300 	.word	0x00023300
 8005144:	00024300 	.word	0x00024300
 8005148:	00025300 	.word	0x00025300
 800514c:	00026300 	.word	0x00026300
 8005150:	00027300 	.word	0x00027300
 8005154:	00028300 	.word	0x00028300
 8005158:	00029300 	.word	0x00029300
 800515c:	0002a300 	.word	0x0002a300
 8005160:	0002b300 	.word	0x0002b300
 8005164:	0002c300 	.word	0x0002c300
 8005168:	0002d300 	.word	0x0002d300
 800516c:	0002e300 	.word	0x0002e300
 8005170:	0002f300 	.word	0x0002f300
 8005174:	00030300 	.word	0x00030300
 8005178:	00031300 	.word	0x00031300
 800517c:	00032300 	.word	0x00032300
 8005180:	00033300 	.word	0x00033300
 8005184:	00034300 	.word	0x00034300
 8005188:	00035300 	.word	0x00035300
 800518c:	00036300 	.word	0x00036300
 8005190:	00037300 	.word	0x00037300
 8005194:	00038300 	.word	0x00038300
 8005198:	00039300 	.word	0x00039300
 800519c:	0003a300 	.word	0x0003a300
 80051a0:	0003b300 	.word	0x0003b300
 80051a4:	0003c300 	.word	0x0003c300
 80051a8:	0003d300 	.word	0x0003d300
 80051ac:	0003e300 	.word	0x0003e300
 80051b0:	0003f300 	.word	0x0003f300
 80051b4:	08010730 	.word	0x08010730
 80051b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051bc:	4bb9      	ldr	r3, [pc, #740]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d08a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d166      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051ce:	4bb6      	ldr	r3, [pc, #728]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051d8:	4053      	eors	r3, r2
 80051da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e2:	4bb1      	ldr	r3, [pc, #708]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ec:	4bae      	ldr	r3, [pc, #696]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	4aad      	ldr	r2, [pc, #692]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051f8:	4bab      	ldr	r3, [pc, #684]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fc:	4aaa      	ldr	r2, [pc, #680]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005202:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005204:	4aa8      	ldr	r2, [pc, #672]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005214:	d115      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005216:	f7fb fc1d 	bl	8000a54 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800521c:	e00b      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521e:	f7fb fc19 	bl	8000a54 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f241 3288 	movw	r2, #5000	; 0x1388
 800522c:	4293      	cmp	r3, r2
 800522e:	d902      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	75fb      	strb	r3, [r7, #23]
            break;
 8005234:	e005      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005236:	4b9c      	ldr	r3, [pc, #624]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0ed      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8005242:	7dfb      	ldrb	r3, [r7, #23]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d126      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005256:	d10d      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8005258:	4b93      	ldr	r3, [pc, #588]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005266:	0919      	lsrs	r1, r3, #4
 8005268:	4b90      	ldr	r3, [pc, #576]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800526a:	400b      	ands	r3, r1
 800526c:	498e      	ldr	r1, [pc, #568]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800526e:	4313      	orrs	r3, r2
 8005270:	610b      	str	r3, [r1, #16]
 8005272:	e005      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005274:	4b8c      	ldr	r3, [pc, #560]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	4a8b      	ldr	r2, [pc, #556]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800527a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800527e:	6113      	str	r3, [r2, #16]
 8005280:	4b89      	ldr	r3, [pc, #548]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800528a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528e:	4986      	ldr	r1, [pc, #536]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005290:	4313      	orrs	r3, r2
 8005292:	670b      	str	r3, [r1, #112]	; 0x70
 8005294:	e004      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	75bb      	strb	r3, [r7, #22]
 800529a:	e001      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d07e      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052b0:	2b28      	cmp	r3, #40	; 0x28
 80052b2:	d867      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	0800538b 	.word	0x0800538b
 80052c0:	08005385 	.word	0x08005385
 80052c4:	08005385 	.word	0x08005385
 80052c8:	08005385 	.word	0x08005385
 80052cc:	08005385 	.word	0x08005385
 80052d0:	08005385 	.word	0x08005385
 80052d4:	08005385 	.word	0x08005385
 80052d8:	08005385 	.word	0x08005385
 80052dc:	08005361 	.word	0x08005361
 80052e0:	08005385 	.word	0x08005385
 80052e4:	08005385 	.word	0x08005385
 80052e8:	08005385 	.word	0x08005385
 80052ec:	08005385 	.word	0x08005385
 80052f0:	08005385 	.word	0x08005385
 80052f4:	08005385 	.word	0x08005385
 80052f8:	08005385 	.word	0x08005385
 80052fc:	08005373 	.word	0x08005373
 8005300:	08005385 	.word	0x08005385
 8005304:	08005385 	.word	0x08005385
 8005308:	08005385 	.word	0x08005385
 800530c:	08005385 	.word	0x08005385
 8005310:	08005385 	.word	0x08005385
 8005314:	08005385 	.word	0x08005385
 8005318:	08005385 	.word	0x08005385
 800531c:	0800538b 	.word	0x0800538b
 8005320:	08005385 	.word	0x08005385
 8005324:	08005385 	.word	0x08005385
 8005328:	08005385 	.word	0x08005385
 800532c:	08005385 	.word	0x08005385
 8005330:	08005385 	.word	0x08005385
 8005334:	08005385 	.word	0x08005385
 8005338:	08005385 	.word	0x08005385
 800533c:	0800538b 	.word	0x0800538b
 8005340:	08005385 	.word	0x08005385
 8005344:	08005385 	.word	0x08005385
 8005348:	08005385 	.word	0x08005385
 800534c:	08005385 	.word	0x08005385
 8005350:	08005385 	.word	0x08005385
 8005354:	08005385 	.word	0x08005385
 8005358:	08005385 	.word	0x08005385
 800535c:	0800538b 	.word	0x0800538b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fe6e 	bl	8006048 <RCCEx_PLL2_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005370:	e00c      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3324      	adds	r3, #36	; 0x24
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f000 ff87 	bl	800628c <RCCEx_PLL3_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005382:	e003      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
      break;
 8005388:	e000      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800538a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005392:	4b45      	ldr	r3, [pc, #276]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539e:	4942      	ldr	r1, [pc, #264]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	654b      	str	r3, [r1, #84]	; 0x54
 80053a4:	e001      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d037      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d820      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	08005407 	.word	0x08005407
 80053c8:	080053dd 	.word	0x080053dd
 80053cc:	080053ef 	.word	0x080053ef
 80053d0:	08005407 	.word	0x08005407
 80053d4:	08005407 	.word	0x08005407
 80053d8:	08005407 	.word	0x08005407
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fe30 	bl	8006048 <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80053ec:	e00c      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3324      	adds	r3, #36	; 0x24
 80053f2:	2101      	movs	r1, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 ff49 	bl	800628c <RCCEx_PLL3_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80053fe:	e003      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8005406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800540e:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	f023 0207 	bic.w	r2, r3, #7
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541a:	4923      	ldr	r1, [pc, #140]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800541c:	4313      	orrs	r3, r2
 800541e:	654b      	str	r3, [r1, #84]	; 0x54
 8005420:	e001      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d040      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005438:	2b05      	cmp	r3, #5
 800543a:	d821      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005487 	.word	0x08005487
 8005448:	0800545d 	.word	0x0800545d
 800544c:	0800546f 	.word	0x0800546f
 8005450:	08005487 	.word	0x08005487
 8005454:	08005487 	.word	0x08005487
 8005458:	08005487 	.word	0x08005487
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fdf0 	bl	8006048 <RCCEx_PLL2_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800546c:	e00c      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3324      	adds	r3, #36	; 0x24
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f000 ff09 	bl	800628c <RCCEx_PLL3_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800547e:	e003      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
      break;
 8005484:	e000      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005488:	7dfb      	ldrb	r3, [r7, #23]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d110      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005492:	f023 0207 	bic.w	r2, r3, #7
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	4902      	ldr	r1, [pc, #8]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	658b      	str	r3, [r1, #88]	; 0x58
 80054a2:	e007      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054a4:	58024800 	.word	0x58024800
 80054a8:	58024400 	.word	0x58024400
 80054ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d044      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ca:	d01b      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d0:	d805      	bhi.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d022      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80054d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80054dc:	e01b      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d01d      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80054e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e8:	d01c      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80054ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054ee:	d01b      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 80054f0:	e011      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fda5 	bl	8006048 <RCCEx_PLL2_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005502:	e012      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	2102      	movs	r1, #2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 febe 	bl	800628c <RCCEx_PLL3_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005514:	e009      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	e006      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 800551c:	bf00      	nop
 800551e:	e004      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005520:	bf00      	nop
 8005522:	e002      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005524:	bf00      	nop
 8005526:	e000      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005530:	4bb7      	ldr	r3, [pc, #732]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005534:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553e:	49b4      	ldr	r1, [pc, #720]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005540:	4313      	orrs	r3, r2
 8005542:	654b      	str	r3, [r1, #84]	; 0x54
 8005544:	e001      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d044      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800555c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005560:	d01b      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005566:	d805      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d022      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8005572:	e01b      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8005574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005578:	d01d      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xe46>
 800557a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800557e:	d01c      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8005580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005584:	d01b      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8005586:	e011      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fd5a 	bl	8006048 <RCCEx_PLL2_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005598:	e012      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3324      	adds	r3, #36	; 0x24
 800559e:	2102      	movs	r1, #2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fe73 	bl	800628c <RCCEx_PLL3_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80055aa:	e009      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	75fb      	strb	r3, [r7, #23]
      break;
 80055b0:	e006      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80055b2:	bf00      	nop
 80055b4:	e004      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80055b6:	bf00      	nop
 80055b8:	e002      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 80055be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10a      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055c6:	4b92      	ldr	r3, [pc, #584]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055d4:	498e      	ldr	r1, [pc, #568]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	658b      	str	r3, [r1, #88]	; 0x58
 80055da:	e001      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
 80055de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d044      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f6:	d01b      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 80055f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055fc:	d805      	bhi.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d022      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8005608:	e01b      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xed2>
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560e:	d01d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005610:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005614:	d01c      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 8005616:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800561a:	d01b      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 800561c:	e011      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fd0f 	bl	8006048 <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800562e:	e012      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	2102      	movs	r1, #2
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fe28 	bl	800628c <RCCEx_PLL3_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005640:	e009      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
      break;
 8005646:	e006      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005648:	bf00      	nop
 800564a:	e004      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800564c:	bf00      	nop
 800564e:	e002      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005650:	bf00      	nop
 8005652:	e000      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800565c:	4b6c      	ldr	r3, [pc, #432]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800566a:	4969      	ldr	r1, [pc, #420]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	658b      	str	r3, [r1, #88]	; 0x58
 8005670:	e001      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	7dfb      	ldrb	r3, [r7, #23]
 8005674:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d037      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d015      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005698:	d00f      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80056b0:	f240 413a 	movw	r1, #1082	; 0x43a
 80056b4:	4857      	ldr	r0, [pc, #348]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 80056b6:	f009 fad0 	bl	800ec5a <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c4:	d10b      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf6e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3324      	adds	r3, #36	; 0x24
 80056ca:	2102      	movs	r1, #2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fddd 	bl	800628c <RCCEx_PLL3_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        {
          status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	75bb      	strb	r3, [r7, #22]
 80056dc:	e009      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xf82>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056de:	4b4c      	ldr	r3, [pc, #304]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ec:	4948      	ldr	r1, [pc, #288]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d037      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	d015      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005714:	d00f      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800572a:	d004      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800572c:	f240 414f 	movw	r1, #1103	; 0x44f
 8005730:	4838      	ldr	r0, [pc, #224]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x10a4>)
 8005732:	f009 fa92 	bl	800ec5a <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005740:	d10b      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xfea>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3324      	adds	r3, #36	; 0x24
 8005746:	2102      	movs	r1, #2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fd9f 	bl	800628c <RCCEx_PLL3_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      {
        status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75bb      	strb	r3, [r7, #22]
 8005758:	e009      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800575a:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800575c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005768:	4929      	ldr	r1, [pc, #164]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800576a:	4313      	orrs	r3, r2
 800576c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d030      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d00d      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1032>
 8005786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800578a:	d016      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x104a>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d111      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1044>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fc56 	bl	8006048 <RCCEx_PLL2_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057a0:	e00c      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x104c>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3324      	adds	r3, #36	; 0x24
 80057a6:	2102      	movs	r1, #2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fd6f 	bl	800628c <RCCEx_PLL3_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057b2:	e003      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x104c>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	75fb      	strb	r3, [r7, #23]
      break;
 80057b8:	e000      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x104c>
      break;
 80057ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057d0:	490f      	ldr	r1, [pc, #60]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	658b      	str	r3, [r1, #88]	; 0x58
 80057d6:	e001      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d034      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f2:	d011      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80057f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057f8:	d01a      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80057fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fe:	d114      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4a02      	ldr	r2, [pc, #8]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800580c:	e011      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
 800580e:	bf00      	nop
 8005810:	58024400 	.word	0x58024400
 8005814:	08010730 	.word	0x08010730

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	2101      	movs	r1, #1
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fd34 	bl	800628c <RCCEx_PLL3_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005828:	e003      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
      break;
 800582e:	e000      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x10c2>
      break;
 8005830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x10de>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005838:	4b9c      	ldr	r3, [pc, #624]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005846:	4999      	ldr	r1, [pc, #612]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005848:	4313      	orrs	r3, r2
 800584a:	654b      	str	r3, [r1, #84]	; 0x54
 800584c:	e001      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d037      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x115e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586e:	d004      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x110a>
 8005870:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8005874:	488e      	ldr	r0, [pc, #568]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005876:	f009 f9f0 	bl	800ec5a <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005886:	d007      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005888:	e00f      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x113a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	4a87      	ldr	r2, [pc, #540]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005896:	e00b      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3304      	adds	r3, #4
 800589c:	2102      	movs	r1, #2
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fbd2 	bl	8006048 <RCCEx_PLL2_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058a8:	e002      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>

    default:
      ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
      break;
 80058ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x115a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058b6:	4b7d      	ldr	r3, [pc, #500]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c2:	497a      	ldr	r1, [pc, #488]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058c8:	e001      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x115e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3324      	adds	r3, #36	; 0x24
 80058de:	2102      	movs	r1, #2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fcd3 	bl	800628c <RCCEx_PLL3_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
    {
      status=HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d02f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x11ec>
  {

    switch(PeriphClkInit->RngClockSelection)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005904:	d00c      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x11b0>
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d802      	bhi.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x11a2>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d011      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8005910:	e00d      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x11be>
 8005912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005916:	d00f      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591c:	d00e      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x11cc>
 800591e:	e006      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x11be>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005920:	4b62      	ldr	r3, [pc, #392]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a61      	ldr	r2, [pc, #388]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800592c:	e007      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	75fb      	strb	r3, [r7, #23]
      break;
 8005932:	e004      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8005934:	bf00      	nop
 8005936:	e002      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x11ce>
      break;
 800593c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005944:	4b59      	ldr	r3, [pc, #356]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005950:	4956      	ldr	r1, [pc, #344]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	654b      	str	r3, [r1, #84]	; 0x54
 8005956:	e001      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x11ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d016      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005978:	d004      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1214>
 800597a:	f240 5116 	movw	r1, #1302	; 0x516
 800597e:	484c      	ldr	r0, [pc, #304]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005980:	f009 f96b 	bl	800ec5a <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005984:	4b49      	ldr	r3, [pc, #292]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005988:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	4946      	ldr	r1, [pc, #280]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d019      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059b6:	d004      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1252>
 80059b8:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80059bc:	483c      	ldr	r0, [pc, #240]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80059be:	f009 f94c 	bl	800ec5a <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059c2:	4b3a      	ldr	r3, [pc, #232]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059d0:	4936      	ldr	r1, [pc, #216]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059f2:	d004      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x128e>
 80059f4:	f240 512a 	movw	r1, #1322	; 0x52a
 80059f8:	482d      	ldr	r0, [pc, #180]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 80059fa:	f009 f92e 	bl	800ec5a <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059fe:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a0a:	4928      	ldr	r1, [pc, #160]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01d      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a30:	d004      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x12cc>
 8005a32:	f240 5134 	movw	r1, #1332	; 0x534
 8005a36:	481e      	ldr	r0, [pc, #120]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005a38:	f009 f90f 	bl	800ec5a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a46:	6113      	str	r3, [r2, #16]
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a52:	4916      	ldr	r1, [pc, #88]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	da1b      	bge.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a70:	d009      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a7a:	d004      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1316>
 8005a7c:	f240 513e 	movw	r1, #1342	; 0x53e
 8005a80:	480b      	ldr	r0, [pc, #44]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1340>)
 8005a82:	f009 f8ea 	bl	800ec5a <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	4906      	ldr	r1, [pc, #24]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005a98:	7dbb      	ldrb	r3, [r7, #22]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1332>
  {
    return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  }
  return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	08010730 	.word	0x08010730

08005ab4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ab8:	f7fe fe12 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8005abc:	4601      	mov	r1, r0
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	091b      	lsrs	r3, r3, #4
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005aca:	5cd3      	ldrb	r3, [r2, r3]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	58024400 	.word	0x58024400
 8005adc:	080119a8 	.word	0x080119a8

08005ae0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ae8:	4b9d      	ldr	r3, [pc, #628]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8005af2:	4b9b      	ldr	r3, [pc, #620]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	0b1b      	lsrs	r3, r3, #12
 8005af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005afc:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8005afe:	4b98      	ldr	r3, [pc, #608]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b08:	4b95      	ldr	r3, [pc, #596]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0c:	08db      	lsrs	r3, r3, #3
 8005b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 810a 	beq.w	8005d40 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d05a      	beq.n	8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d302      	bcc.n	8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d078      	beq.n	8005c2c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005b3a:	e099      	b.n	8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b3c:	4b88      	ldr	r3, [pc, #544]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d02d      	beq.n	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b48:	4b85      	ldr	r3, [pc, #532]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	08db      	lsrs	r3, r3, #3
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	4a84      	ldr	r2, [pc, #528]	; (8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005b54:	fa22 f303 	lsr.w	r3, r2, r3
 8005b58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b72:	4b7b      	ldr	r3, [pc, #492]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ba2:	e087      	b.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d6c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb6:	4b6a      	ldr	r3, [pc, #424]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005be6:	e065      	b.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfa:	4b59      	ldr	r3, [pc, #356]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c2a:	e043      	b.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3e:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c6e:	e021      	b.n	8005cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c82:	4b37      	ldr	r3, [pc, #220]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005cb4:	4b2a      	ldr	r3, [pc, #168]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	0a5b      	lsrs	r3, r3, #9
 8005cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cda:	ee17 2a90 	vmov	r2, s15
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d08:	ee17 2a90 	vmov	r2, s15
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	0e1b      	lsrs	r3, r3, #24
 8005d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d36:	ee17 2a90 	vmov	r2, s15
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d3e:	e008      	b.n	8005d52 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	609a      	str	r2, [r3, #8]
}
 8005d52:	bf00      	nop
 8005d54:	3724      	adds	r7, #36	; 0x24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	58024400 	.word	0x58024400
 8005d64:	03d09000 	.word	0x03d09000
 8005d68:	46000000 	.word	0x46000000
 8005d6c:	4c742400 	.word	0x4c742400
 8005d70:	4a742400 	.word	0x4a742400
 8005d74:	4af42400 	.word	0x4af42400

08005d78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b089      	sub	sp, #36	; 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d80:	4b9d      	ldr	r3, [pc, #628]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005d8a:	4b9b      	ldr	r3, [pc, #620]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	0d1b      	lsrs	r3, r3, #20
 8005d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d94:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005d96:	4b98      	ldr	r3, [pc, #608]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005da0:	4b95      	ldr	r3, [pc, #596]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	08db      	lsrs	r3, r3, #3
 8005da6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	fb02 f303 	mul.w	r3, r2, r3
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 810a 	beq.w	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d05a      	beq.n	8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d302      	bcc.n	8005dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d078      	beq.n	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005dd2:	e099      	b.n	8005f08 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd4:	4b88      	ldr	r3, [pc, #544]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d02d      	beq.n	8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005de0:	4b85      	ldr	r3, [pc, #532]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	08db      	lsrs	r3, r3, #3
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	4a84      	ldr	r2, [pc, #528]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0a:	4b7b      	ldr	r3, [pc, #492]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e3a:	e087      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e7e:	e065      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e92:	4b59      	ldr	r3, [pc, #356]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ec2:	e043      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800600c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed6:	4b48      	ldr	r3, [pc, #288]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f06:	e021      	b.n	8005f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	0a5b      	lsrs	r3, r3, #9
 8005f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f72:	ee17 2a90 	vmov	r2, s15
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005f7a:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa0:	ee17 2a90 	vmov	r2, s15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005fa8:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	0e1b      	lsrs	r3, r3, #24
 8005fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fce:	ee17 2a90 	vmov	r2, s15
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fd6:	e008      	b.n	8005fea <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	609a      	str	r2, [r3, #8]
}
 8005fea:	bf00      	nop
 8005fec:	3724      	adds	r7, #36	; 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	58024400 	.word	0x58024400
 8005ffc:	03d09000 	.word	0x03d09000
 8006000:	46000000 	.word	0x46000000
 8006004:	4c742400 	.word	0x4c742400
 8006008:	4a742400 	.word	0x4a742400
 800600c:	4af42400 	.word	0x4af42400

08006010 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006014:	f7fe f9f2 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8006018:	4601      	mov	r1, r0
 800601a:	4b08      	ldr	r3, [pc, #32]	; (800603c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	0a1b      	lsrs	r3, r3, #8
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	4a06      	ldr	r2, [pc, #24]	; (8006040 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8006026:	5cd3      	ldrb	r3, [r2, r3]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	fa21 f303 	lsr.w	r3, r1, r3
 8006030:	4a04      	ldr	r2, [pc, #16]	; (8006044 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8006032:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006034:	4b03      	ldr	r3, [pc, #12]	; (8006044 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8006036:	681b      	ldr	r3, [r3, #0]
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	58024400 	.word	0x58024400
 8006040:	080119a8 	.word	0x080119a8
 8006044:	2400002c 	.word	0x2400002c

08006048 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <RCCEx_PLL2_Config+0x1e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b3f      	cmp	r3, #63	; 0x3f
 8006064:	d904      	bls.n	8006070 <RCCEx_PLL2_Config+0x28>
 8006066:	f640 2186 	movw	r1, #2694	; 0xa86
 800606a:	4885      	ldr	r0, [pc, #532]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 800606c:	f008 fdf5 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d904      	bls.n	8006082 <RCCEx_PLL2_Config+0x3a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d904      	bls.n	800608c <RCCEx_PLL2_Config+0x44>
 8006082:	f640 2187 	movw	r1, #2695	; 0xa87
 8006086:	487e      	ldr	r0, [pc, #504]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 8006088:	f008 fde7 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <RCCEx_PLL2_Config+0x54>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d904      	bls.n	80060a6 <RCCEx_PLL2_Config+0x5e>
 800609c:	f640 2188 	movw	r1, #2696	; 0xa88
 80060a0:	4877      	ldr	r0, [pc, #476]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 80060a2:	f008 fdda 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <RCCEx_PLL2_Config+0x6e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b80      	cmp	r3, #128	; 0x80
 80060b4:	d904      	bls.n	80060c0 <RCCEx_PLL2_Config+0x78>
 80060b6:	f640 2189 	movw	r1, #2697	; 0xa89
 80060ba:	4871      	ldr	r0, [pc, #452]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 80060bc:	f008 fdcd 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <RCCEx_PLL2_Config+0x88>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2b80      	cmp	r3, #128	; 0x80
 80060ce:	d904      	bls.n	80060da <RCCEx_PLL2_Config+0x92>
 80060d0:	f640 218a 	movw	r1, #2698	; 0xa8a
 80060d4:	486a      	ldr	r0, [pc, #424]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 80060d6:	f008 fdc0 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <RCCEx_PLL2_Config+0xbc>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d00c      	beq.n	8006104 <RCCEx_PLL2_Config+0xbc>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d008      	beq.n	8006104 <RCCEx_PLL2_Config+0xbc>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	2bc0      	cmp	r3, #192	; 0xc0
 80060f8:	d004      	beq.n	8006104 <RCCEx_PLL2_Config+0xbc>
 80060fa:	f640 218b 	movw	r1, #2699	; 0xa8b
 80060fe:	4860      	ldr	r0, [pc, #384]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 8006100:	f008 fdab 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <RCCEx_PLL2_Config+0xd6>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	2b20      	cmp	r3, #32
 8006112:	d004      	beq.n	800611e <RCCEx_PLL2_Config+0xd6>
 8006114:	f640 218c 	movw	r1, #2700	; 0xa8c
 8006118:	4859      	ldr	r0, [pc, #356]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 800611a:	f008 fd9e 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006126:	d304      	bcc.n	8006132 <RCCEx_PLL2_Config+0xea>
 8006128:	f640 218d 	movw	r1, #2701	; 0xa8d
 800612c:	4854      	ldr	r0, [pc, #336]	; (8006280 <RCCEx_PLL2_Config+0x238>)
 800612e:	f008 fd94 	bl	800ec5a <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006132:	4b54      	ldr	r3, [pc, #336]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b03      	cmp	r3, #3
 800613c:	d101      	bne.n	8006142 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e099      	b.n	8006276 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006142:	4b50      	ldr	r3, [pc, #320]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4f      	ldr	r2, [pc, #316]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006148:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800614c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800614e:	f7fa fc81 	bl	8000a54 <HAL_GetTick>
 8006152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006154:	e008      	b.n	8006168 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006156:	f7fa fc7d 	bl	8000a54 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e086      	b.n	8006276 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006168:	4b46      	ldr	r3, [pc, #280]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f0      	bne.n	8006156 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006174:	4b43      	ldr	r3, [pc, #268]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	031b      	lsls	r3, r3, #12
 8006182:	4940      	ldr	r1, [pc, #256]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006184:	4313      	orrs	r3, r2
 8006186:	628b      	str	r3, [r1, #40]	; 0x28
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	3b01      	subs	r3, #1
 800618e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	3b01      	subs	r3, #1
 8006198:	025b      	lsls	r3, r3, #9
 800619a:	b29b      	uxth	r3, r3
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061b8:	4932      	ldr	r1, [pc, #200]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061be:	4b31      	ldr	r3, [pc, #196]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	492e      	ldr	r1, [pc, #184]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061d0:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f023 0220 	bic.w	r2, r3, #32
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	4929      	ldr	r1, [pc, #164]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061e2:	4b28      	ldr	r3, [pc, #160]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a27      	ldr	r2, [pc, #156]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061ee:	4b25      	ldr	r3, [pc, #148]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061f2:	4b25      	ldr	r3, [pc, #148]	; (8006288 <RCCEx_PLL2_Config+0x240>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	69d2      	ldr	r2, [r2, #28]
 80061fa:	00d2      	lsls	r2, r2, #3
 80061fc:	4921      	ldr	r1, [pc, #132]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006202:	4b20      	ldr	r3, [pc, #128]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006208:	f043 0310 	orr.w	r3, r3, #16
 800620c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 800621a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006220:	e00f      	b.n	8006242 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d106      	bne.n	8006236 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006228:	4b16      	ldr	r3, [pc, #88]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	4a15      	ldr	r2, [pc, #84]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 800622e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006234:	e005      	b.n	8006242 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 800623c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0f      	ldr	r2, [pc, #60]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 8006248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800624c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800624e:	f7fa fc01 	bl	8000a54 <HAL_GetTick>
 8006252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006254:	e008      	b.n	8006268 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006256:	f7fa fbfd 	bl	8000a54 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e006      	b.n	8006276 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <RCCEx_PLL2_Config+0x23c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	08010730 	.word	0x08010730
 8006284:	58024400 	.word	0x58024400
 8006288:	ffff0007 	.word	0xffff0007

0800628c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <RCCEx_PLL3_Config+0x1e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b3f      	cmp	r3, #63	; 0x3f
 80062a8:	d904      	bls.n	80062b4 <RCCEx_PLL3_Config+0x28>
 80062aa:	f640 21ee 	movw	r1, #2798	; 0xaee
 80062ae:	4887      	ldr	r0, [pc, #540]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 80062b0:	f008 fcd3 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d904      	bls.n	80062c6 <RCCEx_PLL3_Config+0x3a>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c4:	d904      	bls.n	80062d0 <RCCEx_PLL3_Config+0x44>
 80062c6:	f640 21ef 	movw	r1, #2799	; 0xaef
 80062ca:	4880      	ldr	r0, [pc, #512]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 80062cc:	f008 fcc5 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <RCCEx_PLL3_Config+0x54>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d904      	bls.n	80062ea <RCCEx_PLL3_Config+0x5e>
 80062e0:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80062e4:	4879      	ldr	r0, [pc, #484]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 80062e6:	f008 fcb8 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <RCCEx_PLL3_Config+0x6e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b80      	cmp	r3, #128	; 0x80
 80062f8:	d904      	bls.n	8006304 <RCCEx_PLL3_Config+0x78>
 80062fa:	f640 21f1 	movw	r1, #2801	; 0xaf1
 80062fe:	4873      	ldr	r0, [pc, #460]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 8006300:	f008 fcab 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <RCCEx_PLL3_Config+0x88>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b80      	cmp	r3, #128	; 0x80
 8006312:	d904      	bls.n	800631e <RCCEx_PLL3_Config+0x92>
 8006314:	f640 21f2 	movw	r1, #2802	; 0xaf2
 8006318:	486c      	ldr	r0, [pc, #432]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 800631a:	f008 fc9e 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d013      	beq.n	800634e <RCCEx_PLL3_Config+0xc2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632e:	d00e      	beq.n	800634e <RCCEx_PLL3_Config+0xc2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006338:	d009      	beq.n	800634e <RCCEx_PLL3_Config+0xc2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006342:	d004      	beq.n	800634e <RCCEx_PLL3_Config+0xc2>
 8006344:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8006348:	4860      	ldr	r0, [pc, #384]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 800634a:	f008 fc86 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <RCCEx_PLL3_Config+0xde>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635e:	d004      	beq.n	800636a <RCCEx_PLL3_Config+0xde>
 8006360:	f640 21f4 	movw	r1, #2804	; 0xaf4
 8006364:	4859      	ldr	r0, [pc, #356]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 8006366:	f008 fc78 	bl	800ec5a <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006372:	d304      	bcc.n	800637e <RCCEx_PLL3_Config+0xf2>
 8006374:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8006378:	4854      	ldr	r0, [pc, #336]	; (80064cc <RCCEx_PLL3_Config+0x240>)
 800637a:	f008 fc6e 	bl	800ec5a <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800637e:	4b54      	ldr	r3, [pc, #336]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	2b03      	cmp	r3, #3
 8006388:	d101      	bne.n	800638e <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e099      	b.n	80064c2 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800638e:	4b50      	ldr	r3, [pc, #320]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a4f      	ldr	r2, [pc, #316]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639a:	f7fa fb5b 	bl	8000a54 <HAL_GetTick>
 800639e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063a0:	e008      	b.n	80063b4 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80063a2:	f7fa fb57 	bl	8000a54 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e086      	b.n	80064c2 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063b4:	4b46      	ldr	r3, [pc, #280]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f0      	bne.n	80063a2 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063c0:	4b43      	ldr	r3, [pc, #268]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	051b      	lsls	r3, r3, #20
 80063ce:	4940      	ldr	r1, [pc, #256]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	628b      	str	r3, [r1, #40]	; 0x28
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	3b01      	subs	r3, #1
 80063da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	025b      	lsls	r3, r3, #9
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	061b      	lsls	r3, r3, #24
 8006400:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006404:	4932      	ldr	r1, [pc, #200]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006406:	4313      	orrs	r3, r2
 8006408:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800640a:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	492e      	ldr	r1, [pc, #184]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006418:	4313      	orrs	r3, r2
 800641a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800641c:	4b2c      	ldr	r3, [pc, #176]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	4929      	ldr	r1, [pc, #164]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 800642a:	4313      	orrs	r3, r2
 800642c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800643a:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 800643c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643e:	4b25      	ldr	r3, [pc, #148]	; (80064d4 <RCCEx_PLL3_Config+0x248>)
 8006440:	4013      	ands	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	69d2      	ldr	r2, [r2, #28]
 8006446:	00d2      	lsls	r2, r2, #3
 8006448:	4921      	ldr	r1, [pc, #132]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 800644a:	4313      	orrs	r3, r2
 800644c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	4a1f      	ldr	r2, [pc, #124]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006458:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006460:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	4a1a      	ldr	r2, [pc, #104]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006466:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800646a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800646c:	e00f      	b.n	800648e <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d106      	bne.n	8006482 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006474:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 800647a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800647e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006480:	e005      	b.n	800648e <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 8006494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800649a:	f7fa fadb 	bl	8000a54 <HAL_GetTick>
 800649e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064a0:	e008      	b.n	80064b4 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80064a2:	f7fa fad7 	bl	8000a54 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e006      	b.n	80064c2 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <RCCEx_PLL3_Config+0x244>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0f0      	beq.n	80064a2 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	08010730 	.word	0x08010730
 80064d0:	58024400 	.word	0x58024400
 80064d4:	ffff0007 	.word	0xffff0007

080064d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e0ab      	b.n	8006642 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d032      	beq.n	8006558 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a55      	ldr	r2, [pc, #340]	; (800664c <HAL_UART_Init+0x174>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d05f      	beq.n	80065bc <HAL_UART_Init+0xe4>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a53      	ldr	r2, [pc, #332]	; (8006650 <HAL_UART_Init+0x178>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d05a      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a52      	ldr	r2, [pc, #328]	; (8006654 <HAL_UART_Init+0x17c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d055      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a50      	ldr	r2, [pc, #320]	; (8006658 <HAL_UART_Init+0x180>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d050      	beq.n	80065bc <HAL_UART_Init+0xe4>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a4f      	ldr	r2, [pc, #316]	; (800665c <HAL_UART_Init+0x184>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04b      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a4d      	ldr	r2, [pc, #308]	; (8006660 <HAL_UART_Init+0x188>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d046      	beq.n	80065bc <HAL_UART_Init+0xe4>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a4c      	ldr	r2, [pc, #304]	; (8006664 <HAL_UART_Init+0x18c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d041      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a4a      	ldr	r2, [pc, #296]	; (8006668 <HAL_UART_Init+0x190>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03c      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a49      	ldr	r2, [pc, #292]	; (800666c <HAL_UART_Init+0x194>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d037      	beq.n	80065bc <HAL_UART_Init+0xe4>
 800654c:	f44f 7199 	mov.w	r1, #306	; 0x132
 8006550:	4847      	ldr	r0, [pc, #284]	; (8006670 <HAL_UART_Init+0x198>)
 8006552:	f008 fb82 	bl	800ec5a <assert_failed>
 8006556:	e031      	b.n	80065bc <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a3b      	ldr	r2, [pc, #236]	; (800664c <HAL_UART_Init+0x174>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d02c      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a3a      	ldr	r2, [pc, #232]	; (8006650 <HAL_UART_Init+0x178>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d027      	beq.n	80065bc <HAL_UART_Init+0xe4>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a38      	ldr	r2, [pc, #224]	; (8006654 <HAL_UART_Init+0x17c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d022      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a37      	ldr	r2, [pc, #220]	; (8006658 <HAL_UART_Init+0x180>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d01d      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a35      	ldr	r2, [pc, #212]	; (800665c <HAL_UART_Init+0x184>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d018      	beq.n	80065bc <HAL_UART_Init+0xe4>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a34      	ldr	r2, [pc, #208]	; (8006660 <HAL_UART_Init+0x188>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_UART_Init+0xe4>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a32      	ldr	r2, [pc, #200]	; (8006664 <HAL_UART_Init+0x18c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00e      	beq.n	80065bc <HAL_UART_Init+0xe4>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a31      	ldr	r2, [pc, #196]	; (8006668 <HAL_UART_Init+0x190>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d009      	beq.n	80065bc <HAL_UART_Init+0xe4>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a2f      	ldr	r2, [pc, #188]	; (800666c <HAL_UART_Init+0x194>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_UART_Init+0xe4>
 80065b2:	f240 1137 	movw	r1, #311	; 0x137
 80065b6:	482e      	ldr	r0, [pc, #184]	; (8006670 <HAL_UART_Init+0x198>)
 80065b8:	f008 fb4f 	bl	800ec5a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f008 fe56 	bl	800f280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2224      	movs	r2, #36	; 0x24
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0201 	bic.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f8d7 	bl	80067a0 <UART_SetConfig>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e022      	b.n	8006642 <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f002 fb29 	bl	8008c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006618:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006628:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0201 	orr.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f002 fc84 	bl	8008f48 <UART_CheckIdleState>
 8006640:	4603      	mov	r3, r0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40011000 	.word	0x40011000
 8006650:	40004400 	.word	0x40004400
 8006654:	40004800 	.word	0x40004800
 8006658:	40004c00 	.word	0x40004c00
 800665c:	40005000 	.word	0x40005000
 8006660:	40011400 	.word	0x40011400
 8006664:	40007800 	.word	0x40007800
 8006668:	40007c00 	.word	0x40007c00
 800666c:	58000c00 	.word	0x58000c00
 8006670:	0801076c 	.word	0x0801076c

08006674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	4613      	mov	r3, r2
 8006682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	2b20      	cmp	r3, #32
 800668c:	f040 8083 	bne.w	8006796 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_UART_Transmit+0x28>
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e07b      	b.n	8006798 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_UART_Transmit+0x3a>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e074      	b.n	8006798 <HAL_UART_Transmit+0x124>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2221      	movs	r2, #33	; 0x21
 80066c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80066c6:	f7fa f9c5 	bl	8000a54 <HAL_GetTick>
 80066ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e4:	d108      	bne.n	80066f8 <HAL_UART_Transmit+0x84>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	61bb      	str	r3, [r7, #24]
 80066f6:	e003      	b.n	8006700 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006700:	e02c      	b.n	800675c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	2180      	movs	r1, #128	; 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f002 fc63 	bl	8008fd8 <UART_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e03d      	b.n	8006798 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	3302      	adds	r3, #2
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	e007      	b.n	800674a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	3301      	adds	r3, #1
 8006748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1cc      	bne.n	8006702 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2200      	movs	r2, #0
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f002 fc30 	bl	8008fd8 <UART_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00a      	b.n	8006798 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	e000      	b.n	8006798 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006796:	2302      	movs	r3, #2
  }
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80067a4:	b090      	sub	sp, #64	; 0x40
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4a17      	ldr	r2, [pc, #92]	; (800681c <UART_SetConfig+0x7c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d904      	bls.n	80067cc <UART_SetConfig+0x2c>
 80067c2:	f640 3134 	movw	r1, #2868	; 0xb34
 80067c6:	4816      	ldr	r0, [pc, #88]	; (8006820 <UART_SetConfig+0x80>)
 80067c8:	f008 fa47 	bl	800ec5a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067d4:	d00d      	beq.n	80067f2 <UART_SetConfig+0x52>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <UART_SetConfig+0x52>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e6:	d004      	beq.n	80067f2 <UART_SetConfig+0x52>
 80067e8:	f640 3135 	movw	r1, #2869	; 0xb35
 80067ec:	480c      	ldr	r0, [pc, #48]	; (8006820 <UART_SetConfig+0x80>)
 80067ee:	f008 fa34 	bl	800ec5a <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a0b      	ldr	r2, [pc, #44]	; (8006824 <UART_SetConfig+0x84>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d115      	bne.n	8006828 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d037      	beq.n	8006874 <UART_SetConfig+0xd4>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680c:	d032      	beq.n	8006874 <UART_SetConfig+0xd4>
 800680e:	f640 3138 	movw	r1, #2872	; 0xb38
 8006812:	4803      	ldr	r0, [pc, #12]	; (8006820 <UART_SetConfig+0x80>)
 8006814:	f008 fa21 	bl	800ec5a <assert_failed>
 8006818:	e02c      	b.n	8006874 <UART_SetConfig+0xd4>
 800681a:	bf00      	nop
 800681c:	00bebc20 	.word	0x00bebc20
 8006820:	0801076c 	.word	0x0801076c
 8006824:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006830:	d012      	beq.n	8006858 <UART_SetConfig+0xb8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <UART_SetConfig+0xb8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006842:	d009      	beq.n	8006858 <UART_SetConfig+0xb8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684c:	d004      	beq.n	8006858 <UART_SetConfig+0xb8>
 800684e:	f640 313c 	movw	r1, #2876	; 0xb3c
 8006852:	48aa      	ldr	r0, [pc, #680]	; (8006afc <UART_SetConfig+0x35c>)
 8006854:	f008 fa01 	bl	800ec5a <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <UART_SetConfig+0xd4>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006868:	d004      	beq.n	8006874 <UART_SetConfig+0xd4>
 800686a:	f640 313d 	movw	r1, #2877	; 0xb3d
 800686e:	48a3      	ldr	r0, [pc, #652]	; (8006afc <UART_SetConfig+0x35c>)
 8006870:	f008 f9f3 	bl	800ec5a <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <UART_SetConfig+0xfa>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006884:	d009      	beq.n	800689a <UART_SetConfig+0xfa>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800688e:	d004      	beq.n	800689a <UART_SetConfig+0xfa>
 8006890:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8006894:	4899      	ldr	r0, [pc, #612]	; (8006afc <UART_SetConfig+0x35c>)
 8006896:	f008 f9e0 	bl	800ec5a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f023 030c 	bic.w	r3, r3, #12
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <UART_SetConfig+0x10e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d104      	bne.n	80068b8 <UART_SetConfig+0x118>
 80068ae:	f640 3141 	movw	r1, #2881	; 0xb41
 80068b2:	4892      	ldr	r0, [pc, #584]	; (8006afc <UART_SetConfig+0x35c>)
 80068b4:	f008 f9d1 	bl	800ec5a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d013      	beq.n	80068e8 <UART_SetConfig+0x148>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c8:	d00e      	beq.n	80068e8 <UART_SetConfig+0x148>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d2:	d009      	beq.n	80068e8 <UART_SetConfig+0x148>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068dc:	d004      	beq.n	80068e8 <UART_SetConfig+0x148>
 80068de:	f640 3142 	movw	r1, #2882	; 0xb42
 80068e2:	4886      	ldr	r0, [pc, #536]	; (8006afc <UART_SetConfig+0x35c>)
 80068e4:	f008 f9b9 	bl	800ec5a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d009      	beq.n	8006904 <UART_SetConfig+0x164>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f8:	d004      	beq.n	8006904 <UART_SetConfig+0x164>
 80068fa:	f640 3143 	movw	r1, #2883	; 0xb43
 80068fe:	487f      	ldr	r0, [pc, #508]	; (8006afc <UART_SetConfig+0x35c>)
 8006900:	f008 f9ab 	bl	800ec5a <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d030      	beq.n	800696e <UART_SetConfig+0x1ce>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	2b01      	cmp	r3, #1
 8006912:	d02c      	beq.n	800696e <UART_SetConfig+0x1ce>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	2b02      	cmp	r3, #2
 800691a:	d028      	beq.n	800696e <UART_SetConfig+0x1ce>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	2b03      	cmp	r3, #3
 8006922:	d024      	beq.n	800696e <UART_SetConfig+0x1ce>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	2b04      	cmp	r3, #4
 800692a:	d020      	beq.n	800696e <UART_SetConfig+0x1ce>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b05      	cmp	r3, #5
 8006932:	d01c      	beq.n	800696e <UART_SetConfig+0x1ce>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b06      	cmp	r3, #6
 800693a:	d018      	beq.n	800696e <UART_SetConfig+0x1ce>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	2b07      	cmp	r3, #7
 8006942:	d014      	beq.n	800696e <UART_SetConfig+0x1ce>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	2b08      	cmp	r3, #8
 800694a:	d010      	beq.n	800696e <UART_SetConfig+0x1ce>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b09      	cmp	r3, #9
 8006952:	d00c      	beq.n	800696e <UART_SetConfig+0x1ce>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2b0a      	cmp	r3, #10
 800695a:	d008      	beq.n	800696e <UART_SetConfig+0x1ce>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	2b0b      	cmp	r3, #11
 8006962:	d004      	beq.n	800696e <UART_SetConfig+0x1ce>
 8006964:	f640 3144 	movw	r1, #2884	; 0xb44
 8006968:	4864      	ldr	r0, [pc, #400]	; (8006afc <UART_SetConfig+0x35c>)
 800696a:	f008 f976 	bl	800ec5a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	4313      	orrs	r3, r2
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800698a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800698c:	4313      	orrs	r3, r2
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b5a      	ldr	r3, [pc, #360]	; (8006b00 <UART_SetConfig+0x360>)
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a4f      	ldr	r2, [pc, #316]	; (8006b04 <UART_SetConfig+0x364>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069d0:	4313      	orrs	r3, r2
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	4b4b      	ldr	r3, [pc, #300]	; (8006b08 <UART_SetConfig+0x368>)
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	f023 010f 	bic.w	r1, r3, #15
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a42      	ldr	r2, [pc, #264]	; (8006b0c <UART_SetConfig+0x36c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	f040 8085 	bne.w	8006b14 <UART_SetConfig+0x374>
 8006a0a:	4b41      	ldr	r3, [pc, #260]	; (8006b10 <UART_SetConfig+0x370>)
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a12:	2b28      	cmp	r3, #40	; 0x28
 8006a14:	d86c      	bhi.n	8006af0 <UART_SetConfig+0x350>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x27c>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006ac1 	.word	0x08006ac1
 8006a20:	08006af1 	.word	0x08006af1
 8006a24:	08006af1 	.word	0x08006af1
 8006a28:	08006af1 	.word	0x08006af1
 8006a2c:	08006af1 	.word	0x08006af1
 8006a30:	08006af1 	.word	0x08006af1
 8006a34:	08006af1 	.word	0x08006af1
 8006a38:	08006af1 	.word	0x08006af1
 8006a3c:	08006ac9 	.word	0x08006ac9
 8006a40:	08006af1 	.word	0x08006af1
 8006a44:	08006af1 	.word	0x08006af1
 8006a48:	08006af1 	.word	0x08006af1
 8006a4c:	08006af1 	.word	0x08006af1
 8006a50:	08006af1 	.word	0x08006af1
 8006a54:	08006af1 	.word	0x08006af1
 8006a58:	08006af1 	.word	0x08006af1
 8006a5c:	08006ad1 	.word	0x08006ad1
 8006a60:	08006af1 	.word	0x08006af1
 8006a64:	08006af1 	.word	0x08006af1
 8006a68:	08006af1 	.word	0x08006af1
 8006a6c:	08006af1 	.word	0x08006af1
 8006a70:	08006af1 	.word	0x08006af1
 8006a74:	08006af1 	.word	0x08006af1
 8006a78:	08006af1 	.word	0x08006af1
 8006a7c:	08006ad9 	.word	0x08006ad9
 8006a80:	08006af1 	.word	0x08006af1
 8006a84:	08006af1 	.word	0x08006af1
 8006a88:	08006af1 	.word	0x08006af1
 8006a8c:	08006af1 	.word	0x08006af1
 8006a90:	08006af1 	.word	0x08006af1
 8006a94:	08006af1 	.word	0x08006af1
 8006a98:	08006af1 	.word	0x08006af1
 8006a9c:	08006ae1 	.word	0x08006ae1
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006af1 	.word	0x08006af1
 8006aa8:	08006af1 	.word	0x08006af1
 8006aac:	08006af1 	.word	0x08006af1
 8006ab0:	08006af1 	.word	0x08006af1
 8006ab4:	08006af1 	.word	0x08006af1
 8006ab8:	08006af1 	.word	0x08006af1
 8006abc:	08006ae9 	.word	0x08006ae9
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ac6:	e23b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ace:	e237      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ad6:	e233      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ade:	e22f      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ae6:	e22b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aee:	e227      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006af6:	bf00      	nop
 8006af8:	e222      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006afa:	bf00      	nop
 8006afc:	0801076c 	.word	0x0801076c
 8006b00:	cfff69f3 	.word	0xcfff69f3
 8006b04:	58000c00 	.word	0x58000c00
 8006b08:	11fff4ff 	.word	0x11fff4ff
 8006b0c:	40011000 	.word	0x40011000
 8006b10:	58024400 	.word	0x58024400
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4ac9      	ldr	r2, [pc, #804]	; (8006e40 <UART_SetConfig+0x6a0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d131      	bne.n	8006b82 <UART_SetConfig+0x3e2>
 8006b1e:	4bc9      	ldr	r3, [pc, #804]	; (8006e44 <UART_SetConfig+0x6a4>)
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b05      	cmp	r3, #5
 8006b28:	d826      	bhi.n	8006b78 <UART_SetConfig+0x3d8>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <UART_SetConfig+0x390>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b49 	.word	0x08006b49
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	08006b59 	.word	0x08006b59
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b4e:	e1f7      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b56:	e1f3      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b5e:	e1ef      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b66:	e1eb      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006b68:	2320      	movs	r3, #32
 8006b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b6e:	e1e7      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006b70:	2340      	movs	r3, #64	; 0x40
 8006b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b76:	e1e3      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b7e:	bf00      	nop
 8006b80:	e1de      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4ab0      	ldr	r2, [pc, #704]	; (8006e48 <UART_SetConfig+0x6a8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d132      	bne.n	8006bf2 <UART_SetConfig+0x452>
 8006b8c:	4bad      	ldr	r3, [pc, #692]	; (8006e44 <UART_SetConfig+0x6a4>)
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	2b05      	cmp	r3, #5
 8006b96:	d827      	bhi.n	8006be8 <UART_SetConfig+0x448>
 8006b98:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <UART_SetConfig+0x400>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006bb9 	.word	0x08006bb9
 8006ba4:	08006bc1 	.word	0x08006bc1
 8006ba8:	08006bc9 	.word	0x08006bc9
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bd9 	.word	0x08006bd9
 8006bb4:	08006be1 	.word	0x08006be1
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bbe:	e1bf      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bc6:	e1bb      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006bc8:	2308      	movs	r3, #8
 8006bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bce:	e1b7      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bd6:	e1b3      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006bd8:	2320      	movs	r3, #32
 8006bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bde:	e1af      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006be0:	2340      	movs	r3, #64	; 0x40
 8006be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006be6:	e1ab      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bee:	bf00      	nop
 8006bf0:	e1a6      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a95      	ldr	r2, [pc, #596]	; (8006e4c <UART_SetConfig+0x6ac>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d132      	bne.n	8006c62 <UART_SetConfig+0x4c2>
 8006bfc:	4b91      	ldr	r3, [pc, #580]	; (8006e44 <UART_SetConfig+0x6a4>)
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d827      	bhi.n	8006c58 <UART_SetConfig+0x4b8>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0x470>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c29 	.word	0x08006c29
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c51 	.word	0x08006c51
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c2e:	e187      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c36:	e183      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006c38:	2308      	movs	r3, #8
 8006c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c3e:	e17f      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006c40:	2310      	movs	r3, #16
 8006c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c46:	e17b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c4e:	e177      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c56:	e173      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c5e:	bf00      	nop
 8006c60:	e16e      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a7a      	ldr	r2, [pc, #488]	; (8006e50 <UART_SetConfig+0x6b0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d132      	bne.n	8006cd2 <UART_SetConfig+0x532>
 8006c6c:	4b75      	ldr	r3, [pc, #468]	; (8006e44 <UART_SetConfig+0x6a4>)
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d827      	bhi.n	8006cc8 <UART_SetConfig+0x528>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0x4e0>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006c99 	.word	0x08006c99
 8006c84:	08006ca1 	.word	0x08006ca1
 8006c88:	08006ca9 	.word	0x08006ca9
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c9e:	e14f      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ca6:	e14b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ca8:	2308      	movs	r3, #8
 8006caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cae:	e147      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cb6:	e143      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006cb8:	2320      	movs	r3, #32
 8006cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cbe:	e13f      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006cc0:	2340      	movs	r3, #64	; 0x40
 8006cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cc6:	e13b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006cc8:	2380      	movs	r3, #128	; 0x80
 8006cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cce:	bf00      	nop
 8006cd0:	e136      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a5f      	ldr	r2, [pc, #380]	; (8006e54 <UART_SetConfig+0x6b4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d178      	bne.n	8006dce <UART_SetConfig+0x62e>
 8006cdc:	4b59      	ldr	r3, [pc, #356]	; (8006e44 <UART_SetConfig+0x6a4>)
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ce4:	2b28      	cmp	r3, #40	; 0x28
 8006ce6:	d86d      	bhi.n	8006dc4 <UART_SetConfig+0x624>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0x550>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d95 	.word	0x08006d95
 8006cf4:	08006dc5 	.word	0x08006dc5
 8006cf8:	08006dc5 	.word	0x08006dc5
 8006cfc:	08006dc5 	.word	0x08006dc5
 8006d00:	08006dc5 	.word	0x08006dc5
 8006d04:	08006dc5 	.word	0x08006dc5
 8006d08:	08006dc5 	.word	0x08006dc5
 8006d0c:	08006dc5 	.word	0x08006dc5
 8006d10:	08006d9d 	.word	0x08006d9d
 8006d14:	08006dc5 	.word	0x08006dc5
 8006d18:	08006dc5 	.word	0x08006dc5
 8006d1c:	08006dc5 	.word	0x08006dc5
 8006d20:	08006dc5 	.word	0x08006dc5
 8006d24:	08006dc5 	.word	0x08006dc5
 8006d28:	08006dc5 	.word	0x08006dc5
 8006d2c:	08006dc5 	.word	0x08006dc5
 8006d30:	08006da5 	.word	0x08006da5
 8006d34:	08006dc5 	.word	0x08006dc5
 8006d38:	08006dc5 	.word	0x08006dc5
 8006d3c:	08006dc5 	.word	0x08006dc5
 8006d40:	08006dc5 	.word	0x08006dc5
 8006d44:	08006dc5 	.word	0x08006dc5
 8006d48:	08006dc5 	.word	0x08006dc5
 8006d4c:	08006dc5 	.word	0x08006dc5
 8006d50:	08006dad 	.word	0x08006dad
 8006d54:	08006dc5 	.word	0x08006dc5
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006dc5 	.word	0x08006dc5
 8006d64:	08006dc5 	.word	0x08006dc5
 8006d68:	08006dc5 	.word	0x08006dc5
 8006d6c:	08006dc5 	.word	0x08006dc5
 8006d70:	08006db5 	.word	0x08006db5
 8006d74:	08006dc5 	.word	0x08006dc5
 8006d78:	08006dc5 	.word	0x08006dc5
 8006d7c:	08006dc5 	.word	0x08006dc5
 8006d80:	08006dc5 	.word	0x08006dc5
 8006d84:	08006dc5 	.word	0x08006dc5
 8006d88:	08006dc5 	.word	0x08006dc5
 8006d8c:	08006dc5 	.word	0x08006dc5
 8006d90:	08006dbd 	.word	0x08006dbd
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d9a:	e0d1      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006da2:	e0cd      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006daa:	e0c9      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006db2:	e0c5      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006db4:	2320      	movs	r3, #32
 8006db6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dba:	e0c1      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006dbc:	2340      	movs	r3, #64	; 0x40
 8006dbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dc2:	e0bd      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006dc4:	2380      	movs	r3, #128	; 0x80
 8006dc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dca:	bf00      	nop
 8006dcc:	e0b8      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <UART_SetConfig+0x6b8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d141      	bne.n	8006e5c <UART_SetConfig+0x6bc>
 8006dd8:	4b1a      	ldr	r3, [pc, #104]	; (8006e44 <UART_SetConfig+0x6a4>)
 8006dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	2b05      	cmp	r3, #5
 8006de2:	d827      	bhi.n	8006e34 <UART_SetConfig+0x694>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0x64c>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e05 	.word	0x08006e05
 8006df0:	08006e0d 	.word	0x08006e0d
 8006df4:	08006e15 	.word	0x08006e15
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e0a:	e099      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e0c:	2304      	movs	r3, #4
 8006e0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e12:	e095      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e14:	2308      	movs	r3, #8
 8006e16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e1a:	e091      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e22:	e08d      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e24:	2320      	movs	r3, #32
 8006e26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e2a:	e089      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e32:	e085      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e3a:	bf00      	nop
 8006e3c:	e080      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e3e:	bf00      	nop
 8006e40:	40004400 	.word	0x40004400
 8006e44:	58024400 	.word	0x58024400
 8006e48:	40004800 	.word	0x40004800
 8006e4c:	40004c00 	.word	0x40004c00
 8006e50:	40005000 	.word	0x40005000
 8006e54:	40011400 	.word	0x40011400
 8006e58:	40007800 	.word	0x40007800
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a98      	ldr	r2, [pc, #608]	; (80070c4 <UART_SetConfig+0x924>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d131      	bne.n	8006eca <UART_SetConfig+0x72a>
 8006e66:	4b98      	ldr	r3, [pc, #608]	; (80070c8 <UART_SetConfig+0x928>)
 8006e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	d826      	bhi.n	8006ec0 <UART_SetConfig+0x720>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <UART_SetConfig+0x6d8>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e91 	.word	0x08006e91
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	08006ea1 	.word	0x08006ea1
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006eb1 	.word	0x08006eb1
 8006e8c:	08006eb9 	.word	0x08006eb9
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e96:	e053      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e9e:	e04f      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ea6:	e04b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eae:	e047      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006eb0:	2320      	movs	r3, #32
 8006eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eb6:	e043      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006eb8:	2340      	movs	r3, #64	; 0x40
 8006eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ebe:	e03f      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ec6:	bf00      	nop
 8006ec8:	e03a      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a7f      	ldr	r2, [pc, #508]	; (80070cc <UART_SetConfig+0x92c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d132      	bne.n	8006f3a <UART_SetConfig+0x79a>
 8006ed4:	4b7c      	ldr	r3, [pc, #496]	; (80070c8 <UART_SetConfig+0x928>)
 8006ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	d827      	bhi.n	8006f30 <UART_SetConfig+0x790>
 8006ee0:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <UART_SetConfig+0x748>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f01 	.word	0x08006f01
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	2302      	movs	r3, #2
 8006f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f06:	e01b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f0e:	e017      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f16:	e013      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f1e:	e00f      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006f20:	2320      	movs	r3, #32
 8006f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f26:	e00b      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006f28:	2340      	movs	r3, #64	; 0x40
 8006f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f2e:	e007      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006f30:	2380      	movs	r3, #128	; 0x80
 8006f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f36:	bf00      	nop
 8006f38:	e002      	b.n	8006f40 <UART_SetConfig+0x7a0>
 8006f3a:	2380      	movs	r3, #128	; 0x80
 8006f3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a61      	ldr	r2, [pc, #388]	; (80070cc <UART_SetConfig+0x92c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	f040 86f3 	bne.w	8007d32 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f4c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	f000 80bd 	beq.w	80070d0 <UART_SetConfig+0x930>
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	dc04      	bgt.n	8006f64 <UART_SetConfig+0x7c4>
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d00c      	beq.n	8006f78 <UART_SetConfig+0x7d8>
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d05b      	beq.n	800701a <UART_SetConfig+0x87a>
 8006f62:	e276      	b.n	8007452 <UART_SetConfig+0xcb2>
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	f000 81ad 	beq.w	80072c4 <UART_SetConfig+0xb24>
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	f000 821a 	beq.w	80073a4 <UART_SetConfig+0xc04>
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	f000 8101 	beq.w	8007178 <UART_SetConfig+0x9d8>
 8006f76:	e26c      	b.n	8007452 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f78:	f7fe fd9c 	bl	8005ab4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d044      	beq.n	8007010 <UART_SetConfig+0x870>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d03e      	beq.n	800700c <UART_SetConfig+0x86c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d038      	beq.n	8007008 <UART_SetConfig+0x868>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d032      	beq.n	8007004 <UART_SetConfig+0x864>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d02c      	beq.n	8007000 <UART_SetConfig+0x860>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	d026      	beq.n	8006ffc <UART_SetConfig+0x85c>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b06      	cmp	r3, #6
 8006fb4:	d020      	beq.n	8006ff8 <UART_SetConfig+0x858>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	2b07      	cmp	r3, #7
 8006fbc:	d01a      	beq.n	8006ff4 <UART_SetConfig+0x854>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d014      	beq.n	8006ff0 <UART_SetConfig+0x850>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b09      	cmp	r3, #9
 8006fcc:	d00e      	beq.n	8006fec <UART_SetConfig+0x84c>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	2b0a      	cmp	r3, #10
 8006fd4:	d008      	beq.n	8006fe8 <UART_SetConfig+0x848>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	2b0b      	cmp	r3, #11
 8006fdc:	d102      	bne.n	8006fe4 <UART_SetConfig+0x844>
 8006fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fe2:	e016      	b.n	8007012 <UART_SetConfig+0x872>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e014      	b.n	8007012 <UART_SetConfig+0x872>
 8006fe8:	2380      	movs	r3, #128	; 0x80
 8006fea:	e012      	b.n	8007012 <UART_SetConfig+0x872>
 8006fec:	2340      	movs	r3, #64	; 0x40
 8006fee:	e010      	b.n	8007012 <UART_SetConfig+0x872>
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	e00e      	b.n	8007012 <UART_SetConfig+0x872>
 8006ff4:	2310      	movs	r3, #16
 8006ff6:	e00c      	b.n	8007012 <UART_SetConfig+0x872>
 8006ff8:	230c      	movs	r3, #12
 8006ffa:	e00a      	b.n	8007012 <UART_SetConfig+0x872>
 8006ffc:	230a      	movs	r3, #10
 8006ffe:	e008      	b.n	8007012 <UART_SetConfig+0x872>
 8007000:	2308      	movs	r3, #8
 8007002:	e006      	b.n	8007012 <UART_SetConfig+0x872>
 8007004:	2306      	movs	r3, #6
 8007006:	e004      	b.n	8007012 <UART_SetConfig+0x872>
 8007008:	2304      	movs	r3, #4
 800700a:	e002      	b.n	8007012 <UART_SetConfig+0x872>
 800700c:	2302      	movs	r3, #2
 800700e:	e000      	b.n	8007012 <UART_SetConfig+0x872>
 8007010:	2301      	movs	r3, #1
 8007012:	fbb2 f3f3 	udiv	r3, r2, r3
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007018:	e21f      	b.n	800745a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800701a:	f107 0318 	add.w	r3, r7, #24
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fd5e 	bl	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d044      	beq.n	80070b8 <UART_SetConfig+0x918>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b01      	cmp	r3, #1
 8007034:	d03e      	beq.n	80070b4 <UART_SetConfig+0x914>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b02      	cmp	r3, #2
 800703c:	d038      	beq.n	80070b0 <UART_SetConfig+0x910>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b03      	cmp	r3, #3
 8007044:	d032      	beq.n	80070ac <UART_SetConfig+0x90c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b04      	cmp	r3, #4
 800704c:	d02c      	beq.n	80070a8 <UART_SetConfig+0x908>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	2b05      	cmp	r3, #5
 8007054:	d026      	beq.n	80070a4 <UART_SetConfig+0x904>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b06      	cmp	r3, #6
 800705c:	d020      	beq.n	80070a0 <UART_SetConfig+0x900>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b07      	cmp	r3, #7
 8007064:	d01a      	beq.n	800709c <UART_SetConfig+0x8fc>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b08      	cmp	r3, #8
 800706c:	d014      	beq.n	8007098 <UART_SetConfig+0x8f8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b09      	cmp	r3, #9
 8007074:	d00e      	beq.n	8007094 <UART_SetConfig+0x8f4>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b0a      	cmp	r3, #10
 800707c:	d008      	beq.n	8007090 <UART_SetConfig+0x8f0>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b0b      	cmp	r3, #11
 8007084:	d102      	bne.n	800708c <UART_SetConfig+0x8ec>
 8007086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800708a:	e016      	b.n	80070ba <UART_SetConfig+0x91a>
 800708c:	2301      	movs	r3, #1
 800708e:	e014      	b.n	80070ba <UART_SetConfig+0x91a>
 8007090:	2380      	movs	r3, #128	; 0x80
 8007092:	e012      	b.n	80070ba <UART_SetConfig+0x91a>
 8007094:	2340      	movs	r3, #64	; 0x40
 8007096:	e010      	b.n	80070ba <UART_SetConfig+0x91a>
 8007098:	2320      	movs	r3, #32
 800709a:	e00e      	b.n	80070ba <UART_SetConfig+0x91a>
 800709c:	2310      	movs	r3, #16
 800709e:	e00c      	b.n	80070ba <UART_SetConfig+0x91a>
 80070a0:	230c      	movs	r3, #12
 80070a2:	e00a      	b.n	80070ba <UART_SetConfig+0x91a>
 80070a4:	230a      	movs	r3, #10
 80070a6:	e008      	b.n	80070ba <UART_SetConfig+0x91a>
 80070a8:	2308      	movs	r3, #8
 80070aa:	e006      	b.n	80070ba <UART_SetConfig+0x91a>
 80070ac:	2306      	movs	r3, #6
 80070ae:	e004      	b.n	80070ba <UART_SetConfig+0x91a>
 80070b0:	2304      	movs	r3, #4
 80070b2:	e002      	b.n	80070ba <UART_SetConfig+0x91a>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e000      	b.n	80070ba <UART_SetConfig+0x91a>
 80070b8:	2301      	movs	r3, #1
 80070ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80070be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80070c0:	e1cb      	b.n	800745a <UART_SetConfig+0xcba>
 80070c2:	bf00      	nop
 80070c4:	40007c00 	.word	0x40007c00
 80070c8:	58024400 	.word	0x58024400
 80070cc:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070d0:	f107 030c 	add.w	r3, r7, #12
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe fe4f 	bl	8005d78 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d044      	beq.n	800716e <UART_SetConfig+0x9ce>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d03e      	beq.n	800716a <UART_SetConfig+0x9ca>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d038      	beq.n	8007166 <UART_SetConfig+0x9c6>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d032      	beq.n	8007162 <UART_SetConfig+0x9c2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b04      	cmp	r3, #4
 8007102:	d02c      	beq.n	800715e <UART_SetConfig+0x9be>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b05      	cmp	r3, #5
 800710a:	d026      	beq.n	800715a <UART_SetConfig+0x9ba>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b06      	cmp	r3, #6
 8007112:	d020      	beq.n	8007156 <UART_SetConfig+0x9b6>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b07      	cmp	r3, #7
 800711a:	d01a      	beq.n	8007152 <UART_SetConfig+0x9b2>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b08      	cmp	r3, #8
 8007122:	d014      	beq.n	800714e <UART_SetConfig+0x9ae>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b09      	cmp	r3, #9
 800712a:	d00e      	beq.n	800714a <UART_SetConfig+0x9aa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b0a      	cmp	r3, #10
 8007132:	d008      	beq.n	8007146 <UART_SetConfig+0x9a6>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b0b      	cmp	r3, #11
 800713a:	d102      	bne.n	8007142 <UART_SetConfig+0x9a2>
 800713c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007140:	e016      	b.n	8007170 <UART_SetConfig+0x9d0>
 8007142:	2301      	movs	r3, #1
 8007144:	e014      	b.n	8007170 <UART_SetConfig+0x9d0>
 8007146:	2380      	movs	r3, #128	; 0x80
 8007148:	e012      	b.n	8007170 <UART_SetConfig+0x9d0>
 800714a:	2340      	movs	r3, #64	; 0x40
 800714c:	e010      	b.n	8007170 <UART_SetConfig+0x9d0>
 800714e:	2320      	movs	r3, #32
 8007150:	e00e      	b.n	8007170 <UART_SetConfig+0x9d0>
 8007152:	2310      	movs	r3, #16
 8007154:	e00c      	b.n	8007170 <UART_SetConfig+0x9d0>
 8007156:	230c      	movs	r3, #12
 8007158:	e00a      	b.n	8007170 <UART_SetConfig+0x9d0>
 800715a:	230a      	movs	r3, #10
 800715c:	e008      	b.n	8007170 <UART_SetConfig+0x9d0>
 800715e:	2308      	movs	r3, #8
 8007160:	e006      	b.n	8007170 <UART_SetConfig+0x9d0>
 8007162:	2306      	movs	r3, #6
 8007164:	e004      	b.n	8007170 <UART_SetConfig+0x9d0>
 8007166:	2304      	movs	r3, #4
 8007168:	e002      	b.n	8007170 <UART_SetConfig+0x9d0>
 800716a:	2302      	movs	r3, #2
 800716c:	e000      	b.n	8007170 <UART_SetConfig+0x9d0>
 800716e:	2301      	movs	r3, #1
 8007170:	fbb2 f3f3 	udiv	r3, r2, r3
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007176:	e170      	b.n	800745a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007178:	4b79      	ldr	r3, [pc, #484]	; (8007360 <UART_SetConfig+0xbc0>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d054      	beq.n	800722e <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007184:	4b76      	ldr	r3, [pc, #472]	; (8007360 <UART_SetConfig+0xbc0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	4a75      	ldr	r2, [pc, #468]	; (8007364 <UART_SetConfig+0xbc4>)
 8007190:	40da      	lsrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	d044      	beq.n	8007224 <UART_SetConfig+0xa84>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d03e      	beq.n	8007220 <UART_SetConfig+0xa80>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d038      	beq.n	800721c <UART_SetConfig+0xa7c>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d032      	beq.n	8007218 <UART_SetConfig+0xa78>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d02c      	beq.n	8007214 <UART_SetConfig+0xa74>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d026      	beq.n	8007210 <UART_SetConfig+0xa70>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d020      	beq.n	800720c <UART_SetConfig+0xa6c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	2b07      	cmp	r3, #7
 80071d0:	d01a      	beq.n	8007208 <UART_SetConfig+0xa68>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d014      	beq.n	8007204 <UART_SetConfig+0xa64>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b09      	cmp	r3, #9
 80071e0:	d00e      	beq.n	8007200 <UART_SetConfig+0xa60>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b0a      	cmp	r3, #10
 80071e8:	d008      	beq.n	80071fc <UART_SetConfig+0xa5c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b0b      	cmp	r3, #11
 80071f0:	d102      	bne.n	80071f8 <UART_SetConfig+0xa58>
 80071f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071f6:	e016      	b.n	8007226 <UART_SetConfig+0xa86>
 80071f8:	2301      	movs	r3, #1
 80071fa:	e014      	b.n	8007226 <UART_SetConfig+0xa86>
 80071fc:	2380      	movs	r3, #128	; 0x80
 80071fe:	e012      	b.n	8007226 <UART_SetConfig+0xa86>
 8007200:	2340      	movs	r3, #64	; 0x40
 8007202:	e010      	b.n	8007226 <UART_SetConfig+0xa86>
 8007204:	2320      	movs	r3, #32
 8007206:	e00e      	b.n	8007226 <UART_SetConfig+0xa86>
 8007208:	2310      	movs	r3, #16
 800720a:	e00c      	b.n	8007226 <UART_SetConfig+0xa86>
 800720c:	230c      	movs	r3, #12
 800720e:	e00a      	b.n	8007226 <UART_SetConfig+0xa86>
 8007210:	230a      	movs	r3, #10
 8007212:	e008      	b.n	8007226 <UART_SetConfig+0xa86>
 8007214:	2308      	movs	r3, #8
 8007216:	e006      	b.n	8007226 <UART_SetConfig+0xa86>
 8007218:	2306      	movs	r3, #6
 800721a:	e004      	b.n	8007226 <UART_SetConfig+0xa86>
 800721c:	2304      	movs	r3, #4
 800721e:	e002      	b.n	8007226 <UART_SetConfig+0xa86>
 8007220:	2302      	movs	r3, #2
 8007222:	e000      	b.n	8007226 <UART_SetConfig+0xa86>
 8007224:	2301      	movs	r3, #1
 8007226:	fbb2 f3f3 	udiv	r3, r2, r3
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800722c:	e115      	b.n	800745a <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	2b00      	cmp	r3, #0
 8007234:	d043      	beq.n	80072be <UART_SetConfig+0xb1e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	2b01      	cmp	r3, #1
 800723c:	d03d      	beq.n	80072ba <UART_SetConfig+0xb1a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b02      	cmp	r3, #2
 8007244:	d037      	beq.n	80072b6 <UART_SetConfig+0xb16>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	2b03      	cmp	r3, #3
 800724c:	d031      	beq.n	80072b2 <UART_SetConfig+0xb12>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	2b04      	cmp	r3, #4
 8007254:	d02b      	beq.n	80072ae <UART_SetConfig+0xb0e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	2b05      	cmp	r3, #5
 800725c:	d025      	beq.n	80072aa <UART_SetConfig+0xb0a>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	2b06      	cmp	r3, #6
 8007264:	d01f      	beq.n	80072a6 <UART_SetConfig+0xb06>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2b07      	cmp	r3, #7
 800726c:	d019      	beq.n	80072a2 <UART_SetConfig+0xb02>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	2b08      	cmp	r3, #8
 8007274:	d013      	beq.n	800729e <UART_SetConfig+0xafe>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b09      	cmp	r3, #9
 800727c:	d00d      	beq.n	800729a <UART_SetConfig+0xafa>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	2b0a      	cmp	r3, #10
 8007284:	d007      	beq.n	8007296 <UART_SetConfig+0xaf6>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	2b0b      	cmp	r3, #11
 800728c:	d101      	bne.n	8007292 <UART_SetConfig+0xaf2>
 800728e:	4b36      	ldr	r3, [pc, #216]	; (8007368 <UART_SetConfig+0xbc8>)
 8007290:	e016      	b.n	80072c0 <UART_SetConfig+0xb20>
 8007292:	4b34      	ldr	r3, [pc, #208]	; (8007364 <UART_SetConfig+0xbc4>)
 8007294:	e014      	b.n	80072c0 <UART_SetConfig+0xb20>
 8007296:	4b35      	ldr	r3, [pc, #212]	; (800736c <UART_SetConfig+0xbcc>)
 8007298:	e012      	b.n	80072c0 <UART_SetConfig+0xb20>
 800729a:	4b35      	ldr	r3, [pc, #212]	; (8007370 <UART_SetConfig+0xbd0>)
 800729c:	e010      	b.n	80072c0 <UART_SetConfig+0xb20>
 800729e:	4b35      	ldr	r3, [pc, #212]	; (8007374 <UART_SetConfig+0xbd4>)
 80072a0:	e00e      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072a2:	4b35      	ldr	r3, [pc, #212]	; (8007378 <UART_SetConfig+0xbd8>)
 80072a4:	e00c      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072a6:	4b35      	ldr	r3, [pc, #212]	; (800737c <UART_SetConfig+0xbdc>)
 80072a8:	e00a      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072aa:	4b35      	ldr	r3, [pc, #212]	; (8007380 <UART_SetConfig+0xbe0>)
 80072ac:	e008      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072ae:	4b35      	ldr	r3, [pc, #212]	; (8007384 <UART_SetConfig+0xbe4>)
 80072b0:	e006      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072b2:	4b35      	ldr	r3, [pc, #212]	; (8007388 <UART_SetConfig+0xbe8>)
 80072b4:	e004      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072b6:	4b35      	ldr	r3, [pc, #212]	; (800738c <UART_SetConfig+0xbec>)
 80072b8:	e002      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072ba:	4b35      	ldr	r3, [pc, #212]	; (8007390 <UART_SetConfig+0xbf0>)
 80072bc:	e000      	b.n	80072c0 <UART_SetConfig+0xb20>
 80072be:	4b29      	ldr	r3, [pc, #164]	; (8007364 <UART_SetConfig+0xbc4>)
 80072c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072c2:	e0ca      	b.n	800745a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d046      	beq.n	800735a <UART_SetConfig+0xbba>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d040      	beq.n	8007356 <UART_SetConfig+0xbb6>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d03a      	beq.n	8007352 <UART_SetConfig+0xbb2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d034      	beq.n	800734e <UART_SetConfig+0xbae>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d02e      	beq.n	800734a <UART_SetConfig+0xbaa>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	d028      	beq.n	8007346 <UART_SetConfig+0xba6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d022      	beq.n	8007342 <UART_SetConfig+0xba2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b07      	cmp	r3, #7
 8007302:	d01c      	beq.n	800733e <UART_SetConfig+0xb9e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b08      	cmp	r3, #8
 800730a:	d016      	beq.n	800733a <UART_SetConfig+0xb9a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b09      	cmp	r3, #9
 8007312:	d00f      	beq.n	8007334 <UART_SetConfig+0xb94>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b0a      	cmp	r3, #10
 800731a:	d008      	beq.n	800732e <UART_SetConfig+0xb8e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b0b      	cmp	r3, #11
 8007322:	d102      	bne.n	800732a <UART_SetConfig+0xb8a>
 8007324:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007328:	e018      	b.n	800735c <UART_SetConfig+0xbbc>
 800732a:	4b13      	ldr	r3, [pc, #76]	; (8007378 <UART_SetConfig+0xbd8>)
 800732c:	e016      	b.n	800735c <UART_SetConfig+0xbbc>
 800732e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007332:	e013      	b.n	800735c <UART_SetConfig+0xbbc>
 8007334:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007338:	e010      	b.n	800735c <UART_SetConfig+0xbbc>
 800733a:	4b16      	ldr	r3, [pc, #88]	; (8007394 <UART_SetConfig+0xbf4>)
 800733c:	e00e      	b.n	800735c <UART_SetConfig+0xbbc>
 800733e:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <UART_SetConfig+0xbc8>)
 8007340:	e00c      	b.n	800735c <UART_SetConfig+0xbbc>
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <UART_SetConfig+0xbf8>)
 8007344:	e00a      	b.n	800735c <UART_SetConfig+0xbbc>
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <UART_SetConfig+0xbfc>)
 8007348:	e008      	b.n	800735c <UART_SetConfig+0xbbc>
 800734a:	4b08      	ldr	r3, [pc, #32]	; (800736c <UART_SetConfig+0xbcc>)
 800734c:	e006      	b.n	800735c <UART_SetConfig+0xbbc>
 800734e:	4b14      	ldr	r3, [pc, #80]	; (80073a0 <UART_SetConfig+0xc00>)
 8007350:	e004      	b.n	800735c <UART_SetConfig+0xbbc>
 8007352:	4b07      	ldr	r3, [pc, #28]	; (8007370 <UART_SetConfig+0xbd0>)
 8007354:	e002      	b.n	800735c <UART_SetConfig+0xbbc>
 8007356:	4b07      	ldr	r3, [pc, #28]	; (8007374 <UART_SetConfig+0xbd4>)
 8007358:	e000      	b.n	800735c <UART_SetConfig+0xbbc>
 800735a:	4b07      	ldr	r3, [pc, #28]	; (8007378 <UART_SetConfig+0xbd8>)
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800735e:	e07c      	b.n	800745a <UART_SetConfig+0xcba>
 8007360:	58024400 	.word	0x58024400
 8007364:	03d09000 	.word	0x03d09000
 8007368:	0003d090 	.word	0x0003d090
 800736c:	0007a120 	.word	0x0007a120
 8007370:	000f4240 	.word	0x000f4240
 8007374:	001e8480 	.word	0x001e8480
 8007378:	003d0900 	.word	0x003d0900
 800737c:	00516155 	.word	0x00516155
 8007380:	0061a800 	.word	0x0061a800
 8007384:	007a1200 	.word	0x007a1200
 8007388:	00a2c2aa 	.word	0x00a2c2aa
 800738c:	00f42400 	.word	0x00f42400
 8007390:	01e84800 	.word	0x01e84800
 8007394:	0001e848 	.word	0x0001e848
 8007398:	00051615 	.word	0x00051615
 800739c:	00061a80 	.word	0x00061a80
 80073a0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d04e      	beq.n	800744a <UART_SetConfig+0xcaa>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d047      	beq.n	8007444 <UART_SetConfig+0xca4>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d040      	beq.n	800743e <UART_SetConfig+0xc9e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d039      	beq.n	8007438 <UART_SetConfig+0xc98>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d032      	beq.n	8007432 <UART_SetConfig+0xc92>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	d02b      	beq.n	800742c <UART_SetConfig+0xc8c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b06      	cmp	r3, #6
 80073da:	d024      	beq.n	8007426 <UART_SetConfig+0xc86>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b07      	cmp	r3, #7
 80073e2:	d01d      	beq.n	8007420 <UART_SetConfig+0xc80>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d016      	beq.n	800741a <UART_SetConfig+0xc7a>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b09      	cmp	r3, #9
 80073f2:	d00f      	beq.n	8007414 <UART_SetConfig+0xc74>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b0a      	cmp	r3, #10
 80073fa:	d008      	beq.n	800740e <UART_SetConfig+0xc6e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b0b      	cmp	r3, #11
 8007402:	d101      	bne.n	8007408 <UART_SetConfig+0xc68>
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	e022      	b.n	800744e <UART_SetConfig+0xcae>
 8007408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740c:	e01f      	b.n	800744e <UART_SetConfig+0xcae>
 800740e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007412:	e01c      	b.n	800744e <UART_SetConfig+0xcae>
 8007414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007418:	e019      	b.n	800744e <UART_SetConfig+0xcae>
 800741a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741e:	e016      	b.n	800744e <UART_SetConfig+0xcae>
 8007420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007424:	e013      	b.n	800744e <UART_SetConfig+0xcae>
 8007426:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800742a:	e010      	b.n	800744e <UART_SetConfig+0xcae>
 800742c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007430:	e00d      	b.n	800744e <UART_SetConfig+0xcae>
 8007432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007436:	e00a      	b.n	800744e <UART_SetConfig+0xcae>
 8007438:	f241 5355 	movw	r3, #5461	; 0x1555
 800743c:	e007      	b.n	800744e <UART_SetConfig+0xcae>
 800743e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007442:	e004      	b.n	800744e <UART_SetConfig+0xcae>
 8007444:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007448:	e001      	b.n	800744e <UART_SetConfig+0xcae>
 800744a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007450:	e003      	b.n	800745a <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007458:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	f001 83e8 	beq.w	8008c32 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4413      	add	r3, r2
 800746c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746e:	429a      	cmp	r2, r3
 8007470:	d305      	bcc.n	800747e <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800747a:	429a      	cmp	r2, r3
 800747c:	d904      	bls.n	8007488 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007484:	f001 bbd5 	b.w	8008c32 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8007488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800748c:	2b08      	cmp	r3, #8
 800748e:	f000 8154 	beq.w	800773a <UART_SetConfig+0xf9a>
 8007492:	2b08      	cmp	r3, #8
 8007494:	dc06      	bgt.n	80074a4 <UART_SetConfig+0xd04>
 8007496:	2b02      	cmp	r3, #2
 8007498:	d00f      	beq.n	80074ba <UART_SetConfig+0xd1a>
 800749a:	2b04      	cmp	r3, #4
 800749c:	f000 80ac 	beq.w	80075f8 <UART_SetConfig+0xe58>
 80074a0:	f000 bc30 	b.w	8007d04 <UART_SetConfig+0x1564>
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	f000 832d 	beq.w	8007b04 <UART_SetConfig+0x1364>
 80074aa:	2b40      	cmp	r3, #64	; 0x40
 80074ac:	f000 83a5 	beq.w	8007bfa <UART_SetConfig+0x145a>
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	f000 81e3 	beq.w	800787c <UART_SetConfig+0x10dc>
 80074b6:	f000 bc25 	b.w	8007d04 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074ba:	f7fe fafb 	bl	8005ab4 <HAL_RCCEx_GetD3PCLK1Freq>
 80074be:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	4618      	mov	r0, r3
 80074c4:	f04f 0100 	mov.w	r1, #0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d067      	beq.n	80075a0 <UART_SetConfig+0xe00>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d05e      	beq.n	8007596 <UART_SetConfig+0xdf6>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d055      	beq.n	800758c <UART_SetConfig+0xdec>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d04c      	beq.n	8007582 <UART_SetConfig+0xde2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d043      	beq.n	8007578 <UART_SetConfig+0xdd8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b05      	cmp	r3, #5
 80074f6:	d03a      	beq.n	800756e <UART_SetConfig+0xdce>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b06      	cmp	r3, #6
 80074fe:	d031      	beq.n	8007564 <UART_SetConfig+0xdc4>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b07      	cmp	r3, #7
 8007506:	d028      	beq.n	800755a <UART_SetConfig+0xdba>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b08      	cmp	r3, #8
 800750e:	d01f      	beq.n	8007550 <UART_SetConfig+0xdb0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b09      	cmp	r3, #9
 8007516:	d016      	beq.n	8007546 <UART_SetConfig+0xda6>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b0a      	cmp	r3, #10
 800751e:	d00d      	beq.n	800753c <UART_SetConfig+0xd9c>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b0b      	cmp	r3, #11
 8007526:	d104      	bne.n	8007532 <UART_SetConfig+0xd92>
 8007528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800752c:	f04f 0400 	mov.w	r4, #0
 8007530:	e03a      	b.n	80075a8 <UART_SetConfig+0xe08>
 8007532:	f04f 0301 	mov.w	r3, #1
 8007536:	f04f 0400 	mov.w	r4, #0
 800753a:	e035      	b.n	80075a8 <UART_SetConfig+0xe08>
 800753c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007540:	f04f 0400 	mov.w	r4, #0
 8007544:	e030      	b.n	80075a8 <UART_SetConfig+0xe08>
 8007546:	f04f 0340 	mov.w	r3, #64	; 0x40
 800754a:	f04f 0400 	mov.w	r4, #0
 800754e:	e02b      	b.n	80075a8 <UART_SetConfig+0xe08>
 8007550:	f04f 0320 	mov.w	r3, #32
 8007554:	f04f 0400 	mov.w	r4, #0
 8007558:	e026      	b.n	80075a8 <UART_SetConfig+0xe08>
 800755a:	f04f 0310 	mov.w	r3, #16
 800755e:	f04f 0400 	mov.w	r4, #0
 8007562:	e021      	b.n	80075a8 <UART_SetConfig+0xe08>
 8007564:	f04f 030c 	mov.w	r3, #12
 8007568:	f04f 0400 	mov.w	r4, #0
 800756c:	e01c      	b.n	80075a8 <UART_SetConfig+0xe08>
 800756e:	f04f 030a 	mov.w	r3, #10
 8007572:	f04f 0400 	mov.w	r4, #0
 8007576:	e017      	b.n	80075a8 <UART_SetConfig+0xe08>
 8007578:	f04f 0308 	mov.w	r3, #8
 800757c:	f04f 0400 	mov.w	r4, #0
 8007580:	e012      	b.n	80075a8 <UART_SetConfig+0xe08>
 8007582:	f04f 0306 	mov.w	r3, #6
 8007586:	f04f 0400 	mov.w	r4, #0
 800758a:	e00d      	b.n	80075a8 <UART_SetConfig+0xe08>
 800758c:	f04f 0304 	mov.w	r3, #4
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	e008      	b.n	80075a8 <UART_SetConfig+0xe08>
 8007596:	f04f 0302 	mov.w	r3, #2
 800759a:	f04f 0400 	mov.w	r4, #0
 800759e:	e003      	b.n	80075a8 <UART_SetConfig+0xe08>
 80075a0:	f04f 0301 	mov.w	r3, #1
 80075a4:	f04f 0400 	mov.w	r4, #0
 80075a8:	461a      	mov	r2, r3
 80075aa:	4623      	mov	r3, r4
 80075ac:	f7f8 fef0 	bl	8000390 <__aeabi_uldivmod>
 80075b0:	4603      	mov	r3, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	4619      	mov	r1, r3
 80075b6:	4622      	mov	r2, r4
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	f04f 0400 	mov.w	r4, #0
 80075c0:	0214      	lsls	r4, r2, #8
 80075c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075c6:	020b      	lsls	r3, r1, #8
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6852      	ldr	r2, [r2, #4]
 80075cc:	0852      	lsrs	r2, r2, #1
 80075ce:	4611      	mov	r1, r2
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	eb13 0b01 	adds.w	fp, r3, r1
 80075d8:	eb44 0c02 	adc.w	ip, r4, r2
 80075dc:	4658      	mov	r0, fp
 80075de:	4661      	mov	r1, ip
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f04f 0400 	mov.w	r4, #0
 80075e8:	461a      	mov	r2, r3
 80075ea:	4623      	mov	r3, r4
 80075ec:	f7f8 fed0 	bl	8000390 <__aeabi_uldivmod>
 80075f0:	4603      	mov	r3, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075f6:	e389      	b.n	8007d0c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f8:	f107 0318 	add.w	r3, r7, #24
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fa6f 	bl	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	4618      	mov	r0, r3
 8007606:	f04f 0100 	mov.w	r1, #0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2b00      	cmp	r3, #0
 8007610:	d067      	beq.n	80076e2 <UART_SetConfig+0xf42>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b01      	cmp	r3, #1
 8007618:	d05e      	beq.n	80076d8 <UART_SetConfig+0xf38>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b02      	cmp	r3, #2
 8007620:	d055      	beq.n	80076ce <UART_SetConfig+0xf2e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b03      	cmp	r3, #3
 8007628:	d04c      	beq.n	80076c4 <UART_SetConfig+0xf24>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b04      	cmp	r3, #4
 8007630:	d043      	beq.n	80076ba <UART_SetConfig+0xf1a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b05      	cmp	r3, #5
 8007638:	d03a      	beq.n	80076b0 <UART_SetConfig+0xf10>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b06      	cmp	r3, #6
 8007640:	d031      	beq.n	80076a6 <UART_SetConfig+0xf06>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b07      	cmp	r3, #7
 8007648:	d028      	beq.n	800769c <UART_SetConfig+0xefc>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b08      	cmp	r3, #8
 8007650:	d01f      	beq.n	8007692 <UART_SetConfig+0xef2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b09      	cmp	r3, #9
 8007658:	d016      	beq.n	8007688 <UART_SetConfig+0xee8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b0a      	cmp	r3, #10
 8007660:	d00d      	beq.n	800767e <UART_SetConfig+0xede>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b0b      	cmp	r3, #11
 8007668:	d104      	bne.n	8007674 <UART_SetConfig+0xed4>
 800766a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800766e:	f04f 0400 	mov.w	r4, #0
 8007672:	e03a      	b.n	80076ea <UART_SetConfig+0xf4a>
 8007674:	f04f 0301 	mov.w	r3, #1
 8007678:	f04f 0400 	mov.w	r4, #0
 800767c:	e035      	b.n	80076ea <UART_SetConfig+0xf4a>
 800767e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	e030      	b.n	80076ea <UART_SetConfig+0xf4a>
 8007688:	f04f 0340 	mov.w	r3, #64	; 0x40
 800768c:	f04f 0400 	mov.w	r4, #0
 8007690:	e02b      	b.n	80076ea <UART_SetConfig+0xf4a>
 8007692:	f04f 0320 	mov.w	r3, #32
 8007696:	f04f 0400 	mov.w	r4, #0
 800769a:	e026      	b.n	80076ea <UART_SetConfig+0xf4a>
 800769c:	f04f 0310 	mov.w	r3, #16
 80076a0:	f04f 0400 	mov.w	r4, #0
 80076a4:	e021      	b.n	80076ea <UART_SetConfig+0xf4a>
 80076a6:	f04f 030c 	mov.w	r3, #12
 80076aa:	f04f 0400 	mov.w	r4, #0
 80076ae:	e01c      	b.n	80076ea <UART_SetConfig+0xf4a>
 80076b0:	f04f 030a 	mov.w	r3, #10
 80076b4:	f04f 0400 	mov.w	r4, #0
 80076b8:	e017      	b.n	80076ea <UART_SetConfig+0xf4a>
 80076ba:	f04f 0308 	mov.w	r3, #8
 80076be:	f04f 0400 	mov.w	r4, #0
 80076c2:	e012      	b.n	80076ea <UART_SetConfig+0xf4a>
 80076c4:	f04f 0306 	mov.w	r3, #6
 80076c8:	f04f 0400 	mov.w	r4, #0
 80076cc:	e00d      	b.n	80076ea <UART_SetConfig+0xf4a>
 80076ce:	f04f 0304 	mov.w	r3, #4
 80076d2:	f04f 0400 	mov.w	r4, #0
 80076d6:	e008      	b.n	80076ea <UART_SetConfig+0xf4a>
 80076d8:	f04f 0302 	mov.w	r3, #2
 80076dc:	f04f 0400 	mov.w	r4, #0
 80076e0:	e003      	b.n	80076ea <UART_SetConfig+0xf4a>
 80076e2:	f04f 0301 	mov.w	r3, #1
 80076e6:	f04f 0400 	mov.w	r4, #0
 80076ea:	461a      	mov	r2, r3
 80076ec:	4623      	mov	r3, r4
 80076ee:	f7f8 fe4f 	bl	8000390 <__aeabi_uldivmod>
 80076f2:	4603      	mov	r3, r0
 80076f4:	460c      	mov	r4, r1
 80076f6:	4619      	mov	r1, r3
 80076f8:	4622      	mov	r2, r4
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	f04f 0400 	mov.w	r4, #0
 8007702:	0214      	lsls	r4, r2, #8
 8007704:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007708:	020b      	lsls	r3, r1, #8
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6852      	ldr	r2, [r2, #4]
 800770e:	0852      	lsrs	r2, r2, #1
 8007710:	4611      	mov	r1, r2
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	eb13 0b01 	adds.w	fp, r3, r1
 800771a:	eb44 0c02 	adc.w	ip, r4, r2
 800771e:	4658      	mov	r0, fp
 8007720:	4661      	mov	r1, ip
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f04f 0400 	mov.w	r4, #0
 800772a:	461a      	mov	r2, r3
 800772c:	4623      	mov	r3, r4
 800772e:	f7f8 fe2f 	bl	8000390 <__aeabi_uldivmod>
 8007732:	4603      	mov	r3, r0
 8007734:	460c      	mov	r4, r1
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007738:	e2e8      	b.n	8007d0c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800773a:	f107 030c 	add.w	r3, r7, #12
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fb1a 	bl	8005d78 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	4618      	mov	r0, r3
 8007748:	f04f 0100 	mov.w	r1, #0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d067      	beq.n	8007824 <UART_SetConfig+0x1084>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b01      	cmp	r3, #1
 800775a:	d05e      	beq.n	800781a <UART_SetConfig+0x107a>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b02      	cmp	r3, #2
 8007762:	d055      	beq.n	8007810 <UART_SetConfig+0x1070>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2b03      	cmp	r3, #3
 800776a:	d04c      	beq.n	8007806 <UART_SetConfig+0x1066>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b04      	cmp	r3, #4
 8007772:	d043      	beq.n	80077fc <UART_SetConfig+0x105c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b05      	cmp	r3, #5
 800777a:	d03a      	beq.n	80077f2 <UART_SetConfig+0x1052>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b06      	cmp	r3, #6
 8007782:	d031      	beq.n	80077e8 <UART_SetConfig+0x1048>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b07      	cmp	r3, #7
 800778a:	d028      	beq.n	80077de <UART_SetConfig+0x103e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b08      	cmp	r3, #8
 8007792:	d01f      	beq.n	80077d4 <UART_SetConfig+0x1034>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b09      	cmp	r3, #9
 800779a:	d016      	beq.n	80077ca <UART_SetConfig+0x102a>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b0a      	cmp	r3, #10
 80077a2:	d00d      	beq.n	80077c0 <UART_SetConfig+0x1020>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b0b      	cmp	r3, #11
 80077aa:	d104      	bne.n	80077b6 <UART_SetConfig+0x1016>
 80077ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077b0:	f04f 0400 	mov.w	r4, #0
 80077b4:	e03a      	b.n	800782c <UART_SetConfig+0x108c>
 80077b6:	f04f 0301 	mov.w	r3, #1
 80077ba:	f04f 0400 	mov.w	r4, #0
 80077be:	e035      	b.n	800782c <UART_SetConfig+0x108c>
 80077c0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077c4:	f04f 0400 	mov.w	r4, #0
 80077c8:	e030      	b.n	800782c <UART_SetConfig+0x108c>
 80077ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80077ce:	f04f 0400 	mov.w	r4, #0
 80077d2:	e02b      	b.n	800782c <UART_SetConfig+0x108c>
 80077d4:	f04f 0320 	mov.w	r3, #32
 80077d8:	f04f 0400 	mov.w	r4, #0
 80077dc:	e026      	b.n	800782c <UART_SetConfig+0x108c>
 80077de:	f04f 0310 	mov.w	r3, #16
 80077e2:	f04f 0400 	mov.w	r4, #0
 80077e6:	e021      	b.n	800782c <UART_SetConfig+0x108c>
 80077e8:	f04f 030c 	mov.w	r3, #12
 80077ec:	f04f 0400 	mov.w	r4, #0
 80077f0:	e01c      	b.n	800782c <UART_SetConfig+0x108c>
 80077f2:	f04f 030a 	mov.w	r3, #10
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	e017      	b.n	800782c <UART_SetConfig+0x108c>
 80077fc:	f04f 0308 	mov.w	r3, #8
 8007800:	f04f 0400 	mov.w	r4, #0
 8007804:	e012      	b.n	800782c <UART_SetConfig+0x108c>
 8007806:	f04f 0306 	mov.w	r3, #6
 800780a:	f04f 0400 	mov.w	r4, #0
 800780e:	e00d      	b.n	800782c <UART_SetConfig+0x108c>
 8007810:	f04f 0304 	mov.w	r3, #4
 8007814:	f04f 0400 	mov.w	r4, #0
 8007818:	e008      	b.n	800782c <UART_SetConfig+0x108c>
 800781a:	f04f 0302 	mov.w	r3, #2
 800781e:	f04f 0400 	mov.w	r4, #0
 8007822:	e003      	b.n	800782c <UART_SetConfig+0x108c>
 8007824:	f04f 0301 	mov.w	r3, #1
 8007828:	f04f 0400 	mov.w	r4, #0
 800782c:	461a      	mov	r2, r3
 800782e:	4623      	mov	r3, r4
 8007830:	f7f8 fdae 	bl	8000390 <__aeabi_uldivmod>
 8007834:	4603      	mov	r3, r0
 8007836:	460c      	mov	r4, r1
 8007838:	4619      	mov	r1, r3
 800783a:	4622      	mov	r2, r4
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	f04f 0400 	mov.w	r4, #0
 8007844:	0214      	lsls	r4, r2, #8
 8007846:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800784a:	020b      	lsls	r3, r1, #8
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6852      	ldr	r2, [r2, #4]
 8007850:	0852      	lsrs	r2, r2, #1
 8007852:	4611      	mov	r1, r2
 8007854:	f04f 0200 	mov.w	r2, #0
 8007858:	eb13 0b01 	adds.w	fp, r3, r1
 800785c:	eb44 0c02 	adc.w	ip, r4, r2
 8007860:	4658      	mov	r0, fp
 8007862:	4661      	mov	r1, ip
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f04f 0400 	mov.w	r4, #0
 800786c:	461a      	mov	r2, r3
 800786e:	4623      	mov	r3, r4
 8007870:	f7f8 fd8e 	bl	8000390 <__aeabi_uldivmod>
 8007874:	4603      	mov	r3, r0
 8007876:	460c      	mov	r4, r1
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800787a:	e247      	b.n	8007d0c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800787c:	4b96      	ldr	r3, [pc, #600]	; (8007ad8 <UART_SetConfig+0x1338>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80a3 	beq.w	80079d0 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788a:	4b93      	ldr	r3, [pc, #588]	; (8007ad8 <UART_SetConfig+0x1338>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	08db      	lsrs	r3, r3, #3
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	4a91      	ldr	r2, [pc, #580]	; (8007adc <UART_SetConfig+0x133c>)
 8007896:	fa22 f303 	lsr.w	r3, r2, r3
 800789a:	4618      	mov	r0, r3
 800789c:	f04f 0100 	mov.w	r1, #0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d067      	beq.n	8007978 <UART_SetConfig+0x11d8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d05e      	beq.n	800796e <UART_SetConfig+0x11ce>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d055      	beq.n	8007964 <UART_SetConfig+0x11c4>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d04c      	beq.n	800795a <UART_SetConfig+0x11ba>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d043      	beq.n	8007950 <UART_SetConfig+0x11b0>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d03a      	beq.n	8007946 <UART_SetConfig+0x11a6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d031      	beq.n	800793c <UART_SetConfig+0x119c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	2b07      	cmp	r3, #7
 80078de:	d028      	beq.n	8007932 <UART_SetConfig+0x1192>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d01f      	beq.n	8007928 <UART_SetConfig+0x1188>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2b09      	cmp	r3, #9
 80078ee:	d016      	beq.n	800791e <UART_SetConfig+0x117e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	2b0a      	cmp	r3, #10
 80078f6:	d00d      	beq.n	8007914 <UART_SetConfig+0x1174>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b0b      	cmp	r3, #11
 80078fe:	d104      	bne.n	800790a <UART_SetConfig+0x116a>
 8007900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007904:	f04f 0400 	mov.w	r4, #0
 8007908:	e03a      	b.n	8007980 <UART_SetConfig+0x11e0>
 800790a:	f04f 0301 	mov.w	r3, #1
 800790e:	f04f 0400 	mov.w	r4, #0
 8007912:	e035      	b.n	8007980 <UART_SetConfig+0x11e0>
 8007914:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007918:	f04f 0400 	mov.w	r4, #0
 800791c:	e030      	b.n	8007980 <UART_SetConfig+0x11e0>
 800791e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007922:	f04f 0400 	mov.w	r4, #0
 8007926:	e02b      	b.n	8007980 <UART_SetConfig+0x11e0>
 8007928:	f04f 0320 	mov.w	r3, #32
 800792c:	f04f 0400 	mov.w	r4, #0
 8007930:	e026      	b.n	8007980 <UART_SetConfig+0x11e0>
 8007932:	f04f 0310 	mov.w	r3, #16
 8007936:	f04f 0400 	mov.w	r4, #0
 800793a:	e021      	b.n	8007980 <UART_SetConfig+0x11e0>
 800793c:	f04f 030c 	mov.w	r3, #12
 8007940:	f04f 0400 	mov.w	r4, #0
 8007944:	e01c      	b.n	8007980 <UART_SetConfig+0x11e0>
 8007946:	f04f 030a 	mov.w	r3, #10
 800794a:	f04f 0400 	mov.w	r4, #0
 800794e:	e017      	b.n	8007980 <UART_SetConfig+0x11e0>
 8007950:	f04f 0308 	mov.w	r3, #8
 8007954:	f04f 0400 	mov.w	r4, #0
 8007958:	e012      	b.n	8007980 <UART_SetConfig+0x11e0>
 800795a:	f04f 0306 	mov.w	r3, #6
 800795e:	f04f 0400 	mov.w	r4, #0
 8007962:	e00d      	b.n	8007980 <UART_SetConfig+0x11e0>
 8007964:	f04f 0304 	mov.w	r3, #4
 8007968:	f04f 0400 	mov.w	r4, #0
 800796c:	e008      	b.n	8007980 <UART_SetConfig+0x11e0>
 800796e:	f04f 0302 	mov.w	r3, #2
 8007972:	f04f 0400 	mov.w	r4, #0
 8007976:	e003      	b.n	8007980 <UART_SetConfig+0x11e0>
 8007978:	f04f 0301 	mov.w	r3, #1
 800797c:	f04f 0400 	mov.w	r4, #0
 8007980:	461a      	mov	r2, r3
 8007982:	4623      	mov	r3, r4
 8007984:	f7f8 fd04 	bl	8000390 <__aeabi_uldivmod>
 8007988:	4603      	mov	r3, r0
 800798a:	460c      	mov	r4, r1
 800798c:	4619      	mov	r1, r3
 800798e:	4622      	mov	r2, r4
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	f04f 0400 	mov.w	r4, #0
 8007998:	0214      	lsls	r4, r2, #8
 800799a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800799e:	020b      	lsls	r3, r1, #8
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6852      	ldr	r2, [r2, #4]
 80079a4:	0852      	lsrs	r2, r2, #1
 80079a6:	4611      	mov	r1, r2
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	eb13 0b01 	adds.w	fp, r3, r1
 80079b0:	eb44 0c02 	adc.w	ip, r4, r2
 80079b4:	4658      	mov	r0, fp
 80079b6:	4661      	mov	r1, ip
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f04f 0400 	mov.w	r4, #0
 80079c0:	461a      	mov	r2, r3
 80079c2:	4623      	mov	r3, r4
 80079c4:	f7f8 fce4 	bl	8000390 <__aeabi_uldivmod>
 80079c8:	4603      	mov	r3, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80079ce:	e19d      	b.n	8007d0c <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d05b      	beq.n	8007a90 <UART_SetConfig+0x12f0>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d053      	beq.n	8007a88 <UART_SetConfig+0x12e8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d04b      	beq.n	8007a80 <UART_SetConfig+0x12e0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d043      	beq.n	8007a78 <UART_SetConfig+0x12d8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d03b      	beq.n	8007a70 <UART_SetConfig+0x12d0>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	2b05      	cmp	r3, #5
 80079fe:	d033      	beq.n	8007a68 <UART_SetConfig+0x12c8>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	2b06      	cmp	r3, #6
 8007a06:	d02b      	beq.n	8007a60 <UART_SetConfig+0x12c0>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	2b07      	cmp	r3, #7
 8007a0e:	d023      	beq.n	8007a58 <UART_SetConfig+0x12b8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d01b      	beq.n	8007a50 <UART_SetConfig+0x12b0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	2b09      	cmp	r3, #9
 8007a1e:	d013      	beq.n	8007a48 <UART_SetConfig+0x12a8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b0a      	cmp	r3, #10
 8007a26:	d00b      	beq.n	8007a40 <UART_SetConfig+0x12a0>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	2b0b      	cmp	r3, #11
 8007a2e:	d103      	bne.n	8007a38 <UART_SetConfig+0x1298>
 8007a30:	4b2a      	ldr	r3, [pc, #168]	; (8007adc <UART_SetConfig+0x133c>)
 8007a32:	f04f 0400 	mov.w	r4, #0
 8007a36:	e02e      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a38:	4b29      	ldr	r3, [pc, #164]	; (8007ae0 <UART_SetConfig+0x1340>)
 8007a3a:	f04f 0403 	mov.w	r4, #3
 8007a3e:	e02a      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a40:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <UART_SetConfig+0x1344>)
 8007a42:	f04f 0400 	mov.w	r4, #0
 8007a46:	e026      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a48:	4b27      	ldr	r3, [pc, #156]	; (8007ae8 <UART_SetConfig+0x1348>)
 8007a4a:	f04f 0400 	mov.w	r4, #0
 8007a4e:	e022      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a50:	4b26      	ldr	r3, [pc, #152]	; (8007aec <UART_SetConfig+0x134c>)
 8007a52:	f04f 0400 	mov.w	r4, #0
 8007a56:	e01e      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a58:	4b25      	ldr	r3, [pc, #148]	; (8007af0 <UART_SetConfig+0x1350>)
 8007a5a:	f04f 0400 	mov.w	r4, #0
 8007a5e:	e01a      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a60:	a419      	add	r4, pc, #100	; (adr r4, 8007ac8 <UART_SetConfig+0x1328>)
 8007a62:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a66:	e016      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a68:	4b22      	ldr	r3, [pc, #136]	; (8007af4 <UART_SetConfig+0x1354>)
 8007a6a:	f04f 0400 	mov.w	r4, #0
 8007a6e:	e012      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a70:	4b21      	ldr	r3, [pc, #132]	; (8007af8 <UART_SetConfig+0x1358>)
 8007a72:	f04f 0400 	mov.w	r4, #0
 8007a76:	e00e      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a78:	a415      	add	r4, pc, #84	; (adr r4, 8007ad0 <UART_SetConfig+0x1330>)
 8007a7a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a7e:	e00a      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a80:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <UART_SetConfig+0x135c>)
 8007a82:	f04f 0400 	mov.w	r4, #0
 8007a86:	e006      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a88:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <UART_SetConfig+0x1360>)
 8007a8a:	f04f 0401 	mov.w	r4, #1
 8007a8e:	e002      	b.n	8007a96 <UART_SetConfig+0x12f6>
 8007a90:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <UART_SetConfig+0x1340>)
 8007a92:	f04f 0403 	mov.w	r4, #3
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6852      	ldr	r2, [r2, #4]
 8007a9a:	0852      	lsrs	r2, r2, #1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	eb13 0b01 	adds.w	fp, r3, r1
 8007aa6:	eb44 0c02 	adc.w	ip, r4, r2
 8007aaa:	4658      	mov	r0, fp
 8007aac:	4661      	mov	r1, ip
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f04f 0400 	mov.w	r4, #0
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4623      	mov	r3, r4
 8007aba:	f7f8 fc69 	bl	8000390 <__aeabi_uldivmod>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ac4:	e122      	b.n	8007d0c <UART_SetConfig+0x156c>
 8007ac6:	bf00      	nop
 8007ac8:	51615500 	.word	0x51615500
 8007acc:	00000000 	.word	0x00000000
 8007ad0:	a2c2aa00 	.word	0xa2c2aa00
 8007ad4:	00000000 	.word	0x00000000
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	03d09000 	.word	0x03d09000
 8007ae0:	d0900000 	.word	0xd0900000
 8007ae4:	07a12000 	.word	0x07a12000
 8007ae8:	0f424000 	.word	0x0f424000
 8007aec:	1e848000 	.word	0x1e848000
 8007af0:	3d090000 	.word	0x3d090000
 8007af4:	61a80000 	.word	0x61a80000
 8007af8:	7a120000 	.word	0x7a120000
 8007afc:	f4240000 	.word	0xf4240000
 8007b00:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d05b      	beq.n	8007bc4 <UART_SetConfig+0x1424>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d053      	beq.n	8007bbc <UART_SetConfig+0x141c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d04b      	beq.n	8007bb4 <UART_SetConfig+0x1414>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d043      	beq.n	8007bac <UART_SetConfig+0x140c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d03b      	beq.n	8007ba4 <UART_SetConfig+0x1404>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	2b05      	cmp	r3, #5
 8007b32:	d033      	beq.n	8007b9c <UART_SetConfig+0x13fc>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	2b06      	cmp	r3, #6
 8007b3a:	d02b      	beq.n	8007b94 <UART_SetConfig+0x13f4>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2b07      	cmp	r3, #7
 8007b42:	d023      	beq.n	8007b8c <UART_SetConfig+0x13ec>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d01b      	beq.n	8007b84 <UART_SetConfig+0x13e4>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	2b09      	cmp	r3, #9
 8007b52:	d013      	beq.n	8007b7c <UART_SetConfig+0x13dc>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2b0a      	cmp	r3, #10
 8007b5a:	d00b      	beq.n	8007b74 <UART_SetConfig+0x13d4>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	2b0b      	cmp	r3, #11
 8007b62:	d103      	bne.n	8007b6c <UART_SetConfig+0x13cc>
 8007b64:	4bc0      	ldr	r3, [pc, #768]	; (8007e68 <UART_SetConfig+0x16c8>)
 8007b66:	f04f 0400 	mov.w	r4, #0
 8007b6a:	e02e      	b.n	8007bca <UART_SetConfig+0x142a>
 8007b6c:	4bbf      	ldr	r3, [pc, #764]	; (8007e6c <UART_SetConfig+0x16cc>)
 8007b6e:	f04f 0400 	mov.w	r4, #0
 8007b72:	e02a      	b.n	8007bca <UART_SetConfig+0x142a>
 8007b74:	4bbe      	ldr	r3, [pc, #760]	; (8007e70 <UART_SetConfig+0x16d0>)
 8007b76:	f04f 0400 	mov.w	r4, #0
 8007b7a:	e026      	b.n	8007bca <UART_SetConfig+0x142a>
 8007b7c:	4bbd      	ldr	r3, [pc, #756]	; (8007e74 <UART_SetConfig+0x16d4>)
 8007b7e:	f04f 0400 	mov.w	r4, #0
 8007b82:	e022      	b.n	8007bca <UART_SetConfig+0x142a>
 8007b84:	4bbc      	ldr	r3, [pc, #752]	; (8007e78 <UART_SetConfig+0x16d8>)
 8007b86:	f04f 0400 	mov.w	r4, #0
 8007b8a:	e01e      	b.n	8007bca <UART_SetConfig+0x142a>
 8007b8c:	4bbb      	ldr	r3, [pc, #748]	; (8007e7c <UART_SetConfig+0x16dc>)
 8007b8e:	f04f 0400 	mov.w	r4, #0
 8007b92:	e01a      	b.n	8007bca <UART_SetConfig+0x142a>
 8007b94:	a4b0      	add	r4, pc, #704	; (adr r4, 8007e58 <UART_SetConfig+0x16b8>)
 8007b96:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b9a:	e016      	b.n	8007bca <UART_SetConfig+0x142a>
 8007b9c:	4bb8      	ldr	r3, [pc, #736]	; (8007e80 <UART_SetConfig+0x16e0>)
 8007b9e:	f04f 0400 	mov.w	r4, #0
 8007ba2:	e012      	b.n	8007bca <UART_SetConfig+0x142a>
 8007ba4:	4bb7      	ldr	r3, [pc, #732]	; (8007e84 <UART_SetConfig+0x16e4>)
 8007ba6:	f04f 0400 	mov.w	r4, #0
 8007baa:	e00e      	b.n	8007bca <UART_SetConfig+0x142a>
 8007bac:	a4ac      	add	r4, pc, #688	; (adr r4, 8007e60 <UART_SetConfig+0x16c0>)
 8007bae:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007bb2:	e00a      	b.n	8007bca <UART_SetConfig+0x142a>
 8007bb4:	4bb4      	ldr	r3, [pc, #720]	; (8007e88 <UART_SetConfig+0x16e8>)
 8007bb6:	f04f 0400 	mov.w	r4, #0
 8007bba:	e006      	b.n	8007bca <UART_SetConfig+0x142a>
 8007bbc:	4bb3      	ldr	r3, [pc, #716]	; (8007e8c <UART_SetConfig+0x16ec>)
 8007bbe:	f04f 0400 	mov.w	r4, #0
 8007bc2:	e002      	b.n	8007bca <UART_SetConfig+0x142a>
 8007bc4:	4ba9      	ldr	r3, [pc, #676]	; (8007e6c <UART_SetConfig+0x16cc>)
 8007bc6:	f04f 0400 	mov.w	r4, #0
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6852      	ldr	r2, [r2, #4]
 8007bce:	0852      	lsrs	r2, r2, #1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	eb13 0b01 	adds.w	fp, r3, r1
 8007bda:	eb44 0c02 	adc.w	ip, r4, r2
 8007bde:	4658      	mov	r0, fp
 8007be0:	4661      	mov	r1, ip
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f04f 0400 	mov.w	r4, #0
 8007bea:	461a      	mov	r2, r3
 8007bec:	4623      	mov	r3, r4
 8007bee:	f7f8 fbcf 	bl	8000390 <__aeabi_uldivmod>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007bf8:	e088      	b.n	8007d0c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d064      	beq.n	8007ccc <UART_SetConfig+0x152c>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d05b      	beq.n	8007cc2 <UART_SetConfig+0x1522>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d052      	beq.n	8007cb8 <UART_SetConfig+0x1518>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d04a      	beq.n	8007cb0 <UART_SetConfig+0x1510>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d041      	beq.n	8007ca6 <UART_SetConfig+0x1506>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d039      	beq.n	8007c9e <UART_SetConfig+0x14fe>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	2b06      	cmp	r3, #6
 8007c30:	d031      	beq.n	8007c96 <UART_SetConfig+0x14f6>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	2b07      	cmp	r3, #7
 8007c38:	d028      	beq.n	8007c8c <UART_SetConfig+0x14ec>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d01f      	beq.n	8007c82 <UART_SetConfig+0x14e2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	2b09      	cmp	r3, #9
 8007c48:	d016      	beq.n	8007c78 <UART_SetConfig+0x14d8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	2b0a      	cmp	r3, #10
 8007c50:	d00d      	beq.n	8007c6e <UART_SetConfig+0x14ce>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	2b0b      	cmp	r3, #11
 8007c58:	d104      	bne.n	8007c64 <UART_SetConfig+0x14c4>
 8007c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5e:	f04f 0400 	mov.w	r4, #0
 8007c62:	e037      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007c64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c68:	f04f 0400 	mov.w	r4, #0
 8007c6c:	e032      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c72:	f04f 0400 	mov.w	r4, #0
 8007c76:	e02d      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c7c:	f04f 0400 	mov.w	r4, #0
 8007c80:	e028      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007c82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c86:	f04f 0400 	mov.w	r4, #0
 8007c8a:	e023      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007c8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c90:	f04f 0400 	mov.w	r4, #0
 8007c94:	e01e      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007c96:	4b7e      	ldr	r3, [pc, #504]	; (8007e90 <UART_SetConfig+0x16f0>)
 8007c98:	f04f 0400 	mov.w	r4, #0
 8007c9c:	e01a      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007c9e:	4b7d      	ldr	r3, [pc, #500]	; (8007e94 <UART_SetConfig+0x16f4>)
 8007ca0:	f04f 0400 	mov.w	r4, #0
 8007ca4:	e016      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007ca6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007caa:	f04f 0400 	mov.w	r4, #0
 8007cae:	e011      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007cb0:	4b79      	ldr	r3, [pc, #484]	; (8007e98 <UART_SetConfig+0x16f8>)
 8007cb2:	f04f 0400 	mov.w	r4, #0
 8007cb6:	e00d      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007cb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007cbc:	f04f 0400 	mov.w	r4, #0
 8007cc0:	e008      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007cc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cc6:	f04f 0400 	mov.w	r4, #0
 8007cca:	e003      	b.n	8007cd4 <UART_SetConfig+0x1534>
 8007ccc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cd0:	f04f 0400 	mov.w	r4, #0
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6852      	ldr	r2, [r2, #4]
 8007cd8:	0852      	lsrs	r2, r2, #1
 8007cda:	4611      	mov	r1, r2
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	eb13 0b01 	adds.w	fp, r3, r1
 8007ce4:	eb44 0c02 	adc.w	ip, r4, r2
 8007ce8:	4658      	mov	r0, fp
 8007cea:	4661      	mov	r1, ip
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f04f 0400 	mov.w	r4, #0
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4623      	mov	r3, r4
 8007cf8:	f7f8 fb4a 	bl	8000390 <__aeabi_uldivmod>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d02:	e003      	b.n	8007d0c <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007d0a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d12:	d309      	bcc.n	8007d28 <UART_SetConfig+0x1588>
 8007d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1a:	d205      	bcs.n	8007d28 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d22:	60da      	str	r2, [r3, #12]
 8007d24:	f000 bf85 	b.w	8008c32 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d2e:	f000 bf80 	b.w	8008c32 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d3a:	f040 83da 	bne.w	80084f2 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 8007d3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	f200 83b3 	bhi.w	80084ae <UART_SetConfig+0x1d0e>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0x15b0>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007e9d 	.word	0x08007e9d
 8007d54:	08007f55 	.word	0x08007f55
 8007d58:	080084af 	.word	0x080084af
 8007d5c:	080084af 	.word	0x080084af
 8007d60:	0800800d 	.word	0x0800800d
 8007d64:	080084af 	.word	0x080084af
 8007d68:	080084af 	.word	0x080084af
 8007d6c:	080084af 	.word	0x080084af
 8007d70:	080080c9 	.word	0x080080c9
 8007d74:	080084af 	.word	0x080084af
 8007d78:	080084af 	.word	0x080084af
 8007d7c:	080084af 	.word	0x080084af
 8007d80:	080084af 	.word	0x080084af
 8007d84:	080084af 	.word	0x080084af
 8007d88:	080084af 	.word	0x080084af
 8007d8c:	080084af 	.word	0x080084af
 8007d90:	08008185 	.word	0x08008185
 8007d94:	080084af 	.word	0x080084af
 8007d98:	080084af 	.word	0x080084af
 8007d9c:	080084af 	.word	0x080084af
 8007da0:	080084af 	.word	0x080084af
 8007da4:	080084af 	.word	0x080084af
 8007da8:	080084af 	.word	0x080084af
 8007dac:	080084af 	.word	0x080084af
 8007db0:	080084af 	.word	0x080084af
 8007db4:	080084af 	.word	0x080084af
 8007db8:	080084af 	.word	0x080084af
 8007dbc:	080084af 	.word	0x080084af
 8007dc0:	080084af 	.word	0x080084af
 8007dc4:	080084af 	.word	0x080084af
 8007dc8:	080084af 	.word	0x080084af
 8007dcc:	080084af 	.word	0x080084af
 8007dd0:	080082f7 	.word	0x080082f7
 8007dd4:	080084af 	.word	0x080084af
 8007dd8:	080084af 	.word	0x080084af
 8007ddc:	080084af 	.word	0x080084af
 8007de0:	080084af 	.word	0x080084af
 8007de4:	080084af 	.word	0x080084af
 8007de8:	080084af 	.word	0x080084af
 8007dec:	080084af 	.word	0x080084af
 8007df0:	080084af 	.word	0x080084af
 8007df4:	080084af 	.word	0x080084af
 8007df8:	080084af 	.word	0x080084af
 8007dfc:	080084af 	.word	0x080084af
 8007e00:	080084af 	.word	0x080084af
 8007e04:	080084af 	.word	0x080084af
 8007e08:	080084af 	.word	0x080084af
 8007e0c:	080084af 	.word	0x080084af
 8007e10:	080084af 	.word	0x080084af
 8007e14:	080084af 	.word	0x080084af
 8007e18:	080084af 	.word	0x080084af
 8007e1c:	080084af 	.word	0x080084af
 8007e20:	080084af 	.word	0x080084af
 8007e24:	080084af 	.word	0x080084af
 8007e28:	080084af 	.word	0x080084af
 8007e2c:	080084af 	.word	0x080084af
 8007e30:	080084af 	.word	0x080084af
 8007e34:	080084af 	.word	0x080084af
 8007e38:	080084af 	.word	0x080084af
 8007e3c:	080084af 	.word	0x080084af
 8007e40:	080084af 	.word	0x080084af
 8007e44:	080084af 	.word	0x080084af
 8007e48:	080084af 	.word	0x080084af
 8007e4c:	080084af 	.word	0x080084af
 8007e50:	080083ed 	.word	0x080083ed
 8007e54:	f3af 8000 	nop.w
 8007e58:	05161500 	.word	0x05161500
 8007e5c:	00000000 	.word	0x00000000
 8007e60:	0a2c2a00 	.word	0x0a2c2a00
 8007e64:	00000000 	.word	0x00000000
 8007e68:	003d0900 	.word	0x003d0900
 8007e6c:	3d090000 	.word	0x3d090000
 8007e70:	007a1200 	.word	0x007a1200
 8007e74:	00f42400 	.word	0x00f42400
 8007e78:	01e84800 	.word	0x01e84800
 8007e7c:	03d09000 	.word	0x03d09000
 8007e80:	061a8000 	.word	0x061a8000
 8007e84:	07a12000 	.word	0x07a12000
 8007e88:	0f424000 	.word	0x0f424000
 8007e8c:	1e848000 	.word	0x1e848000
 8007e90:	000aaa00 	.word	0x000aaa00
 8007e94:	000ccc00 	.word	0x000ccc00
 8007e98:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fc fc3c 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d044      	beq.n	8007f34 <UART_SetConfig+0x1794>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d03e      	beq.n	8007f30 <UART_SetConfig+0x1790>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d038      	beq.n	8007f2c <UART_SetConfig+0x178c>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d032      	beq.n	8007f28 <UART_SetConfig+0x1788>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d02c      	beq.n	8007f24 <UART_SetConfig+0x1784>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b05      	cmp	r3, #5
 8007ed0:	d026      	beq.n	8007f20 <UART_SetConfig+0x1780>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	2b06      	cmp	r3, #6
 8007ed8:	d020      	beq.n	8007f1c <UART_SetConfig+0x177c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	2b07      	cmp	r3, #7
 8007ee0:	d01a      	beq.n	8007f18 <UART_SetConfig+0x1778>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d014      	beq.n	8007f14 <UART_SetConfig+0x1774>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b09      	cmp	r3, #9
 8007ef0:	d00e      	beq.n	8007f10 <UART_SetConfig+0x1770>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	2b0a      	cmp	r3, #10
 8007ef8:	d008      	beq.n	8007f0c <UART_SetConfig+0x176c>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b0b      	cmp	r3, #11
 8007f00:	d102      	bne.n	8007f08 <UART_SetConfig+0x1768>
 8007f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f06:	e016      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e014      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f0c:	2380      	movs	r3, #128	; 0x80
 8007f0e:	e012      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f10:	2340      	movs	r3, #64	; 0x40
 8007f12:	e010      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f14:	2320      	movs	r3, #32
 8007f16:	e00e      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	e00c      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	e00a      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f20:	230a      	movs	r3, #10
 8007f22:	e008      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f24:	2308      	movs	r3, #8
 8007f26:	e006      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f28:	2306      	movs	r3, #6
 8007f2a:	e004      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	e002      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f30:	2302      	movs	r3, #2
 8007f32:	e000      	b.n	8007f36 <UART_SetConfig+0x1796>
 8007f34:	2301      	movs	r3, #1
 8007f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3c:	005a      	lsls	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	441a      	add	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f52:	e2b0      	b.n	80084b6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f54:	f7fc fbf6 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 8007f58:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d044      	beq.n	8007fec <UART_SetConfig+0x184c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d03e      	beq.n	8007fe8 <UART_SetConfig+0x1848>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d038      	beq.n	8007fe4 <UART_SetConfig+0x1844>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d032      	beq.n	8007fe0 <UART_SetConfig+0x1840>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d02c      	beq.n	8007fdc <UART_SetConfig+0x183c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d026      	beq.n	8007fd8 <UART_SetConfig+0x1838>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	2b06      	cmp	r3, #6
 8007f90:	d020      	beq.n	8007fd4 <UART_SetConfig+0x1834>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b07      	cmp	r3, #7
 8007f98:	d01a      	beq.n	8007fd0 <UART_SetConfig+0x1830>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d014      	beq.n	8007fcc <UART_SetConfig+0x182c>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	2b09      	cmp	r3, #9
 8007fa8:	d00e      	beq.n	8007fc8 <UART_SetConfig+0x1828>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	2b0a      	cmp	r3, #10
 8007fb0:	d008      	beq.n	8007fc4 <UART_SetConfig+0x1824>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	2b0b      	cmp	r3, #11
 8007fb8:	d102      	bne.n	8007fc0 <UART_SetConfig+0x1820>
 8007fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fbe:	e016      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e014      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fc4:	2380      	movs	r3, #128	; 0x80
 8007fc6:	e012      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	e010      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fcc:	2320      	movs	r3, #32
 8007fce:	e00e      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	e00c      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	e00a      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fd8:	230a      	movs	r3, #10
 8007fda:	e008      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fdc:	2308      	movs	r3, #8
 8007fde:	e006      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fe0:	2306      	movs	r3, #6
 8007fe2:	e004      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	e002      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e000      	b.n	8007fee <UART_SetConfig+0x184e>
 8007fec:	2301      	movs	r3, #1
 8007fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff4:	005a      	lsls	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	085b      	lsrs	r3, r3, #1
 8007ffc:	441a      	add	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	fbb2 f3f3 	udiv	r3, r2, r3
 8008006:	b29b      	uxth	r3, r3
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800800a:	e254      	b.n	80084b6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800c:	f107 0318 	add.w	r3, r7, #24
 8008010:	4618      	mov	r0, r3
 8008012:	f7fd fd65 	bl	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	d044      	beq.n	80080aa <UART_SetConfig+0x190a>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	2b01      	cmp	r3, #1
 8008026:	d03e      	beq.n	80080a6 <UART_SetConfig+0x1906>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b02      	cmp	r3, #2
 800802e:	d038      	beq.n	80080a2 <UART_SetConfig+0x1902>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b03      	cmp	r3, #3
 8008036:	d032      	beq.n	800809e <UART_SetConfig+0x18fe>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b04      	cmp	r3, #4
 800803e:	d02c      	beq.n	800809a <UART_SetConfig+0x18fa>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b05      	cmp	r3, #5
 8008046:	d026      	beq.n	8008096 <UART_SetConfig+0x18f6>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b06      	cmp	r3, #6
 800804e:	d020      	beq.n	8008092 <UART_SetConfig+0x18f2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b07      	cmp	r3, #7
 8008056:	d01a      	beq.n	800808e <UART_SetConfig+0x18ee>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2b08      	cmp	r3, #8
 800805e:	d014      	beq.n	800808a <UART_SetConfig+0x18ea>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b09      	cmp	r3, #9
 8008066:	d00e      	beq.n	8008086 <UART_SetConfig+0x18e6>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b0a      	cmp	r3, #10
 800806e:	d008      	beq.n	8008082 <UART_SetConfig+0x18e2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b0b      	cmp	r3, #11
 8008076:	d102      	bne.n	800807e <UART_SetConfig+0x18de>
 8008078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800807c:	e016      	b.n	80080ac <UART_SetConfig+0x190c>
 800807e:	2301      	movs	r3, #1
 8008080:	e014      	b.n	80080ac <UART_SetConfig+0x190c>
 8008082:	2380      	movs	r3, #128	; 0x80
 8008084:	e012      	b.n	80080ac <UART_SetConfig+0x190c>
 8008086:	2340      	movs	r3, #64	; 0x40
 8008088:	e010      	b.n	80080ac <UART_SetConfig+0x190c>
 800808a:	2320      	movs	r3, #32
 800808c:	e00e      	b.n	80080ac <UART_SetConfig+0x190c>
 800808e:	2310      	movs	r3, #16
 8008090:	e00c      	b.n	80080ac <UART_SetConfig+0x190c>
 8008092:	230c      	movs	r3, #12
 8008094:	e00a      	b.n	80080ac <UART_SetConfig+0x190c>
 8008096:	230a      	movs	r3, #10
 8008098:	e008      	b.n	80080ac <UART_SetConfig+0x190c>
 800809a:	2308      	movs	r3, #8
 800809c:	e006      	b.n	80080ac <UART_SetConfig+0x190c>
 800809e:	2306      	movs	r3, #6
 80080a0:	e004      	b.n	80080ac <UART_SetConfig+0x190c>
 80080a2:	2304      	movs	r3, #4
 80080a4:	e002      	b.n	80080ac <UART_SetConfig+0x190c>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e000      	b.n	80080ac <UART_SetConfig+0x190c>
 80080aa:	2301      	movs	r3, #1
 80080ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b0:	005a      	lsls	r2, r3, #1
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080c6:	e1f6      	b.n	80084b6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c8:	f107 030c 	add.w	r3, r7, #12
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fd fe53 	bl	8005d78 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d044      	beq.n	8008166 <UART_SetConfig+0x19c6>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d03e      	beq.n	8008162 <UART_SetConfig+0x19c2>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d038      	beq.n	800815e <UART_SetConfig+0x19be>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d032      	beq.n	800815a <UART_SetConfig+0x19ba>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d02c      	beq.n	8008156 <UART_SetConfig+0x19b6>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	2b05      	cmp	r3, #5
 8008102:	d026      	beq.n	8008152 <UART_SetConfig+0x19b2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	2b06      	cmp	r3, #6
 800810a:	d020      	beq.n	800814e <UART_SetConfig+0x19ae>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b07      	cmp	r3, #7
 8008112:	d01a      	beq.n	800814a <UART_SetConfig+0x19aa>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b08      	cmp	r3, #8
 800811a:	d014      	beq.n	8008146 <UART_SetConfig+0x19a6>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b09      	cmp	r3, #9
 8008122:	d00e      	beq.n	8008142 <UART_SetConfig+0x19a2>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2b0a      	cmp	r3, #10
 800812a:	d008      	beq.n	800813e <UART_SetConfig+0x199e>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d102      	bne.n	800813a <UART_SetConfig+0x199a>
 8008134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008138:	e016      	b.n	8008168 <UART_SetConfig+0x19c8>
 800813a:	2301      	movs	r3, #1
 800813c:	e014      	b.n	8008168 <UART_SetConfig+0x19c8>
 800813e:	2380      	movs	r3, #128	; 0x80
 8008140:	e012      	b.n	8008168 <UART_SetConfig+0x19c8>
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	e010      	b.n	8008168 <UART_SetConfig+0x19c8>
 8008146:	2320      	movs	r3, #32
 8008148:	e00e      	b.n	8008168 <UART_SetConfig+0x19c8>
 800814a:	2310      	movs	r3, #16
 800814c:	e00c      	b.n	8008168 <UART_SetConfig+0x19c8>
 800814e:	230c      	movs	r3, #12
 8008150:	e00a      	b.n	8008168 <UART_SetConfig+0x19c8>
 8008152:	230a      	movs	r3, #10
 8008154:	e008      	b.n	8008168 <UART_SetConfig+0x19c8>
 8008156:	2308      	movs	r3, #8
 8008158:	e006      	b.n	8008168 <UART_SetConfig+0x19c8>
 800815a:	2306      	movs	r3, #6
 800815c:	e004      	b.n	8008168 <UART_SetConfig+0x19c8>
 800815e:	2304      	movs	r3, #4
 8008160:	e002      	b.n	8008168 <UART_SetConfig+0x19c8>
 8008162:	2302      	movs	r3, #2
 8008164:	e000      	b.n	8008168 <UART_SetConfig+0x19c8>
 8008166:	2301      	movs	r3, #1
 8008168:	fbb2 f3f3 	udiv	r3, r2, r3
 800816c:	005a      	lsls	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	fbb2 f3f3 	udiv	r3, r2, r3
 800817e:	b29b      	uxth	r3, r3
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008182:	e198      	b.n	80084b6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008184:	4b87      	ldr	r3, [pc, #540]	; (80083a4 <UART_SetConfig+0x1c04>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d05e      	beq.n	800824e <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008190:	4b84      	ldr	r3, [pc, #528]	; (80083a4 <UART_SetConfig+0x1c04>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	08db      	lsrs	r3, r3, #3
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	4a83      	ldr	r2, [pc, #524]	; (80083a8 <UART_SetConfig+0x1c08>)
 800819c:	40da      	lsrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d044      	beq.n	8008230 <UART_SetConfig+0x1a90>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d03e      	beq.n	800822c <UART_SetConfig+0x1a8c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d038      	beq.n	8008228 <UART_SetConfig+0x1a88>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d032      	beq.n	8008224 <UART_SetConfig+0x1a84>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d02c      	beq.n	8008220 <UART_SetConfig+0x1a80>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	d026      	beq.n	800821c <UART_SetConfig+0x1a7c>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2b06      	cmp	r3, #6
 80081d4:	d020      	beq.n	8008218 <UART_SetConfig+0x1a78>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	2b07      	cmp	r3, #7
 80081dc:	d01a      	beq.n	8008214 <UART_SetConfig+0x1a74>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	2b08      	cmp	r3, #8
 80081e4:	d014      	beq.n	8008210 <UART_SetConfig+0x1a70>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d00e      	beq.n	800820c <UART_SetConfig+0x1a6c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b0a      	cmp	r3, #10
 80081f4:	d008      	beq.n	8008208 <UART_SetConfig+0x1a68>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b0b      	cmp	r3, #11
 80081fc:	d102      	bne.n	8008204 <UART_SetConfig+0x1a64>
 80081fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008202:	e016      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008204:	2301      	movs	r3, #1
 8008206:	e014      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008208:	2380      	movs	r3, #128	; 0x80
 800820a:	e012      	b.n	8008232 <UART_SetConfig+0x1a92>
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	e010      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008210:	2320      	movs	r3, #32
 8008212:	e00e      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008214:	2310      	movs	r3, #16
 8008216:	e00c      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008218:	230c      	movs	r3, #12
 800821a:	e00a      	b.n	8008232 <UART_SetConfig+0x1a92>
 800821c:	230a      	movs	r3, #10
 800821e:	e008      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008220:	2308      	movs	r3, #8
 8008222:	e006      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008224:	2306      	movs	r3, #6
 8008226:	e004      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008228:	2304      	movs	r3, #4
 800822a:	e002      	b.n	8008232 <UART_SetConfig+0x1a92>
 800822c:	2302      	movs	r3, #2
 800822e:	e000      	b.n	8008232 <UART_SetConfig+0x1a92>
 8008230:	2301      	movs	r3, #1
 8008232:	fbb2 f3f3 	udiv	r3, r2, r3
 8008236:	005a      	lsls	r2, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	085b      	lsrs	r3, r3, #1
 800823e:	441a      	add	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	fbb2 f3f3 	udiv	r3, r2, r3
 8008248:	b29b      	uxth	r3, r3
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800824c:	e133      	b.n	80084b6 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d043      	beq.n	80082de <UART_SetConfig+0x1b3e>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b01      	cmp	r3, #1
 800825c:	d03d      	beq.n	80082da <UART_SetConfig+0x1b3a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b02      	cmp	r3, #2
 8008264:	d037      	beq.n	80082d6 <UART_SetConfig+0x1b36>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b03      	cmp	r3, #3
 800826c:	d031      	beq.n	80082d2 <UART_SetConfig+0x1b32>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b04      	cmp	r3, #4
 8008274:	d02b      	beq.n	80082ce <UART_SetConfig+0x1b2e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b05      	cmp	r3, #5
 800827c:	d025      	beq.n	80082ca <UART_SetConfig+0x1b2a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b06      	cmp	r3, #6
 8008284:	d01f      	beq.n	80082c6 <UART_SetConfig+0x1b26>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	2b07      	cmp	r3, #7
 800828c:	d019      	beq.n	80082c2 <UART_SetConfig+0x1b22>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	2b08      	cmp	r3, #8
 8008294:	d013      	beq.n	80082be <UART_SetConfig+0x1b1e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	2b09      	cmp	r3, #9
 800829c:	d00d      	beq.n	80082ba <UART_SetConfig+0x1b1a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b0a      	cmp	r3, #10
 80082a4:	d007      	beq.n	80082b6 <UART_SetConfig+0x1b16>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b0b      	cmp	r3, #11
 80082ac:	d101      	bne.n	80082b2 <UART_SetConfig+0x1b12>
 80082ae:	4b3f      	ldr	r3, [pc, #252]	; (80083ac <UART_SetConfig+0x1c0c>)
 80082b0:	e016      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082b2:	4b3f      	ldr	r3, [pc, #252]	; (80083b0 <UART_SetConfig+0x1c10>)
 80082b4:	e014      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082b6:	4b3f      	ldr	r3, [pc, #252]	; (80083b4 <UART_SetConfig+0x1c14>)
 80082b8:	e012      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082ba:	4b3f      	ldr	r3, [pc, #252]	; (80083b8 <UART_SetConfig+0x1c18>)
 80082bc:	e010      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082be:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <UART_SetConfig+0x1c1c>)
 80082c0:	e00e      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082c2:	4b3f      	ldr	r3, [pc, #252]	; (80083c0 <UART_SetConfig+0x1c20>)
 80082c4:	e00c      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082c6:	4b3f      	ldr	r3, [pc, #252]	; (80083c4 <UART_SetConfig+0x1c24>)
 80082c8:	e00a      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082ca:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <UART_SetConfig+0x1c28>)
 80082cc:	e008      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082ce:	4b3f      	ldr	r3, [pc, #252]	; (80083cc <UART_SetConfig+0x1c2c>)
 80082d0:	e006      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082d2:	4b3f      	ldr	r3, [pc, #252]	; (80083d0 <UART_SetConfig+0x1c30>)
 80082d4:	e004      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082d6:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <UART_SetConfig+0x1c34>)
 80082d8:	e002      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082da:	4b33      	ldr	r3, [pc, #204]	; (80083a8 <UART_SetConfig+0x1c08>)
 80082dc:	e000      	b.n	80082e0 <UART_SetConfig+0x1b40>
 80082de:	4b34      	ldr	r3, [pc, #208]	; (80083b0 <UART_SetConfig+0x1c10>)
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6852      	ldr	r2, [r2, #4]
 80082e4:	0852      	lsrs	r2, r2, #1
 80082e6:	441a      	add	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082f4:	e0df      	b.n	80084b6 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d045      	beq.n	800838a <UART_SetConfig+0x1bea>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b01      	cmp	r3, #1
 8008304:	d03f      	beq.n	8008386 <UART_SetConfig+0x1be6>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	2b02      	cmp	r3, #2
 800830c:	d039      	beq.n	8008382 <UART_SetConfig+0x1be2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	2b03      	cmp	r3, #3
 8008314:	d033      	beq.n	800837e <UART_SetConfig+0x1bde>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b04      	cmp	r3, #4
 800831c:	d02d      	beq.n	800837a <UART_SetConfig+0x1bda>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b05      	cmp	r3, #5
 8008324:	d027      	beq.n	8008376 <UART_SetConfig+0x1bd6>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b06      	cmp	r3, #6
 800832c:	d021      	beq.n	8008372 <UART_SetConfig+0x1bd2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b07      	cmp	r3, #7
 8008334:	d01b      	beq.n	800836e <UART_SetConfig+0x1bce>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b08      	cmp	r3, #8
 800833c:	d015      	beq.n	800836a <UART_SetConfig+0x1bca>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b09      	cmp	r3, #9
 8008344:	d00f      	beq.n	8008366 <UART_SetConfig+0x1bc6>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b0a      	cmp	r3, #10
 800834c:	d008      	beq.n	8008360 <UART_SetConfig+0x1bc0>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b0b      	cmp	r3, #11
 8008354:	d102      	bne.n	800835c <UART_SetConfig+0x1bbc>
 8008356:	f647 2312 	movw	r3, #31250	; 0x7a12
 800835a:	e017      	b.n	800838c <UART_SetConfig+0x1bec>
 800835c:	4b18      	ldr	r3, [pc, #96]	; (80083c0 <UART_SetConfig+0x1c20>)
 800835e:	e015      	b.n	800838c <UART_SetConfig+0x1bec>
 8008360:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008364:	e012      	b.n	800838c <UART_SetConfig+0x1bec>
 8008366:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <UART_SetConfig+0x1c38>)
 8008368:	e010      	b.n	800838c <UART_SetConfig+0x1bec>
 800836a:	4b1c      	ldr	r3, [pc, #112]	; (80083dc <UART_SetConfig+0x1c3c>)
 800836c:	e00e      	b.n	800838c <UART_SetConfig+0x1bec>
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <UART_SetConfig+0x1c0c>)
 8008370:	e00c      	b.n	800838c <UART_SetConfig+0x1bec>
 8008372:	4b1b      	ldr	r3, [pc, #108]	; (80083e0 <UART_SetConfig+0x1c40>)
 8008374:	e00a      	b.n	800838c <UART_SetConfig+0x1bec>
 8008376:	4b1b      	ldr	r3, [pc, #108]	; (80083e4 <UART_SetConfig+0x1c44>)
 8008378:	e008      	b.n	800838c <UART_SetConfig+0x1bec>
 800837a:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <UART_SetConfig+0x1c14>)
 800837c:	e006      	b.n	800838c <UART_SetConfig+0x1bec>
 800837e:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <UART_SetConfig+0x1c48>)
 8008380:	e004      	b.n	800838c <UART_SetConfig+0x1bec>
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <UART_SetConfig+0x1c18>)
 8008384:	e002      	b.n	800838c <UART_SetConfig+0x1bec>
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <UART_SetConfig+0x1c1c>)
 8008388:	e000      	b.n	800838c <UART_SetConfig+0x1bec>
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <UART_SetConfig+0x1c20>)
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6852      	ldr	r2, [r2, #4]
 8008390:	0852      	lsrs	r2, r2, #1
 8008392:	441a      	add	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	fbb2 f3f3 	udiv	r3, r2, r3
 800839c:	b29b      	uxth	r3, r3
 800839e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083a0:	e089      	b.n	80084b6 <UART_SetConfig+0x1d16>
 80083a2:	bf00      	nop
 80083a4:	58024400 	.word	0x58024400
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	0007a120 	.word	0x0007a120
 80083b0:	07a12000 	.word	0x07a12000
 80083b4:	000f4240 	.word	0x000f4240
 80083b8:	001e8480 	.word	0x001e8480
 80083bc:	003d0900 	.word	0x003d0900
 80083c0:	007a1200 	.word	0x007a1200
 80083c4:	00a2c2aa 	.word	0x00a2c2aa
 80083c8:	00c35000 	.word	0x00c35000
 80083cc:	00f42400 	.word	0x00f42400
 80083d0:	01458554 	.word	0x01458554
 80083d4:	01e84800 	.word	0x01e84800
 80083d8:	0001e848 	.word	0x0001e848
 80083dc:	0003d090 	.word	0x0003d090
 80083e0:	000a2c2a 	.word	0x000a2c2a
 80083e4:	000c3500 	.word	0x000c3500
 80083e8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d04f      	beq.n	8008494 <UART_SetConfig+0x1cf4>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d048      	beq.n	800848e <UART_SetConfig+0x1cee>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b02      	cmp	r3, #2
 8008402:	d041      	beq.n	8008488 <UART_SetConfig+0x1ce8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b03      	cmp	r3, #3
 800840a:	d03a      	beq.n	8008482 <UART_SetConfig+0x1ce2>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	2b04      	cmp	r3, #4
 8008412:	d033      	beq.n	800847c <UART_SetConfig+0x1cdc>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008418:	2b05      	cmp	r3, #5
 800841a:	d02c      	beq.n	8008476 <UART_SetConfig+0x1cd6>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	2b06      	cmp	r3, #6
 8008422:	d025      	beq.n	8008470 <UART_SetConfig+0x1cd0>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	2b07      	cmp	r3, #7
 800842a:	d01e      	beq.n	800846a <UART_SetConfig+0x1cca>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b08      	cmp	r3, #8
 8008432:	d017      	beq.n	8008464 <UART_SetConfig+0x1cc4>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	2b09      	cmp	r3, #9
 800843a:	d010      	beq.n	800845e <UART_SetConfig+0x1cbe>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b0a      	cmp	r3, #10
 8008442:	d009      	beq.n	8008458 <UART_SetConfig+0x1cb8>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b0b      	cmp	r3, #11
 800844a:	d102      	bne.n	8008452 <UART_SetConfig+0x1cb2>
 800844c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008450:	e022      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008456:	e01f      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800845c:	e01c      	b.n	8008498 <UART_SetConfig+0x1cf8>
 800845e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008462:	e019      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008468:	e016      	b.n	8008498 <UART_SetConfig+0x1cf8>
 800846a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800846e:	e013      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008470:	f241 5354 	movw	r3, #5460	; 0x1554
 8008474:	e010      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008476:	f641 1398 	movw	r3, #6552	; 0x1998
 800847a:	e00d      	b.n	8008498 <UART_SetConfig+0x1cf8>
 800847c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008480:	e00a      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008482:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008486:	e007      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800848c:	e004      	b.n	8008498 <UART_SetConfig+0x1cf8>
 800848e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008492:	e001      	b.n	8008498 <UART_SetConfig+0x1cf8>
 8008494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6852      	ldr	r2, [r2, #4]
 800849c:	0852      	lsrs	r2, r2, #1
 800849e:	441a      	add	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084ac:	e003      	b.n	80084b6 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80084b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b8:	2b0f      	cmp	r3, #15
 80084ba:	d916      	bls.n	80084ea <UART_SetConfig+0x1d4a>
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c2:	d212      	bcs.n	80084ea <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	f023 030f 	bic.w	r3, r3, #15
 80084cc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d0:	085b      	lsrs	r3, r3, #1
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	b29a      	uxth	r2, r3
 80084da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084dc:	4313      	orrs	r3, r2
 80084de:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084e6:	60da      	str	r2, [r3, #12]
 80084e8:	e3a3      	b.n	8008c32 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f0:	e39f      	b.n	8008c32 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 80084f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80084f6:	2b40      	cmp	r3, #64	; 0x40
 80084f8:	f200 8388 	bhi.w	8008c0c <UART_SetConfig+0x246c>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0x1d64>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008609 	.word	0x08008609
 8008508:	080086bf 	.word	0x080086bf
 800850c:	08008c0d 	.word	0x08008c0d
 8008510:	08008c0d 	.word	0x08008c0d
 8008514:	08008775 	.word	0x08008775
 8008518:	08008c0d 	.word	0x08008c0d
 800851c:	08008c0d 	.word	0x08008c0d
 8008520:	08008c0d 	.word	0x08008c0d
 8008524:	0800882f 	.word	0x0800882f
 8008528:	08008c0d 	.word	0x08008c0d
 800852c:	08008c0d 	.word	0x08008c0d
 8008530:	08008c0d 	.word	0x08008c0d
 8008534:	08008c0d 	.word	0x08008c0d
 8008538:	08008c0d 	.word	0x08008c0d
 800853c:	08008c0d 	.word	0x08008c0d
 8008540:	08008c0d 	.word	0x08008c0d
 8008544:	080088e9 	.word	0x080088e9
 8008548:	08008c0d 	.word	0x08008c0d
 800854c:	08008c0d 	.word	0x08008c0d
 8008550:	08008c0d 	.word	0x08008c0d
 8008554:	08008c0d 	.word	0x08008c0d
 8008558:	08008c0d 	.word	0x08008c0d
 800855c:	08008c0d 	.word	0x08008c0d
 8008560:	08008c0d 	.word	0x08008c0d
 8008564:	08008c0d 	.word	0x08008c0d
 8008568:	08008c0d 	.word	0x08008c0d
 800856c:	08008c0d 	.word	0x08008c0d
 8008570:	08008c0d 	.word	0x08008c0d
 8008574:	08008c0d 	.word	0x08008c0d
 8008578:	08008c0d 	.word	0x08008c0d
 800857c:	08008c0d 	.word	0x08008c0d
 8008580:	08008c0d 	.word	0x08008c0d
 8008584:	08008a59 	.word	0x08008a59
 8008588:	08008c0d 	.word	0x08008c0d
 800858c:	08008c0d 	.word	0x08008c0d
 8008590:	08008c0d 	.word	0x08008c0d
 8008594:	08008c0d 	.word	0x08008c0d
 8008598:	08008c0d 	.word	0x08008c0d
 800859c:	08008c0d 	.word	0x08008c0d
 80085a0:	08008c0d 	.word	0x08008c0d
 80085a4:	08008c0d 	.word	0x08008c0d
 80085a8:	08008c0d 	.word	0x08008c0d
 80085ac:	08008c0d 	.word	0x08008c0d
 80085b0:	08008c0d 	.word	0x08008c0d
 80085b4:	08008c0d 	.word	0x08008c0d
 80085b8:	08008c0d 	.word	0x08008c0d
 80085bc:	08008c0d 	.word	0x08008c0d
 80085c0:	08008c0d 	.word	0x08008c0d
 80085c4:	08008c0d 	.word	0x08008c0d
 80085c8:	08008c0d 	.word	0x08008c0d
 80085cc:	08008c0d 	.word	0x08008c0d
 80085d0:	08008c0d 	.word	0x08008c0d
 80085d4:	08008c0d 	.word	0x08008c0d
 80085d8:	08008c0d 	.word	0x08008c0d
 80085dc:	08008c0d 	.word	0x08008c0d
 80085e0:	08008c0d 	.word	0x08008c0d
 80085e4:	08008c0d 	.word	0x08008c0d
 80085e8:	08008c0d 	.word	0x08008c0d
 80085ec:	08008c0d 	.word	0x08008c0d
 80085f0:	08008c0d 	.word	0x08008c0d
 80085f4:	08008c0d 	.word	0x08008c0d
 80085f8:	08008c0d 	.word	0x08008c0d
 80085fc:	08008c0d 	.word	0x08008c0d
 8008600:	08008c0d 	.word	0x08008c0d
 8008604:	08008b4d 	.word	0x08008b4d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008608:	f7fc f886 	bl	8004718 <HAL_RCC_GetPCLK1Freq>
 800860c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	2b00      	cmp	r3, #0
 8008614:	d044      	beq.n	80086a0 <UART_SetConfig+0x1f00>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	2b01      	cmp	r3, #1
 800861c:	d03e      	beq.n	800869c <UART_SetConfig+0x1efc>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	2b02      	cmp	r3, #2
 8008624:	d038      	beq.n	8008698 <UART_SetConfig+0x1ef8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	2b03      	cmp	r3, #3
 800862c:	d032      	beq.n	8008694 <UART_SetConfig+0x1ef4>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	2b04      	cmp	r3, #4
 8008634:	d02c      	beq.n	8008690 <UART_SetConfig+0x1ef0>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	2b05      	cmp	r3, #5
 800863c:	d026      	beq.n	800868c <UART_SetConfig+0x1eec>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	2b06      	cmp	r3, #6
 8008644:	d020      	beq.n	8008688 <UART_SetConfig+0x1ee8>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	2b07      	cmp	r3, #7
 800864c:	d01a      	beq.n	8008684 <UART_SetConfig+0x1ee4>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	2b08      	cmp	r3, #8
 8008654:	d014      	beq.n	8008680 <UART_SetConfig+0x1ee0>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b09      	cmp	r3, #9
 800865c:	d00e      	beq.n	800867c <UART_SetConfig+0x1edc>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	2b0a      	cmp	r3, #10
 8008664:	d008      	beq.n	8008678 <UART_SetConfig+0x1ed8>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	2b0b      	cmp	r3, #11
 800866c:	d102      	bne.n	8008674 <UART_SetConfig+0x1ed4>
 800866e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008672:	e016      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008674:	2301      	movs	r3, #1
 8008676:	e014      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008678:	2380      	movs	r3, #128	; 0x80
 800867a:	e012      	b.n	80086a2 <UART_SetConfig+0x1f02>
 800867c:	2340      	movs	r3, #64	; 0x40
 800867e:	e010      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008680:	2320      	movs	r3, #32
 8008682:	e00e      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008684:	2310      	movs	r3, #16
 8008686:	e00c      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008688:	230c      	movs	r3, #12
 800868a:	e00a      	b.n	80086a2 <UART_SetConfig+0x1f02>
 800868c:	230a      	movs	r3, #10
 800868e:	e008      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008690:	2308      	movs	r3, #8
 8008692:	e006      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008694:	2306      	movs	r3, #6
 8008696:	e004      	b.n	80086a2 <UART_SetConfig+0x1f02>
 8008698:	2304      	movs	r3, #4
 800869a:	e002      	b.n	80086a2 <UART_SetConfig+0x1f02>
 800869c:	2302      	movs	r3, #2
 800869e:	e000      	b.n	80086a2 <UART_SetConfig+0x1f02>
 80086a0:	2301      	movs	r3, #1
 80086a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	441a      	add	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086bc:	e2aa      	b.n	8008c14 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086be:	f7fc f841 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 80086c2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d044      	beq.n	8008756 <UART_SetConfig+0x1fb6>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d03e      	beq.n	8008752 <UART_SetConfig+0x1fb2>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d038      	beq.n	800874e <UART_SetConfig+0x1fae>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d032      	beq.n	800874a <UART_SetConfig+0x1faa>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d02c      	beq.n	8008746 <UART_SetConfig+0x1fa6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	2b05      	cmp	r3, #5
 80086f2:	d026      	beq.n	8008742 <UART_SetConfig+0x1fa2>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	2b06      	cmp	r3, #6
 80086fa:	d020      	beq.n	800873e <UART_SetConfig+0x1f9e>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	2b07      	cmp	r3, #7
 8008702:	d01a      	beq.n	800873a <UART_SetConfig+0x1f9a>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	2b08      	cmp	r3, #8
 800870a:	d014      	beq.n	8008736 <UART_SetConfig+0x1f96>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	2b09      	cmp	r3, #9
 8008712:	d00e      	beq.n	8008732 <UART_SetConfig+0x1f92>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b0a      	cmp	r3, #10
 800871a:	d008      	beq.n	800872e <UART_SetConfig+0x1f8e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	2b0b      	cmp	r3, #11
 8008722:	d102      	bne.n	800872a <UART_SetConfig+0x1f8a>
 8008724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008728:	e016      	b.n	8008758 <UART_SetConfig+0x1fb8>
 800872a:	2301      	movs	r3, #1
 800872c:	e014      	b.n	8008758 <UART_SetConfig+0x1fb8>
 800872e:	2380      	movs	r3, #128	; 0x80
 8008730:	e012      	b.n	8008758 <UART_SetConfig+0x1fb8>
 8008732:	2340      	movs	r3, #64	; 0x40
 8008734:	e010      	b.n	8008758 <UART_SetConfig+0x1fb8>
 8008736:	2320      	movs	r3, #32
 8008738:	e00e      	b.n	8008758 <UART_SetConfig+0x1fb8>
 800873a:	2310      	movs	r3, #16
 800873c:	e00c      	b.n	8008758 <UART_SetConfig+0x1fb8>
 800873e:	230c      	movs	r3, #12
 8008740:	e00a      	b.n	8008758 <UART_SetConfig+0x1fb8>
 8008742:	230a      	movs	r3, #10
 8008744:	e008      	b.n	8008758 <UART_SetConfig+0x1fb8>
 8008746:	2308      	movs	r3, #8
 8008748:	e006      	b.n	8008758 <UART_SetConfig+0x1fb8>
 800874a:	2306      	movs	r3, #6
 800874c:	e004      	b.n	8008758 <UART_SetConfig+0x1fb8>
 800874e:	2304      	movs	r3, #4
 8008750:	e002      	b.n	8008758 <UART_SetConfig+0x1fb8>
 8008752:	2302      	movs	r3, #2
 8008754:	e000      	b.n	8008758 <UART_SetConfig+0x1fb8>
 8008756:	2301      	movs	r3, #1
 8008758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800875a:	fbb2 f2f3 	udiv	r2, r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	085b      	lsrs	r3, r3, #1
 8008764:	441a      	add	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	fbb2 f3f3 	udiv	r3, r2, r3
 800876e:	b29b      	uxth	r3, r3
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008772:	e24f      	b.n	8008c14 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008774:	f107 0318 	add.w	r3, r7, #24
 8008778:	4618      	mov	r0, r3
 800877a:	f7fd f9b1 	bl	8005ae0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	d044      	beq.n	8008812 <UART_SetConfig+0x2072>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	2b01      	cmp	r3, #1
 800878e:	d03e      	beq.n	800880e <UART_SetConfig+0x206e>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b02      	cmp	r3, #2
 8008796:	d038      	beq.n	800880a <UART_SetConfig+0x206a>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b03      	cmp	r3, #3
 800879e:	d032      	beq.n	8008806 <UART_SetConfig+0x2066>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d02c      	beq.n	8008802 <UART_SetConfig+0x2062>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	d026      	beq.n	80087fe <UART_SetConfig+0x205e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b06      	cmp	r3, #6
 80087b6:	d020      	beq.n	80087fa <UART_SetConfig+0x205a>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b07      	cmp	r3, #7
 80087be:	d01a      	beq.n	80087f6 <UART_SetConfig+0x2056>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d014      	beq.n	80087f2 <UART_SetConfig+0x2052>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	d00e      	beq.n	80087ee <UART_SetConfig+0x204e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b0a      	cmp	r3, #10
 80087d6:	d008      	beq.n	80087ea <UART_SetConfig+0x204a>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b0b      	cmp	r3, #11
 80087de:	d102      	bne.n	80087e6 <UART_SetConfig+0x2046>
 80087e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e4:	e016      	b.n	8008814 <UART_SetConfig+0x2074>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e014      	b.n	8008814 <UART_SetConfig+0x2074>
 80087ea:	2380      	movs	r3, #128	; 0x80
 80087ec:	e012      	b.n	8008814 <UART_SetConfig+0x2074>
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	e010      	b.n	8008814 <UART_SetConfig+0x2074>
 80087f2:	2320      	movs	r3, #32
 80087f4:	e00e      	b.n	8008814 <UART_SetConfig+0x2074>
 80087f6:	2310      	movs	r3, #16
 80087f8:	e00c      	b.n	8008814 <UART_SetConfig+0x2074>
 80087fa:	230c      	movs	r3, #12
 80087fc:	e00a      	b.n	8008814 <UART_SetConfig+0x2074>
 80087fe:	230a      	movs	r3, #10
 8008800:	e008      	b.n	8008814 <UART_SetConfig+0x2074>
 8008802:	2308      	movs	r3, #8
 8008804:	e006      	b.n	8008814 <UART_SetConfig+0x2074>
 8008806:	2306      	movs	r3, #6
 8008808:	e004      	b.n	8008814 <UART_SetConfig+0x2074>
 800880a:	2304      	movs	r3, #4
 800880c:	e002      	b.n	8008814 <UART_SetConfig+0x2074>
 800880e:	2302      	movs	r3, #2
 8008810:	e000      	b.n	8008814 <UART_SetConfig+0x2074>
 8008812:	2301      	movs	r3, #1
 8008814:	fbb2 f2f3 	udiv	r2, r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	441a      	add	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	fbb2 f3f3 	udiv	r3, r2, r3
 8008828:	b29b      	uxth	r3, r3
 800882a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800882c:	e1f2      	b.n	8008c14 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800882e:	f107 030c 	add.w	r3, r7, #12
 8008832:	4618      	mov	r0, r3
 8008834:	f7fd faa0 	bl	8005d78 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b00      	cmp	r3, #0
 8008840:	d044      	beq.n	80088cc <UART_SetConfig+0x212c>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	2b01      	cmp	r3, #1
 8008848:	d03e      	beq.n	80088c8 <UART_SetConfig+0x2128>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	2b02      	cmp	r3, #2
 8008850:	d038      	beq.n	80088c4 <UART_SetConfig+0x2124>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	2b03      	cmp	r3, #3
 8008858:	d032      	beq.n	80088c0 <UART_SetConfig+0x2120>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	2b04      	cmp	r3, #4
 8008860:	d02c      	beq.n	80088bc <UART_SetConfig+0x211c>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	2b05      	cmp	r3, #5
 8008868:	d026      	beq.n	80088b8 <UART_SetConfig+0x2118>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b06      	cmp	r3, #6
 8008870:	d020      	beq.n	80088b4 <UART_SetConfig+0x2114>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	2b07      	cmp	r3, #7
 8008878:	d01a      	beq.n	80088b0 <UART_SetConfig+0x2110>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	2b08      	cmp	r3, #8
 8008880:	d014      	beq.n	80088ac <UART_SetConfig+0x210c>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b09      	cmp	r3, #9
 8008888:	d00e      	beq.n	80088a8 <UART_SetConfig+0x2108>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	2b0a      	cmp	r3, #10
 8008890:	d008      	beq.n	80088a4 <UART_SetConfig+0x2104>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	2b0b      	cmp	r3, #11
 8008898:	d102      	bne.n	80088a0 <UART_SetConfig+0x2100>
 800889a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800889e:	e016      	b.n	80088ce <UART_SetConfig+0x212e>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e014      	b.n	80088ce <UART_SetConfig+0x212e>
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	e012      	b.n	80088ce <UART_SetConfig+0x212e>
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	e010      	b.n	80088ce <UART_SetConfig+0x212e>
 80088ac:	2320      	movs	r3, #32
 80088ae:	e00e      	b.n	80088ce <UART_SetConfig+0x212e>
 80088b0:	2310      	movs	r3, #16
 80088b2:	e00c      	b.n	80088ce <UART_SetConfig+0x212e>
 80088b4:	230c      	movs	r3, #12
 80088b6:	e00a      	b.n	80088ce <UART_SetConfig+0x212e>
 80088b8:	230a      	movs	r3, #10
 80088ba:	e008      	b.n	80088ce <UART_SetConfig+0x212e>
 80088bc:	2308      	movs	r3, #8
 80088be:	e006      	b.n	80088ce <UART_SetConfig+0x212e>
 80088c0:	2306      	movs	r3, #6
 80088c2:	e004      	b.n	80088ce <UART_SetConfig+0x212e>
 80088c4:	2304      	movs	r3, #4
 80088c6:	e002      	b.n	80088ce <UART_SetConfig+0x212e>
 80088c8:	2302      	movs	r3, #2
 80088ca:	e000      	b.n	80088ce <UART_SetConfig+0x212e>
 80088cc:	2301      	movs	r3, #1
 80088ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	085b      	lsrs	r3, r3, #1
 80088d8:	441a      	add	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088e6:	e195      	b.n	8008c14 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e8:	4b87      	ldr	r3, [pc, #540]	; (8008b08 <UART_SetConfig+0x2368>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d05d      	beq.n	80089b0 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f4:	4b84      	ldr	r3, [pc, #528]	; (8008b08 <UART_SetConfig+0x2368>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	4a83      	ldr	r2, [pc, #524]	; (8008b0c <UART_SetConfig+0x236c>)
 8008900:	40da      	lsrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b00      	cmp	r3, #0
 8008908:	d044      	beq.n	8008994 <UART_SetConfig+0x21f4>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b01      	cmp	r3, #1
 8008910:	d03e      	beq.n	8008990 <UART_SetConfig+0x21f0>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	2b02      	cmp	r3, #2
 8008918:	d038      	beq.n	800898c <UART_SetConfig+0x21ec>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	2b03      	cmp	r3, #3
 8008920:	d032      	beq.n	8008988 <UART_SetConfig+0x21e8>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b04      	cmp	r3, #4
 8008928:	d02c      	beq.n	8008984 <UART_SetConfig+0x21e4>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	2b05      	cmp	r3, #5
 8008930:	d026      	beq.n	8008980 <UART_SetConfig+0x21e0>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2b06      	cmp	r3, #6
 8008938:	d020      	beq.n	800897c <UART_SetConfig+0x21dc>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b07      	cmp	r3, #7
 8008940:	d01a      	beq.n	8008978 <UART_SetConfig+0x21d8>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b08      	cmp	r3, #8
 8008948:	d014      	beq.n	8008974 <UART_SetConfig+0x21d4>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b09      	cmp	r3, #9
 8008950:	d00e      	beq.n	8008970 <UART_SetConfig+0x21d0>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b0a      	cmp	r3, #10
 8008958:	d008      	beq.n	800896c <UART_SetConfig+0x21cc>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	2b0b      	cmp	r3, #11
 8008960:	d102      	bne.n	8008968 <UART_SetConfig+0x21c8>
 8008962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008966:	e016      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008968:	2301      	movs	r3, #1
 800896a:	e014      	b.n	8008996 <UART_SetConfig+0x21f6>
 800896c:	2380      	movs	r3, #128	; 0x80
 800896e:	e012      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008970:	2340      	movs	r3, #64	; 0x40
 8008972:	e010      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008974:	2320      	movs	r3, #32
 8008976:	e00e      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008978:	2310      	movs	r3, #16
 800897a:	e00c      	b.n	8008996 <UART_SetConfig+0x21f6>
 800897c:	230c      	movs	r3, #12
 800897e:	e00a      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008980:	230a      	movs	r3, #10
 8008982:	e008      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008984:	2308      	movs	r3, #8
 8008986:	e006      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008988:	2306      	movs	r3, #6
 800898a:	e004      	b.n	8008996 <UART_SetConfig+0x21f6>
 800898c:	2304      	movs	r3, #4
 800898e:	e002      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008990:	2302      	movs	r3, #2
 8008992:	e000      	b.n	8008996 <UART_SetConfig+0x21f6>
 8008994:	2301      	movs	r3, #1
 8008996:	fbb2 f2f3 	udiv	r2, r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	085b      	lsrs	r3, r3, #1
 80089a0:	441a      	add	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80089ae:	e131      	b.n	8008c14 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d043      	beq.n	8008a40 <UART_SetConfig+0x22a0>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d03d      	beq.n	8008a3c <UART_SetConfig+0x229c>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d037      	beq.n	8008a38 <UART_SetConfig+0x2298>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d031      	beq.n	8008a34 <UART_SetConfig+0x2294>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d02b      	beq.n	8008a30 <UART_SetConfig+0x2290>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	2b05      	cmp	r3, #5
 80089de:	d025      	beq.n	8008a2c <UART_SetConfig+0x228c>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b06      	cmp	r3, #6
 80089e6:	d01f      	beq.n	8008a28 <UART_SetConfig+0x2288>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	2b07      	cmp	r3, #7
 80089ee:	d019      	beq.n	8008a24 <UART_SetConfig+0x2284>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d013      	beq.n	8008a20 <UART_SetConfig+0x2280>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	2b09      	cmp	r3, #9
 80089fe:	d00d      	beq.n	8008a1c <UART_SetConfig+0x227c>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	2b0a      	cmp	r3, #10
 8008a06:	d007      	beq.n	8008a18 <UART_SetConfig+0x2278>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	2b0b      	cmp	r3, #11
 8008a0e:	d101      	bne.n	8008a14 <UART_SetConfig+0x2274>
 8008a10:	4b3f      	ldr	r3, [pc, #252]	; (8008b10 <UART_SetConfig+0x2370>)
 8008a12:	e016      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a14:	4b3d      	ldr	r3, [pc, #244]	; (8008b0c <UART_SetConfig+0x236c>)
 8008a16:	e014      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a18:	4b3e      	ldr	r3, [pc, #248]	; (8008b14 <UART_SetConfig+0x2374>)
 8008a1a:	e012      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a1c:	4b3e      	ldr	r3, [pc, #248]	; (8008b18 <UART_SetConfig+0x2378>)
 8008a1e:	e010      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a20:	4b3e      	ldr	r3, [pc, #248]	; (8008b1c <UART_SetConfig+0x237c>)
 8008a22:	e00e      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a24:	4b3e      	ldr	r3, [pc, #248]	; (8008b20 <UART_SetConfig+0x2380>)
 8008a26:	e00c      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a28:	4b3e      	ldr	r3, [pc, #248]	; (8008b24 <UART_SetConfig+0x2384>)
 8008a2a:	e00a      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a2c:	4b3e      	ldr	r3, [pc, #248]	; (8008b28 <UART_SetConfig+0x2388>)
 8008a2e:	e008      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a30:	4b3e      	ldr	r3, [pc, #248]	; (8008b2c <UART_SetConfig+0x238c>)
 8008a32:	e006      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a34:	4b3e      	ldr	r3, [pc, #248]	; (8008b30 <UART_SetConfig+0x2390>)
 8008a36:	e004      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a38:	4b3e      	ldr	r3, [pc, #248]	; (8008b34 <UART_SetConfig+0x2394>)
 8008a3a:	e002      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a3c:	4b3e      	ldr	r3, [pc, #248]	; (8008b38 <UART_SetConfig+0x2398>)
 8008a3e:	e000      	b.n	8008a42 <UART_SetConfig+0x22a2>
 8008a40:	4b32      	ldr	r3, [pc, #200]	; (8008b0c <UART_SetConfig+0x236c>)
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6852      	ldr	r2, [r2, #4]
 8008a46:	0852      	lsrs	r2, r2, #1
 8008a48:	441a      	add	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a56:	e0dd      	b.n	8008c14 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d046      	beq.n	8008aee <UART_SetConfig+0x234e>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d040      	beq.n	8008aea <UART_SetConfig+0x234a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d03a      	beq.n	8008ae6 <UART_SetConfig+0x2346>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d034      	beq.n	8008ae2 <UART_SetConfig+0x2342>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d02e      	beq.n	8008ade <UART_SetConfig+0x233e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	2b05      	cmp	r3, #5
 8008a86:	d028      	beq.n	8008ada <UART_SetConfig+0x233a>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	2b06      	cmp	r3, #6
 8008a8e:	d022      	beq.n	8008ad6 <UART_SetConfig+0x2336>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	2b07      	cmp	r3, #7
 8008a96:	d01c      	beq.n	8008ad2 <UART_SetConfig+0x2332>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d016      	beq.n	8008ace <UART_SetConfig+0x232e>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	2b09      	cmp	r3, #9
 8008aa6:	d00f      	beq.n	8008ac8 <UART_SetConfig+0x2328>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b0a      	cmp	r3, #10
 8008aae:	d008      	beq.n	8008ac2 <UART_SetConfig+0x2322>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b0b      	cmp	r3, #11
 8008ab6:	d102      	bne.n	8008abe <UART_SetConfig+0x231e>
 8008ab8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008abc:	e018      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008abe:	4b18      	ldr	r3, [pc, #96]	; (8008b20 <UART_SetConfig+0x2380>)
 8008ac0:	e016      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ac2:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008ac6:	e013      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ac8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008acc:	e010      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ace:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <UART_SetConfig+0x239c>)
 8008ad0:	e00e      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ad2:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <UART_SetConfig+0x2370>)
 8008ad4:	e00c      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ad6:	4b1a      	ldr	r3, [pc, #104]	; (8008b40 <UART_SetConfig+0x23a0>)
 8008ad8:	e00a      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ada:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <UART_SetConfig+0x23a4>)
 8008adc:	e008      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ade:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <UART_SetConfig+0x2374>)
 8008ae0:	e006      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ae2:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <UART_SetConfig+0x23a8>)
 8008ae4:	e004      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <UART_SetConfig+0x2378>)
 8008ae8:	e002      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <UART_SetConfig+0x237c>)
 8008aec:	e000      	b.n	8008af0 <UART_SetConfig+0x2350>
 8008aee:	4b0c      	ldr	r3, [pc, #48]	; (8008b20 <UART_SetConfig+0x2380>)
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6852      	ldr	r2, [r2, #4]
 8008af4:	0852      	lsrs	r2, r2, #1
 8008af6:	441a      	add	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b04:	e086      	b.n	8008c14 <UART_SetConfig+0x2474>
 8008b06:	bf00      	nop
 8008b08:	58024400 	.word	0x58024400
 8008b0c:	03d09000 	.word	0x03d09000
 8008b10:	0003d090 	.word	0x0003d090
 8008b14:	0007a120 	.word	0x0007a120
 8008b18:	000f4240 	.word	0x000f4240
 8008b1c:	001e8480 	.word	0x001e8480
 8008b20:	003d0900 	.word	0x003d0900
 8008b24:	00516155 	.word	0x00516155
 8008b28:	0061a800 	.word	0x0061a800
 8008b2c:	007a1200 	.word	0x007a1200
 8008b30:	00a2c2aa 	.word	0x00a2c2aa
 8008b34:	00f42400 	.word	0x00f42400
 8008b38:	01e84800 	.word	0x01e84800
 8008b3c:	0001e848 	.word	0x0001e848
 8008b40:	00051615 	.word	0x00051615
 8008b44:	00061a80 	.word	0x00061a80
 8008b48:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d04e      	beq.n	8008bf2 <UART_SetConfig+0x2452>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d047      	beq.n	8008bec <UART_SetConfig+0x244c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d040      	beq.n	8008be6 <UART_SetConfig+0x2446>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d039      	beq.n	8008be0 <UART_SetConfig+0x2440>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d032      	beq.n	8008bda <UART_SetConfig+0x243a>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	d02b      	beq.n	8008bd4 <UART_SetConfig+0x2434>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b06      	cmp	r3, #6
 8008b82:	d024      	beq.n	8008bce <UART_SetConfig+0x242e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b07      	cmp	r3, #7
 8008b8a:	d01d      	beq.n	8008bc8 <UART_SetConfig+0x2428>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d016      	beq.n	8008bc2 <UART_SetConfig+0x2422>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b09      	cmp	r3, #9
 8008b9a:	d00f      	beq.n	8008bbc <UART_SetConfig+0x241c>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b0a      	cmp	r3, #10
 8008ba2:	d008      	beq.n	8008bb6 <UART_SetConfig+0x2416>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b0b      	cmp	r3, #11
 8008baa:	d101      	bne.n	8008bb0 <UART_SetConfig+0x2410>
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	e022      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bb4:	e01f      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bba:	e01c      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc0:	e019      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bc6:	e016      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bcc:	e013      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008bd2:	e010      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bd4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008bd8:	e00d      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bde:	e00a      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008be0:	f241 5355 	movw	r3, #5461	; 0x1555
 8008be4:	e007      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bea:	e004      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bf0:	e001      	b.n	8008bf6 <UART_SetConfig+0x2456>
 8008bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6852      	ldr	r2, [r2, #4]
 8008bfa:	0852      	lsrs	r2, r2, #1
 8008bfc:	441a      	add	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c0a:	e003      	b.n	8008c14 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008c12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c16:	2b0f      	cmp	r3, #15
 8008c18:	d908      	bls.n	8008c2c <UART_SetConfig+0x248c>
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c20:	d204      	bcs.n	8008c2c <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c28:	60da      	str	r2, [r3, #12]
 8008c2a:	e002      	b.n	8008c32 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3740      	adds	r7, #64	; 0x40
 8008c56:	46bd      	mov	sp, r7
 8008c58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c68:	2bff      	cmp	r3, #255	; 0xff
 8008c6a:	d904      	bls.n	8008c76 <UART_AdvFeatureConfig+0x1a>
 8008c6c:	f640 4149 	movw	r1, #3145	; 0xc49
 8008c70:	4899      	ldr	r0, [pc, #612]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008c72:	f005 fff2 	bl	800ec5a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d018      	beq.n	8008cb4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d009      	beq.n	8008c9e <UART_AdvFeatureConfig+0x42>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c92:	d004      	beq.n	8008c9e <UART_AdvFeatureConfig+0x42>
 8008c94:	f640 414e 	movw	r1, #3150	; 0xc4e
 8008c98:	488f      	ldr	r0, [pc, #572]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008c9a:	f005 ffde 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d018      	beq.n	8008cf2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <UART_AdvFeatureConfig+0x80>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd0:	d004      	beq.n	8008cdc <UART_AdvFeatureConfig+0x80>
 8008cd2:	f640 4155 	movw	r1, #3157	; 0xc55
 8008cd6:	4880      	ldr	r0, [pc, #512]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008cd8:	f005 ffbf 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d018      	beq.n	8008d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <UART_AdvFeatureConfig+0xbe>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d0e:	d004      	beq.n	8008d1a <UART_AdvFeatureConfig+0xbe>
 8008d10:	f640 415c 	movw	r1, #3164	; 0xc5c
 8008d14:	4870      	ldr	r0, [pc, #448]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008d16:	f005 ffa0 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d34:	f003 0308 	and.w	r3, r3, #8
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d018      	beq.n	8008d6e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d009      	beq.n	8008d58 <UART_AdvFeatureConfig+0xfc>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d4c:	d004      	beq.n	8008d58 <UART_AdvFeatureConfig+0xfc>
 8008d4e:	f640 4163 	movw	r1, #3171	; 0xc63
 8008d52:	4861      	ldr	r0, [pc, #388]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008d54:	f005 ff81 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d018      	beq.n	8008dac <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d009      	beq.n	8008d96 <UART_AdvFeatureConfig+0x13a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d8a:	d004      	beq.n	8008d96 <UART_AdvFeatureConfig+0x13a>
 8008d8c:	f640 416a 	movw	r1, #3178	; 0xc6a
 8008d90:	4851      	ldr	r0, [pc, #324]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008d92:	f005 ff62 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d018      	beq.n	8008dea <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d009      	beq.n	8008dd4 <UART_AdvFeatureConfig+0x178>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dc8:	d004      	beq.n	8008dd4 <UART_AdvFeatureConfig+0x178>
 8008dca:	f640 4171 	movw	r1, #3185	; 0xc71
 8008dce:	4842      	ldr	r0, [pc, #264]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008dd0:	f005 ff43 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 8082 	beq.w	8008efc <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a37      	ldr	r2, [pc, #220]	; (8008edc <UART_AdvFeatureConfig+0x280>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d027      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a36      	ldr	r2, [pc, #216]	; (8008ee0 <UART_AdvFeatureConfig+0x284>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d022      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a34      	ldr	r2, [pc, #208]	; (8008ee4 <UART_AdvFeatureConfig+0x288>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d01d      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a33      	ldr	r2, [pc, #204]	; (8008ee8 <UART_AdvFeatureConfig+0x28c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d018      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a31      	ldr	r2, [pc, #196]	; (8008eec <UART_AdvFeatureConfig+0x290>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d013      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a30      	ldr	r2, [pc, #192]	; (8008ef0 <UART_AdvFeatureConfig+0x294>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00e      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2e      	ldr	r2, [pc, #184]	; (8008ef4 <UART_AdvFeatureConfig+0x298>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d009      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2d      	ldr	r2, [pc, #180]	; (8008ef8 <UART_AdvFeatureConfig+0x29c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d004      	beq.n	8008e52 <UART_AdvFeatureConfig+0x1f6>
 8008e48:	f640 4178 	movw	r1, #3192	; 0xc78
 8008e4c:	4822      	ldr	r0, [pc, #136]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008e4e:	f005 ff04 	bl	800ec5a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <UART_AdvFeatureConfig+0x212>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e62:	d004      	beq.n	8008e6e <UART_AdvFeatureConfig+0x212>
 8008e64:	f640 4179 	movw	r1, #3193	; 0xc79
 8008e68:	481b      	ldr	r0, [pc, #108]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008e6a:	f005 fef6 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e8c:	d136      	bne.n	8008efc <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d013      	beq.n	8008ebe <UART_AdvFeatureConfig+0x262>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e9e:	d00e      	beq.n	8008ebe <UART_AdvFeatureConfig+0x262>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ea8:	d009      	beq.n	8008ebe <UART_AdvFeatureConfig+0x262>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008eb2:	d004      	beq.n	8008ebe <UART_AdvFeatureConfig+0x262>
 8008eb4:	f640 417e 	movw	r1, #3198	; 0xc7e
 8008eb8:	4807      	ldr	r0, [pc, #28]	; (8008ed8 <UART_AdvFeatureConfig+0x27c>)
 8008eba:	f005 fece 	bl	800ec5a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	605a      	str	r2, [r3, #4]
 8008ed4:	e012      	b.n	8008efc <UART_AdvFeatureConfig+0x2a0>
 8008ed6:	bf00      	nop
 8008ed8:	0801076c 	.word	0x0801076c
 8008edc:	40011000 	.word	0x40011000
 8008ee0:	40004400 	.word	0x40004400
 8008ee4:	40004800 	.word	0x40004800
 8008ee8:	40004c00 	.word	0x40004c00
 8008eec:	40005000 	.word	0x40005000
 8008ef0:	40011400 	.word	0x40011400
 8008ef4:	40007800 	.word	0x40007800
 8008ef8:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d018      	beq.n	8008f3a <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d009      	beq.n	8008f24 <UART_AdvFeatureConfig+0x2c8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f18:	d004      	beq.n	8008f24 <UART_AdvFeatureConfig+0x2c8>
 8008f1a:	f640 4186 	movw	r1, #3206	; 0xc86
 8008f1e:	4809      	ldr	r0, [pc, #36]	; (8008f44 <UART_AdvFeatureConfig+0x2e8>)
 8008f20:	f005 fe9b 	bl	800ec5a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	0801076c 	.word	0x0801076c

08008f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f58:	f7f7 fd7c 	bl	8000a54 <HAL_GetTick>
 8008f5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d10e      	bne.n	8008f8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f82c 	bl	8008fd8 <UART_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e022      	b.n	8008fd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d10e      	bne.n	8008fb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f816 	bl	8008fd8 <UART_WaitOnFlagUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e00c      	b.n	8008fd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe8:	e062      	b.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ff0:	d05e      	beq.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff2:	f7f7 fd2f 	bl	8000a54 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d302      	bcc.n	8009008 <UART_WaitOnFlagUntilTimeout+0x30>
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11d      	bne.n	8009044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009016:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2220      	movs	r2, #32
 8009034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e045      	b.n	80090d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02e      	beq.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800905c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009060:	d126      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800906a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800907a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e00f      	b.n	80090d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4013      	ands	r3, r2
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	429a      	cmp	r2, r3
 80090be:	bf0c      	ite	eq
 80090c0:	2301      	moveq	r3, #1
 80090c2:	2300      	movne	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d08d      	beq.n	8008fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a2e      	ldr	r2, [pc, #184]	; (80091a0 <HAL_UARTEx_DisableFifoMode+0xc8>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d027      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a2d      	ldr	r2, [pc, #180]	; (80091a4 <HAL_UARTEx_DisableFifoMode+0xcc>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d022      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a2b      	ldr	r2, [pc, #172]	; (80091a8 <HAL_UARTEx_DisableFifoMode+0xd0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d01d      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a2a      	ldr	r2, [pc, #168]	; (80091ac <HAL_UARTEx_DisableFifoMode+0xd4>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d018      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a28      	ldr	r2, [pc, #160]	; (80091b0 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d013      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a27      	ldr	r2, [pc, #156]	; (80091b4 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d00e      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a25      	ldr	r2, [pc, #148]	; (80091b8 <HAL_UARTEx_DisableFifoMode+0xe0>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d009      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a24      	ldr	r2, [pc, #144]	; (80091bc <HAL_UARTEx_DisableFifoMode+0xe4>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d004      	beq.n	800913a <HAL_UARTEx_DisableFifoMode+0x62>
 8009130:	f240 2111 	movw	r1, #529	; 0x211
 8009134:	4822      	ldr	r0, [pc, #136]	; (80091c0 <HAL_UARTEx_DisableFifoMode+0xe8>)
 8009136:	f005 fd90 	bl	800ec5a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_UARTEx_DisableFifoMode+0x70>
 8009144:	2302      	movs	r3, #2
 8009146:	e027      	b.n	8009198 <HAL_UARTEx_DisableFifoMode+0xc0>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2224      	movs	r2, #36	; 0x24
 8009154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0201 	bic.w	r2, r2, #1
 800916e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009176:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2220      	movs	r2, #32
 800918a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40011000 	.word	0x40011000
 80091a4:	40004400 	.word	0x40004400
 80091a8:	40004800 	.word	0x40004800
 80091ac:	40004c00 	.word	0x40004c00
 80091b0:	40005000 	.word	0x40005000
 80091b4:	40011400 	.word	0x40011400
 80091b8:	40007800 	.word	0x40007800
 80091bc:	40007c00 	.word	0x40007c00
 80091c0:	080107a8 	.word	0x080107a8

080091c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a40      	ldr	r2, [pc, #256]	; (80092d4 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d027      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a3e      	ldr	r2, [pc, #248]	; (80092d8 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d022      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a3d      	ldr	r2, [pc, #244]	; (80092dc <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d01d      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a3b      	ldr	r2, [pc, #236]	; (80092e0 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d018      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a3a      	ldr	r2, [pc, #232]	; (80092e4 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d013      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a38      	ldr	r2, [pc, #224]	; (80092e8 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00e      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a37      	ldr	r2, [pc, #220]	; (80092ec <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d009      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a35      	ldr	r2, [pc, #212]	; (80092f0 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d004      	beq.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800921e:	f240 213f 	movw	r1, #575	; 0x23f
 8009222:	4834      	ldr	r0, [pc, #208]	; (80092f4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8009224:	f005 fd19 	bl	800ec5a <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d018      	beq.n	8009260 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009234:	d014      	beq.n	8009260 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800923c:	d010      	beq.n	8009260 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009244:	d00c      	beq.n	8009260 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924c:	d008      	beq.n	8009260 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8009254:	d004      	beq.n	8009260 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009256:	f44f 7110 	mov.w	r1, #576	; 0x240
 800925a:	4826      	ldr	r0, [pc, #152]	; (80092f4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800925c:	f005 fcfd 	bl	800ec5a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800926a:	2302      	movs	r3, #2
 800926c:	e02d      	b.n	80092ca <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2224      	movs	r2, #36	; 0x24
 800927a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f8be 	bl	800942c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	40011000 	.word	0x40011000
 80092d8:	40004400 	.word	0x40004400
 80092dc:	40004800 	.word	0x40004800
 80092e0:	40004c00 	.word	0x40004c00
 80092e4:	40005000 	.word	0x40005000
 80092e8:	40011400 	.word	0x40011400
 80092ec:	40007800 	.word	0x40007800
 80092f0:	40007c00 	.word	0x40007c00
 80092f4:	080107a8 	.word	0x080107a8

080092f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a40      	ldr	r2, [pc, #256]	; (8009408 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d027      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a3e      	ldr	r2, [pc, #248]	; (800940c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d022      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a3d      	ldr	r2, [pc, #244]	; (8009410 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d01d      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a3b      	ldr	r2, [pc, #236]	; (8009414 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d018      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a3a      	ldr	r2, [pc, #232]	; (8009418 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d013      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a38      	ldr	r2, [pc, #224]	; (800941c <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00e      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a37      	ldr	r2, [pc, #220]	; (8009420 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d009      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a35      	ldr	r2, [pc, #212]	; (8009424 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d004      	beq.n	800935c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8009352:	f44f 711c 	mov.w	r1, #624	; 0x270
 8009356:	4834      	ldr	r0, [pc, #208]	; (8009428 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8009358:	f005 fc7f 	bl	800ec5a <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d018      	beq.n	8009394 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009368:	d014      	beq.n	8009394 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009370:	d010      	beq.n	8009394 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009378:	d00c      	beq.n	8009394 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009380:	d008      	beq.n	8009394 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8009388:	d004      	beq.n	8009394 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800938a:	f240 2171 	movw	r1, #625	; 0x271
 800938e:	4826      	ldr	r0, [pc, #152]	; (8009428 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8009390:	f005 fc63 	bl	800ec5a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800939a:	2b01      	cmp	r3, #1
 800939c:	d101      	bne.n	80093a2 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800939e:	2302      	movs	r3, #2
 80093a0:	e02d      	b.n	80093fe <HAL_UARTEx_SetRxFifoThreshold+0x106>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2224      	movs	r2, #36	; 0x24
 80093ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f824 	bl	800942c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40011000 	.word	0x40011000
 800940c:	40004400 	.word	0x40004400
 8009410:	40004800 	.word	0x40004800
 8009414:	40004c00 	.word	0x40004c00
 8009418:	40005000 	.word	0x40005000
 800941c:	40011400 	.word	0x40011400
 8009420:	40007800 	.word	0x40007800
 8009424:	40007c00 	.word	0x40007c00
 8009428:	080107a8 	.word	0x080107a8

0800942c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b089      	sub	sp, #36	; 0x24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009434:	4a2f      	ldr	r2, [pc, #188]	; (80094f4 <UARTEx_SetNbDataToProcess+0xc8>)
 8009436:	f107 0314 	add.w	r3, r7, #20
 800943a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800943e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009442:	4a2d      	ldr	r2, [pc, #180]	; (80094f8 <UARTEx_SetNbDataToProcess+0xcc>)
 8009444:	f107 030c 	add.w	r3, r7, #12
 8009448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800944c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009454:	2b00      	cmp	r3, #0
 8009456:	d108      	bne.n	800946a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009468:	e03d      	b.n	80094e6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800946a:	2308      	movs	r3, #8
 800946c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800946e:	2308      	movs	r3, #8
 8009470:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	0e5b      	lsrs	r3, r3, #25
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 0307 	and.w	r3, r3, #7
 8009480:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	0f5b      	lsrs	r3, r3, #29
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009492:	7fbb      	ldrb	r3, [r7, #30]
 8009494:	7f3a      	ldrb	r2, [r7, #28]
 8009496:	f107 0120 	add.w	r1, r7, #32
 800949a:	440a      	add	r2, r1
 800949c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
 80094a4:	7f3a      	ldrb	r2, [r7, #28]
 80094a6:	f107 0120 	add.w	r1, r7, #32
 80094aa:	440a      	add	r2, r1
 80094ac:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80094b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80094bc:	7ffb      	ldrb	r3, [r7, #31]
 80094be:	7f7a      	ldrb	r2, [r7, #29]
 80094c0:	f107 0120 	add.w	r1, r7, #32
 80094c4:	440a      	add	r2, r1
 80094c6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
 80094ce:	7f7a      	ldrb	r2, [r7, #29]
 80094d0:	f107 0120 	add.w	r1, r7, #32
 80094d4:	440a      	add	r2, r1
 80094d6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80094da:	fb93 f3f2 	sdiv	r3, r3, r2
 80094de:	b29a      	uxth	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094e6:	bf00      	nop
 80094e8:	3724      	adds	r7, #36	; 0x24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	080107e4 	.word	0x080107e4
 80094f8:	080107ec 	.word	0x080107ec

080094fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8009506:	88fb      	ldrh	r3, [r7, #6]
 8009508:	ba5b      	rev16	r3, r3
 800950a:	b29b      	uxth	r3, r3
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009518:	b480      	push	{r7}
 800951a:	b089      	sub	sp, #36	; 0x24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00d      	beq.n	8009558 <lwip_standard_chksum+0x40>
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	dd0a      	ble.n	8009558 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	1c53      	adds	r3, r2, #1
 8009546:	61fb      	str	r3, [r7, #28]
 8009548:	f107 030e 	add.w	r3, r7, #14
 800954c:	3301      	adds	r3, #1
 800954e:	7812      	ldrb	r2, [r2, #0]
 8009550:	701a      	strb	r2, [r3, #0]
    len--;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	3b01      	subs	r3, #1
 8009556:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800955c:	e00a      	b.n	8009574 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	1c9a      	adds	r2, r3, #2
 8009562:	61ba      	str	r2, [r7, #24]
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	4413      	add	r3, r2
 800956c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	3b02      	subs	r3, #2
 8009572:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b01      	cmp	r3, #1
 8009578:	dcf1      	bgt.n	800955e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	dd04      	ble.n	800958a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009580:	f107 030e 	add.w	r3, r7, #14
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800958a:	89fb      	ldrh	r3, [r7, #14]
 800958c:	461a      	mov	r2, r3
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	4413      	add	r3, r2
 8009592:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	0c1a      	lsrs	r2, r3, #16
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	b29b      	uxth	r3, r3
 800959c:	4413      	add	r3, r2
 800959e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	0c1a      	lsrs	r2, r3, #16
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	4413      	add	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d007      	beq.n	80095c2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	4313      	orrs	r3, r2
 80095c0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	b29b      	uxth	r3, r3
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3724      	adds	r7, #36	; 0x24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80095de:	887b      	ldrh	r3, [r7, #2]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff ff98 	bl	8009518 <lwip_standard_chksum>
 80095e8:	4603      	mov	r3, r0
 80095ea:	43db      	mvns	r3, r3
 80095ec:	b29b      	uxth	r3, r3
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b086      	sub	sp, #24
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]
  swapped = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
  for (q = p; q != NULL; q = q->next) {
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	613b      	str	r3, [r7, #16]
 800960a:	e028      	b.n	800965e <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	895b      	ldrh	r3, [r3, #10]
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7ff ff7e 	bl	8009518 <lwip_standard_chksum>
 800961c:	4603      	mov	r3, r0
 800961e:	461a      	mov	r2, r3
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	4413      	add	r3, r2
 8009624:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	0c1a      	lsrs	r2, r3, #16
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	b29b      	uxth	r3, r3
 800962e:	4413      	add	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	895b      	ldrh	r3, [r3, #10]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	f1c3 0301 	rsb	r3, r3, #1
 8009646:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	b29a      	uxth	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	0a1b      	lsrs	r3, r3, #8
 8009652:	b2db      	uxtb	r3, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	613b      	str	r3, [r7, #16]
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1d3      	bne.n	800960c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d007      	beq.n	800967a <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	b29a      	uxth	r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	b2db      	uxtb	r3, r3
 8009676:	4313      	orrs	r3, r2
 8009678:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	b29b      	uxth	r3, r3
 800967e:	43db      	mvns	r3, r3
 8009680:	b29b      	uxth	r3, r3
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009694:	f000 f8a4 	bl	80097e0 <mem_init>
  memp_init();
 8009698:	f000 fb34 	bl	8009d04 <memp_init>
  pbuf_init();
  netif_init();
 800969c:	f000 fc32 	bl	8009f04 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80096a0:	f001 fd12 	bl	800b0c8 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80096a4:	f001 fbfa 	bl	800ae9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80096b8:	4b40      	ldr	r3, [pc, #256]	; (80097bc <plug_holes+0x10c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d206      	bcs.n	80096d0 <plug_holes+0x20>
 80096c2:	4b3f      	ldr	r3, [pc, #252]	; (80097c0 <plug_holes+0x110>)
 80096c4:	f240 125d 	movw	r2, #349	; 0x15d
 80096c8:	493e      	ldr	r1, [pc, #248]	; (80097c4 <plug_holes+0x114>)
 80096ca:	483f      	ldr	r0, [pc, #252]	; (80097c8 <plug_holes+0x118>)
 80096cc:	f005 fe92 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80096d0:	4b3e      	ldr	r3, [pc, #248]	; (80097cc <plug_holes+0x11c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d306      	bcc.n	80096e8 <plug_holes+0x38>
 80096da:	4b39      	ldr	r3, [pc, #228]	; (80097c0 <plug_holes+0x110>)
 80096dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80096e0:	493b      	ldr	r1, [pc, #236]	; (80097d0 <plug_holes+0x120>)
 80096e2:	4839      	ldr	r0, [pc, #228]	; (80097c8 <plug_holes+0x118>)
 80096e4:	f005 fe86 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	791b      	ldrb	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d006      	beq.n	80096fe <plug_holes+0x4e>
 80096f0:	4b33      	ldr	r3, [pc, #204]	; (80097c0 <plug_holes+0x110>)
 80096f2:	f240 125f 	movw	r2, #351	; 0x15f
 80096f6:	4937      	ldr	r1, [pc, #220]	; (80097d4 <plug_holes+0x124>)
 80096f8:	4833      	ldr	r0, [pc, #204]	; (80097c8 <plug_holes+0x118>)
 80096fa:	f005 fe7b 	bl	800f3f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009706:	d906      	bls.n	8009716 <plug_holes+0x66>
 8009708:	4b2d      	ldr	r3, [pc, #180]	; (80097c0 <plug_holes+0x110>)
 800970a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800970e:	4932      	ldr	r1, [pc, #200]	; (80097d8 <plug_holes+0x128>)
 8009710:	482d      	ldr	r0, [pc, #180]	; (80097c8 <plug_holes+0x118>)
 8009712:	f005 fe6f 	bl	800f3f4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8009716:	4b29      	ldr	r3, [pc, #164]	; (80097bc <plug_holes+0x10c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	8812      	ldrh	r2, [r2, #0]
 800971e:	4413      	add	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	429a      	cmp	r2, r3
 8009728:	d01f      	beq.n	800976a <plug_holes+0xba>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	791b      	ldrb	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d11b      	bne.n	800976a <plug_holes+0xba>
 8009732:	4b26      	ldr	r3, [pc, #152]	; (80097cc <plug_holes+0x11c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	429a      	cmp	r2, r3
 800973a:	d016      	beq.n	800976a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800973c:	4b27      	ldr	r3, [pc, #156]	; (80097dc <plug_holes+0x12c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	429a      	cmp	r2, r3
 8009744:	d102      	bne.n	800974c <plug_holes+0x9c>
      lfree = mem;
 8009746:	4a25      	ldr	r2, [pc, #148]	; (80097dc <plug_holes+0x12c>)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	881a      	ldrh	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a19      	ldr	r2, [pc, #100]	; (80097bc <plug_holes+0x10c>)
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	1a99      	subs	r1, r3, r2
 800975c:	4b17      	ldr	r3, [pc, #92]	; (80097bc <plug_holes+0x10c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	8812      	ldrh	r2, [r2, #0]
 8009764:	4413      	add	r3, r2
 8009766:	b28a      	uxth	r2, r1
 8009768:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800976a:	4b14      	ldr	r3, [pc, #80]	; (80097bc <plug_holes+0x10c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	8852      	ldrh	r2, [r2, #2]
 8009772:	4413      	add	r3, r2
 8009774:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	429a      	cmp	r2, r3
 800977c:	d01a      	beq.n	80097b4 <plug_holes+0x104>
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	791b      	ldrb	r3, [r3, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d116      	bne.n	80097b4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009786:	4b15      	ldr	r3, [pc, #84]	; (80097dc <plug_holes+0x12c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d102      	bne.n	8009796 <plug_holes+0xe6>
      lfree = pmem;
 8009790:	4a12      	ldr	r2, [pc, #72]	; (80097dc <plug_holes+0x12c>)
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	881a      	ldrh	r2, [r3, #0]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	4a06      	ldr	r2, [pc, #24]	; (80097bc <plug_holes+0x10c>)
 80097a2:	6812      	ldr	r2, [r2, #0]
 80097a4:	1a99      	subs	r1, r3, r2
 80097a6:	4b05      	ldr	r3, [pc, #20]	; (80097bc <plug_holes+0x10c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	8812      	ldrh	r2, [r2, #0]
 80097ae:	4413      	add	r3, r2
 80097b0:	b28a      	uxth	r2, r1
 80097b2:	805a      	strh	r2, [r3, #2]
  }
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	240000b4 	.word	0x240000b4
 80097c0:	080107f4 	.word	0x080107f4
 80097c4:	08010824 	.word	0x08010824
 80097c8:	0801083c 	.word	0x0801083c
 80097cc:	240000b8 	.word	0x240000b8
 80097d0:	08010864 	.word	0x08010864
 80097d4:	08010880 	.word	0x08010880
 80097d8:	0801089c 	.word	0x0801089c
 80097dc:	240000bc 	.word	0x240000bc

080097e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80097e6:	4b17      	ldr	r3, [pc, #92]	; (8009844 <mem_init+0x64>)
 80097e8:	4a17      	ldr	r2, [pc, #92]	; (8009848 <mem_init+0x68>)
 80097ea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80097ec:	4b15      	ldr	r3, [pc, #84]	; (8009844 <mem_init+0x64>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80097f8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <mem_init+0x64>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800980e:	4a0f      	ldr	r2, [pc, #60]	; (800984c <mem_init+0x6c>)
 8009810:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009812:	4b0e      	ldr	r3, [pc, #56]	; (800984c <mem_init+0x6c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800981a:	4b0c      	ldr	r3, [pc, #48]	; (800984c <mem_init+0x6c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009822:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009824:	4b09      	ldr	r3, [pc, #36]	; (800984c <mem_init+0x6c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800982c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800982e:	4b05      	ldr	r3, [pc, #20]	; (8009844 <mem_init+0x64>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a07      	ldr	r2, [pc, #28]	; (8009850 <mem_init+0x70>)
 8009834:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009836:	bf00      	nop
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	240000b4 	.word	0x240000b4
 8009848:	30044000 	.word	0x30044000
 800984c:	240000b8 	.word	0x240000b8
 8009850:	240000bc 	.word	0x240000bc

08009854 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d043      	beq.n	80098ea <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f003 0303 	and.w	r3, r3, #3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d006      	beq.n	800987a <mem_free+0x26>
 800986c:	4b22      	ldr	r3, [pc, #136]	; (80098f8 <mem_free+0xa4>)
 800986e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8009872:	4922      	ldr	r1, [pc, #136]	; (80098fc <mem_free+0xa8>)
 8009874:	4822      	ldr	r0, [pc, #136]	; (8009900 <mem_free+0xac>)
 8009876:	f005 fdbd 	bl	800f3f4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800987a:	4b22      	ldr	r3, [pc, #136]	; (8009904 <mem_free+0xb0>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	429a      	cmp	r2, r3
 8009882:	d304      	bcc.n	800988e <mem_free+0x3a>
 8009884:	4b20      	ldr	r3, [pc, #128]	; (8009908 <mem_free+0xb4>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	429a      	cmp	r2, r3
 800988c:	d306      	bcc.n	800989c <mem_free+0x48>
 800988e:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <mem_free+0xa4>)
 8009890:	f240 12af 	movw	r2, #431	; 0x1af
 8009894:	491d      	ldr	r1, [pc, #116]	; (800990c <mem_free+0xb8>)
 8009896:	481a      	ldr	r0, [pc, #104]	; (8009900 <mem_free+0xac>)
 8009898:	f005 fdac 	bl	800f3f4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800989c:	4b19      	ldr	r3, [pc, #100]	; (8009904 <mem_free+0xb0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d323      	bcc.n	80098ee <mem_free+0x9a>
 80098a6:	4b18      	ldr	r3, [pc, #96]	; (8009908 <mem_free+0xb4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d21e      	bcs.n	80098ee <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3b08      	subs	r3, #8
 80098b4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	791b      	ldrb	r3, [r3, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <mem_free+0x78>
 80098be:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <mem_free+0xa4>)
 80098c0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80098c4:	4912      	ldr	r1, [pc, #72]	; (8009910 <mem_free+0xbc>)
 80098c6:	480e      	ldr	r0, [pc, #56]	; (8009900 <mem_free+0xac>)
 80098c8:	f005 fd94 	bl	800f3f4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <mem_free+0xc0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d202      	bcs.n	80098e2 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80098dc:	4a0d      	ldr	r2, [pc, #52]	; (8009914 <mem_free+0xc0>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7ff fee4 	bl	80096b0 <plug_holes>
 80098e8:	e002      	b.n	80098f0 <mem_free+0x9c>
    return;
 80098ea:	bf00      	nop
 80098ec:	e000      	b.n	80098f0 <mem_free+0x9c>
    return;
 80098ee:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	080107f4 	.word	0x080107f4
 80098fc:	080108c8 	.word	0x080108c8
 8009900:	0801083c 	.word	0x0801083c
 8009904:	240000b4 	.word	0x240000b4
 8009908:	240000b8 	.word	0x240000b8
 800990c:	080108ec 	.word	0x080108ec
 8009910:	08010904 	.word	0x08010904
 8009914:	240000bc 	.word	0x240000bc

08009918 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8009924:	887b      	ldrh	r3, [r7, #2]
 8009926:	3303      	adds	r3, #3
 8009928:	b29b      	uxth	r3, r3
 800992a:	f023 0303 	bic.w	r3, r3, #3
 800992e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8009930:	887b      	ldrh	r3, [r7, #2]
 8009932:	2b0b      	cmp	r3, #11
 8009934:	d801      	bhi.n	800993a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009936:	230c      	movs	r3, #12
 8009938:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800993a:	887b      	ldrh	r3, [r7, #2]
 800993c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009940:	d901      	bls.n	8009946 <mem_trim+0x2e>
    return NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	e0b1      	b.n	8009aaa <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009946:	4b5b      	ldr	r3, [pc, #364]	; (8009ab4 <mem_trim+0x19c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d304      	bcc.n	800995a <mem_trim+0x42>
 8009950:	4b59      	ldr	r3, [pc, #356]	; (8009ab8 <mem_trim+0x1a0>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d306      	bcc.n	8009968 <mem_trim+0x50>
 800995a:	4b58      	ldr	r3, [pc, #352]	; (8009abc <mem_trim+0x1a4>)
 800995c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009960:	4957      	ldr	r1, [pc, #348]	; (8009ac0 <mem_trim+0x1a8>)
 8009962:	4858      	ldr	r0, [pc, #352]	; (8009ac4 <mem_trim+0x1ac>)
 8009964:	f005 fd46 	bl	800f3f4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009968:	4b52      	ldr	r3, [pc, #328]	; (8009ab4 <mem_trim+0x19c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d304      	bcc.n	800997c <mem_trim+0x64>
 8009972:	4b51      	ldr	r3, [pc, #324]	; (8009ab8 <mem_trim+0x1a0>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	429a      	cmp	r2, r3
 800997a:	d301      	bcc.n	8009980 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	e094      	b.n	8009aaa <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3b08      	subs	r3, #8
 8009984:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	4a4a      	ldr	r2, [pc, #296]	; (8009ab4 <mem_trim+0x19c>)
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	881a      	ldrh	r2, [r3, #0]
 8009994:	8a7b      	ldrh	r3, [r7, #18]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b08      	subs	r3, #8
 800999c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800999e:	887a      	ldrh	r2, [r7, #2]
 80099a0:	8a3b      	ldrh	r3, [r7, #16]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d906      	bls.n	80099b4 <mem_trim+0x9c>
 80099a6:	4b45      	ldr	r3, [pc, #276]	; (8009abc <mem_trim+0x1a4>)
 80099a8:	f240 2206 	movw	r2, #518	; 0x206
 80099ac:	4946      	ldr	r1, [pc, #280]	; (8009ac8 <mem_trim+0x1b0>)
 80099ae:	4845      	ldr	r0, [pc, #276]	; (8009ac4 <mem_trim+0x1ac>)
 80099b0:	f005 fd20 	bl	800f3f4 <iprintf>
  if (newsize > size) {
 80099b4:	887a      	ldrh	r2, [r7, #2]
 80099b6:	8a3b      	ldrh	r3, [r7, #16]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d901      	bls.n	80099c0 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	e074      	b.n	8009aaa <mem_trim+0x192>
  }
  if (newsize == size) {
 80099c0:	887a      	ldrh	r2, [r7, #2]
 80099c2:	8a3b      	ldrh	r3, [r7, #16]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d101      	bne.n	80099cc <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	e06e      	b.n	8009aaa <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80099cc:	4b39      	ldr	r3, [pc, #228]	; (8009ab4 <mem_trim+0x19c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	8812      	ldrh	r2, [r2, #0]
 80099d4:	4413      	add	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	791b      	ldrb	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d131      	bne.n	8009a44 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80099e6:	8a7a      	ldrh	r2, [r7, #18]
 80099e8:	887b      	ldrh	r3, [r7, #2]
 80099ea:	4413      	add	r3, r2
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	3308      	adds	r3, #8
 80099f0:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80099f2:	4b36      	ldr	r3, [pc, #216]	; (8009acc <mem_trim+0x1b4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d105      	bne.n	8009a08 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80099fc:	4b2d      	ldr	r3, [pc, #180]	; (8009ab4 <mem_trim+0x19c>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	897b      	ldrh	r3, [r7, #10]
 8009a02:	4413      	add	r3, r2
 8009a04:	4a31      	ldr	r2, [pc, #196]	; (8009acc <mem_trim+0x1b4>)
 8009a06:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009a08:	4b2a      	ldr	r3, [pc, #168]	; (8009ab4 <mem_trim+0x19c>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	897b      	ldrh	r3, [r7, #10]
 8009a0e:	4413      	add	r3, r2
 8009a10:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	893a      	ldrh	r2, [r7, #8]
 8009a1c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8a7a      	ldrh	r2, [r7, #18]
 8009a22:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	897a      	ldrh	r2, [r7, #10]
 8009a28:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009a32:	d039      	beq.n	8009aa8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009a34:	4b1f      	ldr	r3, [pc, #124]	; (8009ab4 <mem_trim+0x19c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	8812      	ldrh	r2, [r2, #0]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	897a      	ldrh	r2, [r7, #10]
 8009a40:	805a      	strh	r2, [r3, #2]
 8009a42:	e031      	b.n	8009aa8 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009a44:	887b      	ldrh	r3, [r7, #2]
 8009a46:	f103 0214 	add.w	r2, r3, #20
 8009a4a:	8a3b      	ldrh	r3, [r7, #16]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d82b      	bhi.n	8009aa8 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009a50:	8a7a      	ldrh	r2, [r7, #18]
 8009a52:	887b      	ldrh	r3, [r7, #2]
 8009a54:	4413      	add	r3, r2
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3308      	adds	r3, #8
 8009a5a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009a5c:	4b15      	ldr	r3, [pc, #84]	; (8009ab4 <mem_trim+0x19c>)
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	897b      	ldrh	r3, [r7, #10]
 8009a62:	4413      	add	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8009a66:	4b19      	ldr	r3, [pc, #100]	; (8009acc <mem_trim+0x1b4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d202      	bcs.n	8009a76 <mem_trim+0x15e>
      lfree = mem2;
 8009a70:	4a16      	ldr	r2, [pc, #88]	; (8009acc <mem_trim+0x1b4>)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	881a      	ldrh	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	8a7a      	ldrh	r2, [r7, #18]
 8009a88:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	897a      	ldrh	r2, [r7, #10]
 8009a8e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009a98:	d006      	beq.n	8009aa8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009a9a:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <mem_trim+0x19c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	8812      	ldrh	r2, [r2, #0]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	897a      	ldrh	r2, [r7, #10]
 8009aa6:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009aa8:	687b      	ldr	r3, [r7, #4]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	240000b4 	.word	0x240000b4
 8009ab8:	240000b8 	.word	0x240000b8
 8009abc:	080107f4 	.word	0x080107f4
 8009ac0:	08010918 	.word	0x08010918
 8009ac4:	0801083c 	.word	0x0801083c
 8009ac8:	08010930 	.word	0x08010930
 8009acc:	240000bc 	.word	0x240000bc

08009ad0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <mem_malloc+0x14>
    return NULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e0c8      	b.n	8009c76 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8009ae4:	88fb      	ldrh	r3, [r7, #6]
 8009ae6:	3303      	adds	r3, #3
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	f023 0303 	bic.w	r3, r3, #3
 8009aee:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	2b0b      	cmp	r3, #11
 8009af4:	d801      	bhi.n	8009afa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009af6:	230c      	movs	r3, #12
 8009af8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8009afa:	88fb      	ldrh	r3, [r7, #6]
 8009afc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009b00:	d901      	bls.n	8009b06 <mem_malloc+0x36>
    return NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	e0b7      	b.n	8009c76 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009b06:	4b5e      	ldr	r3, [pc, #376]	; (8009c80 <mem_malloc+0x1b0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	4b5d      	ldr	r3, [pc, #372]	; (8009c84 <mem_malloc+0x1b4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	83fb      	strh	r3, [r7, #30]
 8009b14:	e0a7      	b.n	8009c66 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8009b16:	4b5b      	ldr	r3, [pc, #364]	; (8009c84 <mem_malloc+0x1b4>)
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	8bfb      	ldrh	r3, [r7, #30]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	791b      	ldrb	r3, [r3, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 8098 	bne.w	8009c5a <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	8bfb      	ldrh	r3, [r7, #30]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	f1a3 0208 	sub.w	r2, r3, #8
 8009b38:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	f0c0 808d 	bcc.w	8009c5a <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	8bfb      	ldrh	r3, [r7, #30]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	f1a3 0208 	sub.w	r2, r3, #8
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	3314      	adds	r3, #20
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d327      	bcc.n	8009ba6 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8009b56:	8bfa      	ldrh	r2, [r7, #30]
 8009b58:	88fb      	ldrh	r3, [r7, #6]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3308      	adds	r3, #8
 8009b60:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8009b62:	4b48      	ldr	r3, [pc, #288]	; (8009c84 <mem_malloc+0x1b4>)
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	8a7b      	ldrh	r3, [r7, #18]
 8009b68:	4413      	add	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	881a      	ldrh	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8bfa      	ldrh	r2, [r7, #30]
 8009b7e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	8a7a      	ldrh	r2, [r7, #18]
 8009b84:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009b94:	d00a      	beq.n	8009bac <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009b96:	4b3b      	ldr	r3, [pc, #236]	; (8009c84 <mem_malloc+0x1b4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	8812      	ldrh	r2, [r2, #0]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	8a7a      	ldrh	r2, [r7, #18]
 8009ba2:	805a      	strh	r2, [r3, #2]
 8009ba4:	e002      	b.n	8009bac <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009bac:	4b34      	ldr	r3, [pc, #208]	; (8009c80 <mem_malloc+0x1b0>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d127      	bne.n	8009c06 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8009bb6:	4b32      	ldr	r3, [pc, #200]	; (8009c80 <mem_malloc+0x1b0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009bbc:	e005      	b.n	8009bca <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8009bbe:	4b31      	ldr	r3, [pc, #196]	; (8009c84 <mem_malloc+0x1b4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	8812      	ldrh	r2, [r2, #0]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	791b      	ldrb	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d004      	beq.n	8009bdc <mem_malloc+0x10c>
 8009bd2:	4b2d      	ldr	r3, [pc, #180]	; (8009c88 <mem_malloc+0x1b8>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d1f0      	bne.n	8009bbe <mem_malloc+0xee>
          }
          lfree = cur;
 8009bdc:	4a28      	ldr	r2, [pc, #160]	; (8009c80 <mem_malloc+0x1b0>)
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009be2:	4b27      	ldr	r3, [pc, #156]	; (8009c80 <mem_malloc+0x1b0>)
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	4b28      	ldr	r3, [pc, #160]	; (8009c88 <mem_malloc+0x1b8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d00b      	beq.n	8009c06 <mem_malloc+0x136>
 8009bee:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <mem_malloc+0x1b0>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	791b      	ldrb	r3, [r3, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d006      	beq.n	8009c06 <mem_malloc+0x136>
 8009bf8:	4b24      	ldr	r3, [pc, #144]	; (8009c8c <mem_malloc+0x1bc>)
 8009bfa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8009bfe:	4924      	ldr	r1, [pc, #144]	; (8009c90 <mem_malloc+0x1c0>)
 8009c00:	4824      	ldr	r0, [pc, #144]	; (8009c94 <mem_malloc+0x1c4>)
 8009c02:	f005 fbf7 	bl	800f3f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	4a1e      	ldr	r2, [pc, #120]	; (8009c88 <mem_malloc+0x1b8>)
 8009c10:	6812      	ldr	r2, [r2, #0]
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d906      	bls.n	8009c24 <mem_malloc+0x154>
 8009c16:	4b1d      	ldr	r3, [pc, #116]	; (8009c8c <mem_malloc+0x1bc>)
 8009c18:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8009c1c:	491e      	ldr	r1, [pc, #120]	; (8009c98 <mem_malloc+0x1c8>)
 8009c1e:	481d      	ldr	r0, [pc, #116]	; (8009c94 <mem_malloc+0x1c4>)
 8009c20:	f005 fbe8 	bl	800f3f4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d006      	beq.n	8009c3c <mem_malloc+0x16c>
 8009c2e:	4b17      	ldr	r3, [pc, #92]	; (8009c8c <mem_malloc+0x1bc>)
 8009c30:	f240 22d6 	movw	r2, #726	; 0x2d6
 8009c34:	4919      	ldr	r1, [pc, #100]	; (8009c9c <mem_malloc+0x1cc>)
 8009c36:	4817      	ldr	r0, [pc, #92]	; (8009c94 <mem_malloc+0x1c4>)
 8009c38:	f005 fbdc 	bl	800f3f4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d006      	beq.n	8009c54 <mem_malloc+0x184>
 8009c46:	4b11      	ldr	r3, [pc, #68]	; (8009c8c <mem_malloc+0x1bc>)
 8009c48:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8009c4c:	4914      	ldr	r1, [pc, #80]	; (8009ca0 <mem_malloc+0x1d0>)
 8009c4e:	4811      	ldr	r0, [pc, #68]	; (8009c94 <mem_malloc+0x1c4>)
 8009c50:	f005 fbd0 	bl	800f3f4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	3308      	adds	r3, #8
 8009c58:	e00d      	b.n	8009c76 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8009c5a:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <mem_malloc+0x1b4>)
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	8bfb      	ldrh	r3, [r7, #30]
 8009c60:	4413      	add	r3, r2
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009c66:	8bfa      	ldrh	r2, [r7, #30]
 8009c68:	88fb      	ldrh	r3, [r7, #6]
 8009c6a:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	f4ff af51 	bcc.w	8009b16 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3720      	adds	r7, #32
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	240000bc 	.word	0x240000bc
 8009c84:	240000b4 	.word	0x240000b4
 8009c88:	240000b8 	.word	0x240000b8
 8009c8c:	080107f4 	.word	0x080107f4
 8009c90:	08010950 	.word	0x08010950
 8009c94:	0801083c 	.word	0x0801083c
 8009c98:	0801096c 	.word	0x0801096c
 8009c9c:	0801099c 	.word	0x0801099c
 8009ca0:	080109cc 	.word	0x080109cc

08009ca4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	3303      	adds	r3, #3
 8009cba:	f023 0303 	bic.w	r3, r3, #3
 8009cbe:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e011      	b.n	8009cea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	889b      	ldrh	r3, [r3, #4]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	88db      	ldrh	r3, [r3, #6]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	dbe7      	blt.n	8009cc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009cf6:	bf00      	nop
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
	...

08009d04 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	80fb      	strh	r3, [r7, #6]
 8009d0e:	e009      	b.n	8009d24 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	4a08      	ldr	r2, [pc, #32]	; (8009d34 <memp_init+0x30>)
 8009d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff ffc3 	bl	8009ca4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009d1e:	88fb      	ldrh	r3, [r7, #6]
 8009d20:	3301      	adds	r3, #1
 8009d22:	80fb      	strh	r3, [r7, #6]
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d9f2      	bls.n	8009d10 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	08011954 	.word	0x08011954

08009d38 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d012      	beq.n	8009d74 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	6812      	ldr	r2, [r2, #0]
 8009d56:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d006      	beq.n	8009d70 <do_memp_malloc_pool+0x38>
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <do_memp_malloc_pool+0x48>)
 8009d64:	f240 1249 	movw	r2, #329	; 0x149
 8009d68:	4906      	ldr	r1, [pc, #24]	; (8009d84 <do_memp_malloc_pool+0x4c>)
 8009d6a:	4807      	ldr	r0, [pc, #28]	; (8009d88 <do_memp_malloc_pool+0x50>)
 8009d6c:	f005 fb42 	bl	800f3f4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	e000      	b.n	8009d76 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	08010a38 	.word	0x08010a38
 8009d84:	08010a68 	.word	0x08010a68
 8009d88:	08010a8c 	.word	0x08010a8c

08009d8c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <memp_malloc_pool+0x1c>
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <memp_malloc_pool+0x38>)
 8009d9c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009da0:	4909      	ldr	r1, [pc, #36]	; (8009dc8 <memp_malloc_pool+0x3c>)
 8009da2:	480a      	ldr	r0, [pc, #40]	; (8009dcc <memp_malloc_pool+0x40>)
 8009da4:	f005 fb26 	bl	800f3f4 <iprintf>
  if (desc == NULL) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <memp_malloc_pool+0x26>
    return NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	e003      	b.n	8009dba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff ffc0 	bl	8009d38 <do_memp_malloc_pool>
 8009db8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	08010a38 	.word	0x08010a38
 8009dc8:	08010ab4 	.word	0x08010ab4
 8009dcc:	08010a8c 	.word	0x08010a8c

08009dd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	2b05      	cmp	r3, #5
 8009dde:	d908      	bls.n	8009df2 <memp_malloc+0x22>
 8009de0:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <memp_malloc+0x3c>)
 8009de2:	f240 1287 	movw	r2, #391	; 0x187
 8009de6:	490a      	ldr	r1, [pc, #40]	; (8009e10 <memp_malloc+0x40>)
 8009de8:	480a      	ldr	r0, [pc, #40]	; (8009e14 <memp_malloc+0x44>)
 8009dea:	f005 fb03 	bl	800f3f4 <iprintf>
 8009dee:	2300      	movs	r3, #0
 8009df0:	e008      	b.n	8009e04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	4a08      	ldr	r2, [pc, #32]	; (8009e18 <memp_malloc+0x48>)
 8009df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff ff9c 	bl	8009d38 <do_memp_malloc_pool>
 8009e00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009e02:	68fb      	ldr	r3, [r7, #12]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	08010a38 	.word	0x08010a38
 8009e10:	08010ac8 	.word	0x08010ac8
 8009e14:	08010a8c 	.word	0x08010a8c
 8009e18:	08011954 	.word	0x08011954

08009e1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <do_memp_free_pool+0x22>
 8009e30:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <do_memp_free_pool+0x40>)
 8009e32:	f240 129d 	movw	r2, #413	; 0x19d
 8009e36:	490a      	ldr	r1, [pc, #40]	; (8009e60 <do_memp_free_pool+0x44>)
 8009e38:	480a      	ldr	r0, [pc, #40]	; (8009e64 <do_memp_free_pool+0x48>)
 8009e3a:	f005 fadb 	bl	800f3f4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009e54:	bf00      	nop
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	08010a38 	.word	0x08010a38
 8009e60:	08010ae8 	.word	0x08010ae8
 8009e64:	08010a8c 	.word	0x08010a8c

08009e68 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d106      	bne.n	8009e86 <memp_free_pool+0x1e>
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <memp_free_pool+0x3c>)
 8009e7a:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 8009e7e:	490a      	ldr	r1, [pc, #40]	; (8009ea8 <memp_free_pool+0x40>)
 8009e80:	480a      	ldr	r0, [pc, #40]	; (8009eac <memp_free_pool+0x44>)
 8009e82:	f005 fab7 	bl	800f3f4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d007      	beq.n	8009e9c <memp_free_pool+0x34>
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff ffc1 	bl	8009e1c <do_memp_free_pool>
 8009e9a:	e000      	b.n	8009e9e <memp_free_pool+0x36>
    return;
 8009e9c:	bf00      	nop
}
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	08010a38 	.word	0x08010a38
 8009ea8:	08010ab4 	.word	0x08010ab4
 8009eac:	08010a8c 	.word	0x08010a8c

08009eb0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6039      	str	r1, [r7, #0]
 8009eba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	2b05      	cmp	r3, #5
 8009ec0:	d907      	bls.n	8009ed2 <memp_free+0x22>
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <memp_free+0x44>)
 8009ec4:	f240 12db 	movw	r2, #475	; 0x1db
 8009ec8:	490b      	ldr	r1, [pc, #44]	; (8009ef8 <memp_free+0x48>)
 8009eca:	480c      	ldr	r0, [pc, #48]	; (8009efc <memp_free+0x4c>)
 8009ecc:	f005 fa92 	bl	800f3f4 <iprintf>
 8009ed0:	e00c      	b.n	8009eec <memp_free+0x3c>

  if (mem == NULL) {
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d008      	beq.n	8009eea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
 8009eda:	4a09      	ldr	r2, [pc, #36]	; (8009f00 <memp_free+0x50>)
 8009edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff ff9a 	bl	8009e1c <do_memp_free_pool>
 8009ee8:	e000      	b.n	8009eec <memp_free+0x3c>
    return;
 8009eea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	08010a38 	.word	0x08010a38
 8009ef8:	08010b08 	.word	0x08010b08
 8009efc:	08010a8c 	.word	0x08010a8c
 8009f00:	08011954 	.word	0x08011954

08009f04 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009f04:	b480      	push	{r7}
 8009f06:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009f08:	bf00      	nop
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
	...

08009f14 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d105      	bne.n	8009f34 <netif_add+0x20>
 8009f28:	4b21      	ldr	r3, [pc, #132]	; (8009fb0 <netif_add+0x9c>)
 8009f2a:	22fb      	movs	r2, #251	; 0xfb
 8009f2c:	4921      	ldr	r1, [pc, #132]	; (8009fb4 <netif_add+0xa0>)
 8009f2e:	4822      	ldr	r0, [pc, #136]	; (8009fb8 <netif_add+0xa4>)
 8009f30:	f005 fa60 	bl	800f3f4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2203      	movs	r2, #3
 8009f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8009f62:	4b16      	ldr	r3, [pc, #88]	; (8009fbc <netif_add+0xa8>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	b2d1      	uxtb	r1, r2
 8009f6a:	4a14      	ldr	r2, [pc, #80]	; (8009fbc <netif_add+0xa8>)
 8009f6c:	7011      	strb	r1, [r2, #0]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6a3a      	ldr	r2, [r7, #32]
 8009f78:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 f81f 	bl	8009fc4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	4798      	blx	r3
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <netif_add+0x82>
    return NULL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	e007      	b.n	8009fa6 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009f96:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <netif_add+0xac>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009f9e:	4a08      	ldr	r2, [pc, #32]	; (8009fc0 <netif_add+0xac>)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	08010b24 	.word	0x08010b24
 8009fb4:	08010b58 	.word	0x08010b58
 8009fb8:	08010b70 	.word	0x08010b70
 8009fbc:	240000d8 	.word	0x240000d8
 8009fc0:	24003670 	.word	0x24003670

08009fc4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <netif_set_addr+0x1c>
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10c      	bne.n	8009ffa <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8009fe0:	68b9      	ldr	r1, [r7, #8]
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f000 f81a 	bl	800a01c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f85a 	bl	800a0a4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 f842 	bl	800a07c <netif_set_gw>
 8009ff8:	e00b      	b.n	800a012 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 f851 	bl	800a0a4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 f839 	bl	800a07c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 f805 	bl	800a01c <netif_set_ipaddr>
  }
}
 800a012:	bf00      	nop
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <netif_set_ipaddr+0x18>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	e002      	b.n	800a03a <netif_set_ipaddr+0x1e>
 800a034:	4b10      	ldr	r3, [pc, #64]	; (800a078 <netif_set_ipaddr+0x5c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3304      	adds	r3, #4
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d014      	beq.n	800a070 <netif_set_ipaddr+0x54>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3304      	adds	r3, #4
 800a04a:	f107 020c 	add.w	r2, r7, #12
 800a04e:	4611      	mov	r1, r2
 800a050:	4618      	mov	r0, r3
 800a052:	f001 fba9 	bl	800b7a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <netif_set_ipaddr+0x46>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	e000      	b.n	800a064 <netif_set_ipaddr+0x48>
 800a062:	2300      	movs	r3, #0
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a068:	2101      	movs	r1, #1
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f861 	bl	800a132 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800a070:	bf00      	nop
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	0801197c 	.word	0x0801197c

0800a07c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <netif_set_gw+0x16>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	e000      	b.n	800a094 <netif_set_gw+0x18>
 800a092:	2300      	movs	r3, #0
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <netif_set_netmask+0x16>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	e000      	b.n	800a0bc <netif_set_netmask+0x18>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a0d4:	4a04      	ldr	r2, [pc, #16]	; (800a0e8 <netif_set_default+0x1c>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a0da:	bf00      	nop
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	24003674 	.word	0x24003674

0800a0ec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d113      	bne.n	800a12a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a108:	f043 0301 	orr.w	r3, r3, #1
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a11a:	f003 0304 	and.w	r3, r3, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800a122:	2103      	movs	r1, #3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f804 	bl	800a132 <netif_issue_reports>
    }
  }
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	460b      	mov	r3, r1
 800a13c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d011      	beq.n	800a16c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3304      	adds	r3, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00c      	beq.n	800a16c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a158:	f003 0308 	and.w	r3, r3, #8
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d005      	beq.n	800a16c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f002 fa80 	bl	800c66c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d012      	beq.n	800a1b0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a190:	f023 0301 	bic.w	r3, r3, #1
 800a194:	b2da      	uxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1a2:	f003 0308 	and.w	r3, r3, #8
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f001 fe24 	bl	800bdf8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d11b      	bne.n	800a206 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1d4:	f043 0304 	orr.w	r3, r3, #4
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800a1ee:	2103      	movs	r1, #3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff ff9e 	bl	800a132 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <netif_set_link_up+0x4e>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	4798      	blx	r3
  }
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a21c:	f003 0304 	and.w	r3, r3, #4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d010      	beq.n	800a246 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a22a:	f023 0304 	bic.w	r3, r3, #4
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <netif_set_link_down+0x38>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	4798      	blx	r3
  }
}
 800a246:	bf00      	nop
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
  if (netif) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	61da      	str	r2, [r3, #28]
  }
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	71fb      	strb	r3, [r7, #7]
 800a27a:	460b      	mov	r3, r1
 800a27c:	80bb      	strh	r3, [r7, #4]
 800a27e:	4613      	mov	r3, r2
 800a280:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	2b04      	cmp	r3, #4
 800a286:	d81c      	bhi.n	800a2c2 <pbuf_alloc+0x52>
 800a288:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <pbuf_alloc+0x20>)
 800a28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28e:	bf00      	nop
 800a290:	0800a2a5 	.word	0x0800a2a5
 800a294:	0800a2ab 	.word	0x0800a2ab
 800a298:	0800a2b1 	.word	0x0800a2b1
 800a29c:	0800a2b7 	.word	0x0800a2b7
 800a2a0:	0800a2bd 	.word	0x0800a2bd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a2a4:	2336      	movs	r3, #54	; 0x36
 800a2a6:	82fb      	strh	r3, [r7, #22]
    break;
 800a2a8:	e014      	b.n	800a2d4 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a2aa:	2322      	movs	r3, #34	; 0x22
 800a2ac:	82fb      	strh	r3, [r7, #22]
    break;
 800a2ae:	e011      	b.n	800a2d4 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a2b0:	230e      	movs	r3, #14
 800a2b2:	82fb      	strh	r3, [r7, #22]
    break;
 800a2b4:	e00e      	b.n	800a2d4 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	82fb      	strh	r3, [r7, #22]
    break;
 800a2ba:	e00b      	b.n	800a2d4 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	82fb      	strh	r3, [r7, #22]
    break;
 800a2c0:	e008      	b.n	800a2d4 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800a2c2:	4ba3      	ldr	r3, [pc, #652]	; (800a550 <pbuf_alloc+0x2e0>)
 800a2c4:	f44f 728b 	mov.w	r2, #278	; 0x116
 800a2c8:	49a2      	ldr	r1, [pc, #648]	; (800a554 <pbuf_alloc+0x2e4>)
 800a2ca:	48a3      	ldr	r0, [pc, #652]	; (800a558 <pbuf_alloc+0x2e8>)
 800a2cc:	f005 f892 	bl	800f3f4 <iprintf>
    return NULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	e159      	b.n	800a588 <pbuf_alloc+0x318>
  }

  switch (type) {
 800a2d4:	79bb      	ldrb	r3, [r7, #6]
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	f200 8130 	bhi.w	800a53c <pbuf_alloc+0x2cc>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <pbuf_alloc+0x74>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a47d 	.word	0x0800a47d
 800a2e8:	0800a509 	.word	0x0800a509
 800a2ec:	0800a509 	.word	0x0800a509
 800a2f0:	0800a2f5 	.word	0x0800a2f5
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a2f4:	2005      	movs	r0, #5
 800a2f6:	f7ff fd6b 	bl	8009dd0 <memp_malloc>
 800a2fa:	61b8      	str	r0, [r7, #24]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <pbuf_alloc+0x96>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	e140      	b.n	800a588 <pbuf_alloc+0x318>
    }
    p->type = type;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	79ba      	ldrb	r2, [r7, #6]
 800a30a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a312:	8afb      	ldrh	r3, [r7, #22]
 800a314:	3310      	adds	r3, #16
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	4413      	add	r3, r2
 800a31a:	3303      	adds	r3, #3
 800a31c:	f023 0303 	bic.w	r3, r3, #3
 800a320:	461a      	mov	r2, r3
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d006      	beq.n	800a340 <pbuf_alloc+0xd0>
 800a332:	4b87      	ldr	r3, [pc, #540]	; (800a550 <pbuf_alloc+0x2e0>)
 800a334:	f240 1229 	movw	r2, #297	; 0x129
 800a338:	4988      	ldr	r1, [pc, #544]	; (800a55c <pbuf_alloc+0x2ec>)
 800a33a:	4887      	ldr	r0, [pc, #540]	; (800a558 <pbuf_alloc+0x2e8>)
 800a33c:	f005 f85a 	bl	800f3f4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	88ba      	ldrh	r2, [r7, #4]
 800a344:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a346:	8afb      	ldrh	r3, [r7, #22]
 800a348:	3303      	adds	r3, #3
 800a34a:	f023 0303 	bic.w	r3, r3, #3
 800a34e:	f5c3 62bf 	rsb	r2, r3, #1528	; 0x5f8
 800a352:	88bb      	ldrh	r3, [r7, #4]
 800a354:	4293      	cmp	r3, r2
 800a356:	bf28      	it	cs
 800a358:	4613      	movcs	r3, r2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	8952      	ldrh	r2, [r2, #10]
 800a368:	441a      	add	r2, r3
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800a370:	429a      	cmp	r2, r3
 800a372:	d906      	bls.n	800a382 <pbuf_alloc+0x112>
 800a374:	4b76      	ldr	r3, [pc, #472]	; (800a550 <pbuf_alloc+0x2e0>)
 800a376:	f44f 7298 	mov.w	r2, #304	; 0x130
 800a37a:	4979      	ldr	r1, [pc, #484]	; (800a560 <pbuf_alloc+0x2f0>)
 800a37c:	4876      	ldr	r0, [pc, #472]	; (800a558 <pbuf_alloc+0x2e8>)
 800a37e:	f005 f839 	bl	800f3f4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a382:	8afb      	ldrh	r3, [r7, #22]
 800a384:	3303      	adds	r3, #3
 800a386:	f023 0303 	bic.w	r3, r3, #3
 800a38a:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 800a38e:	d106      	bne.n	800a39e <pbuf_alloc+0x12e>
 800a390:	4b6f      	ldr	r3, [pc, #444]	; (800a550 <pbuf_alloc+0x2e0>)
 800a392:	f44f 7299 	mov.w	r2, #306	; 0x132
 800a396:	4973      	ldr	r1, [pc, #460]	; (800a564 <pbuf_alloc+0x2f4>)
 800a398:	486f      	ldr	r0, [pc, #444]	; (800a558 <pbuf_alloc+0x2e8>)
 800a39a:	f005 f82b 	bl	800f3f4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	61fb      	str	r3, [r7, #28]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800a3a8:	88bb      	ldrh	r3, [r7, #4]
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	8952      	ldrh	r2, [r2, #10]
 800a3ae:	1a9b      	subs	r3, r3, r2
 800a3b0:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800a3b2:	e05f      	b.n	800a474 <pbuf_alloc+0x204>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a3b4:	2005      	movs	r0, #5
 800a3b6:	f7ff fd0b 	bl	8009dd0 <memp_malloc>
 800a3ba:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d104      	bne.n	800a3cc <pbuf_alloc+0x15c>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 800a3c2:	69b8      	ldr	r0, [r7, #24]
 800a3c4:	f000 fac2 	bl	800a94c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e0dd      	b.n	800a588 <pbuf_alloc+0x318>
      }
      q->type = type;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	79ba      	ldrb	r2, [r7, #6]
 800a3d0:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	dd06      	ble.n	800a3fc <pbuf_alloc+0x18c>
 800a3ee:	4b58      	ldr	r3, [pc, #352]	; (800a550 <pbuf_alloc+0x2e0>)
 800a3f0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800a3f4:	495c      	ldr	r1, [pc, #368]	; (800a568 <pbuf_alloc+0x2f8>)
 800a3f6:	4858      	ldr	r0, [pc, #352]	; (800a558 <pbuf_alloc+0x2e8>)
 800a3f8:	f004 fffc 	bl	800f3f4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	b29b      	uxth	r3, r3
 800a408:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 800a40c:	bf28      	it	cs
 800a40e:	f44f 63bf 	movcs.w	r3, #1528	; 0x5f8
 800a412:	b29a      	uxth	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f103 0210 	add.w	r2, r3, #16
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d006      	beq.n	800a43c <pbuf_alloc+0x1cc>
 800a42e:	4b48      	ldr	r3, [pc, #288]	; (800a550 <pbuf_alloc+0x2e0>)
 800a430:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800a434:	494d      	ldr	r1, [pc, #308]	; (800a56c <pbuf_alloc+0x2fc>)
 800a436:	4848      	ldr	r0, [pc, #288]	; (800a558 <pbuf_alloc+0x2e8>)
 800a438:	f004 ffdc 	bl	800f3f4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	8952      	ldrh	r2, [r2, #10]
 800a444:	441a      	add	r2, r3
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d906      	bls.n	800a45e <pbuf_alloc+0x1ee>
 800a450:	4b3f      	ldr	r3, [pc, #252]	; (800a550 <pbuf_alloc+0x2e0>)
 800a452:	f240 1255 	movw	r2, #341	; 0x155
 800a456:	4942      	ldr	r1, [pc, #264]	; (800a560 <pbuf_alloc+0x2f0>)
 800a458:	483f      	ldr	r0, [pc, #252]	; (800a558 <pbuf_alloc+0x2e8>)
 800a45a:	f004 ffcb 	bl	800f3f4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	895b      	ldrh	r3, [r3, #10]
 800a468:	461a      	mov	r2, r3
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	61fb      	str	r3, [r7, #28]
    while (rem_len > 0) {
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	dc9c      	bgt.n	800a3b4 <pbuf_alloc+0x144>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800a47a:	e07e      	b.n	800a57a <pbuf_alloc+0x30a>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800a47c:	8afb      	ldrh	r3, [r7, #22]
 800a47e:	3313      	adds	r3, #19
 800a480:	b29b      	uxth	r3, r3
 800a482:	f023 0303 	bic.w	r3, r3, #3
 800a486:	b29a      	uxth	r2, r3
 800a488:	88bb      	ldrh	r3, [r7, #4]
 800a48a:	3303      	adds	r3, #3
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	b29b      	uxth	r3, r3
 800a494:	4413      	add	r3, r2
 800a496:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800a498:	897a      	ldrh	r2, [r7, #10]
 800a49a:	88bb      	ldrh	r3, [r7, #4]
 800a49c:	3303      	adds	r3, #3
 800a49e:	f023 0303 	bic.w	r3, r3, #3
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d201      	bcs.n	800a4aa <pbuf_alloc+0x23a>
        return NULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e06e      	b.n	800a588 <pbuf_alloc+0x318>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800a4aa:	897b      	ldrh	r3, [r7, #10]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fb0f 	bl	8009ad0 <mem_malloc>
 800a4b2:	61b8      	str	r0, [r7, #24]
    }

    if (p == NULL) {
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d101      	bne.n	800a4be <pbuf_alloc+0x24e>
      return NULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e064      	b.n	800a588 <pbuf_alloc+0x318>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800a4be:	8afb      	ldrh	r3, [r7, #22]
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	3303      	adds	r3, #3
 800a4c8:	f023 0303 	bic.w	r3, r3, #3
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	88ba      	ldrh	r2, [r7, #4]
 800a4d6:	811a      	strh	r2, [r3, #8]
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	891a      	ldrh	r2, [r3, #8]
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	79ba      	ldrb	r2, [r7, #6]
 800a4ea:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f003 0303 	and.w	r3, r3, #3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d03f      	beq.n	800a578 <pbuf_alloc+0x308>
 800a4f8:	4b15      	ldr	r3, [pc, #84]	; (800a550 <pbuf_alloc+0x2e0>)
 800a4fa:	f240 1277 	movw	r2, #375	; 0x177
 800a4fe:	491c      	ldr	r1, [pc, #112]	; (800a570 <pbuf_alloc+0x300>)
 800a500:	4815      	ldr	r0, [pc, #84]	; (800a558 <pbuf_alloc+0x2e8>)
 800a502:	f004 ff77 	bl	800f3f4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800a506:	e037      	b.n	800a578 <pbuf_alloc+0x308>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a508:	2004      	movs	r0, #4
 800a50a:	f7ff fc61 	bl	8009dd0 <memp_malloc>
 800a50e:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <pbuf_alloc+0x2aa>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	e036      	b.n	800a588 <pbuf_alloc+0x318>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	2200      	movs	r2, #0
 800a51e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	88ba      	ldrh	r2, [r7, #4]
 800a524:	811a      	strh	r2, [r3, #8]
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	891a      	ldrh	r2, [r3, #8]
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	2200      	movs	r2, #0
 800a532:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	79ba      	ldrb	r2, [r7, #6]
 800a538:	731a      	strb	r2, [r3, #12]
    break;
 800a53a:	e01e      	b.n	800a57a <pbuf_alloc+0x30a>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a53c:	4b04      	ldr	r3, [pc, #16]	; (800a550 <pbuf_alloc+0x2e0>)
 800a53e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800a542:	490c      	ldr	r1, [pc, #48]	; (800a574 <pbuf_alloc+0x304>)
 800a544:	4804      	ldr	r0, [pc, #16]	; (800a558 <pbuf_alloc+0x2e8>)
 800a546:	f004 ff55 	bl	800f3f4 <iprintf>
    return NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e01c      	b.n	800a588 <pbuf_alloc+0x318>
 800a54e:	bf00      	nop
 800a550:	08010b98 	.word	0x08010b98
 800a554:	08010bc8 	.word	0x08010bc8
 800a558:	08010be4 	.word	0x08010be4
 800a55c:	08010c0c 	.word	0x08010c0c
 800a560:	08010c3c 	.word	0x08010c3c
 800a564:	08010c70 	.word	0x08010c70
 800a568:	08010ca4 	.word	0x08010ca4
 800a56c:	08010cb8 	.word	0x08010cb8
 800a570:	08010ce8 	.word	0x08010ce8
 800a574:	08010d14 	.word	0x08010d14
    break;
 800a578:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	2201      	movs	r2, #1
 800a57e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	2200      	movs	r2, #0
 800a584:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a586:	69bb      	ldr	r3, [r7, #24]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	603b      	str	r3, [r7, #0]
 800a598:	4603      	mov	r3, r0
 800a59a:	71fb      	strb	r3, [r7, #7]
 800a59c:	460b      	mov	r3, r1
 800a59e:	80bb      	strh	r3, [r7, #4]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	2b04      	cmp	r3, #4
 800a5a8:	d81b      	bhi.n	800a5e2 <pbuf_alloced_custom+0x52>
 800a5aa:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <pbuf_alloced_custom+0x20>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a5c5 	.word	0x0800a5c5
 800a5b4:	0800a5cb 	.word	0x0800a5cb
 800a5b8:	0800a5d1 	.word	0x0800a5d1
 800a5bc:	0800a5d7 	.word	0x0800a5d7
 800a5c0:	0800a5dd 	.word	0x0800a5dd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a5c4:	2336      	movs	r3, #54	; 0x36
 800a5c6:	81fb      	strh	r3, [r7, #14]
    break;
 800a5c8:	e014      	b.n	800a5f4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a5ca:	2322      	movs	r3, #34	; 0x22
 800a5cc:	81fb      	strh	r3, [r7, #14]
    break;
 800a5ce:	e011      	b.n	800a5f4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a5d0:	230e      	movs	r3, #14
 800a5d2:	81fb      	strh	r3, [r7, #14]
    break;
 800a5d4:	e00e      	b.n	800a5f4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	81fb      	strh	r3, [r7, #14]
    break;
 800a5da:	e00b      	b.n	800a5f4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	81fb      	strh	r3, [r7, #14]
    break;
 800a5e0:	e008      	b.n	800a5f4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800a5e2:	4b1d      	ldr	r3, [pc, #116]	; (800a658 <pbuf_alloced_custom+0xc8>)
 800a5e4:	f240 12c5 	movw	r2, #453	; 0x1c5
 800a5e8:	491c      	ldr	r1, [pc, #112]	; (800a65c <pbuf_alloced_custom+0xcc>)
 800a5ea:	481d      	ldr	r0, [pc, #116]	; (800a660 <pbuf_alloced_custom+0xd0>)
 800a5ec:	f004 ff02 	bl	800f3f4 <iprintf>
    return NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e02d      	b.n	800a650 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a5f4:	89fb      	ldrh	r3, [r7, #14]
 800a5f6:	3303      	adds	r3, #3
 800a5f8:	f023 0203 	bic.w	r2, r3, #3
 800a5fc:	88bb      	ldrh	r3, [r7, #4]
 800a5fe:	441a      	add	r2, r3
 800a600:	8bbb      	ldrh	r3, [r7, #28]
 800a602:	429a      	cmp	r2, r3
 800a604:	d901      	bls.n	800a60a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a606:	2300      	movs	r3, #0
 800a608:	e022      	b.n	800a650 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2200      	movs	r2, #0
 800a60e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a616:	89fb      	ldrh	r3, [r7, #14]
 800a618:	3303      	adds	r3, #3
 800a61a:	f023 0303 	bic.w	r3, r3, #3
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	441a      	add	r2, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	605a      	str	r2, [r3, #4]
 800a626:	e002      	b.n	800a62e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2200      	movs	r2, #0
 800a62c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2202      	movs	r2, #2
 800a632:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	88ba      	ldrh	r2, [r7, #4]
 800a638:	811a      	strh	r2, [r3, #8]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	891a      	ldrh	r2, [r3, #8]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	79ba      	ldrb	r2, [r7, #6]
 800a646:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2201      	movs	r2, #1
 800a64c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800a64e:	683b      	ldr	r3, [r7, #0]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	08010b98 	.word	0x08010b98
 800a65c:	08010d30 	.word	0x08010d30
 800a660:	08010be4 	.word	0x08010be4

0800a664 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <pbuf_realloc+0x20>
 800a676:	4b4b      	ldr	r3, [pc, #300]	; (800a7a4 <pbuf_realloc+0x140>)
 800a678:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a67c:	494a      	ldr	r1, [pc, #296]	; (800a7a8 <pbuf_realloc+0x144>)
 800a67e:	484b      	ldr	r0, [pc, #300]	; (800a7ac <pbuf_realloc+0x148>)
 800a680:	f004 feb8 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7b1b      	ldrb	r3, [r3, #12]
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d012      	beq.n	800a6b2 <pbuf_realloc+0x4e>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	7b1b      	ldrb	r3, [r3, #12]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d00e      	beq.n	800a6b2 <pbuf_realloc+0x4e>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	7b1b      	ldrb	r3, [r3, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00a      	beq.n	800a6b2 <pbuf_realloc+0x4e>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7b1b      	ldrb	r3, [r3, #12]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d006      	beq.n	800a6b2 <pbuf_realloc+0x4e>
 800a6a4:	4b3f      	ldr	r3, [pc, #252]	; (800a7a4 <pbuf_realloc+0x140>)
 800a6a6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a6aa:	4941      	ldr	r1, [pc, #260]	; (800a7b0 <pbuf_realloc+0x14c>)
 800a6ac:	483f      	ldr	r0, [pc, #252]	; (800a7ac <pbuf_realloc+0x148>)
 800a6ae:	f004 fea1 	bl	800f3f4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	891b      	ldrh	r3, [r3, #8]
 800a6b6:	887a      	ldrh	r2, [r7, #2]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d26f      	bcs.n	800a79c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800a6bc:	887b      	ldrh	r3, [r7, #2]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	8912      	ldrh	r2, [r2, #8]
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a6c6:	887b      	ldrh	r3, [r7, #2]
 800a6c8:	827b      	strh	r3, [r7, #18]
  q = p;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a6ce:	e025      	b.n	800a71c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	895b      	ldrh	r3, [r3, #10]
 800a6d4:	8a7a      	ldrh	r2, [r7, #18]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	dd06      	ble.n	800a6f2 <pbuf_realloc+0x8e>
 800a6e4:	4b2f      	ldr	r3, [pc, #188]	; (800a7a4 <pbuf_realloc+0x140>)
 800a6e6:	f240 220b 	movw	r2, #523	; 0x20b
 800a6ea:	4932      	ldr	r1, [pc, #200]	; (800a7b4 <pbuf_realloc+0x150>)
 800a6ec:	482f      	ldr	r0, [pc, #188]	; (800a7ac <pbuf_realloc+0x148>)
 800a6ee:	f004 fe81 	bl	800f3f4 <iprintf>
    q->tot_len += (u16_t)grow;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	891a      	ldrh	r2, [r3, #8]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <pbuf_realloc+0xb8>
 800a70e:	4b25      	ldr	r3, [pc, #148]	; (800a7a4 <pbuf_realloc+0x140>)
 800a710:	f240 220f 	movw	r2, #527	; 0x20f
 800a714:	4928      	ldr	r1, [pc, #160]	; (800a7b8 <pbuf_realloc+0x154>)
 800a716:	4825      	ldr	r0, [pc, #148]	; (800a7ac <pbuf_realloc+0x148>)
 800a718:	f004 fe6c 	bl	800f3f4 <iprintf>
  while (rem_len > q->len) {
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	895b      	ldrh	r3, [r3, #10]
 800a720:	8a7a      	ldrh	r2, [r7, #18]
 800a722:	429a      	cmp	r2, r3
 800a724:	d8d4      	bhi.n	800a6d0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	7b1b      	ldrb	r3, [r3, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d122      	bne.n	800a774 <pbuf_realloc+0x110>
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	895b      	ldrh	r3, [r3, #10]
 800a732:	8a7a      	ldrh	r2, [r7, #18]
 800a734:	429a      	cmp	r2, r3
 800a736:	d01d      	beq.n	800a774 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	7b5b      	ldrb	r3, [r3, #13]
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d117      	bne.n	800a774 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	461a      	mov	r2, r3
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	b29a      	uxth	r2, r3
 800a750:	8a7b      	ldrh	r3, [r7, #18]
 800a752:	4413      	add	r3, r2
 800a754:	b29b      	uxth	r3, r3
 800a756:	4619      	mov	r1, r3
 800a758:	6978      	ldr	r0, [r7, #20]
 800a75a:	f7ff f8dd 	bl	8009918 <mem_trim>
 800a75e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d106      	bne.n	800a774 <pbuf_realloc+0x110>
 800a766:	4b0f      	ldr	r3, [pc, #60]	; (800a7a4 <pbuf_realloc+0x140>)
 800a768:	f240 221d 	movw	r2, #541	; 0x21d
 800a76c:	4913      	ldr	r1, [pc, #76]	; (800a7bc <pbuf_realloc+0x158>)
 800a76e:	480f      	ldr	r0, [pc, #60]	; (800a7ac <pbuf_realloc+0x148>)
 800a770:	f004 fe40 	bl	800f3f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	8a7a      	ldrh	r2, [r7, #18]
 800a778:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	895a      	ldrh	r2, [r3, #10]
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 f8dc 	bl	800a94c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2200      	movs	r2, #0
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e000      	b.n	800a79e <pbuf_realloc+0x13a>
    return;
 800a79c:	bf00      	nop

}
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	08010b98 	.word	0x08010b98
 800a7a8:	08010d54 	.word	0x08010d54
 800a7ac:	08010be4 	.word	0x08010be4
 800a7b0:	08010d6c 	.word	0x08010d6c
 800a7b4:	08010d88 	.word	0x08010d88
 800a7b8:	08010d9c 	.word	0x08010d9c
 800a7bc:	08010db4 	.word	0x08010db4

0800a7c0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <pbuf_header_impl+0x24>
 800a7d6:	4b46      	ldr	r3, [pc, #280]	; (800a8f0 <pbuf_header_impl+0x130>)
 800a7d8:	f240 223f 	movw	r2, #575	; 0x23f
 800a7dc:	4945      	ldr	r1, [pc, #276]	; (800a8f4 <pbuf_header_impl+0x134>)
 800a7de:	4846      	ldr	r0, [pc, #280]	; (800a8f8 <pbuf_header_impl+0x138>)
 800a7e0:	f004 fe08 	bl	800f3f4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800a7e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <pbuf_header_impl+0x32>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <pbuf_header_impl+0x36>
    return 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e078      	b.n	800a8e8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800a7f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	da10      	bge.n	800a820 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800a7fe:	887b      	ldrh	r3, [r7, #2]
 800a800:	425b      	negs	r3, r3
 800a802:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	895b      	ldrh	r3, [r3, #10]
 800a808:	89fa      	ldrh	r2, [r7, #14]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d90a      	bls.n	800a824 <pbuf_header_impl+0x64>
 800a80e:	4b38      	ldr	r3, [pc, #224]	; (800a8f0 <pbuf_header_impl+0x130>)
 800a810:	f240 2247 	movw	r2, #583	; 0x247
 800a814:	4939      	ldr	r1, [pc, #228]	; (800a8fc <pbuf_header_impl+0x13c>)
 800a816:	4838      	ldr	r0, [pc, #224]	; (800a8f8 <pbuf_header_impl+0x138>)
 800a818:	f004 fdec 	bl	800f3f4 <iprintf>
 800a81c:	2301      	movs	r3, #1
 800a81e:	e063      	b.n	800a8e8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800a820:	887b      	ldrh	r3, [r7, #2]
 800a822:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7b1b      	ldrb	r3, [r3, #12]
 800a828:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800a830:	89bb      	ldrh	r3, [r7, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <pbuf_header_impl+0x7c>
 800a836:	89bb      	ldrh	r3, [r7, #12]
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d112      	bne.n	800a862 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a844:	425b      	negs	r3, r3
 800a846:	441a      	add	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3310      	adds	r3, #16
 800a854:	429a      	cmp	r2, r3
 800a856:	d238      	bcs.n	800a8ca <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800a85e:	2301      	movs	r3, #1
 800a860:	e042      	b.n	800a8e8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800a862:	89bb      	ldrh	r3, [r7, #12]
 800a864:	2b02      	cmp	r3, #2
 800a866:	d002      	beq.n	800a86e <pbuf_header_impl+0xae>
 800a868:	89bb      	ldrh	r3, [r7, #12]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d124      	bne.n	800a8b8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a86e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a872:	2b00      	cmp	r3, #0
 800a874:	da0d      	bge.n	800a892 <pbuf_header_impl+0xd2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	895b      	ldrh	r3, [r3, #10]
 800a87a:	89fa      	ldrh	r2, [r7, #14]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d808      	bhi.n	800a892 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a888:	425b      	negs	r3, r3
 800a88a:	441a      	add	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	605a      	str	r2, [r3, #4]
 800a890:	e011      	b.n	800a8b6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800a892:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dd0b      	ble.n	800a8b2 <pbuf_header_impl+0xf2>
 800a89a:	787b      	ldrb	r3, [r7, #1]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d008      	beq.n	800a8b2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8a8:	425b      	negs	r3, r3
 800a8aa:	441a      	add	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	605a      	str	r2, [r3, #4]
 800a8b0:	e001      	b.n	800a8b6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e018      	b.n	800a8e8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a8b6:	e008      	b.n	800a8ca <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <pbuf_header_impl+0x130>)
 800a8ba:	f240 2277 	movw	r2, #631	; 0x277
 800a8be:	4910      	ldr	r1, [pc, #64]	; (800a900 <pbuf_header_impl+0x140>)
 800a8c0:	480d      	ldr	r0, [pc, #52]	; (800a8f8 <pbuf_header_impl+0x138>)
 800a8c2:	f004 fd97 	bl	800f3f4 <iprintf>
    return 1;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e00e      	b.n	800a8e8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	895a      	ldrh	r2, [r3, #10]
 800a8ce:	887b      	ldrh	r3, [r7, #2]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	891a      	ldrh	r2, [r3, #8]
 800a8dc:	887b      	ldrh	r3, [r7, #2]
 800a8de:	4413      	add	r3, r2
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	08010b98 	.word	0x08010b98
 800a8f4:	08010dd0 	.word	0x08010dd0
 800a8f8:	08010be4 	.word	0x08010be4
 800a8fc:	08010ddc 	.word	0x08010ddc
 800a900:	08010dfc 	.word	0x08010dfc

0800a904 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800a910:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a914:	2200      	movs	r2, #0
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ff51 	bl	800a7c0 <pbuf_header_impl>
 800a91e:	4603      	mov	r3, r0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800a934:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a938:	2201      	movs	r2, #1
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ff3f 	bl	800a7c0 <pbuf_header_impl>
 800a942:	4603      	mov	r3, r0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b086      	sub	sp, #24
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10b      	bne.n	800a972 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d106      	bne.n	800a96e <pbuf_free+0x22>
 800a960:	4b3e      	ldr	r3, [pc, #248]	; (800aa5c <pbuf_free+0x110>)
 800a962:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a966:	493e      	ldr	r1, [pc, #248]	; (800aa60 <pbuf_free+0x114>)
 800a968:	483e      	ldr	r0, [pc, #248]	; (800aa64 <pbuf_free+0x118>)
 800a96a:	f004 fd43 	bl	800f3f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	e070      	b.n	800aa54 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	7b1b      	ldrb	r3, [r3, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d012      	beq.n	800a9a0 <pbuf_free+0x54>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	7b1b      	ldrb	r3, [r3, #12]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d00e      	beq.n	800a9a0 <pbuf_free+0x54>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7b1b      	ldrb	r3, [r3, #12]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d00a      	beq.n	800a9a0 <pbuf_free+0x54>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	7b1b      	ldrb	r3, [r3, #12]
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d006      	beq.n	800a9a0 <pbuf_free+0x54>
 800a992:	4b32      	ldr	r3, [pc, #200]	; (800aa5c <pbuf_free+0x110>)
 800a994:	f240 22de 	movw	r2, #734	; 0x2de
 800a998:	4933      	ldr	r1, [pc, #204]	; (800aa68 <pbuf_free+0x11c>)
 800a99a:	4832      	ldr	r0, [pc, #200]	; (800aa64 <pbuf_free+0x118>)
 800a99c:	f004 fd2a 	bl	800f3f4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a9a4:	e052      	b.n	800aa4c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	89db      	ldrh	r3, [r3, #14]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <pbuf_free+0x70>
 800a9ae:	4b2b      	ldr	r3, [pc, #172]	; (800aa5c <pbuf_free+0x110>)
 800a9b0:	f240 22eb 	movw	r2, #747	; 0x2eb
 800a9b4:	492d      	ldr	r1, [pc, #180]	; (800aa6c <pbuf_free+0x120>)
 800a9b6:	482b      	ldr	r0, [pc, #172]	; (800aa64 <pbuf_free+0x118>)
 800a9b8:	f004 fd1c 	bl	800f3f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	89db      	ldrh	r3, [r3, #14]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	81da      	strh	r2, [r3, #14]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	89db      	ldrh	r3, [r3, #14]
 800a9cc:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a9ce:	8abb      	ldrh	r3, [r7, #20]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d139      	bne.n	800aa48 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7b1b      	ldrb	r3, [r3, #12]
 800a9de:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	7b5b      	ldrb	r3, [r3, #13]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d011      	beq.n	800aa10 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d106      	bne.n	800aa06 <pbuf_free+0xba>
 800a9f8:	4b18      	ldr	r3, [pc, #96]	; (800aa5c <pbuf_free+0x110>)
 800a9fa:	f240 22f9 	movw	r2, #761	; 0x2f9
 800a9fe:	491c      	ldr	r1, [pc, #112]	; (800aa70 <pbuf_free+0x124>)
 800aa00:	4818      	ldr	r0, [pc, #96]	; (800aa64 <pbuf_free+0x118>)
 800aa02:	f004 fcf7 	bl	800f3f4 <iprintf>
        pc->custom_free_function(p);
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	4798      	blx	r3
 800aa0e:	e015      	b.n	800aa3c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800aa10:	89fb      	ldrh	r3, [r7, #14]
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d104      	bne.n	800aa20 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	2005      	movs	r0, #5
 800aa1a:	f7ff fa49 	bl	8009eb0 <memp_free>
 800aa1e:	e00d      	b.n	800aa3c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800aa20:	89fb      	ldrh	r3, [r7, #14]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d002      	beq.n	800aa2c <pbuf_free+0xe0>
 800aa26:	89fb      	ldrh	r3, [r7, #14]
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d104      	bne.n	800aa36 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	2004      	movs	r0, #4
 800aa30:	f7ff fa3e 	bl	8009eb0 <memp_free>
 800aa34:	e002      	b.n	800aa3c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7fe ff0c 	bl	8009854 <mem_free>
        }
      }
      count++;
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	607b      	str	r3, [r7, #4]
 800aa46:	e001      	b.n	800aa4c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1a9      	bne.n	800a9a6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	08010b98 	.word	0x08010b98
 800aa60:	08010dd0 	.word	0x08010dd0
 800aa64:	08010be4 	.word	0x08010be4
 800aa68:	08010e0c 	.word	0x08010e0c
 800aa6c:	08010e24 	.word	0x08010e24
 800aa70:	08010e3c 	.word	0x08010e3c

0800aa74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800aa80:	e005      	b.n	800aa8e <pbuf_clen+0x1a>
    ++len;
 800aa82:	89fb      	ldrh	r3, [r7, #14]
 800aa84:	3301      	adds	r3, #1
 800aa86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1f6      	bne.n	800aa82 <pbuf_clen+0xe>
  }
  return len;
 800aa94:	89fb      	ldrh	r3, [r7, #14]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
	...

0800aaa4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d010      	beq.n	800aad4 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	89db      	ldrh	r3, [r3, #14]
 800aab6:	3301      	adds	r3, #1
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	89db      	ldrh	r3, [r3, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d106      	bne.n	800aad4 <pbuf_ref+0x30>
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <pbuf_ref+0x38>)
 800aac8:	f240 3239 	movw	r2, #825	; 0x339
 800aacc:	4904      	ldr	r1, [pc, #16]	; (800aae0 <pbuf_ref+0x3c>)
 800aace:	4805      	ldr	r0, [pc, #20]	; (800aae4 <pbuf_ref+0x40>)
 800aad0:	f004 fc90 	bl	800f3f4 <iprintf>
  }
}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	08010b98 	.word	0x08010b98
 800aae0:	08010e60 	.word	0x08010e60
 800aae4:	08010be4 	.word	0x08010be4

0800aae8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <pbuf_cat+0x16>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d107      	bne.n	800ab0e <pbuf_cat+0x26>
 800aafe:	4b20      	ldr	r3, [pc, #128]	; (800ab80 <pbuf_cat+0x98>)
 800ab00:	f240 324d 	movw	r2, #845	; 0x34d
 800ab04:	491f      	ldr	r1, [pc, #124]	; (800ab84 <pbuf_cat+0x9c>)
 800ab06:	4820      	ldr	r0, [pc, #128]	; (800ab88 <pbuf_cat+0xa0>)
 800ab08:	f004 fc74 	bl	800f3f4 <iprintf>
 800ab0c:	e034      	b.n	800ab78 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	60fb      	str	r3, [r7, #12]
 800ab12:	e00a      	b.n	800ab2a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	891a      	ldrh	r2, [r3, #8]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	891b      	ldrh	r3, [r3, #8]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1f0      	bne.n	800ab14 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	891a      	ldrh	r2, [r3, #8]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	895b      	ldrh	r3, [r3, #10]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d006      	beq.n	800ab4c <pbuf_cat+0x64>
 800ab3e:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <pbuf_cat+0x98>)
 800ab40:	f240 3255 	movw	r2, #853	; 0x355
 800ab44:	4911      	ldr	r1, [pc, #68]	; (800ab8c <pbuf_cat+0xa4>)
 800ab46:	4810      	ldr	r0, [pc, #64]	; (800ab88 <pbuf_cat+0xa0>)
 800ab48:	f004 fc54 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d006      	beq.n	800ab62 <pbuf_cat+0x7a>
 800ab54:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <pbuf_cat+0x98>)
 800ab56:	f240 3256 	movw	r2, #854	; 0x356
 800ab5a:	490d      	ldr	r1, [pc, #52]	; (800ab90 <pbuf_cat+0xa8>)
 800ab5c:	480a      	ldr	r0, [pc, #40]	; (800ab88 <pbuf_cat+0xa0>)
 800ab5e:	f004 fc49 	bl	800f3f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	891a      	ldrh	r2, [r3, #8]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	891b      	ldrh	r3, [r3, #8]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	08010b98 	.word	0x08010b98
 800ab84:	08010e74 	.word	0x08010e74
 800ab88:	08010be4 	.word	0x08010be4
 800ab8c:	08010eac 	.word	0x08010eac
 800ab90:	08010edc 	.word	0x08010edc

0800ab94 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff ffa1 	bl	800aae8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800aba6:	6838      	ldr	r0, [r7, #0]
 800aba8:	f7ff ff7c 	bl	800aaa4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800abbe:	2300      	movs	r3, #0
 800abc0:	81fb      	strh	r3, [r7, #14]
 800abc2:	2300      	movs	r3, #0
 800abc4:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d008      	beq.n	800abde <pbuf_copy+0x2a>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d005      	beq.n	800abde <pbuf_copy+0x2a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	891a      	ldrh	r2, [r3, #8]
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	891b      	ldrh	r3, [r3, #8]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d209      	bcs.n	800abf2 <pbuf_copy+0x3e>
 800abde:	4b54      	ldr	r3, [pc, #336]	; (800ad30 <pbuf_copy+0x17c>)
 800abe0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800abe4:	4953      	ldr	r1, [pc, #332]	; (800ad34 <pbuf_copy+0x180>)
 800abe6:	4854      	ldr	r0, [pc, #336]	; (800ad38 <pbuf_copy+0x184>)
 800abe8:	f004 fc04 	bl	800f3f4 <iprintf>
 800abec:	f06f 030f 	mvn.w	r3, #15
 800abf0:	e099      	b.n	800ad26 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	895b      	ldrh	r3, [r3, #10]
 800abf6:	461a      	mov	r2, r3
 800abf8:	89fb      	ldrh	r3, [r7, #14]
 800abfa:	1ad2      	subs	r2, r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	895b      	ldrh	r3, [r3, #10]
 800ac00:	4619      	mov	r1, r3
 800ac02:	89bb      	ldrh	r3, [r7, #12]
 800ac04:	1acb      	subs	r3, r1, r3
 800ac06:	429a      	cmp	r2, r3
 800ac08:	db05      	blt.n	800ac16 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	895a      	ldrh	r2, [r3, #10]
 800ac0e:	89bb      	ldrh	r3, [r7, #12]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	817b      	strh	r3, [r7, #10]
 800ac14:	e004      	b.n	800ac20 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	895a      	ldrh	r2, [r3, #10]
 800ac1a:	89fb      	ldrh	r3, [r7, #14]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	89fb      	ldrh	r3, [r7, #14]
 800ac26:	18d0      	adds	r0, r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	89bb      	ldrh	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	897a      	ldrh	r2, [r7, #10]
 800ac32:	4619      	mov	r1, r3
 800ac34:	f004 fbcb 	bl	800f3ce <memcpy>
    offset_to += len;
 800ac38:	89fa      	ldrh	r2, [r7, #14]
 800ac3a:	897b      	ldrh	r3, [r7, #10]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800ac40:	89ba      	ldrh	r2, [r7, #12]
 800ac42:	897b      	ldrh	r3, [r7, #10]
 800ac44:	4413      	add	r3, r2
 800ac46:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	895b      	ldrh	r3, [r3, #10]
 800ac4c:	89fa      	ldrh	r2, [r7, #14]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d906      	bls.n	800ac60 <pbuf_copy+0xac>
 800ac52:	4b37      	ldr	r3, [pc, #220]	; (800ad30 <pbuf_copy+0x17c>)
 800ac54:	f240 32cd 	movw	r2, #973	; 0x3cd
 800ac58:	4938      	ldr	r1, [pc, #224]	; (800ad3c <pbuf_copy+0x188>)
 800ac5a:	4837      	ldr	r0, [pc, #220]	; (800ad38 <pbuf_copy+0x184>)
 800ac5c:	f004 fbca 	bl	800f3f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	895b      	ldrh	r3, [r3, #10]
 800ac64:	89ba      	ldrh	r2, [r7, #12]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d906      	bls.n	800ac78 <pbuf_copy+0xc4>
 800ac6a:	4b31      	ldr	r3, [pc, #196]	; (800ad30 <pbuf_copy+0x17c>)
 800ac6c:	f240 32ce 	movw	r2, #974	; 0x3ce
 800ac70:	4933      	ldr	r1, [pc, #204]	; (800ad40 <pbuf_copy+0x18c>)
 800ac72:	4831      	ldr	r0, [pc, #196]	; (800ad38 <pbuf_copy+0x184>)
 800ac74:	f004 fbbe 	bl	800f3f4 <iprintf>
    if (offset_from >= p_from->len) {
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	895b      	ldrh	r3, [r3, #10]
 800ac7c:	89ba      	ldrh	r2, [r7, #12]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d304      	bcc.n	800ac8c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	895b      	ldrh	r3, [r3, #10]
 800ac90:	89fa      	ldrh	r2, [r7, #14]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d114      	bne.n	800acc0 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10c      	bne.n	800acc0 <pbuf_copy+0x10c>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d009      	beq.n	800acc0 <pbuf_copy+0x10c>
 800acac:	4b20      	ldr	r3, [pc, #128]	; (800ad30 <pbuf_copy+0x17c>)
 800acae:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800acb2:	4924      	ldr	r1, [pc, #144]	; (800ad44 <pbuf_copy+0x190>)
 800acb4:	4820      	ldr	r0, [pc, #128]	; (800ad38 <pbuf_copy+0x184>)
 800acb6:	f004 fb9d 	bl	800f3f4 <iprintf>
 800acba:	f06f 030f 	mvn.w	r3, #15
 800acbe:	e032      	b.n	800ad26 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d013      	beq.n	800acee <pbuf_copy+0x13a>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	895a      	ldrh	r2, [r3, #10]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	891b      	ldrh	r3, [r3, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d10d      	bne.n	800acee <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d009      	beq.n	800acee <pbuf_copy+0x13a>
 800acda:	4b15      	ldr	r3, [pc, #84]	; (800ad30 <pbuf_copy+0x17c>)
 800acdc:	f240 32de 	movw	r2, #990	; 0x3de
 800ace0:	4919      	ldr	r1, [pc, #100]	; (800ad48 <pbuf_copy+0x194>)
 800ace2:	4815      	ldr	r0, [pc, #84]	; (800ad38 <pbuf_copy+0x184>)
 800ace4:	f004 fb86 	bl	800f3f4 <iprintf>
 800ace8:	f06f 0305 	mvn.w	r3, #5
 800acec:	e01b      	b.n	800ad26 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d013      	beq.n	800ad1c <pbuf_copy+0x168>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	895a      	ldrh	r2, [r3, #10]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	891b      	ldrh	r3, [r3, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d10d      	bne.n	800ad1c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d009      	beq.n	800ad1c <pbuf_copy+0x168>
 800ad08:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <pbuf_copy+0x17c>)
 800ad0a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800ad0e:	490e      	ldr	r1, [pc, #56]	; (800ad48 <pbuf_copy+0x194>)
 800ad10:	4809      	ldr	r0, [pc, #36]	; (800ad38 <pbuf_copy+0x184>)
 800ad12:	f004 fb6f 	bl	800f3f4 <iprintf>
 800ad16:	f06f 0305 	mvn.w	r3, #5
 800ad1a:	e004      	b.n	800ad26 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f47f af67 	bne.w	800abf2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	08010b98 	.word	0x08010b98
 800ad34:	08010f28 	.word	0x08010f28
 800ad38:	08010be4 	.word	0x08010be4
 800ad3c:	08010f58 	.word	0x08010f58
 800ad40:	08010f70 	.word	0x08010f70
 800ad44:	08010f8c 	.word	0x08010f8c
 800ad48:	08010f9c 	.word	0x08010f9c

0800ad4c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800ad5a:	88fb      	ldrh	r3, [r7, #6]
 800ad5c:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d109      	bne.n	800ad7c <pbuf_take+0x30>
 800ad68:	4b3a      	ldr	r3, [pc, #232]	; (800ae54 <pbuf_take+0x108>)
 800ad6a:	f240 4284 	movw	r2, #1156	; 0x484
 800ad6e:	493a      	ldr	r1, [pc, #232]	; (800ae58 <pbuf_take+0x10c>)
 800ad70:	483a      	ldr	r0, [pc, #232]	; (800ae5c <pbuf_take+0x110>)
 800ad72:	f004 fb3f 	bl	800f3f4 <iprintf>
 800ad76:	f06f 030f 	mvn.w	r3, #15
 800ad7a:	e066      	b.n	800ae4a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d109      	bne.n	800ad96 <pbuf_take+0x4a>
 800ad82:	4b34      	ldr	r3, [pc, #208]	; (800ae54 <pbuf_take+0x108>)
 800ad84:	f240 4285 	movw	r2, #1157	; 0x485
 800ad88:	4935      	ldr	r1, [pc, #212]	; (800ae60 <pbuf_take+0x114>)
 800ad8a:	4834      	ldr	r0, [pc, #208]	; (800ae5c <pbuf_take+0x110>)
 800ad8c:	f004 fb32 	bl	800f3f4 <iprintf>
 800ad90:	f06f 030f 	mvn.w	r3, #15
 800ad94:	e059      	b.n	800ae4a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	891b      	ldrh	r3, [r3, #8]
 800ad9a:	88fa      	ldrh	r2, [r7, #6]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d909      	bls.n	800adb4 <pbuf_take+0x68>
 800ada0:	4b2c      	ldr	r3, [pc, #176]	; (800ae54 <pbuf_take+0x108>)
 800ada2:	f240 4286 	movw	r2, #1158	; 0x486
 800ada6:	492f      	ldr	r1, [pc, #188]	; (800ae64 <pbuf_take+0x118>)
 800ada8:	482c      	ldr	r0, [pc, #176]	; (800ae5c <pbuf_take+0x110>)
 800adaa:	f004 fb23 	bl	800f3f4 <iprintf>
 800adae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adb2:	e04a      	b.n	800ae4a <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d007      	beq.n	800adca <pbuf_take+0x7e>
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <pbuf_take+0x7e>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	891b      	ldrh	r3, [r3, #8]
 800adc4:	88fa      	ldrh	r2, [r7, #6]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d902      	bls.n	800add0 <pbuf_take+0x84>
    return ERR_ARG;
 800adca:	f06f 030f 	mvn.w	r3, #15
 800adce:	e03c      	b.n	800ae4a <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	61fb      	str	r3, [r7, #28]
 800add4:	e027      	b.n	800ae26 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d106      	bne.n	800adea <pbuf_take+0x9e>
 800addc:	4b1d      	ldr	r3, [pc, #116]	; (800ae54 <pbuf_take+0x108>)
 800adde:	f240 428e 	movw	r2, #1166	; 0x48e
 800ade2:	4921      	ldr	r1, [pc, #132]	; (800ae68 <pbuf_take+0x11c>)
 800ade4:	481d      	ldr	r0, [pc, #116]	; (800ae5c <pbuf_take+0x110>)
 800ade6:	f004 fb05 	bl	800f3f4 <iprintf>
    buf_copy_len = total_copy_len;
 800adea:	8b3b      	ldrh	r3, [r7, #24]
 800adec:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	895b      	ldrh	r3, [r3, #10]
 800adf2:	8b7a      	ldrh	r2, [r7, #26]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d902      	bls.n	800adfe <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	895b      	ldrh	r3, [r3, #10]
 800adfc:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	6858      	ldr	r0, [r3, #4]
 800ae02:	8afb      	ldrh	r3, [r7, #22]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	4413      	add	r3, r2
 800ae08:	8b7a      	ldrh	r2, [r7, #26]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	f004 fadf 	bl	800f3ce <memcpy>
    total_copy_len -= buf_copy_len;
 800ae10:	8b3a      	ldrh	r2, [r7, #24]
 800ae12:	8b7b      	ldrh	r3, [r7, #26]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800ae18:	8afa      	ldrh	r2, [r7, #22]
 800ae1a:	8b7b      	ldrh	r3, [r7, #26]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	61fb      	str	r3, [r7, #28]
 800ae26:	8b3b      	ldrh	r3, [r7, #24]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1d4      	bne.n	800add6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800ae2c:	8b3b      	ldrh	r3, [r7, #24]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <pbuf_take+0xee>
 800ae32:	8afa      	ldrh	r2, [r7, #22]
 800ae34:	88fb      	ldrh	r3, [r7, #6]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d006      	beq.n	800ae48 <pbuf_take+0xfc>
 800ae3a:	4b06      	ldr	r3, [pc, #24]	; (800ae54 <pbuf_take+0x108>)
 800ae3c:	f240 4299 	movw	r2, #1177	; 0x499
 800ae40:	490a      	ldr	r1, [pc, #40]	; (800ae6c <pbuf_take+0x120>)
 800ae42:	4806      	ldr	r0, [pc, #24]	; (800ae5c <pbuf_take+0x110>)
 800ae44:	f004 fad6 	bl	800f3f4 <iprintf>
  return ERR_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3720      	adds	r7, #32
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	08010b98 	.word	0x08010b98
 800ae58:	0801100c 	.word	0x0801100c
 800ae5c:	08010be4 	.word	0x08010be4
 800ae60:	08011024 	.word	0x08011024
 800ae64:	08011040 	.word	0x08011040
 800ae68:	08011060 	.word	0x08011060
 800ae6c:	08011078 	.word	0x08011078

0800ae70 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	4903      	ldr	r1, [pc, #12]	; (800ae98 <cyclic_timer+0x28>)
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f82e 	bl	800aeec <sys_timeout>
}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	0800ae71 	.word	0x0800ae71

0800ae9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aea2:	2300      	movs	r3, #0
 800aea4:	607b      	str	r3, [r7, #4]
 800aea6:	e00e      	b.n	800aec6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800aea8:	4a0d      	ldr	r2, [pc, #52]	; (800aee0 <sys_timeouts_init+0x44>)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	4a0a      	ldr	r2, [pc, #40]	; (800aee0 <sys_timeouts_init+0x44>)
 800aeb6:	4413      	add	r3, r2
 800aeb8:	461a      	mov	r2, r3
 800aeba:	490a      	ldr	r1, [pc, #40]	; (800aee4 <sys_timeouts_init+0x48>)
 800aebc:	f000 f816 	bl	800aeec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3301      	adds	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d9ed      	bls.n	800aea8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800aecc:	f003 fa12 	bl	800e2f4 <sys_now>
 800aed0:	4602      	mov	r2, r0
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <sys_timeouts_init+0x4c>)
 800aed4:	601a      	str	r2, [r3, #0]
}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	0801196c 	.word	0x0801196c
 800aee4:	0800ae71 	.word	0x0800ae71
 800aee8:	240000e0 	.word	0x240000e0

0800aeec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aef8:	2003      	movs	r0, #3
 800aefa:	f7fe ff69 	bl	8009dd0 <memp_malloc>
 800aefe:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10a      	bne.n	800af1c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f040 8084 	bne.w	800b016 <sys_timeout+0x12a>
 800af0e:	4b44      	ldr	r3, [pc, #272]	; (800b020 <sys_timeout+0x134>)
 800af10:	22d4      	movs	r2, #212	; 0xd4
 800af12:	4944      	ldr	r1, [pc, #272]	; (800b024 <sys_timeout+0x138>)
 800af14:	4844      	ldr	r0, [pc, #272]	; (800b028 <sys_timeout+0x13c>)
 800af16:	f004 fa6d 	bl	800f3f4 <iprintf>
    return;
 800af1a:	e07c      	b.n	800b016 <sys_timeout+0x12a>
  }

  now = sys_now();
 800af1c:	f003 f9ea 	bl	800e2f4 <sys_now>
 800af20:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800af22:	4b42      	ldr	r3, [pc, #264]	; (800b02c <sys_timeout+0x140>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <sys_timeout+0x4a>
    diff = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800af2e:	4a40      	ldr	r2, [pc, #256]	; (800b030 <sys_timeout+0x144>)
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	e004      	b.n	800af40 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800af36:	4b3e      	ldr	r3, [pc, #248]	; (800b030 <sys_timeout+0x144>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	441a      	add	r2, r3
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800af5c:	4b33      	ldr	r3, [pc, #204]	; (800b02c <sys_timeout+0x140>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <sys_timeout+0x80>
    next_timeout = timeout;
 800af64:	4a31      	ldr	r2, [pc, #196]	; (800b02c <sys_timeout+0x140>)
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	6013      	str	r3, [r2, #0]
    return;
 800af6a:	e055      	b.n	800b018 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800af6c:	4b2f      	ldr	r3, [pc, #188]	; (800b02c <sys_timeout+0x140>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	429a      	cmp	r2, r3
 800af76:	d20f      	bcs.n	800af98 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800af78:	4b2c      	ldr	r3, [pc, #176]	; (800b02c <sys_timeout+0x140>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6859      	ldr	r1, [r3, #4]
 800af7e:	4b2b      	ldr	r3, [pc, #172]	; (800b02c <sys_timeout+0x140>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	1a8a      	subs	r2, r1, r2
 800af86:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800af88:	4b28      	ldr	r3, [pc, #160]	; (800b02c <sys_timeout+0x140>)
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800af90:	4a26      	ldr	r2, [pc, #152]	; (800b02c <sys_timeout+0x140>)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	e03f      	b.n	800b018 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800af98:	4b24      	ldr	r3, [pc, #144]	; (800b02c <sys_timeout+0x140>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	e036      	b.n	800b00e <sys_timeout+0x122>
      timeout->time -= t->time;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	685a      	ldr	r2, [r3, #4]
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	1ad2      	subs	r2, r2, r3
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d006      	beq.n	800afc4 <sys_timeout+0xd8>
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d921      	bls.n	800b008 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d009      	beq.n	800afe0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6859      	ldr	r1, [r3, #4]
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	1a8a      	subs	r2, r1, r2
 800afdc:	605a      	str	r2, [r3, #4]
 800afde:	e00b      	b.n	800aff8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d206      	bcs.n	800aff8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800afea:	4b10      	ldr	r3, [pc, #64]	; (800b02c <sys_timeout+0x140>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	441a      	add	r2, r3
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	601a      	str	r2, [r3, #0]
        break;
 800b006:	e007      	b.n	800b018 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	61fb      	str	r3, [r7, #28]
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1c5      	bne.n	800afa0 <sys_timeout+0xb4>
 800b014:	e000      	b.n	800b018 <sys_timeout+0x12c>
    return;
 800b016:	bf00      	nop
      }
    }
  }
}
 800b018:	3720      	adds	r7, #32
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	080110a4 	.word	0x080110a4
 800b024:	080110d8 	.word	0x080110d8
 800b028:	08011118 	.word	0x08011118
 800b02c:	240000dc 	.word	0x240000dc
 800b030:	240000e0 	.word	0x240000e0

0800b034 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b03a:	4b21      	ldr	r3, [pc, #132]	; (800b0c0 <sys_check_timeouts+0x8c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d039      	beq.n	800b0b6 <sys_check_timeouts+0x82>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b042:	f003 f957 	bl	800e2f4 <sys_now>
 800b046:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b048:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <sys_check_timeouts+0x90>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b056:	4b1a      	ldr	r3, [pc, #104]	; (800b0c0 <sys_check_timeouts+0x8c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d026      	beq.n	800b0b0 <sys_check_timeouts+0x7c>
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d321      	bcc.n	800b0b0 <sys_check_timeouts+0x7c>
        /* timeout has expired */
        had_one = 1;
 800b06c:	2301      	movs	r3, #1
 800b06e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	4b13      	ldr	r3, [pc, #76]	; (800b0c4 <sys_check_timeouts+0x90>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4413      	add	r3, r2
 800b07a:	4a12      	ldr	r2, [pc, #72]	; (800b0c4 <sys_check_timeouts+0x90>)
 800b07c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a0c      	ldr	r2, [pc, #48]	; (800b0c0 <sys_check_timeouts+0x8c>)
 800b08e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b09c:	68b9      	ldr	r1, [r7, #8]
 800b09e:	2003      	movs	r0, #3
 800b0a0:	f7fe ff06 	bl	8009eb0 <memp_free>
        if (handler != NULL) {
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <sys_check_timeouts+0x7c>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6838      	ldr	r0, [r7, #0]
 800b0ae:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b0b0:	7cfb      	ldrb	r3, [r7, #19]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1cd      	bne.n	800b052 <sys_check_timeouts+0x1e>
  }
}
 800b0b6:	bf00      	nop
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	240000dc 	.word	0x240000dc
 800b0c4:	240000e0 	.word	0x240000e0

0800b0c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b0cc:	bf00      	nop
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b0e2:	4b17      	ldr	r3, [pc, #92]	; (800b140 <udp_new_port+0x68>)
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	1c5a      	adds	r2, r3, #1
 800b0e8:	b291      	uxth	r1, r2
 800b0ea:	4a15      	ldr	r2, [pc, #84]	; (800b140 <udp_new_port+0x68>)
 800b0ec:	8011      	strh	r1, [r2, #0]
 800b0ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d103      	bne.n	800b0fe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b0f6:	4b12      	ldr	r3, [pc, #72]	; (800b140 <udp_new_port+0x68>)
 800b0f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b0fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0fe:	4b11      	ldr	r3, [pc, #68]	; (800b144 <udp_new_port+0x6c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	e011      	b.n	800b12a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	8a5a      	ldrh	r2, [r3, #18]
 800b10a:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <udp_new_port+0x68>)
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d108      	bne.n	800b124 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b112:	88fb      	ldrh	r3, [r7, #6]
 800b114:	3301      	adds	r3, #1
 800b116:	80fb      	strh	r3, [r7, #6]
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11e:	d3e0      	bcc.n	800b0e2 <udp_new_port+0xa>
        return 0;
 800b120:	2300      	movs	r3, #0
 800b122:	e007      	b.n	800b134 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	603b      	str	r3, [r7, #0]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1ea      	bne.n	800b106 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b130:	4b03      	ldr	r3, [pc, #12]	; (800b140 <udp_new_port+0x68>)
 800b132:	881b      	ldrh	r3, [r3, #0]
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	24000006 	.word	0x24000006
 800b144:	24003678 	.word	0x24003678

0800b148 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	4613      	mov	r3, r2
 800b154:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d018      	beq.n	800b18e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d013      	beq.n	800b18a <udp_input_local_match+0x42>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00f      	beq.n	800b18a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b16a:	4b14      	ldr	r3, [pc, #80]	; (800b1bc <udp_input_local_match+0x74>)
 800b16c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b172:	d00a      	beq.n	800b18a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <udp_input_local_match+0x74>)
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	405a      	eors	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	3308      	adds	r3, #8
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b186:	2b00      	cmp	r3, #0
 800b188:	d110      	bne.n	800b1ac <udp_input_local_match+0x64>
          return 1;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e00f      	b.n	800b1ae <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d009      	beq.n	800b1a8 <udp_input_local_match+0x60>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <udp_input_local_match+0x60>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <udp_input_local_match+0x74>)
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d101      	bne.n	800b1ac <udp_input_local_match+0x64>
      return 1;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e000      	b.n	800b1ae <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	240001f8 	.word	0x240001f8

0800b1c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b1c0:	b590      	push	{r4, r7, lr}
 800b1c2:	b08d      	sub	sp, #52	; 0x34
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	895b      	ldrh	r3, [r3, #10]
 800b1d4:	2b07      	cmp	r3, #7
 800b1d6:	d803      	bhi.n	800b1e0 <udp_input+0x20>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff fbb7 	bl	800a94c <pbuf_free>
    goto end;
 800b1de:	e0c9      	b.n	800b374 <udp_input+0x1b4>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	60fb      	str	r3, [r7, #12]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b1e6:	4b65      	ldr	r3, [pc, #404]	; (800b37c <udp_input+0x1bc>)
 800b1e8:	695a      	ldr	r2, [r3, #20]
 800b1ea:	4b64      	ldr	r3, [pc, #400]	; (800b37c <udp_input+0x1bc>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	f001 fe79 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	767b      	strb	r3, [r7, #25]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	881b      	ldrh	r3, [r3, #0]
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe f97b 	bl	80094fc <lwip_htons>
 800b206:	4603      	mov	r3, r0
 800b208:	837b      	strh	r3, [r7, #26]
  dest = lwip_ntohs(udphdr->dest);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	885b      	ldrh	r3, [r3, #2]
 800b20e:	b29b      	uxth	r3, r3
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe f973 	bl	80094fc <lwip_htons>
 800b216:	4603      	mov	r3, r0
 800b218:	82fb      	strh	r3, [r7, #22]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	61fb      	str	r3, [r7, #28]
  uncon_pcb = NULL;
 800b222:	2300      	movs	r3, #0
 800b224:	613b      	str	r3, [r7, #16]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b226:	4b56      	ldr	r3, [pc, #344]	; (800b380 <udp_input+0x1c0>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24
 800b22c:	e03b      	b.n	800b2a6 <udp_input+0xe6>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	8a5b      	ldrh	r3, [r3, #18]
 800b232:	8afa      	ldrh	r2, [r7, #22]
 800b234:	429a      	cmp	r2, r3
 800b236:	d131      	bne.n	800b29c <udp_input+0xdc>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b238:	7e7b      	ldrb	r3, [r7, #25]
 800b23a:	461a      	mov	r2, r3
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b240:	f7ff ff82 	bl	800b148 <udp_input_local_match>
 800b244:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b246:	2b00      	cmp	r3, #0
 800b248:	d028      	beq.n	800b29c <udp_input+0xdc>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	7c1b      	ldrb	r3, [r3, #16]
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d104      	bne.n	800b260 <udp_input+0xa0>
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <udp_input+0xa0>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	613b      	str	r3, [r7, #16]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	8a9b      	ldrh	r3, [r3, #20]
 800b264:	8b7a      	ldrh	r2, [r7, #26]
 800b266:	429a      	cmp	r2, r3
 800b268:	d118      	bne.n	800b29c <udp_input+0xdc>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d005      	beq.n	800b27e <udp_input+0xbe>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	4b41      	ldr	r3, [pc, #260]	; (800b37c <udp_input+0x1bc>)
 800b278:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d10e      	bne.n	800b29c <udp_input+0xdc>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d014      	beq.n	800b2ae <udp_input+0xee>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	68da      	ldr	r2, [r3, #12]
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b28c:	4b3c      	ldr	r3, [pc, #240]	; (800b380 <udp_input+0x1c0>)
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b294:	4a3a      	ldr	r2, [pc, #232]	; (800b380 <udp_input+0x1c0>)
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b29a:	e008      	b.n	800b2ae <udp_input+0xee>
      }
    }

    prev = pcb;
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	61fb      	str	r3, [r7, #28]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1c0      	bne.n	800b22e <udp_input+0x6e>
 800b2ac:	e000      	b.n	800b2b0 <udp_input+0xf0>
        break;
 800b2ae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d101      	bne.n	800b2ba <udp_input+0xfa>
    pcb = uncon_pcb;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <udp_input+0x108>
    for_us = 1;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2c6:	e00b      	b.n	800b2e0 <udp_input+0x120>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	4b2b      	ldr	r3, [pc, #172]	; (800b37c <udp_input+0x1bc>)
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	bf0c      	ite	eq
 800b2d6:	2301      	moveq	r3, #1
 800b2d8:	2300      	movne	r3, #0
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b2e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d042      	beq.n	800b36e <udp_input+0x1ae>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b2e8:	f06f 0107 	mvn.w	r1, #7
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff fb09 	bl	800a904 <pbuf_header>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00a      	beq.n	800b30e <udp_input+0x14e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b2f8:	4b22      	ldr	r3, [pc, #136]	; (800b384 <udp_input+0x1c4>)
 800b2fa:	f240 1255 	movw	r2, #341	; 0x155
 800b2fe:	4922      	ldr	r1, [pc, #136]	; (800b388 <udp_input+0x1c8>)
 800b300:	4822      	ldr	r0, [pc, #136]	; (800b38c <udp_input+0x1cc>)
 800b302:	f004 f877 	bl	800f3f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7ff fb20 	bl	800a94c <pbuf_free>
      goto end;
 800b30c:	e032      	b.n	800b374 <udp_input+0x1b4>
    }

    if (pcb != NULL) {
 800b30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b310:	2b00      	cmp	r3, #0
 800b312:	d012      	beq.n	800b33a <udp_input+0x17a>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00a      	beq.n	800b332 <udp_input+0x172>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	699c      	ldr	r4, [r3, #24]
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	69d8      	ldr	r0, [r3, #28]
 800b324:	8b7b      	ldrh	r3, [r7, #26]
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	4b19      	ldr	r3, [pc, #100]	; (800b390 <udp_input+0x1d0>)
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b32e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b330:	e021      	b.n	800b376 <udp_input+0x1b6>
        pbuf_free(p);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff fb0a 	bl	800a94c <pbuf_free>
        goto end;
 800b338:	e01c      	b.n	800b374 <udp_input+0x1b4>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b33a:	7e7b      	ldrb	r3, [r7, #25]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d112      	bne.n	800b366 <udp_input+0x1a6>
 800b340:	4b0e      	ldr	r3, [pc, #56]	; (800b37c <udp_input+0x1bc>)
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b348:	2be0      	cmp	r3, #224	; 0xe0
 800b34a:	d00c      	beq.n	800b366 <udp_input+0x1a6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <udp_input+0x1bc>)
 800b34e:	899b      	ldrh	r3, [r3, #12]
 800b350:	3308      	adds	r3, #8
 800b352:	b29b      	uxth	r3, r3
 800b354:	b21b      	sxth	r3, r3
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff fae5 	bl	800a928 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b35e:	2103      	movs	r1, #3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 fabb 	bl	800c8dc <icmp_dest_unreach>
      pbuf_free(p);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff faf0 	bl	800a94c <pbuf_free>
  return;
 800b36c:	e003      	b.n	800b376 <udp_input+0x1b6>
    pbuf_free(p);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff faec 	bl	800a94c <pbuf_free>
  return;
 800b374:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b376:	372c      	adds	r7, #44	; 0x2c
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd90      	pop	{r4, r7, pc}
 800b37c:	240001f8 	.word	0x240001f8
 800b380:	24003678 	.word	0x24003678
 800b384:	08011140 	.word	0x08011140
 800b388:	08011170 	.word	0x08011170
 800b38c:	08011184 	.word	0x08011184
 800b390:	24000208 	.word	0x24000208

0800b394 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <udp_send+0x16>
    return ERR_VAL;
 800b3a4:	f06f 0305 	mvn.w	r3, #5
 800b3a8:	e008      	b.n	800b3bc <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	1d1a      	adds	r2, r3, #4
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	8a9b      	ldrh	r3, [r3, #20]
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f805 	bl	800b3c4 <udp_sendto>
 800b3ba:	4603      	mov	r3, r0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b088      	sub	sp, #32
 800b3c8:	af02      	add	r7, sp, #8
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
 800b3d0:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <udp_sendto+0x1e>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d102      	bne.n	800b3e8 <udp_sendto+0x24>
    return ERR_VAL;
 800b3e2:	f06f 0305 	mvn.w	r3, #5
 800b3e6:	e013      	b.n	800b410 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800b3e8:	6978      	ldr	r0, [r7, #20]
 800b3ea:	f001 fb09 	bl	800ca00 <ip4_route>
 800b3ee:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d102      	bne.n	800b3fc <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b3f6:	f06f 0303 	mvn.w	r3, #3
 800b3fa:	e009      	b.n	800b410 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b3fc:	887a      	ldrh	r2, [r7, #2]
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	4613      	mov	r3, r2
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	68b9      	ldr	r1, [r7, #8]
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f000 f805 	bl	800b418 <udp_sendto_if>
 800b40e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af02      	add	r7, sp, #8
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
 800b424:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <udp_sendto_if+0x1a>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d102      	bne.n	800b438 <udp_sendto_if+0x20>
    return ERR_VAL;
 800b432:	f06f 0305 	mvn.w	r3, #5
 800b436:	e028      	b.n	800b48a <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d009      	beq.n	800b452 <udp_sendto_if+0x3a>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d005      	beq.n	800b452 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b44e:	2be0      	cmp	r3, #224	; 0xe0
 800b450:	d103      	bne.n	800b45a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	3304      	adds	r3, #4
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	e00b      	b.n	800b472 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	3304      	adds	r3, #4
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	429a      	cmp	r2, r3
 800b466:	d002      	beq.n	800b46e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800b468:	f06f 0303 	mvn.w	r3, #3
 800b46c:	e00d      	b.n	800b48a <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b472:	887a      	ldrh	r2, [r7, #2]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	4613      	mov	r3, r2
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	68b9      	ldr	r1, [r7, #8]
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 f806 	bl	800b494 <udp_sendto_if_src>
 800b488:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
	...

0800b494 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b08c      	sub	sp, #48	; 0x30
 800b498:	af04      	add	r7, sp, #16
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <udp_sendto_if_src+0x1a>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800b4ae:	f06f 0305 	mvn.w	r3, #5
 800b4b2:	e07e      	b.n	800b5b2 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	8a5b      	ldrh	r3, [r3, #18]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10f      	bne.n	800b4dc <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b4bc:	68f9      	ldr	r1, [r7, #12]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8a5b      	ldrh	r3, [r3, #18]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f000 f87f 	bl	800b5c8 <udp_bind>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b4ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b4d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b4da:	e06a      	b.n	800b5b2 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800b4dc:	2108      	movs	r1, #8
 800b4de:	68b8      	ldr	r0, [r7, #8]
 800b4e0:	f7ff fa10 	bl	800a904 <pbuf_header>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d014      	beq.n	800b514 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	2108      	movs	r1, #8
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	f7fe febe 	bl	800a270 <pbuf_alloc>
 800b4f4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b4fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b500:	e057      	b.n	800b5b2 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	891b      	ldrh	r3, [r3, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	69f8      	ldr	r0, [r7, #28]
 800b50e:	f7ff fb41 	bl	800ab94 <pbuf_chain>
 800b512:	e001      	b.n	800b518 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	895b      	ldrh	r3, [r3, #10]
 800b51c:	2b07      	cmp	r3, #7
 800b51e:	d806      	bhi.n	800b52e <udp_sendto_if_src+0x9a>
 800b520:	4b26      	ldr	r3, [pc, #152]	; (800b5bc <udp_sendto_if_src+0x128>)
 800b522:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b526:	4926      	ldr	r1, [pc, #152]	; (800b5c0 <udp_sendto_if_src+0x12c>)
 800b528:	4826      	ldr	r0, [pc, #152]	; (800b5c4 <udp_sendto_if_src+0x130>)
 800b52a:	f003 ff63 	bl	800f3f4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	8a5b      	ldrh	r3, [r3, #18]
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fd ffdf 	bl	80094fc <lwip_htons>
 800b53e:	4603      	mov	r3, r0
 800b540:	461a      	mov	r2, r3
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b546:	887b      	ldrh	r3, [r7, #2]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fd ffd7 	bl	80094fc <lwip_htons>
 800b54e:	4603      	mov	r3, r0
 800b550:	461a      	mov	r2, r3
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2200      	movs	r2, #0
 800b55a:	719a      	strb	r2, [r3, #6]
 800b55c:	2200      	movs	r2, #0
 800b55e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	891b      	ldrh	r3, [r3, #8]
 800b564:	4618      	mov	r0, r3
 800b566:	f7fd ffc9 	bl	80094fc <lwip_htons>
 800b56a:	4603      	mov	r3, r0
 800b56c:	461a      	mov	r2, r3
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b572:	2311      	movs	r3, #17
 800b574:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	7a9b      	ldrb	r3, [r3, #10]
 800b57a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	7a5b      	ldrb	r3, [r3, #9]
 800b580:	7cb9      	ldrb	r1, [r7, #18]
 800b582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b584:	9202      	str	r2, [sp, #8]
 800b586:	7cfa      	ldrb	r2, [r7, #19]
 800b588:	9201      	str	r2, [sp, #4]
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	460b      	mov	r3, r1
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b592:	69f8      	ldr	r0, [r7, #28]
 800b594:	f001 fc00 	bl	800cd98 <ip4_output_if_src>
 800b598:	4603      	mov	r3, r0
 800b59a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b59c:	69fa      	ldr	r2, [r7, #28]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d004      	beq.n	800b5ae <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800b5a4:	69f8      	ldr	r0, [r7, #28]
 800b5a6:	f7ff f9d1 	bl	800a94c <pbuf_free>
    q = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b5ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3720      	adds	r7, #32
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	08011140 	.word	0x08011140
 800b5c0:	080111ac 	.word	0x080111ac
 800b5c4:	08011184 	.word	0x08011184

0800b5c8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b5dc:	4b30      	ldr	r3, [pc, #192]	; (800b6a0 <udp_bind+0xd8>)
 800b5de:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <udp_bind+0x24>
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <udp_bind+0x2a>
    return ERR_VAL;
 800b5ec:	f06f 0305 	mvn.w	r3, #5
 800b5f0:	e052      	b.n	800b698 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b5f6:	4b2b      	ldr	r3, [pc, #172]	; (800b6a4 <udp_bind+0xdc>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	e009      	b.n	800b612 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	429a      	cmp	r2, r3
 800b604:	d102      	bne.n	800b60c <udp_bind+0x44>
      rebind = 1;
 800b606:	2301      	movs	r3, #1
 800b608:	74fb      	strb	r3, [r7, #19]
      break;
 800b60a:	e005      	b.n	800b618 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1f2      	bne.n	800b5fe <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800b618:	88fb      	ldrh	r3, [r7, #6]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d109      	bne.n	800b632 <udp_bind+0x6a>
    port = udp_new_port();
 800b61e:	f7ff fd5b 	bl	800b0d8 <udp_new_port>
 800b622:	4603      	mov	r3, r0
 800b624:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b626:	88fb      	ldrh	r3, [r7, #6]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d11e      	bne.n	800b66a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b62c:	f06f 0307 	mvn.w	r3, #7
 800b630:	e032      	b.n	800b698 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b632:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <udp_bind+0xdc>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e014      	b.n	800b664 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d00d      	beq.n	800b65e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	8a5b      	ldrh	r3, [r3, #18]
 800b646:	88fa      	ldrh	r2, [r7, #6]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d108      	bne.n	800b65e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b654:	429a      	cmp	r2, r3
 800b656:	d102      	bne.n	800b65e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b658:	f06f 0307 	mvn.w	r3, #7
 800b65c:	e01c      	b.n	800b698 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1e7      	bne.n	800b63a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <udp_bind+0xae>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	e000      	b.n	800b678 <udp_bind+0xb0>
 800b676:	2300      	movs	r3, #0
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	88fa      	ldrh	r2, [r7, #6]
 800b680:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b682:	7cfb      	ldrb	r3, [r7, #19]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b688:	4b06      	ldr	r3, [pc, #24]	; (800b6a4 <udp_bind+0xdc>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b690:	4a04      	ldr	r2, [pc, #16]	; (800b6a4 <udp_bind+0xdc>)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3718      	adds	r7, #24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	0801197c 	.word	0x0801197c
 800b6a4:	24003678 	.word	0x24003678

0800b6a8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <udp_connect+0x1a>
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <udp_connect+0x20>
    return ERR_VAL;
 800b6c2:	f06f 0305 	mvn.w	r3, #5
 800b6c6:	e03e      	b.n	800b746 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8a5b      	ldrh	r3, [r3, #18]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10f      	bne.n	800b6f0 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b6d0:	68f9      	ldr	r1, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8a5b      	ldrh	r3, [r3, #18]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7ff ff75 	bl	800b5c8 <udp_bind>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 800b6e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <udp_connect+0x48>
      return err;
 800b6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6ee:	e02a      	b.n	800b746 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <udp_connect+0x54>
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	e000      	b.n	800b6fe <udp_connect+0x56>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	88fa      	ldrh	r2, [r7, #6]
 800b706:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	7c1b      	ldrb	r3, [r3, #16]
 800b70c:	f043 0304 	orr.w	r3, r3, #4
 800b710:	b2da      	uxtb	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b716:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <udp_connect+0xa8>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	613b      	str	r3, [r7, #16]
 800b71c:	e008      	b.n	800b730 <udp_connect+0x88>
    if (pcb == ipcb) {
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	429a      	cmp	r2, r3
 800b724:	d101      	bne.n	800b72a <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	e00d      	b.n	800b746 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	613b      	str	r3, [r7, #16]
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1f3      	bne.n	800b71e <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <udp_connect+0xa8>)
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b73e:	4a04      	ldr	r2, [pc, #16]	; (800b750 <udp_connect+0xa8>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	24003678 	.word	0x24003678

0800b754 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	61da      	str	r2, [r3, #28]
}
 800b76c:	bf00      	nop
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b77e:	2000      	movs	r0, #0
 800b780:	f7fe fb26 	bl	8009dd0 <memp_malloc>
 800b784:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d007      	beq.n	800b79c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b78c:	2220      	movs	r2, #32
 800b78e:	2100      	movs	r1, #0
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f003 fe27 	bl	800f3e4 <memset>
    pcb->ttl = UDP_TTL;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	22ff      	movs	r2, #255	; 0xff
 800b79a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b79c:	687b      	ldr	r3, [r7, #4]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d01e      	beq.n	800b7f6 <udp_netif_ip_addr_changed+0x4e>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d01a      	beq.n	800b7f6 <udp_netif_ip_addr_changed+0x4e>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d017      	beq.n	800b7f6 <udp_netif_ip_addr_changed+0x4e>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d013      	beq.n	800b7f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b7ce:	4b0d      	ldr	r3, [pc, #52]	; (800b804 <udp_netif_ip_addr_changed+0x5c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e00c      	b.n	800b7f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d103      	bne.n	800b7ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1ef      	bne.n	800b7d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b7f6:	bf00      	nop
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	24003678 	.word	0x24003678

0800b808 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b810:	492b      	ldr	r1, [pc, #172]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	4613      	mov	r3, r2
 800b816:	005b      	lsls	r3, r3, #1
 800b818:	4413      	add	r3, r2
 800b81a:	00db      	lsls	r3, r3, #3
 800b81c:	440b      	add	r3, r1
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d013      	beq.n	800b84c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b824:	4926      	ldr	r1, [pc, #152]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	4613      	mov	r3, r2
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	4413      	add	r3, r2
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	440b      	add	r3, r1
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff f889 	bl	800a94c <pbuf_free>
    arp_table[i].q = NULL;
 800b83a:	4921      	ldr	r1, [pc, #132]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	4613      	mov	r3, r2
 800b840:	005b      	lsls	r3, r3, #1
 800b842:	4413      	add	r3, r2
 800b844:	00db      	lsls	r3, r3, #3
 800b846:	440b      	add	r3, r1
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b84c:	491c      	ldr	r1, [pc, #112]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	4613      	mov	r3, r2
 800b852:	005b      	lsls	r3, r3, #1
 800b854:	4413      	add	r3, r2
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	440b      	add	r3, r1
 800b85a:	3314      	adds	r3, #20
 800b85c:	2200      	movs	r2, #0
 800b85e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800b860:	4917      	ldr	r1, [pc, #92]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	4613      	mov	r3, r2
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	4413      	add	r3, r2
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	440b      	add	r3, r1
 800b86e:	3312      	adds	r3, #18
 800b870:	2200      	movs	r2, #0
 800b872:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 800b874:	4912      	ldr	r1, [pc, #72]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	4613      	mov	r3, r2
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	4413      	add	r3, r2
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	440b      	add	r3, r1
 800b882:	3308      	adds	r3, #8
 800b884:	2200      	movs	r2, #0
 800b886:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800b888:	490d      	ldr	r1, [pc, #52]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	4613      	mov	r3, r2
 800b88e:	005b      	lsls	r3, r3, #1
 800b890:	4413      	add	r3, r2
 800b892:	00db      	lsls	r3, r3, #3
 800b894:	440b      	add	r3, r1
 800b896:	3304      	adds	r3, #4
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 800b89c:	4908      	ldr	r1, [pc, #32]	; (800b8c0 <etharp_free_entry+0xb8>)
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	4413      	add	r3, r2
 800b8a6:	00db      	lsls	r3, r3, #3
 800b8a8:	440b      	add	r3, r1
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	4a05      	ldr	r2, [pc, #20]	; (800b8c4 <etharp_free_entry+0xbc>)
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	6810      	ldr	r0, [r2, #0]
 800b8b2:	6018      	str	r0, [r3, #0]
 800b8b4:	8892      	ldrh	r2, [r2, #4]
 800b8b6:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	240000e4 	.word	0x240000e4
 800b8c4:	08011988 	.word	0x08011988

0800b8c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	71fb      	strb	r3, [r7, #7]
 800b8d2:	e096      	b.n	800ba02 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b8d4:	79fa      	ldrb	r2, [r7, #7]
 800b8d6:	494f      	ldr	r1, [pc, #316]	; (800ba14 <etharp_tmr+0x14c>)
 800b8d8:	4613      	mov	r3, r2
 800b8da:	005b      	lsls	r3, r3, #1
 800b8dc:	4413      	add	r3, r2
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	440b      	add	r3, r1
 800b8e2:	3314      	adds	r3, #20
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b8e8:	79bb      	ldrb	r3, [r7, #6]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 8086 	beq.w	800b9fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b8f0:	79fa      	ldrb	r2, [r7, #7]
 800b8f2:	4948      	ldr	r1, [pc, #288]	; (800ba14 <etharp_tmr+0x14c>)
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	4413      	add	r3, r2
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	440b      	add	r3, r1
 800b8fe:	3312      	adds	r3, #18
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	3301      	adds	r3, #1
 800b904:	b298      	uxth	r0, r3
 800b906:	4943      	ldr	r1, [pc, #268]	; (800ba14 <etharp_tmr+0x14c>)
 800b908:	4613      	mov	r3, r2
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	4413      	add	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	440b      	add	r3, r1
 800b912:	3312      	adds	r3, #18
 800b914:	4602      	mov	r2, r0
 800b916:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b918:	79fa      	ldrb	r2, [r7, #7]
 800b91a:	493e      	ldr	r1, [pc, #248]	; (800ba14 <etharp_tmr+0x14c>)
 800b91c:	4613      	mov	r3, r2
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	4413      	add	r3, r2
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	440b      	add	r3, r1
 800b926:	3312      	adds	r3, #18
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b92e:	d215      	bcs.n	800b95c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b930:	79fa      	ldrb	r2, [r7, #7]
 800b932:	4938      	ldr	r1, [pc, #224]	; (800ba14 <etharp_tmr+0x14c>)
 800b934:	4613      	mov	r3, r2
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	4413      	add	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	440b      	add	r3, r1
 800b93e:	3314      	adds	r3, #20
 800b940:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b942:	2b01      	cmp	r3, #1
 800b944:	d10f      	bne.n	800b966 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b946:	79fa      	ldrb	r2, [r7, #7]
 800b948:	4932      	ldr	r1, [pc, #200]	; (800ba14 <etharp_tmr+0x14c>)
 800b94a:	4613      	mov	r3, r2
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	4413      	add	r3, r2
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	440b      	add	r3, r1
 800b954:	3312      	adds	r3, #18
 800b956:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b958:	2b04      	cmp	r3, #4
 800b95a:	d904      	bls.n	800b966 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff ff52 	bl	800b808 <etharp_free_entry>
 800b964:	e04a      	b.n	800b9fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b966:	79fa      	ldrb	r2, [r7, #7]
 800b968:	492a      	ldr	r1, [pc, #168]	; (800ba14 <etharp_tmr+0x14c>)
 800b96a:	4613      	mov	r3, r2
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	4413      	add	r3, r2
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	440b      	add	r3, r1
 800b974:	3314      	adds	r3, #20
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	2b03      	cmp	r3, #3
 800b97a:	d10a      	bne.n	800b992 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b97c:	79fa      	ldrb	r2, [r7, #7]
 800b97e:	4925      	ldr	r1, [pc, #148]	; (800ba14 <etharp_tmr+0x14c>)
 800b980:	4613      	mov	r3, r2
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	4413      	add	r3, r2
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	440b      	add	r3, r1
 800b98a:	3314      	adds	r3, #20
 800b98c:	2204      	movs	r2, #4
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	e034      	b.n	800b9fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b992:	79fa      	ldrb	r2, [r7, #7]
 800b994:	491f      	ldr	r1, [pc, #124]	; (800ba14 <etharp_tmr+0x14c>)
 800b996:	4613      	mov	r3, r2
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	4413      	add	r3, r2
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	440b      	add	r3, r1
 800b9a0:	3314      	adds	r3, #20
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b04      	cmp	r3, #4
 800b9a6:	d10a      	bne.n	800b9be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b9a8:	79fa      	ldrb	r2, [r7, #7]
 800b9aa:	491a      	ldr	r1, [pc, #104]	; (800ba14 <etharp_tmr+0x14c>)
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	005b      	lsls	r3, r3, #1
 800b9b0:	4413      	add	r3, r2
 800b9b2:	00db      	lsls	r3, r3, #3
 800b9b4:	440b      	add	r3, r1
 800b9b6:	3314      	adds	r3, #20
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	701a      	strb	r2, [r3, #0]
 800b9bc:	e01e      	b.n	800b9fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b9be:	79fa      	ldrb	r2, [r7, #7]
 800b9c0:	4914      	ldr	r1, [pc, #80]	; (800ba14 <etharp_tmr+0x14c>)
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	4413      	add	r3, r2
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	440b      	add	r3, r1
 800b9cc:	3314      	adds	r3, #20
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d113      	bne.n	800b9fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b9d4:	79fa      	ldrb	r2, [r7, #7]
 800b9d6:	490f      	ldr	r1, [pc, #60]	; (800ba14 <etharp_tmr+0x14c>)
 800b9d8:	4613      	mov	r3, r2
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	4413      	add	r3, r2
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	440b      	add	r3, r1
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	79fa      	ldrb	r2, [r7, #7]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	4a08      	ldr	r2, [pc, #32]	; (800ba14 <etharp_tmr+0x14c>)
 800b9f2:	4413      	add	r3, r2
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f000 fe38 	bl	800c66c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b9fc:	79fb      	ldrb	r3, [r7, #7]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	71fb      	strb	r3, [r7, #7]
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	f67f af65 	bls.w	800b8d4 <etharp_tmr+0xc>
      }
    }
  }
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	240000e4 	.word	0x240000e4

0800ba18 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	460b      	mov	r3, r1
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ba26:	230a      	movs	r3, #10
 800ba28:	773b      	strb	r3, [r7, #28]
 800ba2a:	230a      	movs	r3, #10
 800ba2c:	777b      	strb	r3, [r7, #29]
  s8_t empty = ARP_TABLE_SIZE;
 800ba2e:	230a      	movs	r3, #10
 800ba30:	77bb      	strb	r3, [r7, #30]
  u8_t i = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	77fb      	strb	r3, [r7, #31]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ba36:	230a      	movs	r3, #10
 800ba38:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	833b      	strh	r3, [r7, #24]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	82fb      	strh	r3, [r7, #22]
 800ba42:	2300      	movs	r3, #0
 800ba44:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba46:	2300      	movs	r3, #0
 800ba48:	77fb      	strb	r3, [r7, #31]
 800ba4a:	e093      	b.n	800bb74 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800ba4c:	7ffa      	ldrb	r2, [r7, #31]
 800ba4e:	4990      	ldr	r1, [pc, #576]	; (800bc90 <etharp_find_entry+0x278>)
 800ba50:	4613      	mov	r3, r2
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	4413      	add	r3, r2
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	440b      	add	r3, r1
 800ba5a:	3314      	adds	r3, #20
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ba60:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ba64:	2b0a      	cmp	r3, #10
 800ba66:	d105      	bne.n	800ba74 <etharp_find_entry+0x5c>
 800ba68:	7cfb      	ldrb	r3, [r7, #19]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d102      	bne.n	800ba74 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800ba6e:	7ffb      	ldrb	r3, [r7, #31]
 800ba70:	77bb      	strb	r3, [r7, #30]
 800ba72:	e07c      	b.n	800bb6e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ba74:	7cfb      	ldrb	r3, [r7, #19]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d079      	beq.n	800bb6e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ba7a:	7cfb      	ldrb	r3, [r7, #19]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d009      	beq.n	800ba94 <etharp_find_entry+0x7c>
 800ba80:	7cfb      	ldrb	r3, [r7, #19]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d806      	bhi.n	800ba94 <etharp_find_entry+0x7c>
 800ba86:	4b83      	ldr	r3, [pc, #524]	; (800bc94 <etharp_find_entry+0x27c>)
 800ba88:	f44f 7293 	mov.w	r2, #294	; 0x126
 800ba8c:	4982      	ldr	r1, [pc, #520]	; (800bc98 <etharp_find_entry+0x280>)
 800ba8e:	4883      	ldr	r0, [pc, #524]	; (800bc9c <etharp_find_entry+0x284>)
 800ba90:	f003 fcb0 	bl	800f3f4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00f      	beq.n	800baba <etharp_find_entry+0xa2>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6819      	ldr	r1, [r3, #0]
 800ba9e:	7ffa      	ldrb	r2, [r7, #31]
 800baa0:	487b      	ldr	r0, [pc, #492]	; (800bc90 <etharp_find_entry+0x278>)
 800baa2:	4613      	mov	r3, r2
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	4413      	add	r3, r2
 800baa8:	00db      	lsls	r3, r3, #3
 800baaa:	4403      	add	r3, r0
 800baac:	3304      	adds	r3, #4
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4299      	cmp	r1, r3
 800bab2:	d102      	bne.n	800baba <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bab8:	e0e5      	b.n	800bc86 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800baba:	7cfb      	ldrb	r3, [r7, #19]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d13b      	bne.n	800bb38 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bac0:	7ffa      	ldrb	r2, [r7, #31]
 800bac2:	4973      	ldr	r1, [pc, #460]	; (800bc90 <etharp_find_entry+0x278>)
 800bac4:	4613      	mov	r3, r2
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	4413      	add	r3, r2
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	440b      	add	r3, r1
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d018      	beq.n	800bb06 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800bad4:	7ffa      	ldrb	r2, [r7, #31]
 800bad6:	496e      	ldr	r1, [pc, #440]	; (800bc90 <etharp_find_entry+0x278>)
 800bad8:	4613      	mov	r3, r2
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	4413      	add	r3, r2
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	440b      	add	r3, r1
 800bae2:	3312      	adds	r3, #18
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	8b3a      	ldrh	r2, [r7, #24]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d840      	bhi.n	800bb6e <etharp_find_entry+0x156>
            old_queue = i;
 800baec:	7ffb      	ldrb	r3, [r7, #31]
 800baee:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800baf0:	7ffa      	ldrb	r2, [r7, #31]
 800baf2:	4967      	ldr	r1, [pc, #412]	; (800bc90 <etharp_find_entry+0x278>)
 800baf4:	4613      	mov	r3, r2
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	4413      	add	r3, r2
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	440b      	add	r3, r1
 800bafe:	3312      	adds	r3, #18
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	833b      	strh	r3, [r7, #24]
 800bb04:	e033      	b.n	800bb6e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bb06:	7ffa      	ldrb	r2, [r7, #31]
 800bb08:	4961      	ldr	r1, [pc, #388]	; (800bc90 <etharp_find_entry+0x278>)
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	4413      	add	r3, r2
 800bb10:	00db      	lsls	r3, r3, #3
 800bb12:	440b      	add	r3, r1
 800bb14:	3312      	adds	r3, #18
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	8afa      	ldrh	r2, [r7, #22]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d827      	bhi.n	800bb6e <etharp_find_entry+0x156>
            old_pending = i;
 800bb1e:	7ffb      	ldrb	r3, [r7, #31]
 800bb20:	773b      	strb	r3, [r7, #28]
            age_pending = arp_table[i].ctime;
 800bb22:	7ffa      	ldrb	r2, [r7, #31]
 800bb24:	495a      	ldr	r1, [pc, #360]	; (800bc90 <etharp_find_entry+0x278>)
 800bb26:	4613      	mov	r3, r2
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	4413      	add	r3, r2
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	440b      	add	r3, r1
 800bb30:	3312      	adds	r3, #18
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	82fb      	strh	r3, [r7, #22]
 800bb36:	e01a      	b.n	800bb6e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bb38:	7cfb      	ldrb	r3, [r7, #19]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d917      	bls.n	800bb6e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bb3e:	7ffa      	ldrb	r2, [r7, #31]
 800bb40:	4953      	ldr	r1, [pc, #332]	; (800bc90 <etharp_find_entry+0x278>)
 800bb42:	4613      	mov	r3, r2
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	4413      	add	r3, r2
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	440b      	add	r3, r1
 800bb4c:	3312      	adds	r3, #18
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	8aba      	ldrh	r2, [r7, #20]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d80b      	bhi.n	800bb6e <etharp_find_entry+0x156>
            old_stable = i;
 800bb56:	7ffb      	ldrb	r3, [r7, #31]
 800bb58:	777b      	strb	r3, [r7, #29]
            age_stable = arp_table[i].ctime;
 800bb5a:	7ffa      	ldrb	r2, [r7, #31]
 800bb5c:	494c      	ldr	r1, [pc, #304]	; (800bc90 <etharp_find_entry+0x278>)
 800bb5e:	4613      	mov	r3, r2
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	4413      	add	r3, r2
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	440b      	add	r3, r1
 800bb68:	3312      	adds	r3, #18
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb6e:	7ffb      	ldrb	r3, [r7, #31]
 800bb70:	3301      	adds	r3, #1
 800bb72:	77fb      	strb	r3, [r7, #31]
 800bb74:	7ffb      	ldrb	r3, [r7, #31]
 800bb76:	2b09      	cmp	r3, #9
 800bb78:	f67f af68 	bls.w	800ba4c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bb7c:	7afb      	ldrb	r3, [r7, #11]
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d108      	bne.n	800bb98 <etharp_find_entry+0x180>
 800bb86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bb8a:	2b0a      	cmp	r3, #10
 800bb8c:	d107      	bne.n	800bb9e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bb8e:	7afb      	ldrb	r3, [r7, #11]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d102      	bne.n	800bb9e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800bb98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb9c:	e073      	b.n	800bc86 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bb9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bba2:	2b09      	cmp	r3, #9
 800bba4:	dc02      	bgt.n	800bbac <etharp_find_entry+0x194>
    i = empty;
 800bba6:	7fbb      	ldrb	r3, [r7, #30]
 800bba8:	77fb      	strb	r3, [r7, #31]
 800bbaa:	e036      	b.n	800bc1a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bbac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbb0:	2b09      	cmp	r3, #9
 800bbb2:	dc13      	bgt.n	800bbdc <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800bbb4:	7f7b      	ldrb	r3, [r7, #29]
 800bbb6:	77fb      	strb	r3, [r7, #31]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bbb8:	7ffa      	ldrb	r2, [r7, #31]
 800bbba:	4935      	ldr	r1, [pc, #212]	; (800bc90 <etharp_find_entry+0x278>)
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	440b      	add	r3, r1
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d018      	beq.n	800bbfe <etharp_find_entry+0x1e6>
 800bbcc:	4b31      	ldr	r3, [pc, #196]	; (800bc94 <etharp_find_entry+0x27c>)
 800bbce:	f240 126f 	movw	r2, #367	; 0x16f
 800bbd2:	4933      	ldr	r1, [pc, #204]	; (800bca0 <etharp_find_entry+0x288>)
 800bbd4:	4831      	ldr	r0, [pc, #196]	; (800bc9c <etharp_find_entry+0x284>)
 800bbd6:	f003 fc0d 	bl	800f3f4 <iprintf>
 800bbda:	e010      	b.n	800bbfe <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bbdc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bbe0:	2b09      	cmp	r3, #9
 800bbe2:	dc02      	bgt.n	800bbea <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800bbe4:	7f3b      	ldrb	r3, [r7, #28]
 800bbe6:	77fb      	strb	r3, [r7, #31]
 800bbe8:	e009      	b.n	800bbfe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bbea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbee:	2b09      	cmp	r3, #9
 800bbf0:	dc02      	bgt.n	800bbf8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bbf2:	7efb      	ldrb	r3, [r7, #27]
 800bbf4:	77fb      	strb	r3, [r7, #31]
 800bbf6:	e002      	b.n	800bbfe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800bbf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbfc:	e043      	b.n	800bc86 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bbfe:	7ffb      	ldrb	r3, [r7, #31]
 800bc00:	2b09      	cmp	r3, #9
 800bc02:	d906      	bls.n	800bc12 <etharp_find_entry+0x1fa>
 800bc04:	4b23      	ldr	r3, [pc, #140]	; (800bc94 <etharp_find_entry+0x27c>)
 800bc06:	f240 1281 	movw	r2, #385	; 0x181
 800bc0a:	4926      	ldr	r1, [pc, #152]	; (800bca4 <etharp_find_entry+0x28c>)
 800bc0c:	4823      	ldr	r0, [pc, #140]	; (800bc9c <etharp_find_entry+0x284>)
 800bc0e:	f003 fbf1 	bl	800f3f4 <iprintf>
    etharp_free_entry(i);
 800bc12:	7ffb      	ldrb	r3, [r7, #31]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff fdf7 	bl	800b808 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bc1a:	7ffb      	ldrb	r3, [r7, #31]
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d906      	bls.n	800bc2e <etharp_find_entry+0x216>
 800bc20:	4b1c      	ldr	r3, [pc, #112]	; (800bc94 <etharp_find_entry+0x27c>)
 800bc22:	f240 1285 	movw	r2, #389	; 0x185
 800bc26:	491f      	ldr	r1, [pc, #124]	; (800bca4 <etharp_find_entry+0x28c>)
 800bc28:	481c      	ldr	r0, [pc, #112]	; (800bc9c <etharp_find_entry+0x284>)
 800bc2a:	f003 fbe3 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bc2e:	7ffa      	ldrb	r2, [r7, #31]
 800bc30:	4917      	ldr	r1, [pc, #92]	; (800bc90 <etharp_find_entry+0x278>)
 800bc32:	4613      	mov	r3, r2
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	4413      	add	r3, r2
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3314      	adds	r3, #20
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d006      	beq.n	800bc52 <etharp_find_entry+0x23a>
 800bc44:	4b13      	ldr	r3, [pc, #76]	; (800bc94 <etharp_find_entry+0x27c>)
 800bc46:	f240 1287 	movw	r2, #391	; 0x187
 800bc4a:	4917      	ldr	r1, [pc, #92]	; (800bca8 <etharp_find_entry+0x290>)
 800bc4c:	4813      	ldr	r0, [pc, #76]	; (800bc9c <etharp_find_entry+0x284>)
 800bc4e:	f003 fbd1 	bl	800f3f4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00a      	beq.n	800bc6e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bc58:	7ffa      	ldrb	r2, [r7, #31]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6819      	ldr	r1, [r3, #0]
 800bc5e:	480c      	ldr	r0, [pc, #48]	; (800bc90 <etharp_find_entry+0x278>)
 800bc60:	4613      	mov	r3, r2
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	4413      	add	r3, r2
 800bc66:	00db      	lsls	r3, r3, #3
 800bc68:	4403      	add	r3, r0
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bc6e:	7ffa      	ldrb	r2, [r7, #31]
 800bc70:	4907      	ldr	r1, [pc, #28]	; (800bc90 <etharp_find_entry+0x278>)
 800bc72:	4613      	mov	r3, r2
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	4413      	add	r3, r2
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	440b      	add	r3, r1
 800bc7c:	3312      	adds	r3, #18
 800bc7e:	2200      	movs	r2, #0
 800bc80:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800bc82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3720      	adds	r7, #32
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	240000e4 	.word	0x240000e4
 800bc94:	080111dc 	.word	0x080111dc
 800bc98:	08011214 	.word	0x08011214
 800bc9c:	08011254 	.word	0x08011254
 800bca0:	0801127c 	.word	0x0801127c
 800bca4:	08011294 	.word	0x08011294
 800bca8:	080112a8 	.word	0x080112a8

0800bcac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af02      	add	r7, sp, #8
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc0:	2b06      	cmp	r3, #6
 800bcc2:	d006      	beq.n	800bcd2 <etharp_update_arp_entry+0x26>
 800bcc4:	4b48      	ldr	r3, [pc, #288]	; (800bde8 <etharp_update_arp_entry+0x13c>)
 800bcc6:	f240 12ab 	movw	r2, #427	; 0x1ab
 800bcca:	4948      	ldr	r1, [pc, #288]	; (800bdec <etharp_update_arp_entry+0x140>)
 800bccc:	4848      	ldr	r0, [pc, #288]	; (800bdf0 <etharp_update_arp_entry+0x144>)
 800bcce:	f003 fb91 	bl	800f3f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d012      	beq.n	800bcfe <etharp_update_arp_entry+0x52>
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00e      	beq.n	800bcfe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68f9      	ldr	r1, [r7, #12]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f001 f8fe 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800bcec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d105      	bne.n	800bcfe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bcfa:	2be0      	cmp	r3, #224	; 0xe0
 800bcfc:	d102      	bne.n	800bd04 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bcfe:	f06f 030f 	mvn.w	r3, #15
 800bd02:	e06c      	b.n	800bdde <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bd04:	78fb      	ldrb	r3, [r7, #3]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	68b8      	ldr	r0, [r7, #8]
 800bd0c:	f7ff fe84 	bl	800ba18 <etharp_find_entry>
 800bd10:	4603      	mov	r3, r0
 800bd12:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bd14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	da02      	bge.n	800bd22 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bd1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd20:	e05d      	b.n	800bdde <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bd22:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd26:	4933      	ldr	r1, [pc, #204]	; (800bdf4 <etharp_update_arp_entry+0x148>)
 800bd28:	4613      	mov	r3, r2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	4413      	add	r3, r2
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	440b      	add	r3, r1
 800bd32:	3314      	adds	r3, #20
 800bd34:	2202      	movs	r2, #2
 800bd36:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bd38:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd3c:	492d      	ldr	r1, [pc, #180]	; (800bdf4 <etharp_update_arp_entry+0x148>)
 800bd3e:	4613      	mov	r3, r2
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	4413      	add	r3, r2
 800bd44:	00db      	lsls	r3, r3, #3
 800bd46:	440b      	add	r3, r1
 800bd48:	3308      	adds	r3, #8
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800bd4e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd52:	4613      	mov	r3, r2
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	4413      	add	r3, r2
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	4a25      	ldr	r2, [pc, #148]	; (800bdf4 <etharp_update_arp_entry+0x148>)
 800bd5e:	4413      	add	r3, r2
 800bd60:	3304      	adds	r3, #4
 800bd62:	2206      	movs	r2, #6
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f003 fb31 	bl	800f3ce <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bd6c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd70:	4920      	ldr	r1, [pc, #128]	; (800bdf4 <etharp_update_arp_entry+0x148>)
 800bd72:	4613      	mov	r3, r2
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	4413      	add	r3, r2
 800bd78:	00db      	lsls	r3, r3, #3
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3312      	adds	r3, #18
 800bd7e:	2200      	movs	r2, #0
 800bd80:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bd82:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd86:	491b      	ldr	r1, [pc, #108]	; (800bdf4 <etharp_update_arp_entry+0x148>)
 800bd88:	4613      	mov	r3, r2
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	4413      	add	r3, r2
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	440b      	add	r3, r1
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d021      	beq.n	800bddc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bd98:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bd9c:	4915      	ldr	r1, [pc, #84]	; (800bdf4 <etharp_update_arp_entry+0x148>)
 800bd9e:	4613      	mov	r3, r2
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	4413      	add	r3, r2
 800bda4:	00db      	lsls	r3, r3, #3
 800bda6:	440b      	add	r3, r1
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bdac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bdb0:	4910      	ldr	r1, [pc, #64]	; (800bdf4 <etharp_update_arp_entry+0x148>)
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	440b      	add	r3, r1
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800bdc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6939      	ldr	r1, [r7, #16]
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f001 ff2f 	bl	800dc34 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bdd6:	6938      	ldr	r0, [r7, #16]
 800bdd8:	f7fe fdb8 	bl	800a94c <pbuf_free>
  }
  return ERR_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3718      	adds	r7, #24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	080111dc 	.word	0x080111dc
 800bdec:	080112d4 	.word	0x080112d4
 800bdf0:	08011254 	.word	0x08011254
 800bdf4:	240000e4 	.word	0x240000e4

0800bdf8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be00:	2300      	movs	r3, #0
 800be02:	73fb      	strb	r3, [r7, #15]
 800be04:	e01f      	b.n	800be46 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800be06:	7bfa      	ldrb	r2, [r7, #15]
 800be08:	4912      	ldr	r1, [pc, #72]	; (800be54 <etharp_cleanup_netif+0x5c>)
 800be0a:	4613      	mov	r3, r2
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	4413      	add	r3, r2
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	440b      	add	r3, r1
 800be14:	3314      	adds	r3, #20
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00f      	beq.n	800be40 <etharp_cleanup_netif+0x48>
 800be20:	7bfa      	ldrb	r2, [r7, #15]
 800be22:	490c      	ldr	r1, [pc, #48]	; (800be54 <etharp_cleanup_netif+0x5c>)
 800be24:	4613      	mov	r3, r2
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	00db      	lsls	r3, r3, #3
 800be2c:	440b      	add	r3, r1
 800be2e:	3308      	adds	r3, #8
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	429a      	cmp	r2, r3
 800be36:	d103      	bne.n	800be40 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff fce4 	bl	800b808 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be40:	7bfb      	ldrb	r3, [r7, #15]
 800be42:	3301      	adds	r3, #1
 800be44:	73fb      	strb	r3, [r7, #15]
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	2b09      	cmp	r3, #9
 800be4a:	d9dc      	bls.n	800be06 <etharp_cleanup_netif+0xe>
    }
  }
}
 800be4c:	bf00      	nop
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	240000e4 	.word	0x240000e4

0800be58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800be58:	b5b0      	push	{r4, r5, r7, lr}
 800be5a:	b08a      	sub	sp, #40	; 0x28
 800be5c:	af04      	add	r7, sp, #16
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d107      	bne.n	800be78 <etharp_input+0x20>
 800be68:	4b3d      	ldr	r3, [pc, #244]	; (800bf60 <etharp_input+0x108>)
 800be6a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800be6e:	493d      	ldr	r1, [pc, #244]	; (800bf64 <etharp_input+0x10c>)
 800be70:	483d      	ldr	r0, [pc, #244]	; (800bf68 <etharp_input+0x110>)
 800be72:	f003 fabf 	bl	800f3f4 <iprintf>
 800be76:	e06f      	b.n	800bf58 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	b29b      	uxth	r3, r3
 800be84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be88:	d10c      	bne.n	800bea4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800be8e:	2b06      	cmp	r3, #6
 800be90:	d108      	bne.n	800bea4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800be96:	2b04      	cmp	r3, #4
 800be98:	d104      	bne.n	800bea4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	885b      	ldrh	r3, [r3, #2]
 800be9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d003      	beq.n	800beac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7fe fd51 	bl	800a94c <pbuf_free>
    return;
 800beaa:	e055      	b.n	800bf58 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	330e      	adds	r3, #14
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	3318      	adds	r3, #24
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	3304      	adds	r3, #4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <etharp_input+0x74>
    for_us = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	74fb      	strb	r3, [r7, #19]
 800beca:	e009      	b.n	800bee0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	3304      	adds	r3, #4
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	bf0c      	ite	eq
 800bed8:	2301      	moveq	r3, #1
 800beda:	2300      	movne	r3, #0
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f103 0208 	add.w	r2, r3, #8
 800bee6:	7cfb      	ldrb	r3, [r7, #19]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <etharp_input+0x98>
 800beec:	2301      	movs	r3, #1
 800beee:	e000      	b.n	800bef2 <etharp_input+0x9a>
 800bef0:	2302      	movs	r3, #2
 800bef2:	f107 010c 	add.w	r1, r7, #12
 800bef6:	6838      	ldr	r0, [r7, #0]
 800bef8:	f7ff fed8 	bl	800bcac <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	88db      	ldrh	r3, [r3, #6]
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf06:	d003      	beq.n	800bf10 <etharp_input+0xb8>
 800bf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf0c:	d01e      	beq.n	800bf4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800bf0e:	e020      	b.n	800bf52 <etharp_input+0xfa>
    if (for_us) {
 800bf10:	7cfb      	ldrb	r3, [r7, #19]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d01c      	beq.n	800bf50 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800bf30:	2102      	movs	r1, #2
 800bf32:	9103      	str	r1, [sp, #12]
 800bf34:	f107 010c 	add.w	r1, r7, #12
 800bf38:	9102      	str	r1, [sp, #8]
 800bf3a:	9201      	str	r2, [sp, #4]
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	462b      	mov	r3, r5
 800bf40:	4622      	mov	r2, r4
 800bf42:	4601      	mov	r1, r0
 800bf44:	6838      	ldr	r0, [r7, #0]
 800bf46:	f000 fae3 	bl	800c510 <etharp_raw>
    break;
 800bf4a:	e001      	b.n	800bf50 <etharp_input+0xf8>
    break;
 800bf4c:	bf00      	nop
 800bf4e:	e000      	b.n	800bf52 <etharp_input+0xfa>
    break;
 800bf50:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7fe fcfa 	bl	800a94c <pbuf_free>
}
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	080111dc 	.word	0x080111dc
 800bf64:	0801132c 	.word	0x0801132c
 800bf68:	08011254 	.word	0x08011254

0800bf6c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af02      	add	r7, sp, #8
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	4613      	mov	r3, r2
 800bf78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bf7a:	79fa      	ldrb	r2, [r7, #7]
 800bf7c:	4944      	ldr	r1, [pc, #272]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800bf7e:	4613      	mov	r3, r2
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	4413      	add	r3, r2
 800bf84:	00db      	lsls	r3, r3, #3
 800bf86:	440b      	add	r3, r1
 800bf88:	3314      	adds	r3, #20
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d806      	bhi.n	800bf9e <etharp_output_to_arp_index+0x32>
 800bf90:	4b40      	ldr	r3, [pc, #256]	; (800c094 <etharp_output_to_arp_index+0x128>)
 800bf92:	f240 22ed 	movw	r2, #749	; 0x2ed
 800bf96:	4940      	ldr	r1, [pc, #256]	; (800c098 <etharp_output_to_arp_index+0x12c>)
 800bf98:	4840      	ldr	r0, [pc, #256]	; (800c09c <etharp_output_to_arp_index+0x130>)
 800bf9a:	f003 fa2b 	bl	800f3f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bf9e:	79fa      	ldrb	r2, [r7, #7]
 800bfa0:	493b      	ldr	r1, [pc, #236]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	440b      	add	r3, r1
 800bfac:	3314      	adds	r3, #20
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d153      	bne.n	800c05c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bfb4:	79fa      	ldrb	r2, [r7, #7]
 800bfb6:	4936      	ldr	r1, [pc, #216]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800bfb8:	4613      	mov	r3, r2
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	4413      	add	r3, r2
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	440b      	add	r3, r1
 800bfc2:	3312      	adds	r3, #18
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800bfca:	d919      	bls.n	800c000 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800bfcc:	79fa      	ldrb	r2, [r7, #7]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	4413      	add	r3, r2
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	4a2e      	ldr	r2, [pc, #184]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800bfd8:	4413      	add	r3, r2
 800bfda:	3304      	adds	r3, #4
 800bfdc:	4619      	mov	r1, r3
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 fb44 	bl	800c66c <etharp_request>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d138      	bne.n	800c05c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bfea:	79fa      	ldrb	r2, [r7, #7]
 800bfec:	4928      	ldr	r1, [pc, #160]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800bfee:	4613      	mov	r3, r2
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	4413      	add	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	440b      	add	r3, r1
 800bff8:	3314      	adds	r3, #20
 800bffa:	2203      	movs	r2, #3
 800bffc:	701a      	strb	r2, [r3, #0]
 800bffe:	e02d      	b.n	800c05c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c000:	79fa      	ldrb	r2, [r7, #7]
 800c002:	4923      	ldr	r1, [pc, #140]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800c004:	4613      	mov	r3, r2
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	4413      	add	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	440b      	add	r3, r1
 800c00e:	3312      	adds	r3, #18
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c016:	d321      	bcc.n	800c05c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c018:	79fa      	ldrb	r2, [r7, #7]
 800c01a:	4613      	mov	r3, r2
 800c01c:	005b      	lsls	r3, r3, #1
 800c01e:	4413      	add	r3, r2
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	4a1b      	ldr	r2, [pc, #108]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800c024:	4413      	add	r3, r2
 800c026:	1d19      	adds	r1, r3, #4
 800c028:	79fa      	ldrb	r2, [r7, #7]
 800c02a:	4613      	mov	r3, r2
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	4413      	add	r3, r2
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	3308      	adds	r3, #8
 800c034:	4a16      	ldr	r2, [pc, #88]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800c036:	4413      	add	r3, r2
 800c038:	3304      	adds	r3, #4
 800c03a:	461a      	mov	r2, r3
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 faf3 	bl	800c628 <etharp_request_dst>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d109      	bne.n	800c05c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c048:	79fa      	ldrb	r2, [r7, #7]
 800c04a:	4911      	ldr	r1, [pc, #68]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800c04c:	4613      	mov	r3, r2
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	4413      	add	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	440b      	add	r3, r1
 800c056:	3314      	adds	r3, #20
 800c058:	2203      	movs	r2, #3
 800c05a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800c062:	79fa      	ldrb	r2, [r7, #7]
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	3308      	adds	r3, #8
 800c06e:	4a08      	ldr	r2, [pc, #32]	; (800c090 <etharp_output_to_arp_index+0x124>)
 800c070:	4413      	add	r3, r2
 800c072:	1d1a      	adds	r2, r3, #4
 800c074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	4613      	mov	r3, r2
 800c07c:	460a      	mov	r2, r1
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f001 fdd7 	bl	800dc34 <ethernet_output>
 800c086:	4603      	mov	r3, r0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	240000e4 	.word	0x240000e4
 800c094:	080111dc 	.word	0x080111dc
 800c098:	0801134c 	.word	0x0801134c
 800c09c:	08011254 	.word	0x08011254

0800c0a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b08a      	sub	sp, #40	; 0x28
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <etharp_output+0x24>
 800c0b6:	4b69      	ldr	r3, [pc, #420]	; (800c25c <etharp_output+0x1bc>)
 800c0b8:	f240 321b 	movw	r2, #795	; 0x31b
 800c0bc:	4968      	ldr	r1, [pc, #416]	; (800c260 <etharp_output+0x1c0>)
 800c0be:	4869      	ldr	r0, [pc, #420]	; (800c264 <etharp_output+0x1c4>)
 800c0c0:	f003 f998 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d106      	bne.n	800c0d8 <etharp_output+0x38>
 800c0ca:	4b64      	ldr	r3, [pc, #400]	; (800c25c <etharp_output+0x1bc>)
 800c0cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c0d0:	4965      	ldr	r1, [pc, #404]	; (800c268 <etharp_output+0x1c8>)
 800c0d2:	4864      	ldr	r0, [pc, #400]	; (800c264 <etharp_output+0x1c4>)
 800c0d4:	f003 f98e 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <etharp_output+0x4c>
 800c0de:	4b5f      	ldr	r3, [pc, #380]	; (800c25c <etharp_output+0x1bc>)
 800c0e0:	f240 321d 	movw	r2, #797	; 0x31d
 800c0e4:	4961      	ldr	r1, [pc, #388]	; (800c26c <etharp_output+0x1cc>)
 800c0e6:	485f      	ldr	r0, [pc, #380]	; (800c264 <etharp_output+0x1c4>)
 800c0e8:	f003 f984 	bl	800f3f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68f9      	ldr	r1, [r7, #12]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 fef8 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c0fe:	4b5c      	ldr	r3, [pc, #368]	; (800c270 <etharp_output+0x1d0>)
 800c100:	61fb      	str	r3, [r7, #28]
 800c102:	e09b      	b.n	800c23c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c10c:	2be0      	cmp	r3, #224	; 0xe0
 800c10e:	d118      	bne.n	800c142 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c110:	2301      	movs	r3, #1
 800c112:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c114:	2300      	movs	r3, #0
 800c116:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c118:	235e      	movs	r3, #94	; 0x5e
 800c11a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3301      	adds	r3, #1
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c126:	b2db      	uxtb	r3, r3
 800c128:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	3302      	adds	r3, #2
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3303      	adds	r3, #3
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c13a:	f107 0310 	add.w	r3, r7, #16
 800c13e:	61fb      	str	r3, [r7, #28]
 800c140:	e07c      	b.n	800c23c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3304      	adds	r3, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	405a      	eors	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3308      	adds	r3, #8
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4013      	ands	r3, r2
 800c156:	2b00      	cmp	r3, #0
 800c158:	d012      	beq.n	800c180 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c160:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c164:	4293      	cmp	r3, r2
 800c166:	d00b      	beq.n	800c180 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	330c      	adds	r3, #12
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	330c      	adds	r3, #12
 800c176:	61bb      	str	r3, [r7, #24]
 800c178:	e002      	b.n	800c180 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c17a:	f06f 0303 	mvn.w	r3, #3
 800c17e:	e069      	b.n	800c254 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c180:	4b3c      	ldr	r3, [pc, #240]	; (800c274 <etharp_output+0x1d4>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	4619      	mov	r1, r3
 800c186:	4a3c      	ldr	r2, [pc, #240]	; (800c278 <etharp_output+0x1d8>)
 800c188:	460b      	mov	r3, r1
 800c18a:	005b      	lsls	r3, r3, #1
 800c18c:	440b      	add	r3, r1
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	4413      	add	r3, r2
 800c192:	3314      	adds	r3, #20
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d917      	bls.n	800c1ca <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	4b35      	ldr	r3, [pc, #212]	; (800c274 <etharp_output+0x1d4>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	4934      	ldr	r1, [pc, #208]	; (800c278 <etharp_output+0x1d8>)
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	4403      	add	r3, r0
 800c1ac:	00db      	lsls	r3, r3, #3
 800c1ae:	440b      	add	r3, r1
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d108      	bne.n	800c1ca <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c1b8:	4b2e      	ldr	r3, [pc, #184]	; (800c274 <etharp_output+0x1d4>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f7ff fed3 	bl	800bf6c <etharp_output_to_arp_index>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	e044      	b.n	800c254 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	75fb      	strb	r3, [r7, #23]
 800c1ce:	e02a      	b.n	800c226 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c1d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c1d4:	4928      	ldr	r1, [pc, #160]	; (800c278 <etharp_output+0x1d8>)
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	4413      	add	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	440b      	add	r3, r1
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d918      	bls.n	800c21a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	6819      	ldr	r1, [r3, #0]
 800c1ec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c1f0:	4821      	ldr	r0, [pc, #132]	; (800c278 <etharp_output+0x1d8>)
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	4413      	add	r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	4403      	add	r3, r0
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c200:	4299      	cmp	r1, r3
 800c202:	d10a      	bne.n	800c21a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c204:	7dfa      	ldrb	r2, [r7, #23]
 800c206:	4b1b      	ldr	r3, [pc, #108]	; (800c274 <etharp_output+0x1d4>)
 800c208:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	461a      	mov	r2, r3
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f7ff feab 	bl	800bf6c <etharp_output_to_arp_index>
 800c216:	4603      	mov	r3, r0
 800c218:	e01c      	b.n	800c254 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c21a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	3301      	adds	r3, #1
 800c222:	b2db      	uxtb	r3, r3
 800c224:	75fb      	strb	r3, [r7, #23]
 800c226:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c22a:	2b09      	cmp	r3, #9
 800c22c:	ddd0      	ble.n	800c1d0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	69b9      	ldr	r1, [r7, #24]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 f822 	bl	800c27c <etharp_query>
 800c238:	4603      	mov	r3, r0
 800c23a:	e00b      	b.n	800c254 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	68b9      	ldr	r1, [r7, #8]
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f001 fcf1 	bl	800dc34 <ethernet_output>
 800c252:	4603      	mov	r3, r0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3720      	adds	r7, #32
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	080111dc 	.word	0x080111dc
 800c260:	0801132c 	.word	0x0801132c
 800c264:	08011254 	.word	0x08011254
 800c268:	0801137c 	.word	0x0801137c
 800c26c:	0801131c 	.word	0x0801131c
 800c270:	08011980 	.word	0x08011980
 800c274:	240001d4 	.word	0x240001d4
 800c278:	240000e4 	.word	0x240000e4

0800c27c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b08c      	sub	sp, #48	; 0x30
 800c280:	af02      	add	r7, sp, #8
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3329      	adds	r3, #41	; 0x29
 800c28c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c28e:	23ff      	movs	r3, #255	; 0xff
 800c290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68f9      	ldr	r1, [r7, #12]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fe22 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10c      	bne.n	800c2c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2b2:	2be0      	cmp	r3, #224	; 0xe0
 800c2b4:	d006      	beq.n	800c2c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d003      	beq.n	800c2c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d102      	bne.n	800c2ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c2c4:	f06f 030f 	mvn.w	r3, #15
 800c2c8:	e10f      	b.n	800c4ea <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	68b8      	ldr	r0, [r7, #8]
 800c2d0:	f7ff fba2 	bl	800ba18 <etharp_find_entry>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c2d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	da02      	bge.n	800c2e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c2e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2e4:	e101      	b.n	800c4ea <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c2e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c2ea:	4982      	ldr	r1, [pc, #520]	; (800c4f4 <etharp_query+0x278>)
 800c2ec:	4613      	mov	r3, r2
 800c2ee:	005b      	lsls	r3, r3, #1
 800c2f0:	4413      	add	r3, r2
 800c2f2:	00db      	lsls	r3, r3, #3
 800c2f4:	440b      	add	r3, r1
 800c2f6:	3314      	adds	r3, #20
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d117      	bne.n	800c32e <etharp_query+0xb2>
    is_new_entry = 1;
 800c2fe:	2301      	movs	r3, #1
 800c300:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c302:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c306:	497b      	ldr	r1, [pc, #492]	; (800c4f4 <etharp_query+0x278>)
 800c308:	4613      	mov	r3, r2
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	4413      	add	r3, r2
 800c30e:	00db      	lsls	r3, r3, #3
 800c310:	440b      	add	r3, r1
 800c312:	3314      	adds	r3, #20
 800c314:	2201      	movs	r2, #1
 800c316:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c318:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c31c:	4975      	ldr	r1, [pc, #468]	; (800c4f4 <etharp_query+0x278>)
 800c31e:	4613      	mov	r3, r2
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	4413      	add	r3, r2
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	440b      	add	r3, r1
 800c328:	3308      	adds	r3, #8
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c32e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c332:	4970      	ldr	r1, [pc, #448]	; (800c4f4 <etharp_query+0x278>)
 800c334:	4613      	mov	r3, r2
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	4413      	add	r3, r2
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	440b      	add	r3, r1
 800c33e:	3314      	adds	r3, #20
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d012      	beq.n	800c36c <etharp_query+0xf0>
 800c346:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c34a:	496a      	ldr	r1, [pc, #424]	; (800c4f4 <etharp_query+0x278>)
 800c34c:	4613      	mov	r3, r2
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	4413      	add	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	440b      	add	r3, r1
 800c356:	3314      	adds	r3, #20
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d806      	bhi.n	800c36c <etharp_query+0xf0>
 800c35e:	4b66      	ldr	r3, [pc, #408]	; (800c4f8 <etharp_query+0x27c>)
 800c360:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c364:	4965      	ldr	r1, [pc, #404]	; (800c4fc <etharp_query+0x280>)
 800c366:	4866      	ldr	r0, [pc, #408]	; (800c500 <etharp_query+0x284>)
 800c368:	f003 f844 	bl	800f3f4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <etharp_query+0xfc>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10c      	bne.n	800c392 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 f976 	bl	800c66c <etharp_request>
 800c380:	4603      	mov	r3, r0
 800c382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <etharp_query+0x116>
      return result;
 800c38c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c390:	e0ab      	b.n	800c4ea <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <etharp_query+0x12a>
 800c398:	4b57      	ldr	r3, [pc, #348]	; (800c4f8 <etharp_query+0x27c>)
 800c39a:	f240 32db 	movw	r2, #987	; 0x3db
 800c39e:	4959      	ldr	r1, [pc, #356]	; (800c504 <etharp_query+0x288>)
 800c3a0:	4857      	ldr	r0, [pc, #348]	; (800c500 <etharp_query+0x284>)
 800c3a2:	f003 f827 	bl	800f3f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c3a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3aa:	4952      	ldr	r1, [pc, #328]	; (800c4f4 <etharp_query+0x278>)
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	4413      	add	r3, r2
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	440b      	add	r3, r1
 800c3b6:	3314      	adds	r3, #20
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d919      	bls.n	800c3f2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c3be:	7cfa      	ldrb	r2, [r7, #19]
 800c3c0:	4b51      	ldr	r3, [pc, #324]	; (800c508 <etharp_query+0x28c>)
 800c3c2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c3c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	4413      	add	r3, r2
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	4a48      	ldr	r2, [pc, #288]	; (800c4f4 <etharp_query+0x278>)
 800c3d4:	4413      	add	r3, r2
 800c3d6:	1d1a      	adds	r2, r3, #4
 800c3d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f001 fc25 	bl	800dc34 <ethernet_output>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3f0:	e079      	b.n	800c4e6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c3f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3f6:	493f      	ldr	r1, [pc, #252]	; (800c4f4 <etharp_query+0x278>)
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	4413      	add	r3, r2
 800c3fe:	00db      	lsls	r3, r3, #3
 800c400:	440b      	add	r3, r1
 800c402:	3314      	adds	r3, #20
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d16d      	bne.n	800c4e6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c412:	e01a      	b.n	800c44a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	895a      	ldrh	r2, [r3, #10]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	891b      	ldrh	r3, [r3, #8]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d10a      	bne.n	800c436 <etharp_query+0x1ba>
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d006      	beq.n	800c436 <etharp_query+0x1ba>
 800c428:	4b33      	ldr	r3, [pc, #204]	; (800c4f8 <etharp_query+0x27c>)
 800c42a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c42e:	4937      	ldr	r1, [pc, #220]	; (800c50c <etharp_query+0x290>)
 800c430:	4833      	ldr	r0, [pc, #204]	; (800c500 <etharp_query+0x284>)
 800c432:	f002 ffdf 	bl	800f3f4 <iprintf>
      if (p->type != PBUF_ROM) {
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	7b1b      	ldrb	r3, [r3, #12]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d002      	beq.n	800c444 <etharp_query+0x1c8>
        copy_needed = 1;
 800c43e:	2301      	movs	r3, #1
 800c440:	61bb      	str	r3, [r7, #24]
        break;
 800c442:	e005      	b.n	800c450 <etharp_query+0x1d4>
      }
      p = p->next;
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e1      	bne.n	800c414 <etharp_query+0x198>
    }
    if (copy_needed) {
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d017      	beq.n	800c486 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	891b      	ldrh	r3, [r3, #8]
 800c45a:	2200      	movs	r2, #0
 800c45c:	4619      	mov	r1, r3
 800c45e:	2002      	movs	r0, #2
 800c460:	f7fd ff06 	bl	800a270 <pbuf_alloc>
 800c464:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d011      	beq.n	800c490 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c46c:	6879      	ldr	r1, [r7, #4]
 800c46e:	69f8      	ldr	r0, [r7, #28]
 800c470:	f7fe fba0 	bl	800abb4 <pbuf_copy>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00a      	beq.n	800c490 <etharp_query+0x214>
          pbuf_free(p);
 800c47a:	69f8      	ldr	r0, [r7, #28]
 800c47c:	f7fe fa66 	bl	800a94c <pbuf_free>
          p = NULL;
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e004      	b.n	800c490 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c48a:	69f8      	ldr	r0, [r7, #28]
 800c48c:	f7fe fb0a 	bl	800aaa4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d024      	beq.n	800c4e0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c496:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c49a:	4916      	ldr	r1, [pc, #88]	; (800c4f4 <etharp_query+0x278>)
 800c49c:	4613      	mov	r3, r2
 800c49e:	005b      	lsls	r3, r3, #1
 800c4a0:	4413      	add	r3, r2
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	440b      	add	r3, r1
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00b      	beq.n	800c4c4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c4ac:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c4b0:	4910      	ldr	r1, [pc, #64]	; (800c4f4 <etharp_query+0x278>)
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	005b      	lsls	r3, r3, #1
 800c4b6:	4413      	add	r3, r2
 800c4b8:	00db      	lsls	r3, r3, #3
 800c4ba:	440b      	add	r3, r1
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fa44 	bl	800a94c <pbuf_free>
      }
      arp_table[i].q = p;
 800c4c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c4c8:	490a      	ldr	r1, [pc, #40]	; (800c4f4 <etharp_query+0x278>)
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	4413      	add	r3, r2
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	440b      	add	r3, r1
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4de:	e002      	b.n	800c4e6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c4e0:	23ff      	movs	r3, #255	; 0xff
 800c4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c4e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3728      	adds	r7, #40	; 0x28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	240000e4 	.word	0x240000e4
 800c4f8:	080111dc 	.word	0x080111dc
 800c4fc:	08011388 	.word	0x08011388
 800c500:	08011254 	.word	0x08011254
 800c504:	0801137c 	.word	0x0801137c
 800c508:	240001d4 	.word	0x240001d4
 800c50c:	080113b0 	.word	0x080113b0

0800c510 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b08a      	sub	sp, #40	; 0x28
 800c514:	af02      	add	r7, sp, #8
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d106      	bne.n	800c536 <etharp_raw+0x26>
 800c528:	4b3a      	ldr	r3, [pc, #232]	; (800c614 <etharp_raw+0x104>)
 800c52a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c52e:	493a      	ldr	r1, [pc, #232]	; (800c618 <etharp_raw+0x108>)
 800c530:	483a      	ldr	r0, [pc, #232]	; (800c61c <etharp_raw+0x10c>)
 800c532:	f002 ff5f 	bl	800f3f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c536:	2200      	movs	r2, #0
 800c538:	211c      	movs	r1, #28
 800c53a:	2002      	movs	r0, #2
 800c53c:	f7fd fe98 	bl	800a270 <pbuf_alloc>
 800c540:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d102      	bne.n	800c54e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c54c:	e05d      	b.n	800c60a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	895b      	ldrh	r3, [r3, #10]
 800c552:	2b1b      	cmp	r3, #27
 800c554:	d806      	bhi.n	800c564 <etharp_raw+0x54>
 800c556:	4b2f      	ldr	r3, [pc, #188]	; (800c614 <etharp_raw+0x104>)
 800c558:	f240 4264 	movw	r2, #1124	; 0x464
 800c55c:	4930      	ldr	r1, [pc, #192]	; (800c620 <etharp_raw+0x110>)
 800c55e:	482f      	ldr	r0, [pc, #188]	; (800c61c <etharp_raw+0x10c>)
 800c560:	f002 ff48 	bl	800f3f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c56a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fc ffc5 	bl	80094fc <lwip_htons>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c580:	2b06      	cmp	r3, #6
 800c582:	d006      	beq.n	800c592 <etharp_raw+0x82>
 800c584:	4b23      	ldr	r3, [pc, #140]	; (800c614 <etharp_raw+0x104>)
 800c586:	f240 426b 	movw	r2, #1131	; 0x46b
 800c58a:	4926      	ldr	r1, [pc, #152]	; (800c624 <etharp_raw+0x114>)
 800c58c:	4823      	ldr	r0, [pc, #140]	; (800c61c <etharp_raw+0x10c>)
 800c58e:	f002 ff31 	bl	800f3f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	3308      	adds	r3, #8
 800c596:	2206      	movs	r2, #6
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f002 ff17 	bl	800f3ce <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	3312      	adds	r3, #18
 800c5a4:	2206      	movs	r2, #6
 800c5a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f002 ff10 	bl	800f3ce <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	330e      	adds	r3, #14
 800c5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5b4:	6812      	ldr	r2, [r2, #0]
 800c5b6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	3318      	adds	r3, #24
 800c5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5be:	6812      	ldr	r2, [r2, #0]
 800c5c0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	701a      	strb	r2, [r3, #0]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f042 0201 	orr.w	r2, r2, #1
 800c5ce:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f042 0208 	orr.w	r2, r2, #8
 800c5d8:	709a      	strb	r2, [r3, #2]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	2204      	movs	r2, #4
 800c5e8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c5ea:	f640 0306 	movw	r3, #2054	; 0x806
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	69b9      	ldr	r1, [r7, #24]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f001 fb1c 	bl	800dc34 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c5fc:	69b8      	ldr	r0, [r7, #24]
 800c5fe:	f7fe f9a5 	bl	800a94c <pbuf_free>
  p = NULL;
 800c602:	2300      	movs	r3, #0
 800c604:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c606:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3720      	adds	r7, #32
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	080111dc 	.word	0x080111dc
 800c618:	0801132c 	.word	0x0801132c
 800c61c:	08011254 	.word	0x08011254
 800c620:	080113cc 	.word	0x080113cc
 800c624:	08011400 	.word	0x08011400

0800c628 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b088      	sub	sp, #32
 800c62c:	af04      	add	r7, sp, #16
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c644:	2201      	movs	r2, #1
 800c646:	9203      	str	r2, [sp, #12]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	9202      	str	r2, [sp, #8]
 800c64c:	4a06      	ldr	r2, [pc, #24]	; (800c668 <etharp_request_dst+0x40>)
 800c64e:	9201      	str	r2, [sp, #4]
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	4603      	mov	r3, r0
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f7ff ff5a 	bl	800c510 <etharp_raw>
 800c65c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	08011988 	.word	0x08011988

0800c66c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c676:	4a05      	ldr	r2, [pc, #20]	; (800c68c <etharp_request+0x20>)
 800c678:	6839      	ldr	r1, [r7, #0]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7ff ffd4 	bl	800c628 <etharp_request_dst>
 800c680:	4603      	mov	r3, r0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	08011980 	.word	0x08011980

0800c690 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08e      	sub	sp, #56	; 0x38
 800c694:	af04      	add	r7, sp, #16
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c69a:	4b8a      	ldr	r3, [pc, #552]	; (800c8c4 <icmp_input+0x234>)
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	f003 030f 	and.w	r3, r3, #15
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c6b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6b2:	2b13      	cmp	r3, #19
 800c6b4:	f240 80f1 	bls.w	800c89a <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	895b      	ldrh	r3, [r3, #10]
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	f240 80ee 	bls.w	800c89e <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	785b      	ldrb	r3, [r3, #1]
 800c6d2:	f887 3020 	strb.w	r3, [r7, #32]
#endif /* LWIP_DEBUG */
  switch (type) {
 800c6d6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 80d6 	beq.w	800c88c <icmp_input+0x1fc>
 800c6e0:	2b08      	cmp	r3, #8
 800c6e2:	f040 80d6 	bne.w	800c892 <icmp_input+0x202>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c6e6:	4b78      	ldr	r3, [pc, #480]	; (800c8c8 <icmp_input+0x238>)
 800c6e8:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c6ea:	4b76      	ldr	r3, [pc, #472]	; (800c8c4 <icmp_input+0x234>)
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6f2:	2be0      	cmp	r3, #224	; 0xe0
 800c6f4:	f000 80da 	beq.w	800c8ac <icmp_input+0x21c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c6f8:	4b72      	ldr	r3, [pc, #456]	; (800c8c4 <icmp_input+0x234>)
 800c6fa:	695a      	ldr	r2, [r3, #20]
 800c6fc:	4b71      	ldr	r3, [pc, #452]	; (800c8c4 <icmp_input+0x234>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4619      	mov	r1, r3
 800c702:	4610      	mov	r0, r2
 800c704:	f000 fbf0 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f040 80d0 	bne.w	800c8b0 <icmp_input+0x220>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	891b      	ldrh	r3, [r3, #8]
 800c714:	2b07      	cmp	r3, #7
 800c716:	f240 80c4 	bls.w	800c8a2 <icmp_input+0x212>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7fc ff6b 	bl	80095f6 <inet_chksum_pbuf>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d003      	beq.n	800c72e <icmp_input+0x9e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7fe f910 	bl	800a94c <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
        MIB2_STATS_INC(mib2.icmpinerrors);
        return;
 800c72c:	e0c7      	b.n	800c8be <icmp_input+0x22e>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c72e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c730:	330e      	adds	r3, #14
 800c732:	b29b      	uxth	r3, r3
 800c734:	b21b      	sxth	r3, r3
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7fe f8e3 	bl	800a904 <pbuf_header>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d046      	beq.n	800c7d2 <icmp_input+0x142>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	891a      	ldrh	r2, [r3, #8]
 800c748:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c74a:	4413      	add	r3, r2
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	2200      	movs	r2, #0
 800c750:	4619      	mov	r1, r3
 800c752:	2002      	movs	r0, #2
 800c754:	f7fd fd8c 	bl	800a270 <pbuf_alloc>
 800c758:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 80a9 	beq.w	800c8b4 <icmp_input+0x224>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	895b      	ldrh	r3, [r3, #10]
 800c766:	461a      	mov	r2, r3
 800c768:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c76a:	3308      	adds	r3, #8
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d203      	bcs.n	800c778 <icmp_input+0xe8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c770:	69b8      	ldr	r0, [r7, #24]
 800c772:	f7fe f8eb 	bl	800a94c <pbuf_free>
        goto icmperr;
 800c776:	e09e      	b.n	800c8b6 <icmp_input+0x226>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c77e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c780:	4618      	mov	r0, r3
 800c782:	f002 fe24 	bl	800f3ce <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c788:	425b      	negs	r3, r3
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	b21b      	sxth	r3, r3
 800c78e:	4619      	mov	r1, r3
 800c790:	69b8      	ldr	r0, [r7, #24]
 800c792:	f7fe f8b7 	bl	800a904 <pbuf_header>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d009      	beq.n	800c7b0 <icmp_input+0x120>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c79c:	4b4b      	ldr	r3, [pc, #300]	; (800c8cc <icmp_input+0x23c>)
 800c79e:	22af      	movs	r2, #175	; 0xaf
 800c7a0:	494b      	ldr	r1, [pc, #300]	; (800c8d0 <icmp_input+0x240>)
 800c7a2:	484c      	ldr	r0, [pc, #304]	; (800c8d4 <icmp_input+0x244>)
 800c7a4:	f002 fe26 	bl	800f3f4 <iprintf>
        pbuf_free(r);
 800c7a8:	69b8      	ldr	r0, [r7, #24]
 800c7aa:	f7fe f8cf 	bl	800a94c <pbuf_free>
        goto icmperr;
 800c7ae:	e082      	b.n	800c8b6 <icmp_input+0x226>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c7b0:	6879      	ldr	r1, [r7, #4]
 800c7b2:	69b8      	ldr	r0, [r7, #24]
 800c7b4:	f7fe f9fe 	bl	800abb4 <pbuf_copy>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d003      	beq.n	800c7c6 <icmp_input+0x136>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c7be:	69b8      	ldr	r0, [r7, #24]
 800c7c0:	f7fe f8c4 	bl	800a94c <pbuf_free>
        goto icmperr;
 800c7c4:	e077      	b.n	800c8b6 <icmp_input+0x226>
      }
      /* free the original p */
      pbuf_free(p);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7fe f8c0 	bl	800a94c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	607b      	str	r3, [r7, #4]
 800c7d0:	e015      	b.n	800c7fe <icmp_input+0x16e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c7d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c7d4:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c7d8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c7dc:	33f2      	adds	r3, #242	; 0xf2
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	b21b      	sxth	r3, r3
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7fe f88d 	bl	800a904 <pbuf_header>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d006      	beq.n	800c7fe <icmp_input+0x16e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c7f0:	4b36      	ldr	r3, [pc, #216]	; (800c8cc <icmp_input+0x23c>)
 800c7f2:	22c0      	movs	r2, #192	; 0xc0
 800c7f4:	4938      	ldr	r1, [pc, #224]	; (800c8d8 <icmp_input+0x248>)
 800c7f6:	4837      	ldr	r0, [pc, #220]	; (800c8d4 <icmp_input+0x244>)
 800c7f8:	f002 fdfc 	bl	800f3f4 <iprintf>
        goto icmperr;
 800c7fc:	e05b      	b.n	800c8b6 <icmp_input+0x226>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c804:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7fe f87a 	bl	800a904 <pbuf_header>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d13c      	bne.n	800c890 <icmp_input+0x200>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c824:	4b27      	ldr	r3, [pc, #156]	; (800c8c4 <icmp_input+0x234>)
 800c826:	691a      	ldr	r2, [r3, #16]
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2200      	movs	r2, #0
 800c830:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	b29b      	uxth	r3, r3
 800c838:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d907      	bls.n	800c850 <icmp_input+0x1c0>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	885b      	ldrh	r3, [r3, #2]
 800c844:	b29b      	uxth	r3, r3
 800c846:	3309      	adds	r3, #9
 800c848:	b29a      	uxth	r2, r3
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	805a      	strh	r2, [r3, #2]
 800c84e:	e006      	b.n	800c85e <icmp_input+0x1ce>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	885b      	ldrh	r3, [r3, #2]
 800c854:	b29b      	uxth	r3, r3
 800c856:	3308      	adds	r3, #8
 800c858:	b29a      	uxth	r2, r3
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	22ff      	movs	r2, #255	; 0xff
 800c862:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2200      	movs	r2, #0
 800c868:	729a      	strb	r2, [r3, #10]
 800c86a:	2200      	movs	r2, #0
 800c86c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	9302      	str	r3, [sp, #8]
 800c872:	2301      	movs	r3, #1
 800c874:	9301      	str	r3, [sp, #4]
 800c876:	2300      	movs	r3, #0
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	23ff      	movs	r3, #255	; 0xff
 800c87c:	2200      	movs	r2, #0
 800c87e:	69f9      	ldr	r1, [r7, #28]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fa5f 	bl	800cd44 <ip4_output_if>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c88a:	e001      	b.n	800c890 <icmp_input+0x200>
    break;
 800c88c:	bf00      	nop
 800c88e:	e000      	b.n	800c892 <icmp_input+0x202>
    break;
 800c890:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7fe f85a 	bl	800a94c <pbuf_free>
  return;
 800c898:	e011      	b.n	800c8be <icmp_input+0x22e>
    goto lenerr;
 800c89a:	bf00      	nop
 800c89c:	e002      	b.n	800c8a4 <icmp_input+0x214>
    goto lenerr;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <icmp_input+0x214>
      goto lenerr;
 800c8a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7fe f851 	bl	800a94c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c8aa:	e008      	b.n	800c8be <icmp_input+0x22e>
      goto icmperr;
 800c8ac:	bf00      	nop
 800c8ae:	e002      	b.n	800c8b6 <icmp_input+0x226>
      goto icmperr;
 800c8b0:	bf00      	nop
 800c8b2:	e000      	b.n	800c8b6 <icmp_input+0x226>
        goto icmperr;
 800c8b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7fe f848 	bl	800a94c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c8bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c8be:	3728      	adds	r7, #40	; 0x28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	240001f8 	.word	0x240001f8
 800c8c8:	2400020c 	.word	0x2400020c
 800c8cc:	08011444 	.word	0x08011444
 800c8d0:	0801147c 	.word	0x0801147c
 800c8d4:	080114b4 	.word	0x080114b4
 800c8d8:	080114dc 	.word	0x080114dc

0800c8dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c8e8:	78fb      	ldrb	r3, [r7, #3]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	2103      	movs	r1, #3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f814 	bl	800c91c <icmp_send_response>
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c908:	78fb      	ldrb	r3, [r7, #3]
 800c90a:	461a      	mov	r2, r3
 800c90c:	210b      	movs	r1, #11
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f804 	bl	800c91c <icmp_send_response>
}
 800c914:	bf00      	nop
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b08c      	sub	sp, #48	; 0x30
 800c920:	af04      	add	r7, sp, #16
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	460b      	mov	r3, r1
 800c926:	70fb      	strb	r3, [r7, #3]
 800c928:	4613      	mov	r3, r2
 800c92a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c92c:	2200      	movs	r2, #0
 800c92e:	2124      	movs	r1, #36	; 0x24
 800c930:	2001      	movs	r0, #1
 800c932:	f7fd fc9d 	bl	800a270 <pbuf_alloc>
 800c936:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d056      	beq.n	800c9ec <icmp_send_response+0xd0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	895b      	ldrh	r3, [r3, #10]
 800c942:	2b23      	cmp	r3, #35	; 0x23
 800c944:	d806      	bhi.n	800c954 <icmp_send_response+0x38>
 800c946:	4b2b      	ldr	r3, [pc, #172]	; (800c9f4 <icmp_send_response+0xd8>)
 800c948:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c94c:	492a      	ldr	r1, [pc, #168]	; (800c9f8 <icmp_send_response+0xdc>)
 800c94e:	482b      	ldr	r0, [pc, #172]	; (800c9fc <icmp_send_response+0xe0>)
 800c950:	f002 fd50 	bl	800f3f4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	78fa      	ldrb	r2, [r7, #3]
 800c964:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	78ba      	ldrb	r2, [r7, #2]
 800c96a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	2200      	movs	r2, #0
 800c970:	711a      	strb	r2, [r3, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	2200      	movs	r2, #0
 800c97a:	719a      	strb	r2, [r3, #6]
 800c97c:	2200      	movs	r2, #0
 800c97e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f103 0008 	add.w	r0, r3, #8
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	221c      	movs	r2, #28
 800c98e:	4619      	mov	r1, r3
 800c990:	f002 fd1d 	bl	800f3ce <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c99a:	f107 030c 	add.w	r3, r7, #12
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f82e 	bl	800ca00 <ip4_route>
 800c9a4:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01b      	beq.n	800c9e4 <icmp_send_response+0xc8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	709a      	strb	r2, [r3, #2]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	895b      	ldrh	r3, [r3, #10]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6938      	ldr	r0, [r7, #16]
 800c9be:	f7fc fe08 	bl	80095d2 <inet_chksum>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c9ca:	f107 020c 	add.w	r2, r7, #12
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	9302      	str	r3, [sp, #8]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	23ff      	movs	r3, #255	; 0xff
 800c9dc:	2100      	movs	r1, #0
 800c9de:	69b8      	ldr	r0, [r7, #24]
 800c9e0:	f000 f9b0 	bl	800cd44 <ip4_output_if>
  }
  pbuf_free(q);
 800c9e4:	69b8      	ldr	r0, [r7, #24]
 800c9e6:	f7fd ffb1 	bl	800a94c <pbuf_free>
 800c9ea:	e000      	b.n	800c9ee <icmp_send_response+0xd2>
    return;
 800c9ec:	bf00      	nop
}
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	08011444 	.word	0x08011444
 800c9f8:	08011510 	.word	0x08011510
 800c9fc:	080114b4 	.word	0x080114b4

0800ca00 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ca08:	4b30      	ldr	r3, [pc, #192]	; (800cacc <ip4_route+0xcc>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	60fb      	str	r3, [r7, #12]
 800ca0e:	e036      	b.n	800ca7e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d02b      	beq.n	800ca78 <ip4_route+0x78>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca26:	089b      	lsrs	r3, r3, #2
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d022      	beq.n	800ca78 <ip4_route+0x78>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	3304      	adds	r3, #4
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01d      	beq.n	800ca78 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3304      	adds	r3, #4
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	405a      	eors	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4013      	ands	r3, r2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d101      	bne.n	800ca58 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	e033      	b.n	800cac0 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca5e:	f003 0302 	and.w	r3, r3, #2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d108      	bne.n	800ca78 <ip4_route+0x78>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	330c      	adds	r3, #12
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d101      	bne.n	800ca78 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	e023      	b.n	800cac0 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1c5      	bne.n	800ca10 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ca84:	4b12      	ldr	r3, [pc, #72]	; (800cad0 <ip4_route+0xd0>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d015      	beq.n	800cab8 <ip4_route+0xb8>
 800ca8c:	4b10      	ldr	r3, [pc, #64]	; (800cad0 <ip4_route+0xd0>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00d      	beq.n	800cab8 <ip4_route+0xb8>
 800ca9c:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <ip4_route+0xd0>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800caac:	4b08      	ldr	r3, [pc, #32]	; (800cad0 <ip4_route+0xd0>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3304      	adds	r3, #4
 800cab2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d101      	bne.n	800cabc <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cab8:	2300      	movs	r3, #0
 800caba:	e001      	b.n	800cac0 <ip4_route+0xc0>
  }

  return netif_default;
 800cabc:	4b04      	ldr	r3, [pc, #16]	; (800cad0 <ip4_route+0xd0>)
 800cabe:	681b      	ldr	r3, [r3, #0]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	24003670 	.word	0x24003670
 800cad0:	24003674 	.word	0x24003674

0800cad4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b086      	sub	sp, #24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	60fb      	str	r3, [r7, #12]
  if (IPH_V(iphdr) != 4) {
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	091b      	lsrs	r3, r3, #4
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b04      	cmp	r3, #4
 800caee:	d004      	beq.n	800cafa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7fd ff2b 	bl	800a94c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	e11c      	b.n	800cd34 <ip4_input+0x260>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	813b      	strh	r3, [r7, #8]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800cb06:	893b      	ldrh	r3, [r7, #8]
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	813b      	strh	r3, [r7, #8]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	885b      	ldrh	r3, [r3, #2]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fc fcf2 	bl	80094fc <lwip_htons>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	817b      	strh	r3, [r7, #10]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	891b      	ldrh	r3, [r3, #8]
 800cb20:	897a      	ldrh	r2, [r7, #10]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d204      	bcs.n	800cb30 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800cb26:	897b      	ldrh	r3, [r7, #10]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7fd fd9a 	bl	800a664 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	895b      	ldrh	r3, [r3, #10]
 800cb34:	893a      	ldrh	r2, [r7, #8]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d807      	bhi.n	800cb4a <ip4_input+0x76>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	891b      	ldrh	r3, [r3, #8]
 800cb3e:	897a      	ldrh	r2, [r7, #10]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d802      	bhi.n	800cb4a <ip4_input+0x76>
 800cb44:	893b      	ldrh	r3, [r7, #8]
 800cb46:	2b13      	cmp	r3, #19
 800cb48:	d804      	bhi.n	800cb54 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7fd fefe 	bl	800a94c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	e0ef      	b.n	800cd34 <ip4_input+0x260>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	4a78      	ldr	r2, [pc, #480]	; (800cd3c <ip4_input+0x268>)
 800cb5a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	4a76      	ldr	r2, [pc, #472]	; (800cd3c <ip4_input+0x268>)
 800cb62:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb64:	4b75      	ldr	r3, [pc, #468]	; (800cd3c <ip4_input+0x268>)
 800cb66:	695b      	ldr	r3, [r3, #20]
 800cb68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb6c:	2be0      	cmp	r3, #224	; 0xe0
 800cb6e:	d112      	bne.n	800cb96 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d007      	beq.n	800cb90 <ip4_input+0xbc>
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	3304      	adds	r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d002      	beq.n	800cb90 <ip4_input+0xbc>
      netif = inp;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	613b      	str	r3, [r7, #16]
 800cb8e:	e043      	b.n	800cc18 <ip4_input+0x144>
    } else {
      netif = NULL;
 800cb90:	2300      	movs	r3, #0
 800cb92:	613b      	str	r3, [r7, #16]
 800cb94:	e040      	b.n	800cc18 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800cb96:	2301      	movs	r3, #1
 800cb98:	617b      	str	r3, [r7, #20]
    netif = inp;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d014      	beq.n	800cbd8 <ip4_input+0x104>
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00f      	beq.n	800cbd8 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cbb8:	4b60      	ldr	r3, [pc, #384]	; (800cd3c <ip4_input+0x268>)
 800cbba:	695a      	ldr	r2, [r3, #20]
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d027      	beq.n	800cc16 <ip4_input+0x142>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cbc6:	4b5d      	ldr	r3, [pc, #372]	; (800cd3c <ip4_input+0x268>)
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	6939      	ldr	r1, [r7, #16]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 f98b 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800cbd2:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d11e      	bne.n	800cc16 <ip4_input+0x142>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00d      	beq.n	800cbfa <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800cbde:	4b57      	ldr	r3, [pc, #348]	; (800cd3c <ip4_input+0x268>)
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b7f      	cmp	r3, #127	; 0x7f
 800cbe6:	d102      	bne.n	800cbee <ip4_input+0x11a>
          netif = NULL;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	613b      	str	r3, [r7, #16]
          break;
 800cbec:	e014      	b.n	800cc18 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	617b      	str	r3, [r7, #20]
        netif = netif_list;
 800cbf2:	4b53      	ldr	r3, [pc, #332]	; (800cd40 <ip4_input+0x26c>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	613b      	str	r3, [r7, #16]
 800cbf8:	e002      	b.n	800cc00 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d102      	bne.n	800cc0e <ip4_input+0x13a>
        netif = netif->next;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1c4      	bne.n	800cb9e <ip4_input+0xca>
 800cc14:	e000      	b.n	800cc18 <ip4_input+0x144>
          break;
 800cc16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc18:	4b48      	ldr	r3, [pc, #288]	; (800cd3c <ip4_input+0x268>)
 800cc1a:	691b      	ldr	r3, [r3, #16]
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 f962 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d105      	bne.n	800cc36 <ip4_input+0x162>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cc2a:	4b44      	ldr	r3, [pc, #272]	; (800cd3c <ip4_input+0x268>)
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cc32:	2be0      	cmp	r3, #224	; 0xe0
 800cc34:	d104      	bne.n	800cc40 <ip4_input+0x16c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7fd fe88 	bl	800a94c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e079      	b.n	800cd34 <ip4_input+0x260>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d104      	bne.n	800cc50 <ip4_input+0x17c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7fd fe80 	bl	800a94c <pbuf_free>
    return ERR_OK;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e071      	b.n	800cd34 <ip4_input+0x260>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	88db      	ldrh	r3, [r3, #6]
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	461a      	mov	r2, r3
 800cc58:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00b      	beq.n	800cc7a <ip4_input+0x1a6>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fc86 	bl	800d574 <ip4_reass>
 800cc68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <ip4_input+0x1a0>
      return ERR_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	e05f      	b.n	800cd34 <ip4_input+0x260>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	60fb      	str	r3, [r7, #12]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cc7a:	4a30      	ldr	r2, [pc, #192]	; (800cd3c <ip4_input+0x268>)
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cc80:	4a2e      	ldr	r2, [pc, #184]	; (800cd3c <ip4_input+0x268>)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cc86:	4a2d      	ldr	r2, [pc, #180]	; (800cd3c <ip4_input+0x268>)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	f003 030f 	and.w	r3, r3, #15
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	4b27      	ldr	r3, [pc, #156]	; (800cd3c <ip4_input+0x268>)
 800cc9e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800cca0:	893b      	ldrh	r3, [r7, #8]
 800cca2:	425b      	negs	r3, r3
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	b21b      	sxth	r3, r3
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7fd fe2a 	bl	800a904 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	7a5b      	ldrb	r3, [r3, #9]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d006      	beq.n	800ccc6 <ip4_input+0x1f2>
 800ccb8:	2b11      	cmp	r3, #17
 800ccba:	d109      	bne.n	800ccd0 <ip4_input+0x1fc>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7fe fa7e 	bl	800b1c0 <udp_input>
      break;
 800ccc4:	e023      	b.n	800cd0e <ip4_input+0x23a>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7ff fce1 	bl	800c690 <icmp_input>
      break;
 800ccce:	e01e      	b.n	800cd0e <ip4_input+0x23a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ccd0:	4b1a      	ldr	r3, [pc, #104]	; (800cd3c <ip4_input+0x268>)
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	6939      	ldr	r1, [r7, #16]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f906 	bl	800cee8 <ip4_addr_isbroadcast_u32>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d112      	bne.n	800cd08 <ip4_input+0x234>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cce2:	4b16      	ldr	r3, [pc, #88]	; (800cd3c <ip4_input+0x268>)
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ccea:	2be0      	cmp	r3, #224	; 0xe0
 800ccec:	d00c      	beq.n	800cd08 <ip4_input+0x234>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ccee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fd fe17 	bl	800a928 <pbuf_header_force>
        p->payload = iphdr;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cd00:	2102      	movs	r1, #2
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff fdea 	bl	800c8dc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7fd fe1f 	bl	800a94c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cd0e:	4b0b      	ldr	r3, [pc, #44]	; (800cd3c <ip4_input+0x268>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cd14:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <ip4_input+0x268>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cd1a:	4b08      	ldr	r3, [pc, #32]	; (800cd3c <ip4_input+0x268>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cd20:	4b06      	ldr	r3, [pc, #24]	; (800cd3c <ip4_input+0x268>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cd26:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <ip4_input+0x268>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cd2c:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <ip4_input+0x268>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	240001f8 	.word	0x240001f8
 800cd40:	24003670 	.word	0x24003670

0800cd44 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08a      	sub	sp, #40	; 0x28
 800cd48:	af04      	add	r7, sp, #16
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
 800cd50:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d009      	beq.n	800cd70 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <ip4_output_if+0x26>
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d102      	bne.n	800cd70 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cd70:	78fa      	ldrb	r2, [r7, #3]
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	9302      	str	r3, [sp, #8]
 800cd76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd7a:	9301      	str	r3, [sp, #4]
 800cd7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	4613      	mov	r3, r2
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	6979      	ldr	r1, [r7, #20]
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 f805 	bl	800cd98 <ip4_output_if_src>
 800cd8e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	89db      	ldrh	r3, [r3, #14]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d006      	beq.n	800cdbc <ip4_output_if_src+0x24>
 800cdae:	4b48      	ldr	r3, [pc, #288]	; (800ced0 <ip4_output_if_src+0x138>)
 800cdb0:	f240 3233 	movw	r2, #819	; 0x333
 800cdb4:	4947      	ldr	r1, [pc, #284]	; (800ced4 <ip4_output_if_src+0x13c>)
 800cdb6:	4848      	ldr	r0, [pc, #288]	; (800ced8 <ip4_output_if_src+0x140>)
 800cdb8:	f002 fb1c 	bl	800f3f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d060      	beq.n	800ce84 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cdc2:	2314      	movs	r3, #20
 800cdc4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800cdc6:	2114      	movs	r1, #20
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7fd fd9b 	bl	800a904 <pbuf_header>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cdd4:	f06f 0301 	mvn.w	r3, #1
 800cdd8:	e075      	b.n	800cec6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	895b      	ldrh	r3, [r3, #10]
 800cde4:	2b13      	cmp	r3, #19
 800cde6:	d806      	bhi.n	800cdf6 <ip4_output_if_src+0x5e>
 800cde8:	4b39      	ldr	r3, [pc, #228]	; (800ced0 <ip4_output_if_src+0x138>)
 800cdea:	f240 3261 	movw	r2, #865	; 0x361
 800cdee:	493b      	ldr	r1, [pc, #236]	; (800cedc <ip4_output_if_src+0x144>)
 800cdf0:	4839      	ldr	r0, [pc, #228]	; (800ced8 <ip4_output_if_src+0x140>)
 800cdf2:	f002 faff 	bl	800f3f4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	78fa      	ldrb	r2, [r7, #3]
 800cdfa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ce02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ce0c:	8b7b      	ldrh	r3, [r7, #26]
 800ce0e:	089b      	lsrs	r3, r3, #2
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ce24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	891b      	ldrh	r3, [r3, #8]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fc fb66 	bl	80094fc <lwip_htons>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461a      	mov	r2, r3
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	719a      	strb	r2, [r3, #6]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ce42:	4b27      	ldr	r3, [pc, #156]	; (800cee0 <ip4_output_if_src+0x148>)
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fc fb58 	bl	80094fc <lwip_htons>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	461a      	mov	r2, r3
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ce54:	4b22      	ldr	r3, [pc, #136]	; (800cee0 <ip4_output_if_src+0x148>)
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	4b20      	ldr	r3, [pc, #128]	; (800cee0 <ip4_output_if_src+0x148>)
 800ce5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d104      	bne.n	800ce70 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ce66:	4b1f      	ldr	r3, [pc, #124]	; (800cee4 <ip4_output_if_src+0x14c>)
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	60da      	str	r2, [r3, #12]
 800ce6e:	e003      	b.n	800ce78 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	729a      	strb	r2, [r3, #10]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	72da      	strb	r2, [r3, #11]
 800ce82:	e008      	b.n	800ce96 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ce90:	f107 0314 	add.w	r3, r7, #20
 800ce94:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00c      	beq.n	800ceb8 <ip4_output_if_src+0x120>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	891a      	ldrh	r2, [r3, #8]
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d906      	bls.n	800ceb8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 fd0c 	bl	800d8cc <ip4_frag>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	e006      	b.n	800cec6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	68f9      	ldr	r1, [r7, #12]
 800cec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec2:	4798      	blx	r3
 800cec4:	4603      	mov	r3, r0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3720      	adds	r7, #32
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	0801153c 	.word	0x0801153c
 800ced4:	08011570 	.word	0x08011570
 800ced8:	0801157c 	.word	0x0801157c
 800cedc:	080115a4 	.word	0x080115a4
 800cee0:	240001d6 	.word	0x240001d6
 800cee4:	0801197c 	.word	0x0801197c

0800cee8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cefc:	d002      	beq.n	800cf04 <ip4_addr_isbroadcast_u32+0x1c>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e02a      	b.n	800cf5e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf0e:	f003 0302 	and.w	r3, r3, #2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	e021      	b.n	800cf5e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d101      	bne.n	800cf2a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	e019      	b.n	800cf5e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	405a      	eors	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	3308      	adds	r3, #8
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10d      	bne.n	800cf5c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	3308      	adds	r3, #8
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	43da      	mvns	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	3308      	adds	r3, #8
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d101      	bne.n	800cf5c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e000      	b.n	800cf5e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cf5c:	2300      	movs	r3, #0
  }
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
	...

0800cf6c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cf76:	4b12      	ldr	r3, [pc, #72]	; (800cfc0 <ip_reass_tmr+0x54>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cf7c:	e018      	b.n	800cfb0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7fdb      	ldrb	r3, [r3, #31]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00b      	beq.n	800cf9e <ip_reass_tmr+0x32>
      r->timer--;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	7fdb      	ldrb	r3, [r3, #31]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	b2da      	uxtb	r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	60fb      	str	r3, [r7, #12]
 800cf9c:	e008      	b.n	800cfb0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cfa8:	68b9      	ldr	r1, [r7, #8]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f80a 	bl	800cfc4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1e3      	bne.n	800cf7e <ip_reass_tmr+0x12>
     }
   }
}
 800cfb6:	bf00      	nop
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	240001d8 	.word	0x240001d8

0800cfc4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d105      	bne.n	800cfe6 <ip_reass_free_complete_datagram+0x22>
 800cfda:	4b45      	ldr	r3, [pc, #276]	; (800d0f0 <ip_reass_free_complete_datagram+0x12c>)
 800cfdc:	22ab      	movs	r2, #171	; 0xab
 800cfde:	4945      	ldr	r1, [pc, #276]	; (800d0f4 <ip_reass_free_complete_datagram+0x130>)
 800cfe0:	4845      	ldr	r0, [pc, #276]	; (800d0f8 <ip_reass_free_complete_datagram+0x134>)
 800cfe2:	f002 fa07 	bl	800f3f4 <iprintf>
  if (prev != NULL) {
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00a      	beq.n	800d002 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d005      	beq.n	800d002 <ip_reass_free_complete_datagram+0x3e>
 800cff6:	4b3e      	ldr	r3, [pc, #248]	; (800d0f0 <ip_reass_free_complete_datagram+0x12c>)
 800cff8:	22ad      	movs	r2, #173	; 0xad
 800cffa:	4940      	ldr	r1, [pc, #256]	; (800d0fc <ip_reass_free_complete_datagram+0x138>)
 800cffc:	483e      	ldr	r0, [pc, #248]	; (800d0f8 <ip_reass_free_complete_datagram+0x134>)
 800cffe:	f002 f9f9 	bl	800f3f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	889b      	ldrh	r3, [r3, #4]
 800d00e:	b29b      	uxth	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d12a      	bne.n	800d06a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	6858      	ldr	r0, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	3308      	adds	r3, #8
 800d02a:	2214      	movs	r2, #20
 800d02c:	4619      	mov	r1, r3
 800d02e:	f002 f9ce 	bl	800f3ce <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d032:	2101      	movs	r1, #1
 800d034:	69b8      	ldr	r0, [r7, #24]
 800d036:	f7ff fc61 	bl	800c8fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d03a:	69b8      	ldr	r0, [r7, #24]
 800d03c:	f7fd fd1a 	bl	800aa74 <pbuf_clen>
 800d040:	4603      	mov	r3, r0
 800d042:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d044:	8bfa      	ldrh	r2, [r7, #30]
 800d046:	8a7b      	ldrh	r3, [r7, #18]
 800d048:	4413      	add	r3, r2
 800d04a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d04e:	db05      	blt.n	800d05c <ip_reass_free_complete_datagram+0x98>
 800d050:	4b27      	ldr	r3, [pc, #156]	; (800d0f0 <ip_reass_free_complete_datagram+0x12c>)
 800d052:	22bc      	movs	r2, #188	; 0xbc
 800d054:	492a      	ldr	r1, [pc, #168]	; (800d100 <ip_reass_free_complete_datagram+0x13c>)
 800d056:	4828      	ldr	r0, [pc, #160]	; (800d0f8 <ip_reass_free_complete_datagram+0x134>)
 800d058:	f002 f9cc 	bl	800f3f4 <iprintf>
    pbufs_freed += clen;
 800d05c:	8bfa      	ldrh	r2, [r7, #30]
 800d05e:	8a7b      	ldrh	r3, [r7, #18]
 800d060:	4413      	add	r3, r2
 800d062:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d064:	69b8      	ldr	r0, [r7, #24]
 800d066:	f7fd fc71 	bl	800a94c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d070:	e01f      	b.n	800d0b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7fd fcf6 	bl	800aa74 <pbuf_clen>
 800d088:	4603      	mov	r3, r0
 800d08a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d08c:	8bfa      	ldrh	r2, [r7, #30]
 800d08e:	8a7b      	ldrh	r3, [r7, #18]
 800d090:	4413      	add	r3, r2
 800d092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d096:	db05      	blt.n	800d0a4 <ip_reass_free_complete_datagram+0xe0>
 800d098:	4b15      	ldr	r3, [pc, #84]	; (800d0f0 <ip_reass_free_complete_datagram+0x12c>)
 800d09a:	22cc      	movs	r2, #204	; 0xcc
 800d09c:	4918      	ldr	r1, [pc, #96]	; (800d100 <ip_reass_free_complete_datagram+0x13c>)
 800d09e:	4816      	ldr	r0, [pc, #88]	; (800d0f8 <ip_reass_free_complete_datagram+0x134>)
 800d0a0:	f002 f9a8 	bl	800f3f4 <iprintf>
    pbufs_freed += clen;
 800d0a4:	8bfa      	ldrh	r2, [r7, #30]
 800d0a6:	8a7b      	ldrh	r3, [r7, #18]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7fd fc4d 	bl	800a94c <pbuf_free>
  while (p != NULL) {
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1dc      	bne.n	800d072 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f8c2 	bl	800d244 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d0c0:	4b10      	ldr	r3, [pc, #64]	; (800d104 <ip_reass_free_complete_datagram+0x140>)
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	8bfa      	ldrh	r2, [r7, #30]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d905      	bls.n	800d0d6 <ip_reass_free_complete_datagram+0x112>
 800d0ca:	4b09      	ldr	r3, [pc, #36]	; (800d0f0 <ip_reass_free_complete_datagram+0x12c>)
 800d0cc:	22d2      	movs	r2, #210	; 0xd2
 800d0ce:	490e      	ldr	r1, [pc, #56]	; (800d108 <ip_reass_free_complete_datagram+0x144>)
 800d0d0:	4809      	ldr	r0, [pc, #36]	; (800d0f8 <ip_reass_free_complete_datagram+0x134>)
 800d0d2:	f002 f98f 	bl	800f3f4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d0d6:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <ip_reass_free_complete_datagram+0x140>)
 800d0d8:	881a      	ldrh	r2, [r3, #0]
 800d0da:	8bfb      	ldrh	r3, [r7, #30]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	4b08      	ldr	r3, [pc, #32]	; (800d104 <ip_reass_free_complete_datagram+0x140>)
 800d0e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d0e4:	8bfb      	ldrh	r3, [r7, #30]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3720      	adds	r7, #32
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	080115d4 	.word	0x080115d4
 800d0f4:	08011610 	.word	0x08011610
 800d0f8:	0801161c 	.word	0x0801161c
 800d0fc:	08011644 	.word	0x08011644
 800d100:	08011658 	.word	0x08011658
 800d104:	240001dc 	.word	0x240001dc
 800d108:	08011678 	.word	0x08011678

0800d10c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b08a      	sub	sp, #40	; 0x28
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d116:	2300      	movs	r3, #0
 800d118:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d11a:	2300      	movs	r3, #0
 800d11c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d11e:	2300      	movs	r3, #0
 800d120:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d12a:	4b28      	ldr	r3, [pc, #160]	; (800d1cc <ip_reass_remove_oldest_datagram+0xc0>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d130:	e030      	b.n	800d194 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d134:	695a      	ldr	r2, [r3, #20]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d10c      	bne.n	800d158 <ip_reass_remove_oldest_datagram+0x4c>
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	699a      	ldr	r2, [r3, #24]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	429a      	cmp	r2, r3
 800d148:	d106      	bne.n	800d158 <ip_reass_remove_oldest_datagram+0x4c>
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	899a      	ldrh	r2, [r3, #12]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	889b      	ldrh	r3, [r3, #4]
 800d152:	b29b      	uxth	r3, r3
 800d154:	429a      	cmp	r2, r3
 800d156:	d014      	beq.n	800d182 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	3301      	adds	r3, #1
 800d15c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d104      	bne.n	800d16e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	61bb      	str	r3, [r7, #24]
 800d16c:	e009      	b.n	800d182 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d170:	7fda      	ldrb	r2, [r3, #31]
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	7fdb      	ldrb	r3, [r3, #31]
 800d176:	429a      	cmp	r2, r3
 800d178:	d803      	bhi.n	800d182 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1cb      	bne.n	800d132 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d008      	beq.n	800d1b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d1a0:	69b9      	ldr	r1, [r7, #24]
 800d1a2:	6a38      	ldr	r0, [r7, #32]
 800d1a4:	f7ff ff0e 	bl	800cfc4 <ip_reass_free_complete_datagram>
 800d1a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d1b2:	697a      	ldr	r2, [r7, #20]
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	da02      	bge.n	800d1c0 <ip_reass_remove_oldest_datagram+0xb4>
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	dcac      	bgt.n	800d11a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d1c0:	697b      	ldr	r3, [r7, #20]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3728      	adds	r7, #40	; 0x28
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	240001d8 	.word	0x240001d8

0800d1d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d1da:	2001      	movs	r0, #1
 800d1dc:	f7fc fdf8 	bl	8009dd0 <memp_malloc>
 800d1e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d110      	bne.n	800d20a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7ff ff8e 	bl	800d10c <ip_reass_remove_oldest_datagram>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	dc03      	bgt.n	800d200 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d1f8:	2001      	movs	r0, #1
 800d1fa:	f7fc fde9 	bl	8009dd0 <memp_malloc>
 800d1fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	e016      	b.n	800d238 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d20a:	2220      	movs	r2, #32
 800d20c:	2100      	movs	r1, #0
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f002 f8e8 	bl	800f3e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2203      	movs	r2, #3
 800d218:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d21a:	4b09      	ldr	r3, [pc, #36]	; (800d240 <ip_reass_enqueue_new_datagram+0x70>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d222:	4a07      	ldr	r2, [pc, #28]	; (800d240 <ip_reass_enqueue_new_datagram+0x70>)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3308      	adds	r3, #8
 800d22c:	2214      	movs	r2, #20
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	f002 f8cc 	bl	800f3ce <memcpy>
  return ipr;
 800d236:	68fb      	ldr	r3, [r7, #12]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	240001d8 	.word	0x240001d8

0800d244 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d24e:	4b10      	ldr	r3, [pc, #64]	; (800d290 <ip_reass_dequeue_datagram+0x4c>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	429a      	cmp	r2, r3
 800d256:	d104      	bne.n	800d262 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a0c      	ldr	r2, [pc, #48]	; (800d290 <ip_reass_dequeue_datagram+0x4c>)
 800d25e:	6013      	str	r3, [r2, #0]
 800d260:	e00d      	b.n	800d27e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d106      	bne.n	800d276 <ip_reass_dequeue_datagram+0x32>
 800d268:	4b0a      	ldr	r3, [pc, #40]	; (800d294 <ip_reass_dequeue_datagram+0x50>)
 800d26a:	f240 1245 	movw	r2, #325	; 0x145
 800d26e:	490a      	ldr	r1, [pc, #40]	; (800d298 <ip_reass_dequeue_datagram+0x54>)
 800d270:	480a      	ldr	r0, [pc, #40]	; (800d29c <ip_reass_dequeue_datagram+0x58>)
 800d272:	f002 f8bf 	bl	800f3f4 <iprintf>
    prev->next = ipr->next;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	2001      	movs	r0, #1
 800d282:	f7fc fe15 	bl	8009eb0 <memp_free>
}
 800d286:	bf00      	nop
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	240001d8 	.word	0x240001d8
 800d294:	080115d4 	.word	0x080115d4
 800d298:	08011694 	.word	0x08011694
 800d29c:	0801161c 	.word	0x0801161c

0800d2a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08c      	sub	sp, #48	; 0x30
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	885b      	ldrh	r3, [r3, #2]
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7fc f91b 	bl	80094fc <lwip_htons>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	f003 030f 	and.w	r3, r3, #15
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	88db      	ldrh	r3, [r3, #6]
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fc f909 	bl	80094fc <lwip_htons>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	00db      	lsls	r3, r3, #3
 800d2f4:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	2200      	movs	r2, #0
 800d300:	701a      	strb	r2, [r3, #0]
 800d302:	2200      	movs	r2, #0
 800d304:	705a      	strb	r2, [r3, #1]
 800d306:	2200      	movs	r2, #0
 800d308:	709a      	strb	r2, [r3, #2]
 800d30a:	2200      	movs	r2, #0
 800d30c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	8b3a      	ldrh	r2, [r7, #24]
 800d312:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d314:	8b3a      	ldrh	r2, [r7, #24]
 800d316:	8b7b      	ldrh	r3, [r7, #26]
 800d318:	4413      	add	r3, r2
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	627b      	str	r3, [r7, #36]	; 0x24
 800d326:	e061      	b.n	800d3ec <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	889b      	ldrh	r3, [r3, #4]
 800d332:	b29a      	uxth	r2, r3
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	889b      	ldrh	r3, [r3, #4]
 800d338:	b29b      	uxth	r3, r3
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d232      	bcs.n	800d3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d342:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	2b00      	cmp	r3, #0
 800d348:	d01f      	beq.n	800d38a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	889b      	ldrh	r3, [r3, #4]
 800d34e:	b29a      	uxth	r2, r3
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	88db      	ldrh	r3, [r3, #6]
 800d354:	b29b      	uxth	r3, r3
 800d356:	429a      	cmp	r2, r3
 800d358:	f0c0 80e3 	bcc.w	800d522 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35e:	88db      	ldrh	r3, [r3, #6]
 800d360:	b29a      	uxth	r2, r3
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	889b      	ldrh	r3, [r3, #4]
 800d366:	b29b      	uxth	r3, r3
 800d368:	429a      	cmp	r2, r3
 800d36a:	f200 80da 	bhi.w	800d522 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d376:	88db      	ldrh	r3, [r3, #6]
 800d378:	b29a      	uxth	r2, r3
 800d37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37c:	889b      	ldrh	r3, [r3, #4]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	429a      	cmp	r2, r3
 800d382:	d037      	beq.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d384:	2300      	movs	r3, #0
 800d386:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d388:	e034      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	88db      	ldrh	r3, [r3, #6]
 800d38e:	b29a      	uxth	r2, r3
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	889b      	ldrh	r3, [r3, #4]
 800d394:	b29b      	uxth	r3, r3
 800d396:	429a      	cmp	r2, r3
 800d398:	f200 80c5 	bhi.w	800d526 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	605a      	str	r2, [r3, #4]
      break;
 800d3a2:	e027      	b.n	800d3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	889b      	ldrh	r3, [r3, #4]
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	889b      	ldrh	r3, [r3, #4]
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	f000 80ba 	beq.w	800d52a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	889b      	ldrh	r3, [r3, #4]
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	88db      	ldrh	r3, [r3, #6]
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	f0c0 80b3 	bcc.w	800d52e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d009      	beq.n	800d3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	88db      	ldrh	r3, [r3, #6]
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	889b      	ldrh	r3, [r3, #4]
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d001      	beq.n	800d3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d19a      	bne.n	800d328 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d3f2:	e000      	b.n	800d3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d3f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d12d      	bne.n	800d458 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d01c      	beq.n	800d43c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d404:	88db      	ldrh	r3, [r3, #6]
 800d406:	b29a      	uxth	r2, r3
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	889b      	ldrh	r3, [r3, #4]
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	429a      	cmp	r2, r3
 800d410:	d906      	bls.n	800d420 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d412:	4b51      	ldr	r3, [pc, #324]	; (800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d414:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d418:	4950      	ldr	r1, [pc, #320]	; (800d55c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d41a:	4851      	ldr	r0, [pc, #324]	; (800d560 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d41c:	f001 ffea 	bl	800f3f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	88db      	ldrh	r3, [r3, #6]
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	889b      	ldrh	r3, [r3, #4]
 800d430:	b29b      	uxth	r3, r3
 800d432:	429a      	cmp	r2, r3
 800d434:	d010      	beq.n	800d458 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	623b      	str	r3, [r7, #32]
 800d43a:	e00d      	b.n	800d458 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d006      	beq.n	800d452 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d444:	4b44      	ldr	r3, [pc, #272]	; (800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d446:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800d44a:	4946      	ldr	r1, [pc, #280]	; (800d564 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d44c:	4844      	ldr	r0, [pc, #272]	; (800d560 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d44e:	f001 ffd1 	bl	800f3f4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d105      	bne.n	800d46a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	7f9b      	ldrb	r3, [r3, #30]
 800d462:	f003 0301 	and.w	r3, r3, #1
 800d466:	2b00      	cmp	r3, #0
 800d468:	d059      	beq.n	800d51e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d46a:	6a3b      	ldr	r3, [r7, #32]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d04f      	beq.n	800d510 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	889b      	ldrh	r3, [r3, #4]
 800d480:	b29b      	uxth	r3, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	623b      	str	r3, [r7, #32]
 800d48a:	e041      	b.n	800d510 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d496:	e012      	b.n	800d4be <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a0:	88db      	ldrh	r3, [r3, #6]
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	889b      	ldrh	r3, [r3, #4]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d002      	beq.n	800d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	623b      	str	r3, [r7, #32]
            break;
 800d4b2:	e007      	b.n	800d4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1e9      	bne.n	800d498 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d022      	beq.n	800d510 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d4d2:	4b21      	ldr	r3, [pc, #132]	; (800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d4d4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d4d8:	4923      	ldr	r1, [pc, #140]	; (800d568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d4da:	4821      	ldr	r0, [pc, #132]	; (800d560 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d4dc:	f001 ff8a 	bl	800f3f4 <iprintf>
          LWIP_ASSERT("sanity check",
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d106      	bne.n	800d4fa <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d4ec:	4b1a      	ldr	r3, [pc, #104]	; (800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d4ee:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d4f2:	491d      	ldr	r1, [pc, #116]	; (800d568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d4f4:	481a      	ldr	r0, [pc, #104]	; (800d560 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d4f6:	f001 ff7d 	bl	800f3f4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d006      	beq.n	800d510 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d502:	4b15      	ldr	r3, [pc, #84]	; (800d558 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d504:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800d508:	4918      	ldr	r1, [pc, #96]	; (800d56c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d50a:	4815      	ldr	r0, [pc, #84]	; (800d560 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d50c:	f001 ff72 	bl	800f3f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d510:	6a3b      	ldr	r3, [r7, #32]
 800d512:	2b00      	cmp	r3, #0
 800d514:	bf14      	ite	ne
 800d516:	2301      	movne	r3, #1
 800d518:	2300      	moveq	r3, #0
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	e018      	b.n	800d550 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d51e:	2300      	movs	r3, #0
 800d520:	e016      	b.n	800d550 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800d522:	bf00      	nop
 800d524:	e004      	b.n	800d530 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d526:	bf00      	nop
 800d528:	e002      	b.n	800d530 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d52a:	bf00      	nop
 800d52c:	e000      	b.n	800d530 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d52e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d530:	68b8      	ldr	r0, [r7, #8]
 800d532:	f7fd fa9f 	bl	800aa74 <pbuf_clen>
 800d536:	4603      	mov	r3, r0
 800d538:	461a      	mov	r2, r3
 800d53a:	4b0d      	ldr	r3, [pc, #52]	; (800d570 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	1a9b      	subs	r3, r3, r2
 800d540:	b29a      	uxth	r2, r3
 800d542:	4b0b      	ldr	r3, [pc, #44]	; (800d570 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d544:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d546:	68b8      	ldr	r0, [r7, #8]
 800d548:	f7fd fa00 	bl	800a94c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d550:	4618      	mov	r0, r3
 800d552:	3730      	adds	r7, #48	; 0x30
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	080115d4 	.word	0x080115d4
 800d55c:	080116b0 	.word	0x080116b0
 800d560:	0801161c 	.word	0x0801161c
 800d564:	080116d0 	.word	0x080116d0
 800d568:	08011708 	.word	0x08011708
 800d56c:	08011718 	.word	0x08011718
 800d570:	240001dc 	.word	0x240001dc

0800d574 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b08e      	sub	sp, #56	; 0x38
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	f003 030f 	and.w	r3, r3, #15
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	2b14      	cmp	r3, #20
 800d58e:	f040 8131 	bne.w	800d7f4 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	88db      	ldrh	r3, [r3, #6]
 800d596:	b29b      	uxth	r3, r3
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fb ffaf 	bl	80094fc <lwip_htons>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	00db      	lsls	r3, r3, #3
 800d5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	885b      	ldrh	r3, [r3, #2]
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fb ffa3 	bl	80094fc <lwip_htons>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	f003 030f 	and.w	r3, r3, #15
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7fd fa50 	bl	800aa74 <pbuf_clen>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5d8:	4b8e      	ldr	r3, [pc, #568]	; (800d814 <ip4_reass+0x2a0>)
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5e0:	4413      	add	r3, r2
 800d5e2:	2b0a      	cmp	r3, #10
 800d5e4:	dd10      	ble.n	800d608 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d5e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ec:	f7ff fd8e 	bl	800d10c <ip_reass_remove_oldest_datagram>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 8100 	beq.w	800d7f8 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d5f8:	4b86      	ldr	r3, [pc, #536]	; (800d814 <ip4_reass+0x2a0>)
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d600:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d602:	2b0a      	cmp	r3, #10
 800d604:	f300 80f8 	bgt.w	800d7f8 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d608:	4b83      	ldr	r3, [pc, #524]	; (800d818 <ip4_reass+0x2a4>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	633b      	str	r3, [r7, #48]	; 0x30
 800d60e:	e015      	b.n	800d63c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	695a      	ldr	r2, [r3, #20]
 800d614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d10c      	bne.n	800d636 <ip4_reass+0xc2>
 800d61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61e:	699a      	ldr	r2, [r3, #24]
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	429a      	cmp	r2, r3
 800d626:	d106      	bne.n	800d636 <ip4_reass+0xc2>
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	899a      	ldrh	r2, [r3, #12]
 800d62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62e:	889b      	ldrh	r3, [r3, #4]
 800d630:	b29b      	uxth	r3, r3
 800d632:	429a      	cmp	r2, r3
 800d634:	d006      	beq.n	800d644 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	633b      	str	r3, [r7, #48]	; 0x30
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1e6      	bne.n	800d610 <ip4_reass+0x9c>
 800d642:	e000      	b.n	800d646 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d644:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d109      	bne.n	800d660 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d64e:	4619      	mov	r1, r3
 800d650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d652:	f7ff fdbd 	bl	800d1d0 <ip_reass_enqueue_new_datagram>
 800d656:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d11c      	bne.n	800d698 <ip4_reass+0x124>
      goto nullreturn;
 800d65e:	e0d0      	b.n	800d802 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	88db      	ldrh	r3, [r3, #6]
 800d664:	b29b      	uxth	r3, r3
 800d666:	4618      	mov	r0, r3
 800d668:	f7fb ff48 	bl	80094fc <lwip_htons>
 800d66c:	4603      	mov	r3, r0
 800d66e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d672:	2b00      	cmp	r3, #0
 800d674:	d110      	bne.n	800d698 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	89db      	ldrh	r3, [r3, #14]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fb ff3e 	bl	80094fc <lwip_htons>
 800d680:	4603      	mov	r3, r0
 800d682:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d686:	2b00      	cmp	r3, #0
 800d688:	d006      	beq.n	800d698 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	3308      	adds	r3, #8
 800d68e:	2214      	movs	r2, #20
 800d690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d692:	4618      	mov	r0, r3
 800d694:	f001 fe9b 	bl	800f3ce <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	88db      	ldrh	r3, [r3, #6]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	f003 0320 	and.w	r3, r3, #32
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	bf0c      	ite	eq
 800d6a6:	2301      	moveq	r3, #1
 800d6a8:	2300      	movne	r3, #0
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00e      	beq.n	800d6d2 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800d6b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6b8:	4413      	add	r3, r2
 800d6ba:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d6bc:	8b7a      	ldrh	r2, [r7, #26]
 800d6be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	f0c0 809b 	bcc.w	800d7fc <ip4_reass+0x288>
 800d6c6:	8b7b      	ldrh	r3, [r7, #26]
 800d6c8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	f200 8095 	bhi.w	800d7fc <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d6d2:	69fa      	ldr	r2, [r7, #28]
 800d6d4:	6879      	ldr	r1, [r7, #4]
 800d6d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6d8:	f7ff fde2 	bl	800d2a0 <ip_reass_chain_frag_into_datagram_and_validate>
 800d6dc:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6e4:	f000 808c 	beq.w	800d800 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d6e8:	4b4a      	ldr	r3, [pc, #296]	; (800d814 <ip4_reass+0x2a0>)
 800d6ea:	881a      	ldrh	r2, [r3, #0]
 800d6ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6ee:	4413      	add	r3, r2
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	4b48      	ldr	r3, [pc, #288]	; (800d814 <ip4_reass+0x2a0>)
 800d6f4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00d      	beq.n	800d718 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d6fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d700:	4413      	add	r3, r2
 800d702:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	8a7a      	ldrh	r2, [r7, #18]
 800d708:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	7f9b      	ldrb	r3, [r3, #30]
 800d70e:	f043 0301 	orr.w	r3, r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d168      	bne.n	800d7f0 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d720:	8b9b      	ldrh	r3, [r3, #28]
 800d722:	3314      	adds	r3, #20
 800d724:	b29a      	uxth	r2, r3
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73e:	3308      	adds	r3, #8
 800d740:	2214      	movs	r2, #20
 800d742:	4619      	mov	r1, r3
 800d744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d746:	f001 fe42 	bl	800f3ce <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74c:	8b9b      	ldrh	r3, [r3, #28]
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fb fed4 	bl	80094fc <lwip_htons>
 800d754:	4603      	mov	r3, r0
 800d756:	461a      	mov	r2, r3
 800d758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	2200      	movs	r2, #0
 800d760:	719a      	strb	r2, [r3, #6]
 800d762:	2200      	movs	r2, #0
 800d764:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	2200      	movs	r2, #0
 800d76a:	729a      	strb	r2, [r3, #10]
 800d76c:	2200      	movs	r2, #0
 800d76e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d776:	e00e      	b.n	800d796 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d77e:	f06f 0113 	mvn.w	r1, #19
 800d782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d784:	f7fd f8be 	bl	800a904 <pbuf_header>
      pbuf_cat(p, r);
 800d788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f7fd f9ac 	bl	800aae8 <pbuf_cat>
      r = iprh->next_pbuf;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1ed      	bne.n	800d778 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d79c:	4b1e      	ldr	r3, [pc, #120]	; (800d818 <ip4_reass+0x2a4>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d102      	bne.n	800d7ac <ip4_reass+0x238>
      ipr_prev = NULL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	637b      	str	r3, [r7, #52]	; 0x34
 800d7aa:	e010      	b.n	800d7ce <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d7ac:	4b1a      	ldr	r3, [pc, #104]	; (800d818 <ip4_reass+0x2a4>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d7b2:	e007      	b.n	800d7c4 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800d7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d006      	beq.n	800d7cc <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	637b      	str	r3, [r7, #52]	; 0x34
 800d7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1f4      	bne.n	800d7b4 <ip4_reass+0x240>
 800d7ca:	e000      	b.n	800d7ce <ip4_reass+0x25a>
          break;
 800d7cc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d7ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7d2:	f7ff fd37 	bl	800d244 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7fd f94c 	bl	800aa74 <pbuf_clen>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	461a      	mov	r2, r3
 800d7e0:	4b0c      	ldr	r3, [pc, #48]	; (800d814 <ip4_reass+0x2a0>)
 800d7e2:	881b      	ldrh	r3, [r3, #0]
 800d7e4:	1a9b      	subs	r3, r3, r2
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <ip4_reass+0x2a0>)
 800d7ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	e00c      	b.n	800d80a <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e00a      	b.n	800d80a <ip4_reass+0x296>
    goto nullreturn;
 800d7f4:	bf00      	nop
 800d7f6:	e004      	b.n	800d802 <ip4_reass+0x28e>
      goto nullreturn;
 800d7f8:	bf00      	nop
 800d7fa:	e002      	b.n	800d802 <ip4_reass+0x28e>

nullreturn:
 800d7fc:	bf00      	nop
 800d7fe:	e000      	b.n	800d802 <ip4_reass+0x28e>
    goto nullreturn;
 800d800:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f7fd f8a2 	bl	800a94c <pbuf_free>
  return NULL;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3738      	adds	r7, #56	; 0x38
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	240001dc 	.word	0x240001dc
 800d818:	240001d8 	.word	0x240001d8

0800d81c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d820:	2002      	movs	r0, #2
 800d822:	f7fc fad5 	bl	8009dd0 <memp_malloc>
 800d826:	4603      	mov	r3, r0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d83a:	4b07      	ldr	r3, [pc, #28]	; (800d858 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d83c:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d840:	4906      	ldr	r1, [pc, #24]	; (800d85c <ip_frag_free_pbuf_custom_ref+0x30>)
 800d842:	4807      	ldr	r0, [pc, #28]	; (800d860 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d844:	f001 fdd6 	bl	800f3f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d848:	6879      	ldr	r1, [r7, #4]
 800d84a:	2002      	movs	r0, #2
 800d84c:	f7fc fb30 	bl	8009eb0 <memp_free>
}
 800d850:	bf00      	nop
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	080115d4 	.word	0x080115d4
 800d85c:	0801173c 	.word	0x0801173c
 800d860:	0801161c 	.word	0x0801161c

0800d864 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d106      	bne.n	800d884 <ipfrag_free_pbuf_custom+0x20>
 800d876:	4b11      	ldr	r3, [pc, #68]	; (800d8bc <ipfrag_free_pbuf_custom+0x58>)
 800d878:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d87c:	4910      	ldr	r1, [pc, #64]	; (800d8c0 <ipfrag_free_pbuf_custom+0x5c>)
 800d87e:	4811      	ldr	r0, [pc, #68]	; (800d8c4 <ipfrag_free_pbuf_custom+0x60>)
 800d880:	f001 fdb8 	bl	800f3f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d006      	beq.n	800d89a <ipfrag_free_pbuf_custom+0x36>
 800d88c:	4b0b      	ldr	r3, [pc, #44]	; (800d8bc <ipfrag_free_pbuf_custom+0x58>)
 800d88e:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d892:	490d      	ldr	r1, [pc, #52]	; (800d8c8 <ipfrag_free_pbuf_custom+0x64>)
 800d894:	480b      	ldr	r0, [pc, #44]	; (800d8c4 <ipfrag_free_pbuf_custom+0x60>)
 800d896:	f001 fdad 	bl	800f3f4 <iprintf>
  if (pcr->original != NULL) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d004      	beq.n	800d8ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fd f850 	bl	800a94c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f7ff ffbd 	bl	800d82c <ip_frag_free_pbuf_custom_ref>
}
 800d8b2:	bf00      	nop
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	080115d4 	.word	0x080115d4
 800d8c0:	08011748 	.word	0x08011748
 800d8c4:	0801161c 	.word	0x0801161c
 800d8c8:	08011754 	.word	0x08011754

0800d8cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b092      	sub	sp, #72	; 0x48
 800d8d0:	af02      	add	r7, sp, #8
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d8e0:	3b14      	subs	r3, #20
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	da00      	bge.n	800d8e8 <ip4_frag+0x1c>
 800d8e6:	3307      	adds	r3, #7
 800d8e8:	10db      	asrs	r3, r3, #3
 800d8ea:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d8ec:	2314      	movs	r3, #20
 800d8ee:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f8:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	f003 030f 	and.w	r3, r3, #15
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	2b14      	cmp	r3, #20
 800d906:	d009      	beq.n	800d91c <ip4_frag+0x50>
 800d908:	4b79      	ldr	r3, [pc, #484]	; (800daf0 <ip4_frag+0x224>)
 800d90a:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d90e:	4979      	ldr	r1, [pc, #484]	; (800daf4 <ip4_frag+0x228>)
 800d910:	4879      	ldr	r0, [pc, #484]	; (800daf8 <ip4_frag+0x22c>)
 800d912:	f001 fd6f 	bl	800f3f4 <iprintf>
 800d916:	f06f 0305 	mvn.w	r3, #5
 800d91a:	e0e5      	b.n	800dae8 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91e:	88db      	ldrh	r3, [r3, #6]
 800d920:	b29b      	uxth	r3, r3
 800d922:	4618      	mov	r0, r3
 800d924:	f7fb fdea 	bl	80094fc <lwip_htons>
 800d928:	4603      	mov	r3, r0
 800d92a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d92c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d92e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d932:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d934:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d009      	beq.n	800d952 <ip4_frag+0x86>
 800d93e:	4b6c      	ldr	r3, [pc, #432]	; (800daf0 <ip4_frag+0x224>)
 800d940:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d944:	496d      	ldr	r1, [pc, #436]	; (800dafc <ip4_frag+0x230>)
 800d946:	486c      	ldr	r0, [pc, #432]	; (800daf8 <ip4_frag+0x22c>)
 800d948:	f001 fd54 	bl	800f3f4 <iprintf>
 800d94c:	f06f 0305 	mvn.w	r3, #5
 800d950:	e0ca      	b.n	800dae8 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	891b      	ldrh	r3, [r3, #8]
 800d956:	3b14      	subs	r3, #20
 800d958:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d95a:	e0bc      	b.n	800dad6 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d95c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d95e:	00da      	lsls	r2, r3, #3
 800d960:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d962:	4293      	cmp	r3, r2
 800d964:	bfa8      	it	ge
 800d966:	4613      	movge	r3, r2
 800d968:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d96a:	2200      	movs	r2, #0
 800d96c:	2114      	movs	r1, #20
 800d96e:	2002      	movs	r0, #2
 800d970:	f7fc fc7e 	bl	800a270 <pbuf_alloc>
 800d974:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d976:	6a3b      	ldr	r3, [r7, #32]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f000 80b2 	beq.w	800dae2 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	895b      	ldrh	r3, [r3, #10]
 800d982:	2b13      	cmp	r3, #19
 800d984:	d806      	bhi.n	800d994 <ip4_frag+0xc8>
 800d986:	4b5a      	ldr	r3, [pc, #360]	; (800daf0 <ip4_frag+0x224>)
 800d988:	f240 3209 	movw	r2, #777	; 0x309
 800d98c:	495c      	ldr	r1, [pc, #368]	; (800db00 <ip4_frag+0x234>)
 800d98e:	485a      	ldr	r0, [pc, #360]	; (800daf8 <ip4_frag+0x22c>)
 800d990:	f001 fd30 	bl	800f3f4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	2214      	movs	r2, #20
 800d99a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d99c:	4618      	mov	r0, r3
 800d99e:	f001 fd16 	bl	800f3ce <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d9a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d9ac:	e04f      	b.n	800da4e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	895a      	ldrh	r2, [r3, #10]
 800d9b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d9b8:	8b7a      	ldrh	r2, [r7, #26]
 800d9ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	bf28      	it	cs
 800d9c0:	4613      	movcs	r3, r2
 800d9c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d9c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d105      	bne.n	800d9d6 <ip4_frag+0x10a>
        poff = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	60fb      	str	r3, [r7, #12]
        continue;
 800d9d4:	e03b      	b.n	800da4e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d9d6:	f7ff ff21 	bl	800d81c <ip_frag_alloc_pbuf_custom_ref>
 800d9da:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d103      	bne.n	800d9ea <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d9e2:	6a38      	ldr	r0, [r7, #32]
 800d9e4:	f7fc ffb2 	bl	800a94c <pbuf_free>
        goto memerr;
 800d9e8:	e07c      	b.n	800dae4 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d9ea:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d9f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9f2:	4413      	add	r3, r2
 800d9f4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d9f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d9f8:	9201      	str	r2, [sp, #4]
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2202      	movs	r2, #2
 800da00:	2004      	movs	r0, #4
 800da02:	f7fc fdc5 	bl	800a590 <pbuf_alloced_custom>
 800da06:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800da0e:	6978      	ldr	r0, [r7, #20]
 800da10:	f7ff ff0c 	bl	800d82c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800da14:	6a38      	ldr	r0, [r7, #32]
 800da16:	f7fc ff99 	bl	800a94c <pbuf_free>
        goto memerr;
 800da1a:	e063      	b.n	800dae4 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7fd f841 	bl	800aaa4 <pbuf_ref>
      pcr->original = p;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	68fa      	ldr	r2, [r7, #12]
 800da26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	4a36      	ldr	r2, [pc, #216]	; (800db04 <ip4_frag+0x238>)
 800da2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800da2e:	6939      	ldr	r1, [r7, #16]
 800da30:	6a38      	ldr	r0, [r7, #32]
 800da32:	f7fd f859 	bl	800aae8 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800da36:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800da38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800da3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d004      	beq.n	800da4e <ip4_frag+0x182>
        poff = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800da4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1ac      	bne.n	800d9ae <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800da54:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800da58:	4413      	add	r3, r2
 800da5a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800da5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da62:	3b14      	subs	r3, #20
 800da64:	429a      	cmp	r2, r3
 800da66:	bfd4      	ite	le
 800da68:	2301      	movle	r3, #1
 800da6a:	2300      	movgt	r3, #0
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800da70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800da72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da76:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d103      	bne.n	800da86 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800da7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da84:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800da86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fb fd37 	bl	80094fc <lwip_htons>
 800da8e:	4603      	mov	r3, r0
 800da90:	461a      	mov	r2, r3
 800da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800da96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da98:	3314      	adds	r3, #20
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fb fd2d 	bl	80094fc <lwip_htons>
 800daa2:	4603      	mov	r3, r0
 800daa4:	461a      	mov	r2, r3
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	2200      	movs	r2, #0
 800daae:	729a      	strb	r2, [r3, #10]
 800dab0:	2200      	movs	r2, #0
 800dab2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	695b      	ldr	r3, [r3, #20]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	6a39      	ldr	r1, [r7, #32]
 800dabc:	68b8      	ldr	r0, [r7, #8]
 800dabe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dac0:	6a38      	ldr	r0, [r7, #32]
 800dac2:	f7fc ff43 	bl	800a94c <pbuf_free>
    left -= fragsize;
 800dac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800dace:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800dad0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dad2:	4413      	add	r3, r2
 800dad4:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800dad6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dad8:	2b00      	cmp	r3, #0
 800dada:	f47f af3f 	bne.w	800d95c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	e002      	b.n	800dae8 <ip4_frag+0x21c>
      goto memerr;
 800dae2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3740      	adds	r7, #64	; 0x40
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	080115d4 	.word	0x080115d4
 800daf4:	08011760 	.word	0x08011760
 800daf8:	0801161c 	.word	0x0801161c
 800dafc:	08011788 	.word	0x08011788
 800db00:	080117a4 	.word	0x080117a4
 800db04:	0800d865 	.word	0x0800d865

0800db08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800db12:	230e      	movs	r3, #14
 800db14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	895b      	ldrh	r3, [r3, #10]
 800db1a:	2b0e      	cmp	r3, #14
 800db1c:	d977      	bls.n	800dc0e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	7b1a      	ldrb	r2, [r3, #12]
 800db28:	7b5b      	ldrb	r3, [r3, #13]
 800db2a:	021b      	lsls	r3, r3, #8
 800db2c:	4313      	orrs	r3, r2
 800db2e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d023      	beq.n	800db84 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d10f      	bne.n	800db64 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	785b      	ldrb	r3, [r3, #1]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d11b      	bne.n	800db84 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800db50:	2b5e      	cmp	r3, #94	; 0x5e
 800db52:	d117      	bne.n	800db84 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7b5b      	ldrb	r3, [r3, #13]
 800db58:	f043 0310 	orr.w	r3, r3, #16
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	735a      	strb	r2, [r3, #13]
 800db62:	e00f      	b.n	800db84 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2206      	movs	r2, #6
 800db68:	4931      	ldr	r1, [pc, #196]	; (800dc30 <ethernet_input+0x128>)
 800db6a:	4618      	mov	r0, r3
 800db6c:	f001 fc20 	bl	800f3b0 <memcmp>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d106      	bne.n	800db84 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	7b5b      	ldrb	r3, [r3, #13]
 800db7a:	f043 0308 	orr.w	r3, r3, #8
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800db84:	89fb      	ldrh	r3, [r7, #14]
 800db86:	2b08      	cmp	r3, #8
 800db88:	d003      	beq.n	800db92 <ethernet_input+0x8a>
 800db8a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800db8e:	d01e      	beq.n	800dbce <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800db90:	e046      	b.n	800dc20 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db98:	f003 0308 	and.w	r3, r3, #8
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d038      	beq.n	800dc12 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	895b      	ldrh	r3, [r3, #10]
 800dba4:	461a      	mov	r2, r3
 800dba6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	db33      	blt.n	800dc16 <ethernet_input+0x10e>
 800dbae:	8afb      	ldrh	r3, [r7, #22]
 800dbb0:	425b      	negs	r3, r3
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	b21b      	sxth	r3, r3
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7fc fea3 	bl	800a904 <pbuf_header>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d128      	bne.n	800dc16 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f7fe ff84 	bl	800cad4 <ip4_input>
      break;
 800dbcc:	e01d      	b.n	800dc0a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbd4:	f003 0308 	and.w	r3, r3, #8
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d01e      	beq.n	800dc1a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	895b      	ldrh	r3, [r3, #10]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	db19      	blt.n	800dc1e <ethernet_input+0x116>
 800dbea:	8afb      	ldrh	r3, [r7, #22]
 800dbec:	425b      	negs	r3, r3
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	b21b      	sxth	r3, r3
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7fc fe85 	bl	800a904 <pbuf_header>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10e      	bne.n	800dc1e <ethernet_input+0x116>
        etharp_input(p, netif);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f7fe f928 	bl	800be58 <etharp_input>
      break;
 800dc08:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	e00c      	b.n	800dc28 <ethernet_input+0x120>
    goto free_and_return;
 800dc0e:	bf00      	nop
 800dc10:	e006      	b.n	800dc20 <ethernet_input+0x118>
        goto free_and_return;
 800dc12:	bf00      	nop
 800dc14:	e004      	b.n	800dc20 <ethernet_input+0x118>
        goto free_and_return;
 800dc16:	bf00      	nop
 800dc18:	e002      	b.n	800dc20 <ethernet_input+0x118>
        goto free_and_return;
 800dc1a:	bf00      	nop
 800dc1c:	e000      	b.n	800dc20 <ethernet_input+0x118>
        goto free_and_return;
 800dc1e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7fc fe93 	bl	800a94c <pbuf_free>
  return ERR_OK;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	08011980 	.word	0x08011980

0800dc34 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dc42:	8c3b      	ldrh	r3, [r7, #32]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7fb fc59 	bl	80094fc <lwip_htons>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800dc4e:	210e      	movs	r1, #14
 800dc50:	68b8      	ldr	r0, [r7, #8]
 800dc52:	f7fc fe57 	bl	800a904 <pbuf_header>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d125      	bne.n	800dca8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	8afa      	ldrh	r2, [r7, #22]
 800dc66:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	2206      	movs	r2, #6
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f001 fbad 	bl	800f3ce <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	3306      	adds	r3, #6
 800dc78:	2206      	movs	r2, #6
 800dc7a:	6879      	ldr	r1, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f001 fba6 	bl	800f3ce <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc88:	2b06      	cmp	r3, #6
 800dc8a:	d006      	beq.n	800dc9a <ethernet_output+0x66>
 800dc8c:	4b0a      	ldr	r3, [pc, #40]	; (800dcb8 <ethernet_output+0x84>)
 800dc8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800dc92:	490a      	ldr	r1, [pc, #40]	; (800dcbc <ethernet_output+0x88>)
 800dc94:	480a      	ldr	r0, [pc, #40]	; (800dcc0 <ethernet_output+0x8c>)
 800dc96:	f001 fbad 	bl	800f3f4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	699b      	ldr	r3, [r3, #24]
 800dc9e:	68b9      	ldr	r1, [r7, #8]
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	4798      	blx	r3
 800dca4:	4603      	mov	r3, r0
 800dca6:	e002      	b.n	800dcae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800dca8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800dcaa:	f06f 0301 	mvn.w	r3, #1
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3718      	adds	r7, #24
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	080117c4 	.word	0x080117c4
 800dcbc:	080117fc 	.word	0x080117fc
 800dcc0:	08011830 	.word	0x08011830

0800dcc4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the nework interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  if (netif_is_link_up(netif))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dcd2:	089b      	lsrs	r3, r3, #2
 800dcd4:	f003 0301 	and.w	r3, r3, #1
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d006      	beq.n	800dcec <ethernet_link_status_updated+0x28>
#elif defined(USE_LCD)   
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#else
    BSP_LED_On(LED1);
 800dcde:	2000      	movs	r0, #0
 800dce0:	f001 f87c 	bl	800eddc <BSP_LED_On>
    BSP_LED_Off(LED2);
 800dce4:	2001      	movs	r0, #1
 800dce6:	f001 f893 	bl	800ee10 <BSP_LED_Off>
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  } 
}
 800dcea:	e005      	b.n	800dcf8 <ethernet_link_status_updated+0x34>
    BSP_LED_Off(LED1);
 800dcec:	2000      	movs	r0, #0
 800dcee:	f001 f88f 	bl	800ee10 <BSP_LED_Off>
    BSP_LED_On(LED2);
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	f001 f872 	bl	800eddc <BSP_LED_On>
}
 800dcf8:	bf00      	nop
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif 
  * @retval None
  */
void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800dd08:	f7f2 fea4 	bl	8000a54 <HAL_GetTick>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	4b08      	ldr	r3, [pc, #32]	; (800dd30 <Ethernet_Link_Periodic_Handle+0x30>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	2b63      	cmp	r3, #99	; 0x63
 800dd16:	d907      	bls.n	800dd28 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800dd18:	f7f2 fe9c 	bl	8000a54 <HAL_GetTick>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <Ethernet_Link_Periodic_Handle+0x30>)
 800dd20:	601a      	str	r2, [r3, #0]
    ethernet_link_check_state(netif);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fb3c 	bl	800e3a0 <ethernet_link_check_state>
  }
}
 800dd28:	bf00      	nop
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	2400367c 	.word	0x2400367c

0800dd34 <SCB_InvalidateDCache_by_Addr>:
{
 800dd34:	b480      	push	{r7}
 800dd36:	b087      	sub	sp, #28
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800dd46:	2320      	movs	r3, #32
 800dd48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800dd4a:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800dd4e:	e00b      	b.n	800dd68 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800dd50:	4a0c      	ldr	r2, [pc, #48]	; (800dd84 <SCB_InvalidateDCache_by_Addr+0x50>)
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dcf0      	bgt.n	800dd50 <SCB_InvalidateDCache_by_Addr+0x1c>
 800dd6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dd72:	f3bf 8f6f 	isb	sy
}
 800dd76:	bf00      	nop
 800dd78:	371c      	adds	r7, #28
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	e000ed00 	.word	0xe000ed00

0800dd88 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b08e      	sub	sp, #56	; 0x38
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd94:	2200      	movs	r2, #0
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	605a      	str	r2, [r3, #4]
 800dd9a:	609a      	str	r2, [r3, #8]
 800dd9c:	60da      	str	r2, [r3, #12]
 800dd9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a61      	ldr	r2, [pc, #388]	; (800df2c <HAL_ETH_MspInit+0x1a4>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	f040 80bb 	bne.w	800df22 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800ddac:	4b60      	ldr	r3, [pc, #384]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddb2:	4a5f      	ldr	r2, [pc, #380]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddb8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ddbc:	4b5c      	ldr	r3, [pc, #368]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddc6:	623b      	str	r3, [r7, #32]
 800ddc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800ddca:	4b59      	ldr	r3, [pc, #356]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddd0:	4a57      	ldr	r2, [pc, #348]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ddd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ddda:	4b55      	ldr	r3, [pc, #340]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800dddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800dde0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dde4:	61fb      	str	r3, [r7, #28]
 800dde6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800dde8:	4b51      	ldr	r3, [pc, #324]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddee:	4a50      	ldr	r2, [pc, #320]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddf4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800ddf8:	4b4d      	ldr	r3, [pc, #308]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800ddfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ddfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de02:	61bb      	str	r3, [r7, #24]
 800de04:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de06:	4b4a      	ldr	r3, [pc, #296]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de0c:	4a48      	ldr	r2, [pc, #288]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de0e:	f043 0304 	orr.w	r3, r3, #4
 800de12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de16:	4b46      	ldr	r3, [pc, #280]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	617b      	str	r3, [r7, #20]
 800de22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de24:	4b42      	ldr	r3, [pc, #264]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de2a:	4a41      	ldr	r2, [pc, #260]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de2c:	f043 0301 	orr.w	r3, r3, #1
 800de30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de34:	4b3e      	ldr	r3, [pc, #248]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de3a:	f003 0301 	and.w	r3, r3, #1
 800de3e:	613b      	str	r3, [r7, #16]
 800de40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800de42:	4b3b      	ldr	r3, [pc, #236]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de48:	4a39      	ldr	r2, [pc, #228]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de4a:	f043 0302 	orr.w	r3, r3, #2
 800de4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de52:	4b37      	ldr	r3, [pc, #220]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de58:	f003 0302 	and.w	r3, r3, #2
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800de60:	4b33      	ldr	r3, [pc, #204]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de66:	4a32      	ldr	r2, [pc, #200]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800de70:	4b2f      	ldr	r3, [pc, #188]	; (800df30 <HAL_ETH_MspInit+0x1a8>)
 800de72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de7a:	60bb      	str	r3, [r7, #8]
 800de7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800de7e:	2332      	movs	r3, #50	; 0x32
 800de80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de82:	2302      	movs	r3, #2
 800de84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de86:	2300      	movs	r3, #0
 800de88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de8a:	2300      	movs	r3, #0
 800de8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800de8e:	230b      	movs	r3, #11
 800de90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800de92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de96:	4619      	mov	r1, r3
 800de98:	4826      	ldr	r0, [pc, #152]	; (800df34 <HAL_ETH_MspInit+0x1ac>)
 800de9a:	f7f4 ff21 	bl	8002ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800de9e:	2386      	movs	r3, #134	; 0x86
 800dea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dea2:	2302      	movs	r3, #2
 800dea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800deaa:	2300      	movs	r3, #0
 800deac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800deae:	230b      	movs	r3, #11
 800deb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800deb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deb6:	4619      	mov	r1, r3
 800deb8:	481f      	ldr	r0, [pc, #124]	; (800df38 <HAL_ETH_MspInit+0x1b0>)
 800deba:	f7f4 ff11 	bl	8002ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800debe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dec4:	2302      	movs	r3, #2
 800dec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dec8:	2300      	movs	r3, #0
 800deca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800decc:	2300      	movs	r3, #0
 800dece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ded0:	230b      	movs	r3, #11
 800ded2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ded4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ded8:	4619      	mov	r1, r3
 800deda:	4818      	ldr	r0, [pc, #96]	; (800df3c <HAL_ETH_MspInit+0x1b4>)
 800dedc:	f7f4 ff00 	bl	8002ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800dee0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dee6:	2302      	movs	r3, #2
 800dee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deea:	2300      	movs	r3, #0
 800deec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800deee:	2300      	movs	r3, #0
 800def0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800def2:	230b      	movs	r3, #11
 800def4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800def6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800defa:	4619      	mov	r1, r3
 800defc:	4810      	ldr	r0, [pc, #64]	; (800df40 <HAL_ETH_MspInit+0x1b8>)
 800defe:	f7f4 feef 	bl	8002ce0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800df02:	2200      	movs	r2, #0
 800df04:	2100      	movs	r1, #0
 800df06:	203d      	movs	r0, #61	; 0x3d
 800df08:	f7f2 fecc 	bl	8000ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800df0c:	203d      	movs	r0, #61	; 0x3d
 800df0e:	f7f2 fef3 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800df12:	2200      	movs	r2, #0
 800df14:	2100      	movs	r1, #0
 800df16:	203e      	movs	r0, #62	; 0x3e
 800df18:	f7f2 fec4 	bl	8000ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800df1c:	203e      	movs	r0, #62	; 0x3e
 800df1e:	f7f2 feeb 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800df22:	bf00      	nop
 800df24:	3738      	adds	r7, #56	; 0x38
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	40028000 	.word	0x40028000
 800df30:	58024400 	.word	0x58024400
 800df34:	58020800 	.word	0x58020800
 800df38:	58020000 	.word	0x58020000
 800df3c:	58020400 	.word	0x58020400
 800df40:	58021800 	.word	0x58021800

0800df44 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 800df4c:	2300      	movs	r3, #0
 800df4e:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800df50:	4b4a      	ldr	r3, [pc, #296]	; (800e07c <low_level_init+0x138>)
 800df52:	4a4b      	ldr	r2, [pc, #300]	; (800e080 <low_level_init+0x13c>)
 800df54:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800df56:	2300      	movs	r3, #0
 800df58:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800df5a:	2380      	movs	r3, #128	; 0x80
 800df5c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800df5e:	23e1      	movs	r3, #225	; 0xe1
 800df60:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800df62:	2300      	movs	r3, #0
 800df64:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800df66:	2300      	movs	r3, #0
 800df68:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800df6a:	2300      	movs	r3, #0
 800df6c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800df6e:	4a43      	ldr	r2, [pc, #268]	; (800e07c <low_level_init+0x138>)
 800df70:	f107 030c 	add.w	r3, r7, #12
 800df74:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800df76:	4b41      	ldr	r3, [pc, #260]	; (800e07c <low_level_init+0x138>)
 800df78:	2201      	movs	r2, #1
 800df7a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800df7c:	4b3f      	ldr	r3, [pc, #252]	; (800e07c <low_level_init+0x138>)
 800df7e:	4a41      	ldr	r2, [pc, #260]	; (800e084 <low_level_init+0x140>)
 800df80:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800df82:	4b3e      	ldr	r3, [pc, #248]	; (800e07c <low_level_init+0x138>)
 800df84:	4a40      	ldr	r2, [pc, #256]	; (800e088 <low_level_init+0x144>)
 800df86:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800df88:	4b3c      	ldr	r3, [pc, #240]	; (800e07c <low_level_init+0x138>)
 800df8a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800df8e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800df90:	483a      	ldr	r0, [pc, #232]	; (800e07c <low_level_init+0x138>)
 800df92:	f7f3 f881 	bl	8001098 <HAL_ETH_Init>
 800df96:	4603      	mov	r3, r0
 800df98:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800df9a:	2234      	movs	r2, #52	; 0x34
 800df9c:	2100      	movs	r1, #0
 800df9e:	483b      	ldr	r0, [pc, #236]	; (800e08c <low_level_init+0x148>)
 800dfa0:	f001 fa20 	bl	800f3e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800dfa4:	4b39      	ldr	r3, [pc, #228]	; (800e08c <low_level_init+0x148>)
 800dfa6:	2221      	movs	r2, #33	; 0x21
 800dfa8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800dfaa:	4b38      	ldr	r3, [pc, #224]	; (800e08c <low_level_init+0x148>)
 800dfac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800dfb0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800dfb2:	4b36      	ldr	r3, [pc, #216]	; (800e08c <low_level_init+0x148>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800dfb8:	4835      	ldr	r0, [pc, #212]	; (800e090 <low_level_init+0x14c>)
 800dfba:	f7fb fe73 	bl	8009ca4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2206      	movs	r2, #6
 800dfc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800dfc6:	4b2d      	ldr	r3, [pc, #180]	; (800e07c <low_level_init+0x138>)
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	781a      	ldrb	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dfd2:	4b2a      	ldr	r3, [pc, #168]	; (800e07c <low_level_init+0x138>)
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	785a      	ldrb	r2, [r3, #1]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800dfde:	4b27      	ldr	r3, [pc, #156]	; (800e07c <low_level_init+0x138>)
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	789a      	ldrb	r2, [r3, #2]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800dfea:	4b24      	ldr	r3, [pc, #144]	; (800e07c <low_level_init+0x138>)
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	78da      	ldrb	r2, [r3, #3]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800dff6:	4b21      	ldr	r3, [pc, #132]	; (800e07c <low_level_init+0x138>)
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	791a      	ldrb	r2, [r3, #4]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e002:	4b1e      	ldr	r3, [pc, #120]	; (800e07c <low_level_init+0x138>)
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	795a      	ldrb	r2, [r3, #5]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e014:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e01c:	f043 030a 	orr.w	r3, r3, #10
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e028:	2300      	movs	r3, #0
 800e02a:	617b      	str	r3, [r7, #20]
 800e02c:	e00e      	b.n	800e04c <low_level_init+0x108>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	4613      	mov	r3, r2
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	4413      	add	r3, r2
 800e036:	025b      	lsls	r3, r3, #9
 800e038:	4a16      	ldr	r2, [pc, #88]	; (800e094 <low_level_init+0x150>)
 800e03a:	441a      	add	r2, r3
 800e03c:	2300      	movs	r3, #0
 800e03e:	6979      	ldr	r1, [r7, #20]
 800e040:	480e      	ldr	r0, [pc, #56]	; (800e07c <low_level_init+0x138>)
 800e042:	f7f3 f903 	bl	800124c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	3301      	adds	r3, #1
 800e04a:	617b      	str	r3, [r7, #20]
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d9ed      	bls.n	800e02e <low_level_init+0xea>
      
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e052:	4911      	ldr	r1, [pc, #68]	; (800e098 <low_level_init+0x154>)
 800e054:	4811      	ldr	r0, [pc, #68]	; (800e09c <low_level_init+0x158>)
 800e056:	f7f2 fb1b 	bl	8000690 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e05a:	4810      	ldr	r0, [pc, #64]	; (800e09c <low_level_init+0x158>)
 800e05c:	f7f2 fb4a 	bl	80006f4 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e060:	7cfb      	ldrb	r3, [r7, #19]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d103      	bne.n	800e06e <low_level_init+0x12a>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f99a 	bl	800e3a0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800e06c:	e001      	b.n	800e072 <low_level_init+0x12e>
    Error_Handler();
 800e06e:	f000 fded 	bl	800ec4c <Error_Handler>
}
 800e072:	bf00      	nop
 800e074:	3718      	adds	r7, #24
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	2400376c 	.word	0x2400376c
 800e080:	40028000 	.word	0x40028000
 800e084:	30040060 	.word	0x30040060
 800e088:	30040000 	.word	0x30040000
 800e08c:	240037dc 	.word	0x240037dc
 800e090:	08011990 	.word	0x08011990
 800e094:	30040200 	.word	0x30040200
 800e098:	24000008 	.word	0x24000008
 800e09c:	2400374c 	.word	0x2400374c

0800e0a0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b092      	sub	sp, #72	; 0x48
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	647b      	str	r3, [r7, #68]	; 0x44
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e0b8:	f107 0308 	add.w	r3, r7, #8
 800e0bc:	2230      	movs	r2, #48	; 0x30
 800e0be:	2100      	movs	r1, #0
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f001 f98f 	bl	800f3e4 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0ca:	e04f      	b.n	800e16c <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800e0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ce:	2b03      	cmp	r3, #3
 800e0d0:	d902      	bls.n	800e0d8 <low_level_output+0x38>
      return ERR_IF;
 800e0d2:	f06f 030b 	mvn.w	r3, #11
 800e0d6:	e05a      	b.n	800e18e <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800e0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0da:	6859      	ldr	r1, [r3, #4]
 800e0dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0de:	4613      	mov	r3, r2
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	4413      	add	r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e0ea:	4413      	add	r3, r2
 800e0ec:	3b40      	subs	r3, #64	; 0x40
 800e0ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f2:	895b      	ldrh	r3, [r3, #10]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	4413      	add	r3, r2
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e104:	4413      	add	r3, r2
 800e106:	3b3c      	subs	r3, #60	; 0x3c
 800e108:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800e10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e10c:	895b      	ldrh	r3, [r3, #10]
 800e10e:	461a      	mov	r2, r3
 800e110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e112:	4413      	add	r3, r2
 800e114:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800e116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d012      	beq.n	800e142 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e11e:	1e5a      	subs	r2, r3, #1
 800e120:	f107 0008 	add.w	r0, r7, #8
 800e124:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e126:	460b      	mov	r3, r1
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	440b      	add	r3, r1
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	18c1      	adds	r1, r0, r3
 800e130:	4613      	mov	r3, r2
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	4413      	add	r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e13c:	4413      	add	r3, r2
 800e13e:	3b38      	subs	r3, #56	; 0x38
 800e140:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800e142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10a      	bne.n	800e160 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800e14a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e14c:	4613      	mov	r3, r2
 800e14e:	005b      	lsls	r3, r3, #1
 800e150:	4413      	add	r3, r2
 800e152:	009b      	lsls	r3, r3, #2
 800e154:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e158:	4413      	add	r3, r2
 800e15a:	3b38      	subs	r3, #56	; 0x38
 800e15c:	2200      	movs	r2, #0
 800e15e:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800e160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e162:	3301      	adds	r3, #1
 800e164:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1ac      	bne.n	800e0cc <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800e172:	4a09      	ldr	r2, [pc, #36]	; (800e198 <low_level_output+0xf8>)
 800e174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e176:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e178:	4a07      	ldr	r2, [pc, #28]	; (800e198 <low_level_output+0xf8>)
 800e17a:	f107 0308 	add.w	r3, r7, #8
 800e17e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e180:	2214      	movs	r2, #20
 800e182:	4905      	ldr	r1, [pc, #20]	; (800e198 <low_level_output+0xf8>)
 800e184:	4805      	ldr	r0, [pc, #20]	; (800e19c <low_level_output+0xfc>)
 800e186:	f7f3 f94e 	bl	8001426 <HAL_ETH_Transmit>
  
  return errval;
 800e18a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3748      	adds	r7, #72	; 0x48
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	240037dc 	.word	0x240037dc
 800e19c:	2400376c 	.word	0x2400376c

0800e1a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b08a      	sub	sp, #40	; 0x28
 800e1a4:	af02      	add	r7, sp, #8
 800e1a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  
  if (HAL_ETH_IsRxDataAvailable(&heth))
 800e1b0:	481a      	ldr	r0, [pc, #104]	; (800e21c <low_level_input+0x7c>)
 800e1b2:	f7f3 f9c4 	bl	800153e <HAL_ETH_IsRxDataAvailable>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d02a      	beq.n	800e212 <low_level_input+0x72>
  {
    HAL_ETH_GetRxDataBuffer(&heth, &RxBuff);
 800e1bc:	f107 030c 	add.w	r3, r7, #12
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4816      	ldr	r0, [pc, #88]	; (800e21c <low_level_input+0x7c>)
 800e1c4:	f7f3 fa99 	bl	80016fa <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800e1c8:	f107 0308 	add.w	r3, r7, #8
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4813      	ldr	r0, [pc, #76]	; (800e21c <low_level_input+0x7c>)
 800e1d0:	f7f3 fb31 	bl	8001836 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800e1d4:	4811      	ldr	r0, [pc, #68]	; (800e21c <low_level_input+0x7c>)
 800e1d6:	f7f3 fb61 	bl	800189c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	4611      	mov	r1, r2
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7ff fda7 	bl	800dd34 <SCB_InvalidateDCache_by_Addr>
#endif
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e1e6:	480e      	ldr	r0, [pc, #56]	; (800e220 <low_level_input+0x80>)
 800e1e8:	f7fb fdd0 	bl	8009d8c <memp_malloc_pool>
 800e1ec:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800e1ee:	69bb      	ldr	r3, [r7, #24]
 800e1f0:	4a0c      	ldr	r2, [pc, #48]	; (800e224 <low_level_input+0x84>)
 800e1f2:	611a      	str	r2, [r3, #16]
    
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	b299      	uxth	r1, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e1fe:	9201      	str	r2, [sp, #4]
 800e200:	9300      	str	r3, [sp, #0]
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	2202      	movs	r2, #2
 800e206:	2004      	movs	r0, #4
 800e208:	f7fc f9c2 	bl	800a590 <pbuf_alloced_custom>
 800e20c:	61f8      	str	r0, [r7, #28]
    
    return p;
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	e000      	b.n	800e214 <low_level_input+0x74>
  }
  else
  {
    return NULL;
 800e212:	2300      	movs	r3, #0
  }
}
 800e214:	4618      	mov	r0, r3
 800e216:	3720      	adds	r7, #32
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	2400376c 	.word	0x2400376c
 800e220:	08011990 	.word	0x08011990
 800e224:	0800e2c5 	.word	0x0800e2c5

0800e228 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b084      	sub	sp, #16
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f7ff ffb5 	bl	800e1a0 <low_level_input>
 800e236:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d010      	beq.n	800e260 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	6879      	ldr	r1, [r7, #4]
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	4798      	blx	r3
 800e248:	4603      	mov	r3, r0
 800e24a:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800e24c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d006      	beq.n	800e262 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7fc fb79 	bl	800a94c <pbuf_free>
    p = NULL;    
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	e000      	b.n	800e262 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800e260:	bf00      	nop
  }
  
}
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <ethernetif_init+0x1c>
 800e276:	4b0e      	ldr	r3, [pc, #56]	; (800e2b0 <ethernetif_init+0x48>)
 800e278:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 800e27c:	490d      	ldr	r1, [pc, #52]	; (800e2b4 <ethernetif_init+0x4c>)
 800e27e:	480e      	ldr	r0, [pc, #56]	; (800e2b8 <ethernetif_init+0x50>)
 800e280:	f001 f8b8 	bl	800f3f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2273      	movs	r2, #115	; 0x73
 800e288:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2274      	movs	r2, #116	; 0x74
 800e290:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4a09      	ldr	r2, [pc, #36]	; (800e2bc <ethernetif_init+0x54>)
 800e298:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a08      	ldr	r2, [pc, #32]	; (800e2c0 <ethernetif_init+0x58>)
 800e29e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7ff fe4f 	bl	800df44 <low_level_init>

  return ERR_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	08011870 	.word	0x08011870
 800e2b4:	08011884 	.word	0x08011884
 800e2b8:	08011894 	.word	0x08011894
 800e2bc:	0800c0a1 	.word	0x0800c0a1
 800e2c0:	0800e0a1 	.word	0x0800e0a1

0800e2c4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	891b      	ldrh	r3, [r3, #8]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4610      	mov	r0, r2
 800e2dc:	f7ff fd2a 	bl	800dd34 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e2e0:	68f9      	ldr	r1, [r7, #12]
 800e2e2:	4803      	ldr	r0, [pc, #12]	; (800e2f0 <pbuf_free_custom+0x2c>)
 800e2e4:	f7fb fdc0 	bl	8009e68 <memp_free_pool>
}
 800e2e8:	bf00      	nop
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	08011990 	.word	0x08011990

0800e2f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e2f8:	f7f2 fbac 	bl	8000a54 <HAL_GetTick>
 800e2fc:	4603      	mov	r3, r0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	bd80      	pop	{r7, pc}
	...

0800e304 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e308:	4802      	ldr	r0, [pc, #8]	; (800e314 <ETH_PHY_IO_Init+0x10>)
 800e30a:	f7f3 ff01 	bl	8002110 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	bd80      	pop	{r7, pc}
 800e314:	2400376c 	.word	0x2400376c

0800e318 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e318:	b480      	push	{r7}
 800e31a:	af00      	add	r7, sp, #0
  return 0;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	68f9      	ldr	r1, [r7, #12]
 800e33a:	4807      	ldr	r0, [pc, #28]	; (800e358 <ETH_PHY_IO_ReadReg+0x30>)
 800e33c:	f7f3 fc52 	bl	8001be4 <HAL_ETH_ReadPHYRegister>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d002      	beq.n	800e34c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e34a:	e000      	b.n	800e34e <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	2400376c 	.word	0x2400376c

0800e35c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	68f9      	ldr	r1, [r7, #12]
 800e36e:	4807      	ldr	r0, [pc, #28]	; (800e38c <ETH_PHY_IO_WriteReg+0x30>)
 800e370:	f7f3 fc8c 	bl	8001c8c <HAL_ETH_WritePHYRegister>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d002      	beq.n	800e380 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e37e:	e000      	b.n	800e382 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	2400376c 	.word	0x2400376c

0800e390 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e394:	f7f2 fb5e 	bl	8000a54 <HAL_GetTick>
 800e398:	4603      	mov	r3, r0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b0a0      	sub	sp, #128	; 0x80
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	67bb      	str	r3, [r7, #120]	; 0x78
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	677b      	str	r3, [r7, #116]	; 0x74
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e3b4:	483a      	ldr	r0, [pc, #232]	; (800e4a0 <ethernet_link_check_state+0x100>)
 800e3b6:	f7f2 fa44 	bl	8000842 <LAN8742_GetLinkState>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	673b      	str	r3, [r7, #112]	; 0x70
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3c4:	089b      	lsrs	r3, r3, #2
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00c      	beq.n	800e3ea <ethernet_link_check_state+0x4a>
 800e3d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d809      	bhi.n	800e3ea <ethernet_link_check_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 800e3d6:	4833      	ldr	r0, [pc, #204]	; (800e4a4 <ethernet_link_check_state+0x104>)
 800e3d8:	f7f2 ffd5 	bl	8001386 <HAL_ETH_Stop>
    netif_set_down(netif);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7fb fec9 	bl	800a174 <netif_set_down>
    netif_set_link_down(netif);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7fb ff13 	bl	800a20e <netif_set_link_down>
 800e3e8:	e04c      	b.n	800e484 <ethernet_link_check_state+0xe4>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3f0:	f003 0304 	and.w	r3, r3, #4
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d145      	bne.n	800e484 <ethernet_link_check_state+0xe4>
 800e3f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d942      	bls.n	800e484 <ethernet_link_check_state+0xe4>
  {
    switch (PHYLinkState)
 800e3fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e400:	3b02      	subs	r3, #2
 800e402:	2b03      	cmp	r3, #3
 800e404:	d82a      	bhi.n	800e45c <ethernet_link_check_state+0xbc>
 800e406:	a201      	add	r2, pc, #4	; (adr r2, 800e40c <ethernet_link_check_state+0x6c>)
 800e408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e40c:	0800e41d 	.word	0x0800e41d
 800e410:	0800e42f 	.word	0x0800e42f
 800e414:	0800e43f 	.word	0x0800e43f
 800e418:	0800e44f 	.word	0x0800e44f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e41c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e420:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e426:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e428:	2301      	movs	r3, #1
 800e42a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e42c:	e017      	b.n	800e45e <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e42e:	2300      	movs	r3, #0
 800e430:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e432:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e436:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e438:	2301      	movs	r3, #1
 800e43a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e43c:	e00f      	b.n	800e45e <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e43e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e442:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e444:	2300      	movs	r3, #0
 800e446:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e448:	2301      	movs	r3, #1
 800e44a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e44c:	e007      	b.n	800e45e <ethernet_link_check_state+0xbe>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e44e:	2300      	movs	r3, #0
 800e450:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e452:	2300      	movs	r3, #0
 800e454:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e456:	2301      	movs	r3, #1
 800e458:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e45a:	e000      	b.n	800e45e <ethernet_link_check_state+0xbe>
    default:
      break;      
 800e45c:	bf00      	nop
    }
    
    if(linkchanged)
 800e45e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00f      	beq.n	800e484 <ethernet_link_check_state+0xe4>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800e464:	f107 030c 	add.w	r3, r7, #12
 800e468:	4619      	mov	r1, r3
 800e46a:	480e      	ldr	r0, [pc, #56]	; (800e4a4 <ethernet_link_check_state+0x104>)
 800e46c:	f7f3 fc62 	bl	8001d34 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e472:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800e474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e476:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e478:	f107 030c 	add.w	r3, r7, #12
 800e47c:	4619      	mov	r1, r3
 800e47e:	4809      	ldr	r0, [pc, #36]	; (800e4a4 <ethernet_link_check_state+0x104>)
 800e480:	f7f3 fe2c 	bl	80020dc <HAL_ETH_SetMACConfig>
    }
  }
  HAL_ETH_Start(&heth);
 800e484:	4807      	ldr	r0, [pc, #28]	; (800e4a4 <ethernet_link_check_state+0x104>)
 800e486:	f7f2 ff22 	bl	80012ce <HAL_ETH_Start>
  netif_set_up(netif);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f7fb fe2e 	bl	800a0ec <netif_set_up>
  netif_set_link_up(netif);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7fb fe91 	bl	800a1b8 <netif_set_link_up>

/* USER CODE BEGIN ETH link code for User BSP */ 
    
/* USER CODE END ETH link code for User BSP */

}
 800e496:	bf00      	nop
 800e498:	3780      	adds	r7, #128	; 0x80
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	2400374c 	.word	0x2400374c
 800e4a4:	2400376c 	.word	0x2400376c

0800e4a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b08c      	sub	sp, #48	; 0x30
 800e4ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4ae:	f107 031c 	add.w	r3, r7, #28
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	605a      	str	r2, [r3, #4]
 800e4b8:	609a      	str	r2, [r3, #8]
 800e4ba:	60da      	str	r2, [r3, #12]
 800e4bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e4be:	4b53      	ldr	r3, [pc, #332]	; (800e60c <MX_GPIO_Init+0x164>)
 800e4c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4c4:	4a51      	ldr	r2, [pc, #324]	; (800e60c <MX_GPIO_Init+0x164>)
 800e4c6:	f043 0304 	orr.w	r3, r3, #4
 800e4ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e4ce:	4b4f      	ldr	r3, [pc, #316]	; (800e60c <MX_GPIO_Init+0x164>)
 800e4d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4d4:	f003 0304 	and.w	r3, r3, #4
 800e4d8:	61bb      	str	r3, [r7, #24]
 800e4da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e4dc:	4b4b      	ldr	r3, [pc, #300]	; (800e60c <MX_GPIO_Init+0x164>)
 800e4de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4e2:	4a4a      	ldr	r2, [pc, #296]	; (800e60c <MX_GPIO_Init+0x164>)
 800e4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e4ec:	4b47      	ldr	r3, [pc, #284]	; (800e60c <MX_GPIO_Init+0x164>)
 800e4ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4fa:	4b44      	ldr	r3, [pc, #272]	; (800e60c <MX_GPIO_Init+0x164>)
 800e4fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e500:	4a42      	ldr	r2, [pc, #264]	; (800e60c <MX_GPIO_Init+0x164>)
 800e502:	f043 0301 	orr.w	r3, r3, #1
 800e506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e50a:	4b40      	ldr	r3, [pc, #256]	; (800e60c <MX_GPIO_Init+0x164>)
 800e50c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	613b      	str	r3, [r7, #16]
 800e516:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e518:	4b3c      	ldr	r3, [pc, #240]	; (800e60c <MX_GPIO_Init+0x164>)
 800e51a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e51e:	4a3b      	ldr	r2, [pc, #236]	; (800e60c <MX_GPIO_Init+0x164>)
 800e520:	f043 0302 	orr.w	r3, r3, #2
 800e524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e528:	4b38      	ldr	r3, [pc, #224]	; (800e60c <MX_GPIO_Init+0x164>)
 800e52a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e52e:	f003 0302 	and.w	r3, r3, #2
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e536:	4b35      	ldr	r3, [pc, #212]	; (800e60c <MX_GPIO_Init+0x164>)
 800e538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e53c:	4a33      	ldr	r2, [pc, #204]	; (800e60c <MX_GPIO_Init+0x164>)
 800e53e:	f043 0308 	orr.w	r3, r3, #8
 800e542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e546:	4b31      	ldr	r3, [pc, #196]	; (800e60c <MX_GPIO_Init+0x164>)
 800e548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e54c:	f003 0308 	and.w	r3, r3, #8
 800e550:	60bb      	str	r3, [r7, #8]
 800e552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e554:	4b2d      	ldr	r3, [pc, #180]	; (800e60c <MX_GPIO_Init+0x164>)
 800e556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e55a:	4a2c      	ldr	r2, [pc, #176]	; (800e60c <MX_GPIO_Init+0x164>)
 800e55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e564:	4b29      	ldr	r3, [pc, #164]	; (800e60c <MX_GPIO_Init+0x164>)
 800e566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56e:	607b      	str	r3, [r7, #4]
 800e570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800e572:	2200      	movs	r2, #0
 800e574:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800e578:	4825      	ldr	r0, [pc, #148]	; (800e610 <MX_GPIO_Init+0x168>)
 800e57a:	f7f4 fe61 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800e57e:	2200      	movs	r2, #0
 800e580:	2140      	movs	r1, #64	; 0x40
 800e582:	4824      	ldr	r0, [pc, #144]	; (800e614 <MX_GPIO_Init+0x16c>)
 800e584:	f7f4 fe5c 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800e588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e58c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e58e:	4b22      	ldr	r3, [pc, #136]	; (800e618 <MX_GPIO_Init+0x170>)
 800e590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e592:	2300      	movs	r3, #0
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800e596:	f107 031c 	add.w	r3, r7, #28
 800e59a:	4619      	mov	r1, r3
 800e59c:	481f      	ldr	r0, [pc, #124]	; (800e61c <MX_GPIO_Init+0x174>)
 800e59e:	f7f4 fb9f 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800e5a2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800e5a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5b4:	f107 031c 	add.w	r3, r7, #28
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4815      	ldr	r0, [pc, #84]	; (800e610 <MX_GPIO_Init+0x168>)
 800e5bc:	f7f4 fb90 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800e5c0:	2340      	movs	r3, #64	; 0x40
 800e5c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e5d0:	f107 031c 	add.w	r3, r7, #28
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	480f      	ldr	r0, [pc, #60]	; (800e614 <MX_GPIO_Init+0x16c>)
 800e5d8:	f7f4 fb82 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800e5dc:	2380      	movs	r3, #128	; 0x80
 800e5de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e5e8:	f107 031c 	add.w	r3, r7, #28
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4809      	ldr	r0, [pc, #36]	; (800e614 <MX_GPIO_Init+0x16c>)
 800e5f0:	f7f4 fb76 	bl	8002ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	2028      	movs	r0, #40	; 0x28
 800e5fa:	f7f2 fb53 	bl	8000ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e5fe:	2028      	movs	r0, #40	; 0x28
 800e600:	f7f2 fb7a 	bl	8000cf8 <HAL_NVIC_EnableIRQ>

}
 800e604:	bf00      	nop
 800e606:	3730      	adds	r7, #48	; 0x30
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	58024400 	.word	0x58024400
 800e610:	58020400 	.word	0x58020400
 800e614:	58021800 	.word	0x58021800
 800e618:	11110000 	.word	0x11110000
 800e61c:	58020800 	.word	0x58020800

0800e620 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e626:	4b8b      	ldr	r3, [pc, #556]	; (800e854 <MX_LWIP_Init+0x234>)
 800e628:	22c0      	movs	r2, #192	; 0xc0
 800e62a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e62c:	4b89      	ldr	r3, [pc, #548]	; (800e854 <MX_LWIP_Init+0x234>)
 800e62e:	22a8      	movs	r2, #168	; 0xa8
 800e630:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800e632:	4b88      	ldr	r3, [pc, #544]	; (800e854 <MX_LWIP_Init+0x234>)
 800e634:	2200      	movs	r2, #0
 800e636:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800e638:	4b86      	ldr	r3, [pc, #536]	; (800e854 <MX_LWIP_Init+0x234>)
 800e63a:	220a      	movs	r2, #10
 800e63c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e63e:	4b86      	ldr	r3, [pc, #536]	; (800e858 <MX_LWIP_Init+0x238>)
 800e640:	22ff      	movs	r2, #255	; 0xff
 800e642:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e644:	4b84      	ldr	r3, [pc, #528]	; (800e858 <MX_LWIP_Init+0x238>)
 800e646:	22ff      	movs	r2, #255	; 0xff
 800e648:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800e64a:	4b83      	ldr	r3, [pc, #524]	; (800e858 <MX_LWIP_Init+0x238>)
 800e64c:	22ff      	movs	r2, #255	; 0xff
 800e64e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e650:	4b81      	ldr	r3, [pc, #516]	; (800e858 <MX_LWIP_Init+0x238>)
 800e652:	2200      	movs	r2, #0
 800e654:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800e656:	4b81      	ldr	r3, [pc, #516]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e658:	2200      	movs	r2, #0
 800e65a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800e65c:	4b7f      	ldr	r3, [pc, #508]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e65e:	2200      	movs	r2, #0
 800e660:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e662:	4b7e      	ldr	r3, [pc, #504]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e664:	2200      	movs	r2, #0
 800e666:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800e668:	4b7c      	ldr	r3, [pc, #496]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e66a:	2200      	movs	r2, #0
 800e66c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e66e:	f7fb f80c 	bl	800968a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e672:	4b78      	ldr	r3, [pc, #480]	; (800e854 <MX_LWIP_Init+0x234>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	061a      	lsls	r2, r3, #24
 800e678:	4b76      	ldr	r3, [pc, #472]	; (800e854 <MX_LWIP_Init+0x234>)
 800e67a:	785b      	ldrb	r3, [r3, #1]
 800e67c:	041b      	lsls	r3, r3, #16
 800e67e:	431a      	orrs	r2, r3
 800e680:	4b74      	ldr	r3, [pc, #464]	; (800e854 <MX_LWIP_Init+0x234>)
 800e682:	789b      	ldrb	r3, [r3, #2]
 800e684:	021b      	lsls	r3, r3, #8
 800e686:	4313      	orrs	r3, r2
 800e688:	4a72      	ldr	r2, [pc, #456]	; (800e854 <MX_LWIP_Init+0x234>)
 800e68a:	78d2      	ldrb	r2, [r2, #3]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	061a      	lsls	r2, r3, #24
 800e690:	4b70      	ldr	r3, [pc, #448]	; (800e854 <MX_LWIP_Init+0x234>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	0619      	lsls	r1, r3, #24
 800e696:	4b6f      	ldr	r3, [pc, #444]	; (800e854 <MX_LWIP_Init+0x234>)
 800e698:	785b      	ldrb	r3, [r3, #1]
 800e69a:	041b      	lsls	r3, r3, #16
 800e69c:	4319      	orrs	r1, r3
 800e69e:	4b6d      	ldr	r3, [pc, #436]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6a0:	789b      	ldrb	r3, [r3, #2]
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	430b      	orrs	r3, r1
 800e6a6:	496b      	ldr	r1, [pc, #428]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6a8:	78c9      	ldrb	r1, [r1, #3]
 800e6aa:	430b      	orrs	r3, r1
 800e6ac:	021b      	lsls	r3, r3, #8
 800e6ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	4b67      	ldr	r3, [pc, #412]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	0619      	lsls	r1, r3, #24
 800e6ba:	4b66      	ldr	r3, [pc, #408]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6bc:	785b      	ldrb	r3, [r3, #1]
 800e6be:	041b      	lsls	r3, r3, #16
 800e6c0:	4319      	orrs	r1, r3
 800e6c2:	4b64      	ldr	r3, [pc, #400]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6c4:	789b      	ldrb	r3, [r3, #2]
 800e6c6:	021b      	lsls	r3, r3, #8
 800e6c8:	430b      	orrs	r3, r1
 800e6ca:	4962      	ldr	r1, [pc, #392]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6cc:	78c9      	ldrb	r1, [r1, #3]
 800e6ce:	430b      	orrs	r3, r1
 800e6d0:	0a1b      	lsrs	r3, r3, #8
 800e6d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e6d6:	431a      	orrs	r2, r3
 800e6d8:	4b5e      	ldr	r3, [pc, #376]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	0619      	lsls	r1, r3, #24
 800e6de:	4b5d      	ldr	r3, [pc, #372]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6e0:	785b      	ldrb	r3, [r3, #1]
 800e6e2:	041b      	lsls	r3, r3, #16
 800e6e4:	4319      	orrs	r1, r3
 800e6e6:	4b5b      	ldr	r3, [pc, #364]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6e8:	789b      	ldrb	r3, [r3, #2]
 800e6ea:	021b      	lsls	r3, r3, #8
 800e6ec:	430b      	orrs	r3, r1
 800e6ee:	4959      	ldr	r1, [pc, #356]	; (800e854 <MX_LWIP_Init+0x234>)
 800e6f0:	78c9      	ldrb	r1, [r1, #3]
 800e6f2:	430b      	orrs	r3, r1
 800e6f4:	0e1b      	lsrs	r3, r3, #24
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	4a59      	ldr	r2, [pc, #356]	; (800e860 <MX_LWIP_Init+0x240>)
 800e6fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e6fc:	4b56      	ldr	r3, [pc, #344]	; (800e858 <MX_LWIP_Init+0x238>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	061a      	lsls	r2, r3, #24
 800e702:	4b55      	ldr	r3, [pc, #340]	; (800e858 <MX_LWIP_Init+0x238>)
 800e704:	785b      	ldrb	r3, [r3, #1]
 800e706:	041b      	lsls	r3, r3, #16
 800e708:	431a      	orrs	r2, r3
 800e70a:	4b53      	ldr	r3, [pc, #332]	; (800e858 <MX_LWIP_Init+0x238>)
 800e70c:	789b      	ldrb	r3, [r3, #2]
 800e70e:	021b      	lsls	r3, r3, #8
 800e710:	4313      	orrs	r3, r2
 800e712:	4a51      	ldr	r2, [pc, #324]	; (800e858 <MX_LWIP_Init+0x238>)
 800e714:	78d2      	ldrb	r2, [r2, #3]
 800e716:	4313      	orrs	r3, r2
 800e718:	061a      	lsls	r2, r3, #24
 800e71a:	4b4f      	ldr	r3, [pc, #316]	; (800e858 <MX_LWIP_Init+0x238>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	0619      	lsls	r1, r3, #24
 800e720:	4b4d      	ldr	r3, [pc, #308]	; (800e858 <MX_LWIP_Init+0x238>)
 800e722:	785b      	ldrb	r3, [r3, #1]
 800e724:	041b      	lsls	r3, r3, #16
 800e726:	4319      	orrs	r1, r3
 800e728:	4b4b      	ldr	r3, [pc, #300]	; (800e858 <MX_LWIP_Init+0x238>)
 800e72a:	789b      	ldrb	r3, [r3, #2]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	430b      	orrs	r3, r1
 800e730:	4949      	ldr	r1, [pc, #292]	; (800e858 <MX_LWIP_Init+0x238>)
 800e732:	78c9      	ldrb	r1, [r1, #3]
 800e734:	430b      	orrs	r3, r1
 800e736:	021b      	lsls	r3, r3, #8
 800e738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e73c:	431a      	orrs	r2, r3
 800e73e:	4b46      	ldr	r3, [pc, #280]	; (800e858 <MX_LWIP_Init+0x238>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	0619      	lsls	r1, r3, #24
 800e744:	4b44      	ldr	r3, [pc, #272]	; (800e858 <MX_LWIP_Init+0x238>)
 800e746:	785b      	ldrb	r3, [r3, #1]
 800e748:	041b      	lsls	r3, r3, #16
 800e74a:	4319      	orrs	r1, r3
 800e74c:	4b42      	ldr	r3, [pc, #264]	; (800e858 <MX_LWIP_Init+0x238>)
 800e74e:	789b      	ldrb	r3, [r3, #2]
 800e750:	021b      	lsls	r3, r3, #8
 800e752:	430b      	orrs	r3, r1
 800e754:	4940      	ldr	r1, [pc, #256]	; (800e858 <MX_LWIP_Init+0x238>)
 800e756:	78c9      	ldrb	r1, [r1, #3]
 800e758:	430b      	orrs	r3, r1
 800e75a:	0a1b      	lsrs	r3, r3, #8
 800e75c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e760:	431a      	orrs	r2, r3
 800e762:	4b3d      	ldr	r3, [pc, #244]	; (800e858 <MX_LWIP_Init+0x238>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	0619      	lsls	r1, r3, #24
 800e768:	4b3b      	ldr	r3, [pc, #236]	; (800e858 <MX_LWIP_Init+0x238>)
 800e76a:	785b      	ldrb	r3, [r3, #1]
 800e76c:	041b      	lsls	r3, r3, #16
 800e76e:	4319      	orrs	r1, r3
 800e770:	4b39      	ldr	r3, [pc, #228]	; (800e858 <MX_LWIP_Init+0x238>)
 800e772:	789b      	ldrb	r3, [r3, #2]
 800e774:	021b      	lsls	r3, r3, #8
 800e776:	430b      	orrs	r3, r1
 800e778:	4937      	ldr	r1, [pc, #220]	; (800e858 <MX_LWIP_Init+0x238>)
 800e77a:	78c9      	ldrb	r1, [r1, #3]
 800e77c:	430b      	orrs	r3, r1
 800e77e:	0e1b      	lsrs	r3, r3, #24
 800e780:	4313      	orrs	r3, r2
 800e782:	4a38      	ldr	r2, [pc, #224]	; (800e864 <MX_LWIP_Init+0x244>)
 800e784:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e786:	4b35      	ldr	r3, [pc, #212]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	061a      	lsls	r2, r3, #24
 800e78c:	4b33      	ldr	r3, [pc, #204]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e78e:	785b      	ldrb	r3, [r3, #1]
 800e790:	041b      	lsls	r3, r3, #16
 800e792:	431a      	orrs	r2, r3
 800e794:	4b31      	ldr	r3, [pc, #196]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e796:	789b      	ldrb	r3, [r3, #2]
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	4313      	orrs	r3, r2
 800e79c:	4a2f      	ldr	r2, [pc, #188]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e79e:	78d2      	ldrb	r2, [r2, #3]
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	061a      	lsls	r2, r3, #24
 800e7a4:	4b2d      	ldr	r3, [pc, #180]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	0619      	lsls	r1, r3, #24
 800e7aa:	4b2c      	ldr	r3, [pc, #176]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7ac:	785b      	ldrb	r3, [r3, #1]
 800e7ae:	041b      	lsls	r3, r3, #16
 800e7b0:	4319      	orrs	r1, r3
 800e7b2:	4b2a      	ldr	r3, [pc, #168]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7b4:	789b      	ldrb	r3, [r3, #2]
 800e7b6:	021b      	lsls	r3, r3, #8
 800e7b8:	430b      	orrs	r3, r1
 800e7ba:	4928      	ldr	r1, [pc, #160]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7bc:	78c9      	ldrb	r1, [r1, #3]
 800e7be:	430b      	orrs	r3, r1
 800e7c0:	021b      	lsls	r3, r3, #8
 800e7c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7c6:	431a      	orrs	r2, r3
 800e7c8:	4b24      	ldr	r3, [pc, #144]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	0619      	lsls	r1, r3, #24
 800e7ce:	4b23      	ldr	r3, [pc, #140]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7d0:	785b      	ldrb	r3, [r3, #1]
 800e7d2:	041b      	lsls	r3, r3, #16
 800e7d4:	4319      	orrs	r1, r3
 800e7d6:	4b21      	ldr	r3, [pc, #132]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7d8:	789b      	ldrb	r3, [r3, #2]
 800e7da:	021b      	lsls	r3, r3, #8
 800e7dc:	430b      	orrs	r3, r1
 800e7de:	491f      	ldr	r1, [pc, #124]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7e0:	78c9      	ldrb	r1, [r1, #3]
 800e7e2:	430b      	orrs	r3, r1
 800e7e4:	0a1b      	lsrs	r3, r3, #8
 800e7e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e7ea:	431a      	orrs	r2, r3
 800e7ec:	4b1b      	ldr	r3, [pc, #108]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	0619      	lsls	r1, r3, #24
 800e7f2:	4b1a      	ldr	r3, [pc, #104]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7f4:	785b      	ldrb	r3, [r3, #1]
 800e7f6:	041b      	lsls	r3, r3, #16
 800e7f8:	4319      	orrs	r1, r3
 800e7fa:	4b18      	ldr	r3, [pc, #96]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e7fc:	789b      	ldrb	r3, [r3, #2]
 800e7fe:	021b      	lsls	r3, r3, #8
 800e800:	430b      	orrs	r3, r1
 800e802:	4916      	ldr	r1, [pc, #88]	; (800e85c <MX_LWIP_Init+0x23c>)
 800e804:	78c9      	ldrb	r1, [r1, #3]
 800e806:	430b      	orrs	r3, r1
 800e808:	0e1b      	lsrs	r3, r3, #24
 800e80a:	4313      	orrs	r3, r2
 800e80c:	4a16      	ldr	r2, [pc, #88]	; (800e868 <MX_LWIP_Init+0x248>)
 800e80e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e810:	4b16      	ldr	r3, [pc, #88]	; (800e86c <MX_LWIP_Init+0x24c>)
 800e812:	9302      	str	r3, [sp, #8]
 800e814:	4b16      	ldr	r3, [pc, #88]	; (800e870 <MX_LWIP_Init+0x250>)
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	2300      	movs	r3, #0
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	4b12      	ldr	r3, [pc, #72]	; (800e868 <MX_LWIP_Init+0x248>)
 800e81e:	4a11      	ldr	r2, [pc, #68]	; (800e864 <MX_LWIP_Init+0x244>)
 800e820:	490f      	ldr	r1, [pc, #60]	; (800e860 <MX_LWIP_Init+0x240>)
 800e822:	4814      	ldr	r0, [pc, #80]	; (800e874 <MX_LWIP_Init+0x254>)
 800e824:	f7fb fb76 	bl	8009f14 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e828:	4812      	ldr	r0, [pc, #72]	; (800e874 <MX_LWIP_Init+0x254>)
 800e82a:	f7fb fc4f 	bl	800a0cc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e82e:	4b11      	ldr	r3, [pc, #68]	; (800e874 <MX_LWIP_Init+0x254>)
 800e830:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e834:	089b      	lsrs	r3, r3, #2
 800e836:	f003 0301 	and.w	r3, r3, #1
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d003      	beq.n	800e848 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e840:	480c      	ldr	r0, [pc, #48]	; (800e874 <MX_LWIP_Init+0x254>)
 800e842:	f7fb fc53 	bl	800a0ec <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e846:	e002      	b.n	800e84e <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 800e848:	480a      	ldr	r0, [pc, #40]	; (800e874 <MX_LWIP_Init+0x254>)
 800e84a:	f7fb fc93 	bl	800a174 <netif_set_down>
}
 800e84e:	bf00      	nop
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	24003850 	.word	0x24003850
 800e858:	2400384c 	.word	0x2400384c
 800e85c:	24003810 	.word	0x24003810
 800e860:	24003848 	.word	0x24003848
 800e864:	24003854 	.word	0x24003854
 800e868:	24003858 	.word	0x24003858
 800e86c:	0800db09 	.word	0x0800db09
 800e870:	0800e269 	.word	0x0800e269
 800e874:	24003814 	.word	0x24003814

0800e878 <SCB_EnableICache>:
{
 800e878:	b480      	push	{r7}
 800e87a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e87c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e880:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800e884:	4b0b      	ldr	r3, [pc, #44]	; (800e8b4 <SCB_EnableICache+0x3c>)
 800e886:	2200      	movs	r2, #0
 800e888:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800e88c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e890:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800e894:	4b07      	ldr	r3, [pc, #28]	; (800e8b4 <SCB_EnableICache+0x3c>)
 800e896:	695b      	ldr	r3, [r3, #20]
 800e898:	4a06      	ldr	r2, [pc, #24]	; (800e8b4 <SCB_EnableICache+0x3c>)
 800e89a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e89e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e8a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e8a4:	f3bf 8f6f 	isb	sy
}
 800e8a8:	bf00      	nop
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	e000ed00 	.word	0xe000ed00

0800e8b8 <SCB_EnableDCache>:
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800e8be:	4b1d      	ldr	r3, [pc, #116]	; (800e934 <SCB_EnableDCache+0x7c>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800e8c6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800e8ca:	4b1a      	ldr	r3, [pc, #104]	; (800e934 <SCB_EnableDCache+0x7c>)
 800e8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8d0:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	0b5b      	lsrs	r3, r3, #13
 800e8d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e8da:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	08db      	lsrs	r3, r3, #3
 800e8e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8e4:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	015a      	lsls	r2, r3, #5
 800e8ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800e8ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800e8f4:	490f      	ldr	r1, [pc, #60]	; (800e934 <SCB_EnableDCache+0x7c>)
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	1e5a      	subs	r2, r3, #1
 800e900:	60ba      	str	r2, [r7, #8]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1ef      	bne.n	800e8e6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	1e5a      	subs	r2, r3, #1
 800e90a:	60fa      	str	r2, [r7, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1e5      	bne.n	800e8dc <SCB_EnableDCache+0x24>
 800e910:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800e914:	4b07      	ldr	r3, [pc, #28]	; (800e934 <SCB_EnableDCache+0x7c>)
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	4a06      	ldr	r2, [pc, #24]	; (800e934 <SCB_EnableDCache+0x7c>)
 800e91a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e91e:	6153      	str	r3, [r2, #20]
 800e920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e924:	f3bf 8f6f 	isb	sy
}
 800e928:	bf00      	nop
 800e92a:	3714      	adds	r7, #20
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr
 800e934:	e000ed00 	.word	0xe000ed00

0800e938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 800e93c:	f000 f942 	bl	800ebc4 <MPU_Config>
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800e940:	f7ff ff9a 	bl	800e878 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800e944:	f7ff ffb8 	bl	800e8b8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e948:	f7f2 f802 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e94c:	f000 f81c 	bl	800e988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e950:	f7ff fdaa 	bl	800e4a8 <MX_GPIO_Init>
//  MX_MDMA_Init();
  MX_USART3_UART_Init();
 800e954:	f000 fc48 	bl	800f1e8 <MX_USART3_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
  MX_LWIP_Init();
 800e958:	f7ff fe62 	bl	800e620 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	BSP_Config();
 800e95c:	f000 f8e0 	bl	800eb20 <BSP_Config>
	/* Configure the Network interface */
	Netif_Config();
 800e960:	f000 f8fc 	bl	800eb5c <Netif_Config>

	/* UDP client connect */
	udp_echoclient_connect();
 800e964:	f000 fbc4 	bl	800f0f0 <udp_echoclient_connect>
	printf("Start UDP echo client\n");
 800e968:	4805      	ldr	r0, [pc, #20]	; (800e980 <main+0x48>)
 800e96a:	f000 fdb7 	bl	800f4dc <puts>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/* Read a received packet from the Ethernet buffers and send it
	       to the lwIP for handling */
		ethernetif_input(&gnetif);
 800e96e:	4805      	ldr	r0, [pc, #20]	; (800e984 <main+0x4c>)
 800e970:	f7ff fc5a 	bl	800e228 <ethernetif_input>

		/* Handle timeouts */
		sys_check_timeouts();
 800e974:	f7fc fb5e 	bl	800b034 <sys_check_timeouts>

#if LWIP_NETIF_LINK_CALLBACK
		Ethernet_Link_Periodic_Handle(&gnetif);
 800e978:	4802      	ldr	r0, [pc, #8]	; (800e984 <main+0x4c>)
 800e97a:	f7ff f9c1 	bl	800dd00 <Ethernet_Link_Periodic_Handle>
		ethernetif_input(&gnetif);
 800e97e:	e7f6      	b.n	800e96e <main+0x36>
 800e980:	080118bc 	.word	0x080118bc
 800e984:	24003814 	.word	0x24003814

0800e988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b0cc      	sub	sp, #304	; 0x130
 800e98c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e98e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e992:	224c      	movs	r2, #76	; 0x4c
 800e994:	2100      	movs	r1, #0
 800e996:	4618      	mov	r0, r3
 800e998:	f000 fd24 	bl	800f3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e99c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e9a0:	2220      	movs	r2, #32
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f000 fd1d 	bl	800f3e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e9aa:	f107 0308 	add.w	r3, r7, #8
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	23bc      	movs	r3, #188	; 0xbc
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	f000 fd15 	bl	800f3e4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800e9ba:	2002      	movs	r0, #2
 800e9bc:	f7f4 fc8c 	bl	80032d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800e9c0:	1d3b      	adds	r3, r7, #4
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	4b4a      	ldr	r3, [pc, #296]	; (800eaf0 <SystemClock_Config+0x168>)
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	4a49      	ldr	r2, [pc, #292]	; (800eaf0 <SystemClock_Config+0x168>)
 800e9cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e9d0:	6193      	str	r3, [r2, #24]
 800e9d2:	4b47      	ldr	r3, [pc, #284]	; (800eaf0 <SystemClock_Config+0x168>)
 800e9d4:	699b      	ldr	r3, [r3, #24]
 800e9d6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800e9da:	1d3b      	adds	r3, r7, #4
 800e9dc:	601a      	str	r2, [r3, #0]
 800e9de:	4b45      	ldr	r3, [pc, #276]	; (800eaf4 <SystemClock_Config+0x16c>)
 800e9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e2:	4a44      	ldr	r2, [pc, #272]	; (800eaf4 <SystemClock_Config+0x16c>)
 800e9e4:	f043 0301 	orr.w	r3, r3, #1
 800e9e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e9ea:	4b42      	ldr	r3, [pc, #264]	; (800eaf4 <SystemClock_Config+0x16c>)
 800e9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ee:	f003 0201 	and.w	r2, r3, #1
 800e9f2:	1d3b      	adds	r3, r7, #4
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	1d3b      	adds	r3, r7, #4
 800e9f8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800e9fa:	bf00      	nop
 800e9fc:	4b3c      	ldr	r3, [pc, #240]	; (800eaf0 <SystemClock_Config+0x168>)
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea08:	d1f8      	bne.n	800e9fc <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ea10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ea14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ea18:	2302      	movs	r3, #2
 800ea1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ea1e:	2302      	movs	r3, #2
 800ea20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800ea24:	2301      	movs	r3, #1
 800ea26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 800ea2a:	2378      	movs	r3, #120	; 0x78
 800ea2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800ea30:	2302      	movs	r3, #2
 800ea32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800ea36:	2314      	movs	r3, #20
 800ea38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ea3c:	2302      	movs	r3, #2
 800ea3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800ea42:	230c      	movs	r3, #12
 800ea44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ea54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f4 fc91 	bl	8003380 <HAL_RCC_OscConfig>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800ea64:	f000 f8f2 	bl	800ec4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ea68:	233f      	movs	r3, #63	; 0x3f
 800ea6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ea6e:	2303      	movs	r3, #3
 800ea70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800ea74:	2300      	movs	r3, #0
 800ea76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800ea7a:	2308      	movs	r3, #8
 800ea7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800ea80:	2340      	movs	r3, #64	; 0x40
 800ea82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800ea86:	2340      	movs	r3, #64	; 0x40
 800ea88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800ea8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800ea94:	2340      	movs	r3, #64	; 0x40
 800ea96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800ea9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ea9e:	2104      	movs	r1, #4
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7f5 f94d 	bl	8003d40 <HAL_RCC_ClockConfig>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800eaac:	f000 f8ce 	bl	800ec4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800eab0:	f107 0308 	add.w	r3, r7, #8
 800eab4:	4a10      	ldr	r2, [pc, #64]	; (800eaf8 <SystemClock_Config+0x170>)
 800eab6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800eab8:	f107 0308 	add.w	r3, r7, #8
 800eabc:	2200      	movs	r2, #0
 800eabe:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800eac0:	f107 0308 	add.w	r3, r7, #8
 800eac4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800eacc:	f107 0308 	add.w	r3, r7, #8
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7f5 fe4d 	bl	8004770 <HAL_RCCEx_PeriphCLKConfig>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800eadc:	f000 f8b6 	bl	800ec4c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800eae0:	f7f4 fc3e 	bl	8003360 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800eae4:	bf00      	nop
 800eae6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	58024800 	.word	0x58024800
 800eaf4:	58000400 	.word	0x58000400
 800eaf8:	00040002 	.word	0x00040002

0800eafc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800eb04:	1d39      	adds	r1, r7, #4
 800eb06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	4803      	ldr	r0, [pc, #12]	; (800eb1c <__io_putchar+0x20>)
 800eb0e:	f7f7 fdb1 	bl	8006674 <HAL_UART_Transmit>

  return ch;
 800eb12:	687b      	ldr	r3, [r7, #4]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	240038c4 	.word	0x240038c4

0800eb20 <BSP_Config>:

static void BSP_Config(void)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800eb24:	2101      	movs	r1, #1
 800eb26:	2000      	movs	r0, #0
 800eb28:	f000 f98c 	bl	800ee44 <BSP_PB_Init>
  LCD_LOG_SetFooter((uint8_t *)"STM32H743I-EVAL board");

  LCD_UsrLog("  State: Ethernet Initialization ...\n");

#else
  BSP_LED_Init(LED1);
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	f000 f903 	bl	800ed38 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800eb32:	2001      	movs	r0, #1
 800eb34:	f000 f900 	bl	800ed38 <BSP_LED_Init>
#endif
}
 800eb38:	bf00      	nop
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	4603      	mov	r3, r0
 800eb44:	80fb      	strh	r3, [r7, #6]

  if (GPIO_Pin == KEY_BUTTON_PIN)
 800eb46:	88fb      	ldrh	r3, [r7, #6]
 800eb48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb4c:	d101      	bne.n	800eb52 <HAL_GPIO_EXTI_Callback+0x16>
  {
     /* send udp echo */
     udp_echoclient_send();
 800eb4e:	f000 fafd 	bl	800f14c <udp_echoclient_send>
  }
}
 800eb52:	bf00      	nop
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
	...

0800eb5c <Netif_Config>:
 * @brief  Setup the network interface
 * @param  None
 * @retval None
 */
static void Netif_Config(void)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b088      	sub	sp, #32
 800eb60:	af04      	add	r7, sp, #16
	ip_addr_set_zero_ip4(&netmask);
	ip_addr_set_zero_ip4(&gw);
#else

	/* IP address default setting */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800eb62:	4b12      	ldr	r3, [pc, #72]	; (800ebac <Netif_Config+0x50>)
 800eb64:	60fb      	str	r3, [r7, #12]
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 800eb66:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800eb6a:	60bb      	str	r3, [r7, #8]
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800eb6c:	4b10      	ldr	r3, [pc, #64]	; (800ebb0 <Netif_Config+0x54>)
 800eb6e:	607b      	str	r3, [r7, #4]

#endif

	/* add the network interface */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800eb70:	1d38      	adds	r0, r7, #4
 800eb72:	f107 0208 	add.w	r2, r7, #8
 800eb76:	f107 010c 	add.w	r1, r7, #12
 800eb7a:	4b0e      	ldr	r3, [pc, #56]	; (800ebb4 <Netif_Config+0x58>)
 800eb7c:	9302      	str	r3, [sp, #8]
 800eb7e:	4b0e      	ldr	r3, [pc, #56]	; (800ebb8 <Netif_Config+0x5c>)
 800eb80:	9301      	str	r3, [sp, #4]
 800eb82:	2300      	movs	r3, #0
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	4603      	mov	r3, r0
 800eb88:	480c      	ldr	r0, [pc, #48]	; (800ebbc <Netif_Config+0x60>)
 800eb8a:	f7fb f9c3 	bl	8009f14 <netif_add>

	/*  Registers the default network interface */
	netif_set_default(&gnetif);
 800eb8e:	480b      	ldr	r0, [pc, #44]	; (800ebbc <Netif_Config+0x60>)
 800eb90:	f7fb fa9c 	bl	800a0cc <netif_set_default>

	ethernet_link_status_updated(&gnetif);
 800eb94:	4809      	ldr	r0, [pc, #36]	; (800ebbc <Netif_Config+0x60>)
 800eb96:	f7ff f895 	bl	800dcc4 <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800eb9a:	4909      	ldr	r1, [pc, #36]	; (800ebc0 <Netif_Config+0x64>)
 800eb9c:	4807      	ldr	r0, [pc, #28]	; (800ebbc <Netif_Config+0x60>)
 800eb9e:	f7fb fb56 	bl	800a24e <netif_set_link_callback>
#endif
}
 800eba2:	bf00      	nop
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	0a00a8c0 	.word	0x0a00a8c0
 800ebb0:	0100a8c0 	.word	0x0100a8c0
 800ebb4:	0800db09 	.word	0x0800db09
 800ebb8:	0800e269 	.word	0x0800e269
 800ebbc:	24003814 	.word	0x24003814
 800ebc0:	0800dcc5 	.word	0x0800dcc5

0800ebc4 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800ebca:	f7f2 f8b9 	bl	8000d40 <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800ebd2:	4b1c      	ldr	r3, [pc, #112]	; (800ec44 <MPU_Config+0x80>)
 800ebd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800ebd6:	2307      	movs	r3, #7
 800ebd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ebfa:	463b      	mov	r3, r7
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7f2 f8d3 	bl	8000da8 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800ec02:	2301      	movs	r3, #1
 800ec04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 800ec06:	4b10      	ldr	r3, [pc, #64]	; (800ec48 <MPU_Config+0x84>)
 800ec08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800ec0a:	230d      	movs	r3, #13
 800ec0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800ec12:	2300      	movs	r3, #0
 800ec14:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800ec16:	2300      	movs	r3, #0
 800ec18:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800ec22:	2301      	movs	r3, #1
 800ec24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800ec26:	2300      	movs	r3, #0
 800ec28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800ec2e:	463b      	mov	r3, r7
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7f2 f8b9 	bl	8000da8 <HAL_MPU_ConfigRegion>

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
#endif

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800ec36:	2004      	movs	r0, #4
 800ec38:	f7f2 f898 	bl	8000d6c <HAL_MPU_Enable>
}
 800ec3c:	bf00      	nop
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	30040000 	.word	0x30040000
 800ec48:	30044000 	.word	0x30044000

0800ec4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ec50:	bf00      	nop
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800ec5a:	b480      	push	{r7}
 800ec5c:	b083      	sub	sp, #12
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
 800ec62:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ec76:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <HAL_MspInit+0x30>)
 800ec78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec7c:	4a08      	ldr	r2, [pc, #32]	; (800eca0 <HAL_MspInit+0x30>)
 800ec7e:	f043 0302 	orr.w	r3, r3, #2
 800ec82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ec86:	4b06      	ldr	r3, [pc, #24]	; (800eca0 <HAL_MspInit+0x30>)
 800ec88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	607b      	str	r3, [r7, #4]
 800ec92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ec94:	bf00      	nop
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr
 800eca0:	58024400 	.word	0x58024400

0800eca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800eca4:	b480      	push	{r7}
 800eca6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800eca8:	bf00      	nop
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ecb2:	b480      	push	{r7}
 800ecb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ecb6:	e7fe      	b.n	800ecb6 <HardFault_Handler+0x4>

0800ecb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ecbc:	e7fe      	b.n	800ecbc <MemManage_Handler+0x4>

0800ecbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ecbe:	b480      	push	{r7}
 800ecc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ecc2:	e7fe      	b.n	800ecc2 <BusFault_Handler+0x4>

0800ecc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ecc8:	e7fe      	b.n	800ecc8 <UsageFault_Handler+0x4>

0800ecca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ecca:	b480      	push	{r7}
 800eccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ecce:	bf00      	nop
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ecdc:	bf00      	nop
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr

0800ece6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ece6:	b480      	push	{r7}
 800ece8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ecea:	bf00      	nop
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ecf8:	f7f1 fe98 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ecfc:	bf00      	nop
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ed04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ed08:	f7f4 face 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ed0c:	bf00      	nop
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800ed14:	4802      	ldr	r0, [pc, #8]	; (800ed20 <ETH_IRQHandler+0x10>)
 800ed16:	f7f2 fe35 	bl	8001984 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800ed1a:	bf00      	nop
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	2400376c 	.word	0x2400376c

0800ed24 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800ed28:	4802      	ldr	r0, [pc, #8]	; (800ed34 <ETH_WKUP_IRQHandler+0x10>)
 800ed2a:	f7f2 fe2b 	bl	8001984 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800ed2e:	bf00      	nop
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	2400376c 	.word	0x2400376c

0800ed38 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b08a      	sub	sp, #40	; 0x28
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800ed42:	79fb      	ldrb	r3, [r7, #7]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10f      	bne.n	800ed68 <BSP_LED_Init+0x30>
 800ed48:	4b21      	ldr	r3, [pc, #132]	; (800edd0 <BSP_LED_Init+0x98>)
 800ed4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed4e:	4a20      	ldr	r2, [pc, #128]	; (800edd0 <BSP_LED_Init+0x98>)
 800ed50:	f043 0302 	orr.w	r3, r3, #2
 800ed54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed58:	4b1d      	ldr	r3, [pc, #116]	; (800edd0 <BSP_LED_Init+0x98>)
 800ed5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed5e:	f003 0302 	and.w	r3, r3, #2
 800ed62:	613b      	str	r3, [r7, #16]
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	e00e      	b.n	800ed86 <BSP_LED_Init+0x4e>
 800ed68:	4b19      	ldr	r3, [pc, #100]	; (800edd0 <BSP_LED_Init+0x98>)
 800ed6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed6e:	4a18      	ldr	r2, [pc, #96]	; (800edd0 <BSP_LED_Init+0x98>)
 800ed70:	f043 0302 	orr.w	r3, r3, #2
 800ed74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed78:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <BSP_LED_Init+0x98>)
 800ed7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed7e:	f003 0302 	and.w	r3, r3, #2
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	4a12      	ldr	r2, [pc, #72]	; (800edd4 <BSP_LED_Init+0x9c>)
 800ed8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ed90:	2301      	movs	r3, #1
 800ed92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed98:	2303      	movs	r3, #3
 800ed9a:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800ed9c:	79fb      	ldrb	r3, [r7, #7]
 800ed9e:	4a0e      	ldr	r2, [pc, #56]	; (800edd8 <BSP_LED_Init+0xa0>)
 800eda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eda4:	f107 0214 	add.w	r2, r7, #20
 800eda8:	4611      	mov	r1, r2
 800edaa:	4618      	mov	r0, r3
 800edac:	f7f3 ff98 	bl	8002ce0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800edb0:	79fb      	ldrb	r3, [r7, #7]
 800edb2:	4a09      	ldr	r2, [pc, #36]	; (800edd8 <BSP_LED_Init+0xa0>)
 800edb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800edb8:	79fb      	ldrb	r3, [r7, #7]
 800edba:	4a06      	ldr	r2, [pc, #24]	; (800edd4 <BSP_LED_Init+0x9c>)
 800edbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edc0:	2200      	movs	r2, #0
 800edc2:	4619      	mov	r1, r3
 800edc4:	f7f4 fa3c 	bl	8003240 <HAL_GPIO_WritePin>
}
 800edc8:	bf00      	nop
 800edca:	3728      	adds	r7, #40	; 0x28
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	58024400 	.word	0x58024400
 800edd4:	080119a0 	.word	0x080119a0
 800edd8:	2400001c 	.word	0x2400001c

0800eddc <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800ede6:	79fb      	ldrb	r3, [r7, #7]
 800ede8:	4a07      	ldr	r2, [pc, #28]	; (800ee08 <BSP_LED_On+0x2c>)
 800edea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	4a06      	ldr	r2, [pc, #24]	; (800ee0c <BSP_LED_On+0x30>)
 800edf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edf6:	2201      	movs	r2, #1
 800edf8:	4619      	mov	r1, r3
 800edfa:	f7f4 fa21 	bl	8003240 <HAL_GPIO_WritePin>
}
 800edfe:	bf00      	nop
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	2400001c 	.word	0x2400001c
 800ee0c:	080119a0 	.word	0x080119a0

0800ee10 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	4a07      	ldr	r2, [pc, #28]	; (800ee3c <BSP_LED_Off+0x2c>)
 800ee1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	4a06      	ldr	r2, [pc, #24]	; (800ee40 <BSP_LED_Off+0x30>)
 800ee26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	f7f4 fa07 	bl	8003240 <HAL_GPIO_WritePin>
}
 800ee32:	bf00      	nop
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	2400001c 	.word	0x2400001c
 800ee40:	080119a0 	.word	0x080119a0

0800ee44 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b088      	sub	sp, #32
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	460a      	mov	r2, r1
 800ee4e:	71fb      	strb	r3, [r7, #7]
 800ee50:	4613      	mov	r3, r2
 800ee52:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800ee54:	4b24      	ldr	r3, [pc, #144]	; (800eee8 <BSP_PB_Init+0xa4>)
 800ee56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee5a:	4a23      	ldr	r2, [pc, #140]	; (800eee8 <BSP_PB_Init+0xa4>)
 800ee5c:	f043 0304 	orr.w	r3, r3, #4
 800ee60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee64:	4b20      	ldr	r3, [pc, #128]	; (800eee8 <BSP_PB_Init+0xa4>)
 800ee66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee6a:	f003 0304 	and.w	r3, r3, #4
 800ee6e:	60bb      	str	r3, [r7, #8]
 800ee70:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800ee72:	79bb      	ldrb	r3, [r7, #6]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d112      	bne.n	800ee9e <BSP_PB_Init+0x5a>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800ee78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ee82:	2302      	movs	r3, #2
 800ee84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee86:	2303      	movs	r3, #3
 800ee88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800ee8a:	79fb      	ldrb	r3, [r7, #7]
 800ee8c:	4a17      	ldr	r2, [pc, #92]	; (800eeec <BSP_PB_Init+0xa8>)
 800ee8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee92:	f107 020c 	add.w	r2, r7, #12
 800ee96:	4611      	mov	r1, r2
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7f3 ff21 	bl	8002ce0 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 800ee9e:	79bb      	ldrb	r3, [r7, #6]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d11c      	bne.n	800eede <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800eea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eea8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800eeae:	4b10      	ldr	r3, [pc, #64]	; (800eef0 <BSP_PB_Init+0xac>)
 800eeb0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800eeb2:	79fb      	ldrb	r3, [r7, #7]
 800eeb4:	4a0d      	ldr	r2, [pc, #52]	; (800eeec <BSP_PB_Init+0xa8>)
 800eeb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeba:	f107 020c 	add.w	r2, r7, #12
 800eebe:	4611      	mov	r1, r2
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f3 ff0d 	bl	8002ce0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800eec6:	2328      	movs	r3, #40	; 0x28
 800eec8:	b21b      	sxth	r3, r3
 800eeca:	2200      	movs	r2, #0
 800eecc:	210f      	movs	r1, #15
 800eece:	4618      	mov	r0, r3
 800eed0:	f7f1 fee8 	bl	8000ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800eed4:	2328      	movs	r3, #40	; 0x28
 800eed6:	b21b      	sxth	r3, r3
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7f1 ff0d 	bl	8000cf8 <HAL_NVIC_EnableIRQ>
  }
}
 800eede:	bf00      	nop
 800eee0:	3720      	adds	r7, #32
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	58024400 	.word	0x58024400
 800eeec:	24000028 	.word	0x24000028
 800eef0:	11210000 	.word	0x11210000

0800eef4 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ef00:	2300      	movs	r3, #0
 800ef02:	617b      	str	r3, [r7, #20]
 800ef04:	e009      	b.n	800ef1a <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	1c5a      	adds	r2, r3, #1
 800ef0a:	60ba      	str	r2, [r7, #8]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7ff fdf4 	bl	800eafc <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	3301      	adds	r3, #1
 800ef18:	617b      	str	r3, [r7, #20]
 800ef1a:	697a      	ldr	r2, [r7, #20]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	dbf1      	blt.n	800ef06 <_write+0x12>
		}
	return len;
 800ef22:	687b      	ldr	r3, [r7, #4]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3718      	adds	r7, #24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <_close>:

int _close(int file)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
	return -1;
 800ef34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <_fstat>:

int _fstat(int file, struct stat *st)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ef54:	605a      	str	r2, [r3, #4]
	return 0;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <_isatty>:

int _isatty(int file)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
	return 1;
 800ef6c:	2301      	movs	r3, #1
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	370c      	adds	r7, #12
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b085      	sub	sp, #20
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	60f8      	str	r0, [r7, #12]
 800ef82:	60b9      	str	r1, [r7, #8]
 800ef84:	607a      	str	r2, [r7, #4]
	return 0;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3714      	adds	r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <_read>:

int _read(int file, char *ptr, int len)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800efa0:	2300      	movs	r3, #0
 800efa2:	617b      	str	r3, [r7, #20]
 800efa4:	e00a      	b.n	800efbc <_read+0x28>
	{
	  *ptr++ = __io_getchar();
 800efa6:	f3af 8000 	nop.w
 800efaa:	4601      	mov	r1, r0
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	1c5a      	adds	r2, r3, #1
 800efb0:	60ba      	str	r2, [r7, #8]
 800efb2:	b2ca      	uxtb	r2, r1
 800efb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	3301      	adds	r3, #1
 800efba:	617b      	str	r3, [r7, #20]
 800efbc:	697a      	ldr	r2, [r7, #20]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	dbf0      	blt.n	800efa6 <_read+0x12>
	}

   return len;
 800efc4:	687b      	ldr	r3, [r7, #4]
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3718      	adds	r7, #24
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
	...

0800efd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800efd8:	4b11      	ldr	r3, [pc, #68]	; (800f020 <_sbrk+0x50>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d102      	bne.n	800efe6 <_sbrk+0x16>
		heap_end = &end;
 800efe0:	4b0f      	ldr	r3, [pc, #60]	; (800f020 <_sbrk+0x50>)
 800efe2:	4a10      	ldr	r2, [pc, #64]	; (800f024 <_sbrk+0x54>)
 800efe4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800efe6:	4b0e      	ldr	r3, [pc, #56]	; (800f020 <_sbrk+0x50>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800efec:	4b0c      	ldr	r3, [pc, #48]	; (800f020 <_sbrk+0x50>)
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4413      	add	r3, r2
 800eff4:	466a      	mov	r2, sp
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d905      	bls.n	800f006 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800effa:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <_sbrk+0x58>)
 800effc:	220c      	movs	r2, #12
 800effe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800f000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f004:	e006      	b.n	800f014 <_sbrk+0x44>
	}

	heap_end += incr;
 800f006:	4b06      	ldr	r3, [pc, #24]	; (800f020 <_sbrk+0x50>)
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4413      	add	r3, r2
 800f00e:	4a04      	ldr	r2, [pc, #16]	; (800f020 <_sbrk+0x50>)
 800f010:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800f012:	68fb      	ldr	r3, [r7, #12]
}
 800f014:	4618      	mov	r0, r3
 800f016:	3714      	adds	r7, #20
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr
 800f020:	240001e4 	.word	0x240001e4
 800f024:	24003958 	.word	0x24003958
 800f028:	24003950 	.word	0x24003950

0800f02c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800f02c:	b480      	push	{r7}
 800f02e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f030:	4b29      	ldr	r3, [pc, #164]	; (800f0d8 <SystemInit+0xac>)
 800f032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f036:	4a28      	ldr	r2, [pc, #160]	; (800f0d8 <SystemInit+0xac>)
 800f038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f03c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800f040:	4b26      	ldr	r3, [pc, #152]	; (800f0dc <SystemInit+0xb0>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a25      	ldr	r2, [pc, #148]	; (800f0dc <SystemInit+0xb0>)
 800f046:	f043 0301 	orr.w	r3, r3, #1
 800f04a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f04c:	4b23      	ldr	r3, [pc, #140]	; (800f0dc <SystemInit+0xb0>)
 800f04e:	2200      	movs	r2, #0
 800f050:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800f052:	4b22      	ldr	r3, [pc, #136]	; (800f0dc <SystemInit+0xb0>)
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	4921      	ldr	r1, [pc, #132]	; (800f0dc <SystemInit+0xb0>)
 800f058:	4b21      	ldr	r3, [pc, #132]	; (800f0e0 <SystemInit+0xb4>)
 800f05a:	4013      	ands	r3, r2
 800f05c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800f05e:	4b1f      	ldr	r3, [pc, #124]	; (800f0dc <SystemInit+0xb0>)
 800f060:	2200      	movs	r2, #0
 800f062:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800f064:	4b1d      	ldr	r3, [pc, #116]	; (800f0dc <SystemInit+0xb0>)
 800f066:	2200      	movs	r2, #0
 800f068:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800f06a:	4b1c      	ldr	r3, [pc, #112]	; (800f0dc <SystemInit+0xb0>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800f070:	4b1a      	ldr	r3, [pc, #104]	; (800f0dc <SystemInit+0xb0>)
 800f072:	2200      	movs	r2, #0
 800f074:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800f076:	4b19      	ldr	r3, [pc, #100]	; (800f0dc <SystemInit+0xb0>)
 800f078:	2200      	movs	r2, #0
 800f07a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800f07c:	4b17      	ldr	r3, [pc, #92]	; (800f0dc <SystemInit+0xb0>)
 800f07e:	2200      	movs	r2, #0
 800f080:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800f082:	4b16      	ldr	r3, [pc, #88]	; (800f0dc <SystemInit+0xb0>)
 800f084:	2200      	movs	r2, #0
 800f086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800f088:	4b14      	ldr	r3, [pc, #80]	; (800f0dc <SystemInit+0xb0>)
 800f08a:	2200      	movs	r2, #0
 800f08c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800f08e:	4b13      	ldr	r3, [pc, #76]	; (800f0dc <SystemInit+0xb0>)
 800f090:	2200      	movs	r2, #0
 800f092:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800f094:	4b11      	ldr	r3, [pc, #68]	; (800f0dc <SystemInit+0xb0>)
 800f096:	2200      	movs	r2, #0
 800f098:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800f09a:	4b10      	ldr	r3, [pc, #64]	; (800f0dc <SystemInit+0xb0>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f0a0:	4b0e      	ldr	r3, [pc, #56]	; (800f0dc <SystemInit+0xb0>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a0d      	ldr	r2, [pc, #52]	; (800f0dc <SystemInit+0xb0>)
 800f0a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f0aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800f0ac:	4b0b      	ldr	r3, [pc, #44]	; (800f0dc <SystemInit+0xb0>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800f0b2:	4b0c      	ldr	r3, [pc, #48]	; (800f0e4 <SystemInit+0xb8>)
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	4b0c      	ldr	r3, [pc, #48]	; (800f0e8 <SystemInit+0xbc>)
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0be:	d202      	bcs.n	800f0c6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	; (800f0ec <SystemInit+0xc0>)
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f0c6:	4b04      	ldr	r3, [pc, #16]	; (800f0d8 <SystemInit+0xac>)
 800f0c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f0cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800f0ce:	bf00      	nop
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	e000ed00 	.word	0xe000ed00
 800f0dc:	58024400 	.word	0x58024400
 800f0e0:	eaf6ed7f 	.word	0xeaf6ed7f
 800f0e4:	5c001000 	.word	0x5c001000
 800f0e8:	ffff0000 	.word	0xffff0000
 800f0ec:	51008108 	.word	0x51008108

0800f0f0 <udp_echoclient_connect>:
  * @brief  Connect to UDP echo server
  * @param  None
  * @retval None
  */
void udp_echoclient_connect(void)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
  ip_addr_t DestIPaddr;
  err_t err;
  
  /* Create a new UDP control block  */
  upcb = udp_new();
 800f0f6:	f7fc fb3f 	bl	800b778 <udp_new>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	4b10      	ldr	r3, [pc, #64]	; (800f140 <udp_echoclient_connect+0x50>)
 800f0fe:	601a      	str	r2, [r3, #0]
  
  if (upcb!=NULL)
 800f100:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <udp_echoclient_connect+0x50>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d016      	beq.n	800f136 <udp_echoclient_connect+0x46>
  {
    /*assign destination IP address */
    IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 800f108:	4b0e      	ldr	r3, [pc, #56]	; (800f144 <udp_echoclient_connect+0x54>)
 800f10a:	603b      	str	r3, [r7, #0]
    
    /* configure destination IP address and port */
    err= udp_connect(upcb, &DestIPaddr, UDP_SERVER_PORT);
 800f10c:	4b0c      	ldr	r3, [pc, #48]	; (800f140 <udp_echoclient_connect+0x50>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4639      	mov	r1, r7
 800f112:	f641 6261 	movw	r2, #7777	; 0x1e61
 800f116:	4618      	mov	r0, r3
 800f118:	f7fc fac6 	bl	800b6a8 <udp_connect>
 800f11c:	4603      	mov	r3, r0
 800f11e:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 800f120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d106      	bne.n	800f136 <udp_echoclient_connect+0x46>
    {
      /* Set a receive callback for the upcb */
      udp_recv(upcb, udp_receive_callback, NULL);  
 800f128:	4b05      	ldr	r3, [pc, #20]	; (800f140 <udp_echoclient_connect+0x50>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2200      	movs	r2, #0
 800f12e:	4906      	ldr	r1, [pc, #24]	; (800f148 <udp_echoclient_connect+0x58>)
 800f130:	4618      	mov	r0, r3
 800f132:	f7fc fb0f 	bl	800b754 <udp_recv>
    }
  }
}
 800f136:	bf00      	nop
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	2400385c 	.word	0x2400385c
 800f144:	0e00a8c0 	.word	0x0e00a8c0
 800f148:	0800f1bd 	.word	0x0800f1bd

0800f14c <udp_echoclient_send>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoclient_send(void)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
  struct pbuf *p;
  
  sprintf((char*)data, "sending udp client message %d", (int)message_count);
 800f152:	4b16      	ldr	r3, [pc, #88]	; (800f1ac <udp_echoclient_send+0x60>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	461a      	mov	r2, r3
 800f158:	4915      	ldr	r1, [pc, #84]	; (800f1b0 <udp_echoclient_send+0x64>)
 800f15a:	4816      	ldr	r0, [pc, #88]	; (800f1b4 <udp_echoclient_send+0x68>)
 800f15c:	f000 f9c6 	bl	800f4ec <siprintf>
  
  /* allocate pbuf from pool*/
  p = pbuf_alloc(PBUF_TRANSPORT,strlen((char*)data), PBUF_RAM);
 800f160:	4814      	ldr	r0, [pc, #80]	; (800f1b4 <udp_echoclient_send+0x68>)
 800f162:	f7f1 f8bd 	bl	80002e0 <strlen>
 800f166:	4603      	mov	r3, r0
 800f168:	b29b      	uxth	r3, r3
 800f16a:	2200      	movs	r2, #0
 800f16c:	4619      	mov	r1, r3
 800f16e:	2000      	movs	r0, #0
 800f170:	f7fb f87e 	bl	800a270 <pbuf_alloc>
 800f174:	6078      	str	r0, [r7, #4]
  
  if (p != NULL)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d012      	beq.n	800f1a2 <udp_echoclient_send+0x56>
  {
    /* copy data to pbuf */
    pbuf_take(p, (char*)data, strlen((char*)data));
 800f17c:	480d      	ldr	r0, [pc, #52]	; (800f1b4 <udp_echoclient_send+0x68>)
 800f17e:	f7f1 f8af 	bl	80002e0 <strlen>
 800f182:	4603      	mov	r3, r0
 800f184:	b29b      	uxth	r3, r3
 800f186:	461a      	mov	r2, r3
 800f188:	490a      	ldr	r1, [pc, #40]	; (800f1b4 <udp_echoclient_send+0x68>)
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7fb fdde 	bl	800ad4c <pbuf_take>
    
    /* send udp data */
    udp_send(upcb, p); 
 800f190:	4b09      	ldr	r3, [pc, #36]	; (800f1b8 <udp_echoclient_send+0x6c>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6879      	ldr	r1, [r7, #4]
 800f196:	4618      	mov	r0, r3
 800f198:	f7fc f8fc 	bl	800b394 <udp_send>
    
    /* free pbuf */
    pbuf_free(p);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7fb fbd5 	bl	800a94c <pbuf_free>
  }
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	240001e8 	.word	0x240001e8
 800f1b0:	080118d4 	.word	0x080118d4
 800f1b4:	24003860 	.word	0x24003860
 800f1b8:	2400385c 	.word	0x2400385c

0800f1bc <udp_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	603b      	str	r3, [r7, #0]
  /*increment message count */
  message_count++;
 800f1ca:	4b06      	ldr	r3, [pc, #24]	; (800f1e4 <udp_receive_callback+0x28>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	4a04      	ldr	r2, [pc, #16]	; (800f1e4 <udp_receive_callback+0x28>)
 800f1d2:	6013      	str	r3, [r2, #0]
  
  /* Free receive pbuf */
  pbuf_free(p);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7fb fbb9 	bl	800a94c <pbuf_free>
}
 800f1da:	bf00      	nop
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	240001e8 	.word	0x240001e8

0800f1e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800f1ec:	4b22      	ldr	r3, [pc, #136]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f1ee:	4a23      	ldr	r2, [pc, #140]	; (800f27c <MX_USART3_UART_Init+0x94>)
 800f1f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800f1f2:	4b21      	ldr	r3, [pc, #132]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f1f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f1f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800f1fa:	4b1f      	ldr	r3, [pc, #124]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800f200:	4b1d      	ldr	r3, [pc, #116]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f202:	2200      	movs	r2, #0
 800f204:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800f206:	4b1c      	ldr	r3, [pc, #112]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f208:	2200      	movs	r2, #0
 800f20a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800f20c:	4b1a      	ldr	r3, [pc, #104]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f20e:	220c      	movs	r2, #12
 800f210:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f212:	4b19      	ldr	r3, [pc, #100]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f214:	2200      	movs	r2, #0
 800f216:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800f218:	4b17      	ldr	r3, [pc, #92]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800f21e:	4b16      	ldr	r3, [pc, #88]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f220:	2200      	movs	r2, #0
 800f222:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800f224:	4b14      	ldr	r3, [pc, #80]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f226:	2200      	movs	r2, #0
 800f228:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800f22a:	4b13      	ldr	r3, [pc, #76]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f22c:	2200      	movs	r2, #0
 800f22e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800f230:	4811      	ldr	r0, [pc, #68]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f232:	f7f7 f951 	bl	80064d8 <HAL_UART_Init>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800f23c:	f7ff fd06 	bl	800ec4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f240:	2100      	movs	r1, #0
 800f242:	480d      	ldr	r0, [pc, #52]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f244:	f7f9 ffbe 	bl	80091c4 <HAL_UARTEx_SetTxFifoThreshold>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d001      	beq.n	800f252 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800f24e:	f7ff fcfd 	bl	800ec4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800f252:	2100      	movs	r1, #0
 800f254:	4808      	ldr	r0, [pc, #32]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f256:	f7fa f84f 	bl	80092f8 <HAL_UARTEx_SetRxFifoThreshold>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d001      	beq.n	800f264 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800f260:	f7ff fcf4 	bl	800ec4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800f264:	4804      	ldr	r0, [pc, #16]	; (800f278 <MX_USART3_UART_Init+0x90>)
 800f266:	f7f9 ff37 	bl	80090d8 <HAL_UARTEx_DisableFifoMode>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800f270:	f7ff fcec 	bl	800ec4c <Error_Handler>
  }

}
 800f274:	bf00      	nop
 800f276:	bd80      	pop	{r7, pc}
 800f278:	240038c4 	.word	0x240038c4
 800f27c:	40004800 	.word	0x40004800

0800f280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b08a      	sub	sp, #40	; 0x28
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f288:	f107 0314 	add.w	r3, r7, #20
 800f28c:	2200      	movs	r2, #0
 800f28e:	601a      	str	r2, [r3, #0]
 800f290:	605a      	str	r2, [r3, #4]
 800f292:	609a      	str	r2, [r3, #8]
 800f294:	60da      	str	r2, [r3, #12]
 800f296:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a1a      	ldr	r2, [pc, #104]	; (800f308 <HAL_UART_MspInit+0x88>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d12e      	bne.n	800f300 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800f2a2:	4b1a      	ldr	r3, [pc, #104]	; (800f30c <HAL_UART_MspInit+0x8c>)
 800f2a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f2a8:	4a18      	ldr	r2, [pc, #96]	; (800f30c <HAL_UART_MspInit+0x8c>)
 800f2aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f2ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800f2b2:	4b16      	ldr	r3, [pc, #88]	; (800f30c <HAL_UART_MspInit+0x8c>)
 800f2b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f2b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2bc:	613b      	str	r3, [r7, #16]
 800f2be:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f2c0:	4b12      	ldr	r3, [pc, #72]	; (800f30c <HAL_UART_MspInit+0x8c>)
 800f2c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2c6:	4a11      	ldr	r2, [pc, #68]	; (800f30c <HAL_UART_MspInit+0x8c>)
 800f2c8:	f043 0308 	orr.w	r3, r3, #8
 800f2cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f2d0:	4b0e      	ldr	r3, [pc, #56]	; (800f30c <HAL_UART_MspInit+0x8c>)
 800f2d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2d6:	f003 0308 	and.w	r3, r3, #8
 800f2da:	60fb      	str	r3, [r7, #12]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800f2de:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f2e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f2f0:	2307      	movs	r3, #7
 800f2f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f2f4:	f107 0314 	add.w	r3, r7, #20
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4805      	ldr	r0, [pc, #20]	; (800f310 <HAL_UART_MspInit+0x90>)
 800f2fc:	f7f3 fcf0 	bl	8002ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800f300:	bf00      	nop
 800f302:	3728      	adds	r7, #40	; 0x28
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	40004800 	.word	0x40004800
 800f30c:	58024400 	.word	0x58024400
 800f310:	58020c00 	.word	0x58020c00

0800f314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f34c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f318:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f31a:	e003      	b.n	800f324 <LoopCopyDataInit>

0800f31c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f31c:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f31e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f320:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f322:	3104      	adds	r1, #4

0800f324 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f324:	480b      	ldr	r0, [pc, #44]	; (800f354 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f326:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f328:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f32a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f32c:	d3f6      	bcc.n	800f31c <CopyDataInit>
  ldr  r2, =_sbss
 800f32e:	4a0b      	ldr	r2, [pc, #44]	; (800f35c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f330:	e002      	b.n	800f338 <LoopFillZerobss>

0800f332 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f332:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f334:	f842 3b04 	str.w	r3, [r2], #4

0800f338 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f338:	4b09      	ldr	r3, [pc, #36]	; (800f360 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f33a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f33c:	d3f9      	bcc.n	800f332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f33e:	f7ff fe75 	bl	800f02c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f342:	f000 f811 	bl	800f368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f346:	f7ff faf7 	bl	800e938 <main>
  bx  lr    
 800f34a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f34c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800f350:	08011a60 	.word	0x08011a60
  ldr  r0, =_sdata
 800f354:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800f358:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 800f35c:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 800f360:	24003954 	.word	0x24003954

0800f364 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f364:	e7fe      	b.n	800f364 <ADC3_IRQHandler>
	...

0800f368 <__libc_init_array>:
 800f368:	b570      	push	{r4, r5, r6, lr}
 800f36a:	4e0d      	ldr	r6, [pc, #52]	; (800f3a0 <__libc_init_array+0x38>)
 800f36c:	4c0d      	ldr	r4, [pc, #52]	; (800f3a4 <__libc_init_array+0x3c>)
 800f36e:	1ba4      	subs	r4, r4, r6
 800f370:	10a4      	asrs	r4, r4, #2
 800f372:	2500      	movs	r5, #0
 800f374:	42a5      	cmp	r5, r4
 800f376:	d109      	bne.n	800f38c <__libc_init_array+0x24>
 800f378:	4e0b      	ldr	r6, [pc, #44]	; (800f3a8 <__libc_init_array+0x40>)
 800f37a:	4c0c      	ldr	r4, [pc, #48]	; (800f3ac <__libc_init_array+0x44>)
 800f37c:	f001 f93c 	bl	80105f8 <_init>
 800f380:	1ba4      	subs	r4, r4, r6
 800f382:	10a4      	asrs	r4, r4, #2
 800f384:	2500      	movs	r5, #0
 800f386:	42a5      	cmp	r5, r4
 800f388:	d105      	bne.n	800f396 <__libc_init_array+0x2e>
 800f38a:	bd70      	pop	{r4, r5, r6, pc}
 800f38c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f390:	4798      	blx	r3
 800f392:	3501      	adds	r5, #1
 800f394:	e7ee      	b.n	800f374 <__libc_init_array+0xc>
 800f396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f39a:	4798      	blx	r3
 800f39c:	3501      	adds	r5, #1
 800f39e:	e7f2      	b.n	800f386 <__libc_init_array+0x1e>
 800f3a0:	08011a58 	.word	0x08011a58
 800f3a4:	08011a58 	.word	0x08011a58
 800f3a8:	08011a58 	.word	0x08011a58
 800f3ac:	08011a5c 	.word	0x08011a5c

0800f3b0 <memcmp>:
 800f3b0:	b530      	push	{r4, r5, lr}
 800f3b2:	2400      	movs	r4, #0
 800f3b4:	42a2      	cmp	r2, r4
 800f3b6:	d101      	bne.n	800f3bc <memcmp+0xc>
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	e007      	b.n	800f3cc <memcmp+0x1c>
 800f3bc:	5d03      	ldrb	r3, [r0, r4]
 800f3be:	3401      	adds	r4, #1
 800f3c0:	190d      	adds	r5, r1, r4
 800f3c2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f3c6:	42ab      	cmp	r3, r5
 800f3c8:	d0f4      	beq.n	800f3b4 <memcmp+0x4>
 800f3ca:	1b58      	subs	r0, r3, r5
 800f3cc:	bd30      	pop	{r4, r5, pc}

0800f3ce <memcpy>:
 800f3ce:	b510      	push	{r4, lr}
 800f3d0:	1e43      	subs	r3, r0, #1
 800f3d2:	440a      	add	r2, r1
 800f3d4:	4291      	cmp	r1, r2
 800f3d6:	d100      	bne.n	800f3da <memcpy+0xc>
 800f3d8:	bd10      	pop	{r4, pc}
 800f3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e2:	e7f7      	b.n	800f3d4 <memcpy+0x6>

0800f3e4 <memset>:
 800f3e4:	4402      	add	r2, r0
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d100      	bne.n	800f3ee <memset+0xa>
 800f3ec:	4770      	bx	lr
 800f3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f3f2:	e7f9      	b.n	800f3e8 <memset+0x4>

0800f3f4 <iprintf>:
 800f3f4:	b40f      	push	{r0, r1, r2, r3}
 800f3f6:	4b0a      	ldr	r3, [pc, #40]	; (800f420 <iprintf+0x2c>)
 800f3f8:	b513      	push	{r0, r1, r4, lr}
 800f3fa:	681c      	ldr	r4, [r3, #0]
 800f3fc:	b124      	cbz	r4, 800f408 <iprintf+0x14>
 800f3fe:	69a3      	ldr	r3, [r4, #24]
 800f400:	b913      	cbnz	r3, 800f408 <iprintf+0x14>
 800f402:	4620      	mov	r0, r4
 800f404:	f000 fa42 	bl	800f88c <__sinit>
 800f408:	ab05      	add	r3, sp, #20
 800f40a:	9a04      	ldr	r2, [sp, #16]
 800f40c:	68a1      	ldr	r1, [r4, #8]
 800f40e:	9301      	str	r3, [sp, #4]
 800f410:	4620      	mov	r0, r4
 800f412:	f000 fd4d 	bl	800feb0 <_vfiprintf_r>
 800f416:	b002      	add	sp, #8
 800f418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f41c:	b004      	add	sp, #16
 800f41e:	4770      	bx	lr
 800f420:	24000034 	.word	0x24000034

0800f424 <_puts_r>:
 800f424:	b570      	push	{r4, r5, r6, lr}
 800f426:	460e      	mov	r6, r1
 800f428:	4605      	mov	r5, r0
 800f42a:	b118      	cbz	r0, 800f434 <_puts_r+0x10>
 800f42c:	6983      	ldr	r3, [r0, #24]
 800f42e:	b90b      	cbnz	r3, 800f434 <_puts_r+0x10>
 800f430:	f000 fa2c 	bl	800f88c <__sinit>
 800f434:	69ab      	ldr	r3, [r5, #24]
 800f436:	68ac      	ldr	r4, [r5, #8]
 800f438:	b913      	cbnz	r3, 800f440 <_puts_r+0x1c>
 800f43a:	4628      	mov	r0, r5
 800f43c:	f000 fa26 	bl	800f88c <__sinit>
 800f440:	4b23      	ldr	r3, [pc, #140]	; (800f4d0 <_puts_r+0xac>)
 800f442:	429c      	cmp	r4, r3
 800f444:	d117      	bne.n	800f476 <_puts_r+0x52>
 800f446:	686c      	ldr	r4, [r5, #4]
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	071b      	lsls	r3, r3, #28
 800f44c:	d51d      	bpl.n	800f48a <_puts_r+0x66>
 800f44e:	6923      	ldr	r3, [r4, #16]
 800f450:	b1db      	cbz	r3, 800f48a <_puts_r+0x66>
 800f452:	3e01      	subs	r6, #1
 800f454:	68a3      	ldr	r3, [r4, #8]
 800f456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f45a:	3b01      	subs	r3, #1
 800f45c:	60a3      	str	r3, [r4, #8]
 800f45e:	b9e9      	cbnz	r1, 800f49c <_puts_r+0x78>
 800f460:	2b00      	cmp	r3, #0
 800f462:	da2e      	bge.n	800f4c2 <_puts_r+0x9e>
 800f464:	4622      	mov	r2, r4
 800f466:	210a      	movs	r1, #10
 800f468:	4628      	mov	r0, r5
 800f46a:	f000 f85f 	bl	800f52c <__swbuf_r>
 800f46e:	3001      	adds	r0, #1
 800f470:	d011      	beq.n	800f496 <_puts_r+0x72>
 800f472:	200a      	movs	r0, #10
 800f474:	e011      	b.n	800f49a <_puts_r+0x76>
 800f476:	4b17      	ldr	r3, [pc, #92]	; (800f4d4 <_puts_r+0xb0>)
 800f478:	429c      	cmp	r4, r3
 800f47a:	d101      	bne.n	800f480 <_puts_r+0x5c>
 800f47c:	68ac      	ldr	r4, [r5, #8]
 800f47e:	e7e3      	b.n	800f448 <_puts_r+0x24>
 800f480:	4b15      	ldr	r3, [pc, #84]	; (800f4d8 <_puts_r+0xb4>)
 800f482:	429c      	cmp	r4, r3
 800f484:	bf08      	it	eq
 800f486:	68ec      	ldreq	r4, [r5, #12]
 800f488:	e7de      	b.n	800f448 <_puts_r+0x24>
 800f48a:	4621      	mov	r1, r4
 800f48c:	4628      	mov	r0, r5
 800f48e:	f000 f89f 	bl	800f5d0 <__swsetup_r>
 800f492:	2800      	cmp	r0, #0
 800f494:	d0dd      	beq.n	800f452 <_puts_r+0x2e>
 800f496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f49a:	bd70      	pop	{r4, r5, r6, pc}
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	da04      	bge.n	800f4aa <_puts_r+0x86>
 800f4a0:	69a2      	ldr	r2, [r4, #24]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	dc06      	bgt.n	800f4b4 <_puts_r+0x90>
 800f4a6:	290a      	cmp	r1, #10
 800f4a8:	d004      	beq.n	800f4b4 <_puts_r+0x90>
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	1c5a      	adds	r2, r3, #1
 800f4ae:	6022      	str	r2, [r4, #0]
 800f4b0:	7019      	strb	r1, [r3, #0]
 800f4b2:	e7cf      	b.n	800f454 <_puts_r+0x30>
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f000 f838 	bl	800f52c <__swbuf_r>
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d1c9      	bne.n	800f454 <_puts_r+0x30>
 800f4c0:	e7e9      	b.n	800f496 <_puts_r+0x72>
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	200a      	movs	r0, #10
 800f4c6:	1c5a      	adds	r2, r3, #1
 800f4c8:	6022      	str	r2, [r4, #0]
 800f4ca:	7018      	strb	r0, [r3, #0]
 800f4cc:	e7e5      	b.n	800f49a <_puts_r+0x76>
 800f4ce:	bf00      	nop
 800f4d0:	080119dc 	.word	0x080119dc
 800f4d4:	080119fc 	.word	0x080119fc
 800f4d8:	080119bc 	.word	0x080119bc

0800f4dc <puts>:
 800f4dc:	4b02      	ldr	r3, [pc, #8]	; (800f4e8 <puts+0xc>)
 800f4de:	4601      	mov	r1, r0
 800f4e0:	6818      	ldr	r0, [r3, #0]
 800f4e2:	f7ff bf9f 	b.w	800f424 <_puts_r>
 800f4e6:	bf00      	nop
 800f4e8:	24000034 	.word	0x24000034

0800f4ec <siprintf>:
 800f4ec:	b40e      	push	{r1, r2, r3}
 800f4ee:	b500      	push	{lr}
 800f4f0:	b09c      	sub	sp, #112	; 0x70
 800f4f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f4f4:	9002      	str	r0, [sp, #8]
 800f4f6:	9006      	str	r0, [sp, #24]
 800f4f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4fc:	4809      	ldr	r0, [pc, #36]	; (800f524 <siprintf+0x38>)
 800f4fe:	9107      	str	r1, [sp, #28]
 800f500:	9104      	str	r1, [sp, #16]
 800f502:	4909      	ldr	r1, [pc, #36]	; (800f528 <siprintf+0x3c>)
 800f504:	f853 2b04 	ldr.w	r2, [r3], #4
 800f508:	9105      	str	r1, [sp, #20]
 800f50a:	6800      	ldr	r0, [r0, #0]
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	a902      	add	r1, sp, #8
 800f510:	f000 fbac 	bl	800fc6c <_svfiprintf_r>
 800f514:	9b02      	ldr	r3, [sp, #8]
 800f516:	2200      	movs	r2, #0
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	b01c      	add	sp, #112	; 0x70
 800f51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f520:	b003      	add	sp, #12
 800f522:	4770      	bx	lr
 800f524:	24000034 	.word	0x24000034
 800f528:	ffff0208 	.word	0xffff0208

0800f52c <__swbuf_r>:
 800f52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52e:	460e      	mov	r6, r1
 800f530:	4614      	mov	r4, r2
 800f532:	4605      	mov	r5, r0
 800f534:	b118      	cbz	r0, 800f53e <__swbuf_r+0x12>
 800f536:	6983      	ldr	r3, [r0, #24]
 800f538:	b90b      	cbnz	r3, 800f53e <__swbuf_r+0x12>
 800f53a:	f000 f9a7 	bl	800f88c <__sinit>
 800f53e:	4b21      	ldr	r3, [pc, #132]	; (800f5c4 <__swbuf_r+0x98>)
 800f540:	429c      	cmp	r4, r3
 800f542:	d12a      	bne.n	800f59a <__swbuf_r+0x6e>
 800f544:	686c      	ldr	r4, [r5, #4]
 800f546:	69a3      	ldr	r3, [r4, #24]
 800f548:	60a3      	str	r3, [r4, #8]
 800f54a:	89a3      	ldrh	r3, [r4, #12]
 800f54c:	071a      	lsls	r2, r3, #28
 800f54e:	d52e      	bpl.n	800f5ae <__swbuf_r+0x82>
 800f550:	6923      	ldr	r3, [r4, #16]
 800f552:	b363      	cbz	r3, 800f5ae <__swbuf_r+0x82>
 800f554:	6923      	ldr	r3, [r4, #16]
 800f556:	6820      	ldr	r0, [r4, #0]
 800f558:	1ac0      	subs	r0, r0, r3
 800f55a:	6963      	ldr	r3, [r4, #20]
 800f55c:	b2f6      	uxtb	r6, r6
 800f55e:	4283      	cmp	r3, r0
 800f560:	4637      	mov	r7, r6
 800f562:	dc04      	bgt.n	800f56e <__swbuf_r+0x42>
 800f564:	4621      	mov	r1, r4
 800f566:	4628      	mov	r0, r5
 800f568:	f000 f926 	bl	800f7b8 <_fflush_r>
 800f56c:	bb28      	cbnz	r0, 800f5ba <__swbuf_r+0x8e>
 800f56e:	68a3      	ldr	r3, [r4, #8]
 800f570:	3b01      	subs	r3, #1
 800f572:	60a3      	str	r3, [r4, #8]
 800f574:	6823      	ldr	r3, [r4, #0]
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	6022      	str	r2, [r4, #0]
 800f57a:	701e      	strb	r6, [r3, #0]
 800f57c:	6963      	ldr	r3, [r4, #20]
 800f57e:	3001      	adds	r0, #1
 800f580:	4283      	cmp	r3, r0
 800f582:	d004      	beq.n	800f58e <__swbuf_r+0x62>
 800f584:	89a3      	ldrh	r3, [r4, #12]
 800f586:	07db      	lsls	r3, r3, #31
 800f588:	d519      	bpl.n	800f5be <__swbuf_r+0x92>
 800f58a:	2e0a      	cmp	r6, #10
 800f58c:	d117      	bne.n	800f5be <__swbuf_r+0x92>
 800f58e:	4621      	mov	r1, r4
 800f590:	4628      	mov	r0, r5
 800f592:	f000 f911 	bl	800f7b8 <_fflush_r>
 800f596:	b190      	cbz	r0, 800f5be <__swbuf_r+0x92>
 800f598:	e00f      	b.n	800f5ba <__swbuf_r+0x8e>
 800f59a:	4b0b      	ldr	r3, [pc, #44]	; (800f5c8 <__swbuf_r+0x9c>)
 800f59c:	429c      	cmp	r4, r3
 800f59e:	d101      	bne.n	800f5a4 <__swbuf_r+0x78>
 800f5a0:	68ac      	ldr	r4, [r5, #8]
 800f5a2:	e7d0      	b.n	800f546 <__swbuf_r+0x1a>
 800f5a4:	4b09      	ldr	r3, [pc, #36]	; (800f5cc <__swbuf_r+0xa0>)
 800f5a6:	429c      	cmp	r4, r3
 800f5a8:	bf08      	it	eq
 800f5aa:	68ec      	ldreq	r4, [r5, #12]
 800f5ac:	e7cb      	b.n	800f546 <__swbuf_r+0x1a>
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	f000 f80d 	bl	800f5d0 <__swsetup_r>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d0cc      	beq.n	800f554 <__swbuf_r+0x28>
 800f5ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f5be:	4638      	mov	r0, r7
 800f5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	080119dc 	.word	0x080119dc
 800f5c8:	080119fc 	.word	0x080119fc
 800f5cc:	080119bc 	.word	0x080119bc

0800f5d0 <__swsetup_r>:
 800f5d0:	4b32      	ldr	r3, [pc, #200]	; (800f69c <__swsetup_r+0xcc>)
 800f5d2:	b570      	push	{r4, r5, r6, lr}
 800f5d4:	681d      	ldr	r5, [r3, #0]
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	460c      	mov	r4, r1
 800f5da:	b125      	cbz	r5, 800f5e6 <__swsetup_r+0x16>
 800f5dc:	69ab      	ldr	r3, [r5, #24]
 800f5de:	b913      	cbnz	r3, 800f5e6 <__swsetup_r+0x16>
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	f000 f953 	bl	800f88c <__sinit>
 800f5e6:	4b2e      	ldr	r3, [pc, #184]	; (800f6a0 <__swsetup_r+0xd0>)
 800f5e8:	429c      	cmp	r4, r3
 800f5ea:	d10f      	bne.n	800f60c <__swsetup_r+0x3c>
 800f5ec:	686c      	ldr	r4, [r5, #4]
 800f5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	0715      	lsls	r5, r2, #28
 800f5f6:	d42c      	bmi.n	800f652 <__swsetup_r+0x82>
 800f5f8:	06d0      	lsls	r0, r2, #27
 800f5fa:	d411      	bmi.n	800f620 <__swsetup_r+0x50>
 800f5fc:	2209      	movs	r2, #9
 800f5fe:	6032      	str	r2, [r6, #0]
 800f600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f604:	81a3      	strh	r3, [r4, #12]
 800f606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f60a:	e03e      	b.n	800f68a <__swsetup_r+0xba>
 800f60c:	4b25      	ldr	r3, [pc, #148]	; (800f6a4 <__swsetup_r+0xd4>)
 800f60e:	429c      	cmp	r4, r3
 800f610:	d101      	bne.n	800f616 <__swsetup_r+0x46>
 800f612:	68ac      	ldr	r4, [r5, #8]
 800f614:	e7eb      	b.n	800f5ee <__swsetup_r+0x1e>
 800f616:	4b24      	ldr	r3, [pc, #144]	; (800f6a8 <__swsetup_r+0xd8>)
 800f618:	429c      	cmp	r4, r3
 800f61a:	bf08      	it	eq
 800f61c:	68ec      	ldreq	r4, [r5, #12]
 800f61e:	e7e6      	b.n	800f5ee <__swsetup_r+0x1e>
 800f620:	0751      	lsls	r1, r2, #29
 800f622:	d512      	bpl.n	800f64a <__swsetup_r+0x7a>
 800f624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f626:	b141      	cbz	r1, 800f63a <__swsetup_r+0x6a>
 800f628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f62c:	4299      	cmp	r1, r3
 800f62e:	d002      	beq.n	800f636 <__swsetup_r+0x66>
 800f630:	4630      	mov	r0, r6
 800f632:	f000 fa19 	bl	800fa68 <_free_r>
 800f636:	2300      	movs	r3, #0
 800f638:	6363      	str	r3, [r4, #52]	; 0x34
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f640:	81a3      	strh	r3, [r4, #12]
 800f642:	2300      	movs	r3, #0
 800f644:	6063      	str	r3, [r4, #4]
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	6023      	str	r3, [r4, #0]
 800f64a:	89a3      	ldrh	r3, [r4, #12]
 800f64c:	f043 0308 	orr.w	r3, r3, #8
 800f650:	81a3      	strh	r3, [r4, #12]
 800f652:	6923      	ldr	r3, [r4, #16]
 800f654:	b94b      	cbnz	r3, 800f66a <__swsetup_r+0x9a>
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f660:	d003      	beq.n	800f66a <__swsetup_r+0x9a>
 800f662:	4621      	mov	r1, r4
 800f664:	4630      	mov	r0, r6
 800f666:	f000 f9bf 	bl	800f9e8 <__smakebuf_r>
 800f66a:	89a2      	ldrh	r2, [r4, #12]
 800f66c:	f012 0301 	ands.w	r3, r2, #1
 800f670:	d00c      	beq.n	800f68c <__swsetup_r+0xbc>
 800f672:	2300      	movs	r3, #0
 800f674:	60a3      	str	r3, [r4, #8]
 800f676:	6963      	ldr	r3, [r4, #20]
 800f678:	425b      	negs	r3, r3
 800f67a:	61a3      	str	r3, [r4, #24]
 800f67c:	6923      	ldr	r3, [r4, #16]
 800f67e:	b953      	cbnz	r3, 800f696 <__swsetup_r+0xc6>
 800f680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f684:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f688:	d1ba      	bne.n	800f600 <__swsetup_r+0x30>
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	0792      	lsls	r2, r2, #30
 800f68e:	bf58      	it	pl
 800f690:	6963      	ldrpl	r3, [r4, #20]
 800f692:	60a3      	str	r3, [r4, #8]
 800f694:	e7f2      	b.n	800f67c <__swsetup_r+0xac>
 800f696:	2000      	movs	r0, #0
 800f698:	e7f7      	b.n	800f68a <__swsetup_r+0xba>
 800f69a:	bf00      	nop
 800f69c:	24000034 	.word	0x24000034
 800f6a0:	080119dc 	.word	0x080119dc
 800f6a4:	080119fc 	.word	0x080119fc
 800f6a8:	080119bc 	.word	0x080119bc

0800f6ac <__sflush_r>:
 800f6ac:	898a      	ldrh	r2, [r1, #12]
 800f6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	0710      	lsls	r0, r2, #28
 800f6b6:	460c      	mov	r4, r1
 800f6b8:	d458      	bmi.n	800f76c <__sflush_r+0xc0>
 800f6ba:	684b      	ldr	r3, [r1, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dc05      	bgt.n	800f6cc <__sflush_r+0x20>
 800f6c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	dc02      	bgt.n	800f6cc <__sflush_r+0x20>
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6ce:	2e00      	cmp	r6, #0
 800f6d0:	d0f9      	beq.n	800f6c6 <__sflush_r+0x1a>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f6d8:	682f      	ldr	r7, [r5, #0]
 800f6da:	6a21      	ldr	r1, [r4, #32]
 800f6dc:	602b      	str	r3, [r5, #0]
 800f6de:	d032      	beq.n	800f746 <__sflush_r+0x9a>
 800f6e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f6e2:	89a3      	ldrh	r3, [r4, #12]
 800f6e4:	075a      	lsls	r2, r3, #29
 800f6e6:	d505      	bpl.n	800f6f4 <__sflush_r+0x48>
 800f6e8:	6863      	ldr	r3, [r4, #4]
 800f6ea:	1ac0      	subs	r0, r0, r3
 800f6ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6ee:	b10b      	cbz	r3, 800f6f4 <__sflush_r+0x48>
 800f6f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6f2:	1ac0      	subs	r0, r0, r3
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6fa:	6a21      	ldr	r1, [r4, #32]
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	47b0      	blx	r6
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	89a3      	ldrh	r3, [r4, #12]
 800f704:	d106      	bne.n	800f714 <__sflush_r+0x68>
 800f706:	6829      	ldr	r1, [r5, #0]
 800f708:	291d      	cmp	r1, #29
 800f70a:	d848      	bhi.n	800f79e <__sflush_r+0xf2>
 800f70c:	4a29      	ldr	r2, [pc, #164]	; (800f7b4 <__sflush_r+0x108>)
 800f70e:	40ca      	lsrs	r2, r1
 800f710:	07d6      	lsls	r6, r2, #31
 800f712:	d544      	bpl.n	800f79e <__sflush_r+0xf2>
 800f714:	2200      	movs	r2, #0
 800f716:	6062      	str	r2, [r4, #4]
 800f718:	04d9      	lsls	r1, r3, #19
 800f71a:	6922      	ldr	r2, [r4, #16]
 800f71c:	6022      	str	r2, [r4, #0]
 800f71e:	d504      	bpl.n	800f72a <__sflush_r+0x7e>
 800f720:	1c42      	adds	r2, r0, #1
 800f722:	d101      	bne.n	800f728 <__sflush_r+0x7c>
 800f724:	682b      	ldr	r3, [r5, #0]
 800f726:	b903      	cbnz	r3, 800f72a <__sflush_r+0x7e>
 800f728:	6560      	str	r0, [r4, #84]	; 0x54
 800f72a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f72c:	602f      	str	r7, [r5, #0]
 800f72e:	2900      	cmp	r1, #0
 800f730:	d0c9      	beq.n	800f6c6 <__sflush_r+0x1a>
 800f732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f736:	4299      	cmp	r1, r3
 800f738:	d002      	beq.n	800f740 <__sflush_r+0x94>
 800f73a:	4628      	mov	r0, r5
 800f73c:	f000 f994 	bl	800fa68 <_free_r>
 800f740:	2000      	movs	r0, #0
 800f742:	6360      	str	r0, [r4, #52]	; 0x34
 800f744:	e7c0      	b.n	800f6c8 <__sflush_r+0x1c>
 800f746:	2301      	movs	r3, #1
 800f748:	4628      	mov	r0, r5
 800f74a:	47b0      	blx	r6
 800f74c:	1c41      	adds	r1, r0, #1
 800f74e:	d1c8      	bne.n	800f6e2 <__sflush_r+0x36>
 800f750:	682b      	ldr	r3, [r5, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d0c5      	beq.n	800f6e2 <__sflush_r+0x36>
 800f756:	2b1d      	cmp	r3, #29
 800f758:	d001      	beq.n	800f75e <__sflush_r+0xb2>
 800f75a:	2b16      	cmp	r3, #22
 800f75c:	d101      	bne.n	800f762 <__sflush_r+0xb6>
 800f75e:	602f      	str	r7, [r5, #0]
 800f760:	e7b1      	b.n	800f6c6 <__sflush_r+0x1a>
 800f762:	89a3      	ldrh	r3, [r4, #12]
 800f764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f768:	81a3      	strh	r3, [r4, #12]
 800f76a:	e7ad      	b.n	800f6c8 <__sflush_r+0x1c>
 800f76c:	690f      	ldr	r7, [r1, #16]
 800f76e:	2f00      	cmp	r7, #0
 800f770:	d0a9      	beq.n	800f6c6 <__sflush_r+0x1a>
 800f772:	0793      	lsls	r3, r2, #30
 800f774:	680e      	ldr	r6, [r1, #0]
 800f776:	bf08      	it	eq
 800f778:	694b      	ldreq	r3, [r1, #20]
 800f77a:	600f      	str	r7, [r1, #0]
 800f77c:	bf18      	it	ne
 800f77e:	2300      	movne	r3, #0
 800f780:	eba6 0807 	sub.w	r8, r6, r7
 800f784:	608b      	str	r3, [r1, #8]
 800f786:	f1b8 0f00 	cmp.w	r8, #0
 800f78a:	dd9c      	ble.n	800f6c6 <__sflush_r+0x1a>
 800f78c:	4643      	mov	r3, r8
 800f78e:	463a      	mov	r2, r7
 800f790:	6a21      	ldr	r1, [r4, #32]
 800f792:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f794:	4628      	mov	r0, r5
 800f796:	47b0      	blx	r6
 800f798:	2800      	cmp	r0, #0
 800f79a:	dc06      	bgt.n	800f7aa <__sflush_r+0xfe>
 800f79c:	89a3      	ldrh	r3, [r4, #12]
 800f79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7a2:	81a3      	strh	r3, [r4, #12]
 800f7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7a8:	e78e      	b.n	800f6c8 <__sflush_r+0x1c>
 800f7aa:	4407      	add	r7, r0
 800f7ac:	eba8 0800 	sub.w	r8, r8, r0
 800f7b0:	e7e9      	b.n	800f786 <__sflush_r+0xda>
 800f7b2:	bf00      	nop
 800f7b4:	20400001 	.word	0x20400001

0800f7b8 <_fflush_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	690b      	ldr	r3, [r1, #16]
 800f7bc:	4605      	mov	r5, r0
 800f7be:	460c      	mov	r4, r1
 800f7c0:	b1db      	cbz	r3, 800f7fa <_fflush_r+0x42>
 800f7c2:	b118      	cbz	r0, 800f7cc <_fflush_r+0x14>
 800f7c4:	6983      	ldr	r3, [r0, #24]
 800f7c6:	b90b      	cbnz	r3, 800f7cc <_fflush_r+0x14>
 800f7c8:	f000 f860 	bl	800f88c <__sinit>
 800f7cc:	4b0c      	ldr	r3, [pc, #48]	; (800f800 <_fflush_r+0x48>)
 800f7ce:	429c      	cmp	r4, r3
 800f7d0:	d109      	bne.n	800f7e6 <_fflush_r+0x2e>
 800f7d2:	686c      	ldr	r4, [r5, #4]
 800f7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7d8:	b17b      	cbz	r3, 800f7fa <_fflush_r+0x42>
 800f7da:	4621      	mov	r1, r4
 800f7dc:	4628      	mov	r0, r5
 800f7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7e2:	f7ff bf63 	b.w	800f6ac <__sflush_r>
 800f7e6:	4b07      	ldr	r3, [pc, #28]	; (800f804 <_fflush_r+0x4c>)
 800f7e8:	429c      	cmp	r4, r3
 800f7ea:	d101      	bne.n	800f7f0 <_fflush_r+0x38>
 800f7ec:	68ac      	ldr	r4, [r5, #8]
 800f7ee:	e7f1      	b.n	800f7d4 <_fflush_r+0x1c>
 800f7f0:	4b05      	ldr	r3, [pc, #20]	; (800f808 <_fflush_r+0x50>)
 800f7f2:	429c      	cmp	r4, r3
 800f7f4:	bf08      	it	eq
 800f7f6:	68ec      	ldreq	r4, [r5, #12]
 800f7f8:	e7ec      	b.n	800f7d4 <_fflush_r+0x1c>
 800f7fa:	2000      	movs	r0, #0
 800f7fc:	bd38      	pop	{r3, r4, r5, pc}
 800f7fe:	bf00      	nop
 800f800:	080119dc 	.word	0x080119dc
 800f804:	080119fc 	.word	0x080119fc
 800f808:	080119bc 	.word	0x080119bc

0800f80c <std>:
 800f80c:	2300      	movs	r3, #0
 800f80e:	b510      	push	{r4, lr}
 800f810:	4604      	mov	r4, r0
 800f812:	e9c0 3300 	strd	r3, r3, [r0]
 800f816:	6083      	str	r3, [r0, #8]
 800f818:	8181      	strh	r1, [r0, #12]
 800f81a:	6643      	str	r3, [r0, #100]	; 0x64
 800f81c:	81c2      	strh	r2, [r0, #14]
 800f81e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f822:	6183      	str	r3, [r0, #24]
 800f824:	4619      	mov	r1, r3
 800f826:	2208      	movs	r2, #8
 800f828:	305c      	adds	r0, #92	; 0x5c
 800f82a:	f7ff fddb 	bl	800f3e4 <memset>
 800f82e:	4b05      	ldr	r3, [pc, #20]	; (800f844 <std+0x38>)
 800f830:	6263      	str	r3, [r4, #36]	; 0x24
 800f832:	4b05      	ldr	r3, [pc, #20]	; (800f848 <std+0x3c>)
 800f834:	62a3      	str	r3, [r4, #40]	; 0x28
 800f836:	4b05      	ldr	r3, [pc, #20]	; (800f84c <std+0x40>)
 800f838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f83a:	4b05      	ldr	r3, [pc, #20]	; (800f850 <std+0x44>)
 800f83c:	6224      	str	r4, [r4, #32]
 800f83e:	6323      	str	r3, [r4, #48]	; 0x30
 800f840:	bd10      	pop	{r4, pc}
 800f842:	bf00      	nop
 800f844:	0801040d 	.word	0x0801040d
 800f848:	0801042f 	.word	0x0801042f
 800f84c:	08010467 	.word	0x08010467
 800f850:	0801048b 	.word	0x0801048b

0800f854 <_cleanup_r>:
 800f854:	4901      	ldr	r1, [pc, #4]	; (800f85c <_cleanup_r+0x8>)
 800f856:	f000 b885 	b.w	800f964 <_fwalk_reent>
 800f85a:	bf00      	nop
 800f85c:	0800f7b9 	.word	0x0800f7b9

0800f860 <__sfmoreglue>:
 800f860:	b570      	push	{r4, r5, r6, lr}
 800f862:	1e4a      	subs	r2, r1, #1
 800f864:	2568      	movs	r5, #104	; 0x68
 800f866:	4355      	muls	r5, r2
 800f868:	460e      	mov	r6, r1
 800f86a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f86e:	f000 f949 	bl	800fb04 <_malloc_r>
 800f872:	4604      	mov	r4, r0
 800f874:	b140      	cbz	r0, 800f888 <__sfmoreglue+0x28>
 800f876:	2100      	movs	r1, #0
 800f878:	e9c0 1600 	strd	r1, r6, [r0]
 800f87c:	300c      	adds	r0, #12
 800f87e:	60a0      	str	r0, [r4, #8]
 800f880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f884:	f7ff fdae 	bl	800f3e4 <memset>
 800f888:	4620      	mov	r0, r4
 800f88a:	bd70      	pop	{r4, r5, r6, pc}

0800f88c <__sinit>:
 800f88c:	6983      	ldr	r3, [r0, #24]
 800f88e:	b510      	push	{r4, lr}
 800f890:	4604      	mov	r4, r0
 800f892:	bb33      	cbnz	r3, 800f8e2 <__sinit+0x56>
 800f894:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f898:	6503      	str	r3, [r0, #80]	; 0x50
 800f89a:	4b12      	ldr	r3, [pc, #72]	; (800f8e4 <__sinit+0x58>)
 800f89c:	4a12      	ldr	r2, [pc, #72]	; (800f8e8 <__sinit+0x5c>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	6282      	str	r2, [r0, #40]	; 0x28
 800f8a2:	4298      	cmp	r0, r3
 800f8a4:	bf04      	itt	eq
 800f8a6:	2301      	moveq	r3, #1
 800f8a8:	6183      	streq	r3, [r0, #24]
 800f8aa:	f000 f81f 	bl	800f8ec <__sfp>
 800f8ae:	6060      	str	r0, [r4, #4]
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 f81b 	bl	800f8ec <__sfp>
 800f8b6:	60a0      	str	r0, [r4, #8]
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f000 f817 	bl	800f8ec <__sfp>
 800f8be:	2200      	movs	r2, #0
 800f8c0:	60e0      	str	r0, [r4, #12]
 800f8c2:	2104      	movs	r1, #4
 800f8c4:	6860      	ldr	r0, [r4, #4]
 800f8c6:	f7ff ffa1 	bl	800f80c <std>
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	2109      	movs	r1, #9
 800f8ce:	68a0      	ldr	r0, [r4, #8]
 800f8d0:	f7ff ff9c 	bl	800f80c <std>
 800f8d4:	2202      	movs	r2, #2
 800f8d6:	2112      	movs	r1, #18
 800f8d8:	68e0      	ldr	r0, [r4, #12]
 800f8da:	f7ff ff97 	bl	800f80c <std>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	61a3      	str	r3, [r4, #24]
 800f8e2:	bd10      	pop	{r4, pc}
 800f8e4:	080119b8 	.word	0x080119b8
 800f8e8:	0800f855 	.word	0x0800f855

0800f8ec <__sfp>:
 800f8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ee:	4b1b      	ldr	r3, [pc, #108]	; (800f95c <__sfp+0x70>)
 800f8f0:	681e      	ldr	r6, [r3, #0]
 800f8f2:	69b3      	ldr	r3, [r6, #24]
 800f8f4:	4607      	mov	r7, r0
 800f8f6:	b913      	cbnz	r3, 800f8fe <__sfp+0x12>
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f7ff ffc7 	bl	800f88c <__sinit>
 800f8fe:	3648      	adds	r6, #72	; 0x48
 800f900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f904:	3b01      	subs	r3, #1
 800f906:	d503      	bpl.n	800f910 <__sfp+0x24>
 800f908:	6833      	ldr	r3, [r6, #0]
 800f90a:	b133      	cbz	r3, 800f91a <__sfp+0x2e>
 800f90c:	6836      	ldr	r6, [r6, #0]
 800f90e:	e7f7      	b.n	800f900 <__sfp+0x14>
 800f910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f914:	b16d      	cbz	r5, 800f932 <__sfp+0x46>
 800f916:	3468      	adds	r4, #104	; 0x68
 800f918:	e7f4      	b.n	800f904 <__sfp+0x18>
 800f91a:	2104      	movs	r1, #4
 800f91c:	4638      	mov	r0, r7
 800f91e:	f7ff ff9f 	bl	800f860 <__sfmoreglue>
 800f922:	6030      	str	r0, [r6, #0]
 800f924:	2800      	cmp	r0, #0
 800f926:	d1f1      	bne.n	800f90c <__sfp+0x20>
 800f928:	230c      	movs	r3, #12
 800f92a:	603b      	str	r3, [r7, #0]
 800f92c:	4604      	mov	r4, r0
 800f92e:	4620      	mov	r0, r4
 800f930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f932:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <__sfp+0x74>)
 800f934:	6665      	str	r5, [r4, #100]	; 0x64
 800f936:	e9c4 5500 	strd	r5, r5, [r4]
 800f93a:	60a5      	str	r5, [r4, #8]
 800f93c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f940:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f944:	2208      	movs	r2, #8
 800f946:	4629      	mov	r1, r5
 800f948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f94c:	f7ff fd4a 	bl	800f3e4 <memset>
 800f950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f958:	e7e9      	b.n	800f92e <__sfp+0x42>
 800f95a:	bf00      	nop
 800f95c:	080119b8 	.word	0x080119b8
 800f960:	ffff0001 	.word	0xffff0001

0800f964 <_fwalk_reent>:
 800f964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f968:	4680      	mov	r8, r0
 800f96a:	4689      	mov	r9, r1
 800f96c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f970:	2600      	movs	r6, #0
 800f972:	b914      	cbnz	r4, 800f97a <_fwalk_reent+0x16>
 800f974:	4630      	mov	r0, r6
 800f976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f97a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f97e:	3f01      	subs	r7, #1
 800f980:	d501      	bpl.n	800f986 <_fwalk_reent+0x22>
 800f982:	6824      	ldr	r4, [r4, #0]
 800f984:	e7f5      	b.n	800f972 <_fwalk_reent+0xe>
 800f986:	89ab      	ldrh	r3, [r5, #12]
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d907      	bls.n	800f99c <_fwalk_reent+0x38>
 800f98c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f990:	3301      	adds	r3, #1
 800f992:	d003      	beq.n	800f99c <_fwalk_reent+0x38>
 800f994:	4629      	mov	r1, r5
 800f996:	4640      	mov	r0, r8
 800f998:	47c8      	blx	r9
 800f99a:	4306      	orrs	r6, r0
 800f99c:	3568      	adds	r5, #104	; 0x68
 800f99e:	e7ee      	b.n	800f97e <_fwalk_reent+0x1a>

0800f9a0 <__swhatbuf_r>:
 800f9a0:	b570      	push	{r4, r5, r6, lr}
 800f9a2:	460e      	mov	r6, r1
 800f9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9a8:	2900      	cmp	r1, #0
 800f9aa:	b096      	sub	sp, #88	; 0x58
 800f9ac:	4614      	mov	r4, r2
 800f9ae:	461d      	mov	r5, r3
 800f9b0:	da07      	bge.n	800f9c2 <__swhatbuf_r+0x22>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	602b      	str	r3, [r5, #0]
 800f9b6:	89b3      	ldrh	r3, [r6, #12]
 800f9b8:	061a      	lsls	r2, r3, #24
 800f9ba:	d410      	bmi.n	800f9de <__swhatbuf_r+0x3e>
 800f9bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c0:	e00e      	b.n	800f9e0 <__swhatbuf_r+0x40>
 800f9c2:	466a      	mov	r2, sp
 800f9c4:	f000 fd88 	bl	80104d8 <_fstat_r>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	dbf2      	blt.n	800f9b2 <__swhatbuf_r+0x12>
 800f9cc:	9a01      	ldr	r2, [sp, #4]
 800f9ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f9d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f9d6:	425a      	negs	r2, r3
 800f9d8:	415a      	adcs	r2, r3
 800f9da:	602a      	str	r2, [r5, #0]
 800f9dc:	e7ee      	b.n	800f9bc <__swhatbuf_r+0x1c>
 800f9de:	2340      	movs	r3, #64	; 0x40
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	6023      	str	r3, [r4, #0]
 800f9e4:	b016      	add	sp, #88	; 0x58
 800f9e6:	bd70      	pop	{r4, r5, r6, pc}

0800f9e8 <__smakebuf_r>:
 800f9e8:	898b      	ldrh	r3, [r1, #12]
 800f9ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9ec:	079d      	lsls	r5, r3, #30
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	460c      	mov	r4, r1
 800f9f2:	d507      	bpl.n	800fa04 <__smakebuf_r+0x1c>
 800f9f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9f8:	6023      	str	r3, [r4, #0]
 800f9fa:	6123      	str	r3, [r4, #16]
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	6163      	str	r3, [r4, #20]
 800fa00:	b002      	add	sp, #8
 800fa02:	bd70      	pop	{r4, r5, r6, pc}
 800fa04:	ab01      	add	r3, sp, #4
 800fa06:	466a      	mov	r2, sp
 800fa08:	f7ff ffca 	bl	800f9a0 <__swhatbuf_r>
 800fa0c:	9900      	ldr	r1, [sp, #0]
 800fa0e:	4605      	mov	r5, r0
 800fa10:	4630      	mov	r0, r6
 800fa12:	f000 f877 	bl	800fb04 <_malloc_r>
 800fa16:	b948      	cbnz	r0, 800fa2c <__smakebuf_r+0x44>
 800fa18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa1c:	059a      	lsls	r2, r3, #22
 800fa1e:	d4ef      	bmi.n	800fa00 <__smakebuf_r+0x18>
 800fa20:	f023 0303 	bic.w	r3, r3, #3
 800fa24:	f043 0302 	orr.w	r3, r3, #2
 800fa28:	81a3      	strh	r3, [r4, #12]
 800fa2a:	e7e3      	b.n	800f9f4 <__smakebuf_r+0xc>
 800fa2c:	4b0d      	ldr	r3, [pc, #52]	; (800fa64 <__smakebuf_r+0x7c>)
 800fa2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa30:	89a3      	ldrh	r3, [r4, #12]
 800fa32:	6020      	str	r0, [r4, #0]
 800fa34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa38:	81a3      	strh	r3, [r4, #12]
 800fa3a:	9b00      	ldr	r3, [sp, #0]
 800fa3c:	6163      	str	r3, [r4, #20]
 800fa3e:	9b01      	ldr	r3, [sp, #4]
 800fa40:	6120      	str	r0, [r4, #16]
 800fa42:	b15b      	cbz	r3, 800fa5c <__smakebuf_r+0x74>
 800fa44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa48:	4630      	mov	r0, r6
 800fa4a:	f000 fd57 	bl	80104fc <_isatty_r>
 800fa4e:	b128      	cbz	r0, 800fa5c <__smakebuf_r+0x74>
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	f023 0303 	bic.w	r3, r3, #3
 800fa56:	f043 0301 	orr.w	r3, r3, #1
 800fa5a:	81a3      	strh	r3, [r4, #12]
 800fa5c:	89a3      	ldrh	r3, [r4, #12]
 800fa5e:	431d      	orrs	r5, r3
 800fa60:	81a5      	strh	r5, [r4, #12]
 800fa62:	e7cd      	b.n	800fa00 <__smakebuf_r+0x18>
 800fa64:	0800f855 	.word	0x0800f855

0800fa68 <_free_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4605      	mov	r5, r0
 800fa6c:	2900      	cmp	r1, #0
 800fa6e:	d045      	beq.n	800fafc <_free_r+0x94>
 800fa70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa74:	1f0c      	subs	r4, r1, #4
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bfb8      	it	lt
 800fa7a:	18e4      	addlt	r4, r4, r3
 800fa7c:	f000 fd79 	bl	8010572 <__malloc_lock>
 800fa80:	4a1f      	ldr	r2, [pc, #124]	; (800fb00 <_free_r+0x98>)
 800fa82:	6813      	ldr	r3, [r2, #0]
 800fa84:	4610      	mov	r0, r2
 800fa86:	b933      	cbnz	r3, 800fa96 <_free_r+0x2e>
 800fa88:	6063      	str	r3, [r4, #4]
 800fa8a:	6014      	str	r4, [r2, #0]
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa92:	f000 bd6f 	b.w	8010574 <__malloc_unlock>
 800fa96:	42a3      	cmp	r3, r4
 800fa98:	d90c      	bls.n	800fab4 <_free_r+0x4c>
 800fa9a:	6821      	ldr	r1, [r4, #0]
 800fa9c:	1862      	adds	r2, r4, r1
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	bf04      	itt	eq
 800faa2:	681a      	ldreq	r2, [r3, #0]
 800faa4:	685b      	ldreq	r3, [r3, #4]
 800faa6:	6063      	str	r3, [r4, #4]
 800faa8:	bf04      	itt	eq
 800faaa:	1852      	addeq	r2, r2, r1
 800faac:	6022      	streq	r2, [r4, #0]
 800faae:	6004      	str	r4, [r0, #0]
 800fab0:	e7ec      	b.n	800fa8c <_free_r+0x24>
 800fab2:	4613      	mov	r3, r2
 800fab4:	685a      	ldr	r2, [r3, #4]
 800fab6:	b10a      	cbz	r2, 800fabc <_free_r+0x54>
 800fab8:	42a2      	cmp	r2, r4
 800faba:	d9fa      	bls.n	800fab2 <_free_r+0x4a>
 800fabc:	6819      	ldr	r1, [r3, #0]
 800fabe:	1858      	adds	r0, r3, r1
 800fac0:	42a0      	cmp	r0, r4
 800fac2:	d10b      	bne.n	800fadc <_free_r+0x74>
 800fac4:	6820      	ldr	r0, [r4, #0]
 800fac6:	4401      	add	r1, r0
 800fac8:	1858      	adds	r0, r3, r1
 800faca:	4282      	cmp	r2, r0
 800facc:	6019      	str	r1, [r3, #0]
 800face:	d1dd      	bne.n	800fa8c <_free_r+0x24>
 800fad0:	6810      	ldr	r0, [r2, #0]
 800fad2:	6852      	ldr	r2, [r2, #4]
 800fad4:	605a      	str	r2, [r3, #4]
 800fad6:	4401      	add	r1, r0
 800fad8:	6019      	str	r1, [r3, #0]
 800fada:	e7d7      	b.n	800fa8c <_free_r+0x24>
 800fadc:	d902      	bls.n	800fae4 <_free_r+0x7c>
 800fade:	230c      	movs	r3, #12
 800fae0:	602b      	str	r3, [r5, #0]
 800fae2:	e7d3      	b.n	800fa8c <_free_r+0x24>
 800fae4:	6820      	ldr	r0, [r4, #0]
 800fae6:	1821      	adds	r1, r4, r0
 800fae8:	428a      	cmp	r2, r1
 800faea:	bf04      	itt	eq
 800faec:	6811      	ldreq	r1, [r2, #0]
 800faee:	6852      	ldreq	r2, [r2, #4]
 800faf0:	6062      	str	r2, [r4, #4]
 800faf2:	bf04      	itt	eq
 800faf4:	1809      	addeq	r1, r1, r0
 800faf6:	6021      	streq	r1, [r4, #0]
 800faf8:	605c      	str	r4, [r3, #4]
 800fafa:	e7c7      	b.n	800fa8c <_free_r+0x24>
 800fafc:	bd38      	pop	{r3, r4, r5, pc}
 800fafe:	bf00      	nop
 800fb00:	240001ec 	.word	0x240001ec

0800fb04 <_malloc_r>:
 800fb04:	b570      	push	{r4, r5, r6, lr}
 800fb06:	1ccd      	adds	r5, r1, #3
 800fb08:	f025 0503 	bic.w	r5, r5, #3
 800fb0c:	3508      	adds	r5, #8
 800fb0e:	2d0c      	cmp	r5, #12
 800fb10:	bf38      	it	cc
 800fb12:	250c      	movcc	r5, #12
 800fb14:	2d00      	cmp	r5, #0
 800fb16:	4606      	mov	r6, r0
 800fb18:	db01      	blt.n	800fb1e <_malloc_r+0x1a>
 800fb1a:	42a9      	cmp	r1, r5
 800fb1c:	d903      	bls.n	800fb26 <_malloc_r+0x22>
 800fb1e:	230c      	movs	r3, #12
 800fb20:	6033      	str	r3, [r6, #0]
 800fb22:	2000      	movs	r0, #0
 800fb24:	bd70      	pop	{r4, r5, r6, pc}
 800fb26:	f000 fd24 	bl	8010572 <__malloc_lock>
 800fb2a:	4a21      	ldr	r2, [pc, #132]	; (800fbb0 <_malloc_r+0xac>)
 800fb2c:	6814      	ldr	r4, [r2, #0]
 800fb2e:	4621      	mov	r1, r4
 800fb30:	b991      	cbnz	r1, 800fb58 <_malloc_r+0x54>
 800fb32:	4c20      	ldr	r4, [pc, #128]	; (800fbb4 <_malloc_r+0xb0>)
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	b91b      	cbnz	r3, 800fb40 <_malloc_r+0x3c>
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f000 fc57 	bl	80103ec <_sbrk_r>
 800fb3e:	6020      	str	r0, [r4, #0]
 800fb40:	4629      	mov	r1, r5
 800fb42:	4630      	mov	r0, r6
 800fb44:	f000 fc52 	bl	80103ec <_sbrk_r>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	d124      	bne.n	800fb96 <_malloc_r+0x92>
 800fb4c:	230c      	movs	r3, #12
 800fb4e:	6033      	str	r3, [r6, #0]
 800fb50:	4630      	mov	r0, r6
 800fb52:	f000 fd0f 	bl	8010574 <__malloc_unlock>
 800fb56:	e7e4      	b.n	800fb22 <_malloc_r+0x1e>
 800fb58:	680b      	ldr	r3, [r1, #0]
 800fb5a:	1b5b      	subs	r3, r3, r5
 800fb5c:	d418      	bmi.n	800fb90 <_malloc_r+0x8c>
 800fb5e:	2b0b      	cmp	r3, #11
 800fb60:	d90f      	bls.n	800fb82 <_malloc_r+0x7e>
 800fb62:	600b      	str	r3, [r1, #0]
 800fb64:	50cd      	str	r5, [r1, r3]
 800fb66:	18cc      	adds	r4, r1, r3
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f000 fd03 	bl	8010574 <__malloc_unlock>
 800fb6e:	f104 000b 	add.w	r0, r4, #11
 800fb72:	1d23      	adds	r3, r4, #4
 800fb74:	f020 0007 	bic.w	r0, r0, #7
 800fb78:	1ac3      	subs	r3, r0, r3
 800fb7a:	d0d3      	beq.n	800fb24 <_malloc_r+0x20>
 800fb7c:	425a      	negs	r2, r3
 800fb7e:	50e2      	str	r2, [r4, r3]
 800fb80:	e7d0      	b.n	800fb24 <_malloc_r+0x20>
 800fb82:	428c      	cmp	r4, r1
 800fb84:	684b      	ldr	r3, [r1, #4]
 800fb86:	bf16      	itet	ne
 800fb88:	6063      	strne	r3, [r4, #4]
 800fb8a:	6013      	streq	r3, [r2, #0]
 800fb8c:	460c      	movne	r4, r1
 800fb8e:	e7eb      	b.n	800fb68 <_malloc_r+0x64>
 800fb90:	460c      	mov	r4, r1
 800fb92:	6849      	ldr	r1, [r1, #4]
 800fb94:	e7cc      	b.n	800fb30 <_malloc_r+0x2c>
 800fb96:	1cc4      	adds	r4, r0, #3
 800fb98:	f024 0403 	bic.w	r4, r4, #3
 800fb9c:	42a0      	cmp	r0, r4
 800fb9e:	d005      	beq.n	800fbac <_malloc_r+0xa8>
 800fba0:	1a21      	subs	r1, r4, r0
 800fba2:	4630      	mov	r0, r6
 800fba4:	f000 fc22 	bl	80103ec <_sbrk_r>
 800fba8:	3001      	adds	r0, #1
 800fbaa:	d0cf      	beq.n	800fb4c <_malloc_r+0x48>
 800fbac:	6025      	str	r5, [r4, #0]
 800fbae:	e7db      	b.n	800fb68 <_malloc_r+0x64>
 800fbb0:	240001ec 	.word	0x240001ec
 800fbb4:	240001f0 	.word	0x240001f0

0800fbb8 <__ssputs_r>:
 800fbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbbc:	688e      	ldr	r6, [r1, #8]
 800fbbe:	429e      	cmp	r6, r3
 800fbc0:	4682      	mov	sl, r0
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	4690      	mov	r8, r2
 800fbc6:	4699      	mov	r9, r3
 800fbc8:	d837      	bhi.n	800fc3a <__ssputs_r+0x82>
 800fbca:	898a      	ldrh	r2, [r1, #12]
 800fbcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbd0:	d031      	beq.n	800fc36 <__ssputs_r+0x7e>
 800fbd2:	6825      	ldr	r5, [r4, #0]
 800fbd4:	6909      	ldr	r1, [r1, #16]
 800fbd6:	1a6f      	subs	r7, r5, r1
 800fbd8:	6965      	ldr	r5, [r4, #20]
 800fbda:	2302      	movs	r3, #2
 800fbdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbe0:	fb95 f5f3 	sdiv	r5, r5, r3
 800fbe4:	f109 0301 	add.w	r3, r9, #1
 800fbe8:	443b      	add	r3, r7
 800fbea:	429d      	cmp	r5, r3
 800fbec:	bf38      	it	cc
 800fbee:	461d      	movcc	r5, r3
 800fbf0:	0553      	lsls	r3, r2, #21
 800fbf2:	d530      	bpl.n	800fc56 <__ssputs_r+0x9e>
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	f7ff ff85 	bl	800fb04 <_malloc_r>
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	b950      	cbnz	r0, 800fc14 <__ssputs_r+0x5c>
 800fbfe:	230c      	movs	r3, #12
 800fc00:	f8ca 3000 	str.w	r3, [sl]
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc0a:	81a3      	strh	r3, [r4, #12]
 800fc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc14:	463a      	mov	r2, r7
 800fc16:	6921      	ldr	r1, [r4, #16]
 800fc18:	f7ff fbd9 	bl	800f3ce <memcpy>
 800fc1c:	89a3      	ldrh	r3, [r4, #12]
 800fc1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc26:	81a3      	strh	r3, [r4, #12]
 800fc28:	6126      	str	r6, [r4, #16]
 800fc2a:	6165      	str	r5, [r4, #20]
 800fc2c:	443e      	add	r6, r7
 800fc2e:	1bed      	subs	r5, r5, r7
 800fc30:	6026      	str	r6, [r4, #0]
 800fc32:	60a5      	str	r5, [r4, #8]
 800fc34:	464e      	mov	r6, r9
 800fc36:	454e      	cmp	r6, r9
 800fc38:	d900      	bls.n	800fc3c <__ssputs_r+0x84>
 800fc3a:	464e      	mov	r6, r9
 800fc3c:	4632      	mov	r2, r6
 800fc3e:	4641      	mov	r1, r8
 800fc40:	6820      	ldr	r0, [r4, #0]
 800fc42:	f000 fc7d 	bl	8010540 <memmove>
 800fc46:	68a3      	ldr	r3, [r4, #8]
 800fc48:	1b9b      	subs	r3, r3, r6
 800fc4a:	60a3      	str	r3, [r4, #8]
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	441e      	add	r6, r3
 800fc50:	6026      	str	r6, [r4, #0]
 800fc52:	2000      	movs	r0, #0
 800fc54:	e7dc      	b.n	800fc10 <__ssputs_r+0x58>
 800fc56:	462a      	mov	r2, r5
 800fc58:	f000 fc8d 	bl	8010576 <_realloc_r>
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d1e2      	bne.n	800fc28 <__ssputs_r+0x70>
 800fc62:	6921      	ldr	r1, [r4, #16]
 800fc64:	4650      	mov	r0, sl
 800fc66:	f7ff feff 	bl	800fa68 <_free_r>
 800fc6a:	e7c8      	b.n	800fbfe <__ssputs_r+0x46>

0800fc6c <_svfiprintf_r>:
 800fc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc70:	461d      	mov	r5, r3
 800fc72:	898b      	ldrh	r3, [r1, #12]
 800fc74:	061f      	lsls	r7, r3, #24
 800fc76:	b09d      	sub	sp, #116	; 0x74
 800fc78:	4680      	mov	r8, r0
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	4616      	mov	r6, r2
 800fc7e:	d50f      	bpl.n	800fca0 <_svfiprintf_r+0x34>
 800fc80:	690b      	ldr	r3, [r1, #16]
 800fc82:	b96b      	cbnz	r3, 800fca0 <_svfiprintf_r+0x34>
 800fc84:	2140      	movs	r1, #64	; 0x40
 800fc86:	f7ff ff3d 	bl	800fb04 <_malloc_r>
 800fc8a:	6020      	str	r0, [r4, #0]
 800fc8c:	6120      	str	r0, [r4, #16]
 800fc8e:	b928      	cbnz	r0, 800fc9c <_svfiprintf_r+0x30>
 800fc90:	230c      	movs	r3, #12
 800fc92:	f8c8 3000 	str.w	r3, [r8]
 800fc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc9a:	e0c8      	b.n	800fe2e <_svfiprintf_r+0x1c2>
 800fc9c:	2340      	movs	r3, #64	; 0x40
 800fc9e:	6163      	str	r3, [r4, #20]
 800fca0:	2300      	movs	r3, #0
 800fca2:	9309      	str	r3, [sp, #36]	; 0x24
 800fca4:	2320      	movs	r3, #32
 800fca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcaa:	2330      	movs	r3, #48	; 0x30
 800fcac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcb0:	9503      	str	r5, [sp, #12]
 800fcb2:	f04f 0b01 	mov.w	fp, #1
 800fcb6:	4637      	mov	r7, r6
 800fcb8:	463d      	mov	r5, r7
 800fcba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fcbe:	b10b      	cbz	r3, 800fcc4 <_svfiprintf_r+0x58>
 800fcc0:	2b25      	cmp	r3, #37	; 0x25
 800fcc2:	d13e      	bne.n	800fd42 <_svfiprintf_r+0xd6>
 800fcc4:	ebb7 0a06 	subs.w	sl, r7, r6
 800fcc8:	d00b      	beq.n	800fce2 <_svfiprintf_r+0x76>
 800fcca:	4653      	mov	r3, sl
 800fccc:	4632      	mov	r2, r6
 800fcce:	4621      	mov	r1, r4
 800fcd0:	4640      	mov	r0, r8
 800fcd2:	f7ff ff71 	bl	800fbb8 <__ssputs_r>
 800fcd6:	3001      	adds	r0, #1
 800fcd8:	f000 80a4 	beq.w	800fe24 <_svfiprintf_r+0x1b8>
 800fcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcde:	4453      	add	r3, sl
 800fce0:	9309      	str	r3, [sp, #36]	; 0x24
 800fce2:	783b      	ldrb	r3, [r7, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f000 809d 	beq.w	800fe24 <_svfiprintf_r+0x1b8>
 800fcea:	2300      	movs	r3, #0
 800fcec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fcf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcf4:	9304      	str	r3, [sp, #16]
 800fcf6:	9307      	str	r3, [sp, #28]
 800fcf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcfc:	931a      	str	r3, [sp, #104]	; 0x68
 800fcfe:	462f      	mov	r7, r5
 800fd00:	2205      	movs	r2, #5
 800fd02:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fd06:	4850      	ldr	r0, [pc, #320]	; (800fe48 <_svfiprintf_r+0x1dc>)
 800fd08:	f7f0 faf2 	bl	80002f0 <memchr>
 800fd0c:	9b04      	ldr	r3, [sp, #16]
 800fd0e:	b9d0      	cbnz	r0, 800fd46 <_svfiprintf_r+0xda>
 800fd10:	06d9      	lsls	r1, r3, #27
 800fd12:	bf44      	itt	mi
 800fd14:	2220      	movmi	r2, #32
 800fd16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd1a:	071a      	lsls	r2, r3, #28
 800fd1c:	bf44      	itt	mi
 800fd1e:	222b      	movmi	r2, #43	; 0x2b
 800fd20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fd24:	782a      	ldrb	r2, [r5, #0]
 800fd26:	2a2a      	cmp	r2, #42	; 0x2a
 800fd28:	d015      	beq.n	800fd56 <_svfiprintf_r+0xea>
 800fd2a:	9a07      	ldr	r2, [sp, #28]
 800fd2c:	462f      	mov	r7, r5
 800fd2e:	2000      	movs	r0, #0
 800fd30:	250a      	movs	r5, #10
 800fd32:	4639      	mov	r1, r7
 800fd34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd38:	3b30      	subs	r3, #48	; 0x30
 800fd3a:	2b09      	cmp	r3, #9
 800fd3c:	d94d      	bls.n	800fdda <_svfiprintf_r+0x16e>
 800fd3e:	b1b8      	cbz	r0, 800fd70 <_svfiprintf_r+0x104>
 800fd40:	e00f      	b.n	800fd62 <_svfiprintf_r+0xf6>
 800fd42:	462f      	mov	r7, r5
 800fd44:	e7b8      	b.n	800fcb8 <_svfiprintf_r+0x4c>
 800fd46:	4a40      	ldr	r2, [pc, #256]	; (800fe48 <_svfiprintf_r+0x1dc>)
 800fd48:	1a80      	subs	r0, r0, r2
 800fd4a:	fa0b f000 	lsl.w	r0, fp, r0
 800fd4e:	4318      	orrs	r0, r3
 800fd50:	9004      	str	r0, [sp, #16]
 800fd52:	463d      	mov	r5, r7
 800fd54:	e7d3      	b.n	800fcfe <_svfiprintf_r+0x92>
 800fd56:	9a03      	ldr	r2, [sp, #12]
 800fd58:	1d11      	adds	r1, r2, #4
 800fd5a:	6812      	ldr	r2, [r2, #0]
 800fd5c:	9103      	str	r1, [sp, #12]
 800fd5e:	2a00      	cmp	r2, #0
 800fd60:	db01      	blt.n	800fd66 <_svfiprintf_r+0xfa>
 800fd62:	9207      	str	r2, [sp, #28]
 800fd64:	e004      	b.n	800fd70 <_svfiprintf_r+0x104>
 800fd66:	4252      	negs	r2, r2
 800fd68:	f043 0302 	orr.w	r3, r3, #2
 800fd6c:	9207      	str	r2, [sp, #28]
 800fd6e:	9304      	str	r3, [sp, #16]
 800fd70:	783b      	ldrb	r3, [r7, #0]
 800fd72:	2b2e      	cmp	r3, #46	; 0x2e
 800fd74:	d10c      	bne.n	800fd90 <_svfiprintf_r+0x124>
 800fd76:	787b      	ldrb	r3, [r7, #1]
 800fd78:	2b2a      	cmp	r3, #42	; 0x2a
 800fd7a:	d133      	bne.n	800fde4 <_svfiprintf_r+0x178>
 800fd7c:	9b03      	ldr	r3, [sp, #12]
 800fd7e:	1d1a      	adds	r2, r3, #4
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	9203      	str	r2, [sp, #12]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	bfb8      	it	lt
 800fd88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fd8c:	3702      	adds	r7, #2
 800fd8e:	9305      	str	r3, [sp, #20]
 800fd90:	4d2e      	ldr	r5, [pc, #184]	; (800fe4c <_svfiprintf_r+0x1e0>)
 800fd92:	7839      	ldrb	r1, [r7, #0]
 800fd94:	2203      	movs	r2, #3
 800fd96:	4628      	mov	r0, r5
 800fd98:	f7f0 faaa 	bl	80002f0 <memchr>
 800fd9c:	b138      	cbz	r0, 800fdae <_svfiprintf_r+0x142>
 800fd9e:	2340      	movs	r3, #64	; 0x40
 800fda0:	1b40      	subs	r0, r0, r5
 800fda2:	fa03 f000 	lsl.w	r0, r3, r0
 800fda6:	9b04      	ldr	r3, [sp, #16]
 800fda8:	4303      	orrs	r3, r0
 800fdaa:	3701      	adds	r7, #1
 800fdac:	9304      	str	r3, [sp, #16]
 800fdae:	7839      	ldrb	r1, [r7, #0]
 800fdb0:	4827      	ldr	r0, [pc, #156]	; (800fe50 <_svfiprintf_r+0x1e4>)
 800fdb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdb6:	2206      	movs	r2, #6
 800fdb8:	1c7e      	adds	r6, r7, #1
 800fdba:	f7f0 fa99 	bl	80002f0 <memchr>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d038      	beq.n	800fe34 <_svfiprintf_r+0x1c8>
 800fdc2:	4b24      	ldr	r3, [pc, #144]	; (800fe54 <_svfiprintf_r+0x1e8>)
 800fdc4:	bb13      	cbnz	r3, 800fe0c <_svfiprintf_r+0x1a0>
 800fdc6:	9b03      	ldr	r3, [sp, #12]
 800fdc8:	3307      	adds	r3, #7
 800fdca:	f023 0307 	bic.w	r3, r3, #7
 800fdce:	3308      	adds	r3, #8
 800fdd0:	9303      	str	r3, [sp, #12]
 800fdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdd4:	444b      	add	r3, r9
 800fdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd8:	e76d      	b.n	800fcb6 <_svfiprintf_r+0x4a>
 800fdda:	fb05 3202 	mla	r2, r5, r2, r3
 800fdde:	2001      	movs	r0, #1
 800fde0:	460f      	mov	r7, r1
 800fde2:	e7a6      	b.n	800fd32 <_svfiprintf_r+0xc6>
 800fde4:	2300      	movs	r3, #0
 800fde6:	3701      	adds	r7, #1
 800fde8:	9305      	str	r3, [sp, #20]
 800fdea:	4619      	mov	r1, r3
 800fdec:	250a      	movs	r5, #10
 800fdee:	4638      	mov	r0, r7
 800fdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdf4:	3a30      	subs	r2, #48	; 0x30
 800fdf6:	2a09      	cmp	r2, #9
 800fdf8:	d903      	bls.n	800fe02 <_svfiprintf_r+0x196>
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d0c8      	beq.n	800fd90 <_svfiprintf_r+0x124>
 800fdfe:	9105      	str	r1, [sp, #20]
 800fe00:	e7c6      	b.n	800fd90 <_svfiprintf_r+0x124>
 800fe02:	fb05 2101 	mla	r1, r5, r1, r2
 800fe06:	2301      	movs	r3, #1
 800fe08:	4607      	mov	r7, r0
 800fe0a:	e7f0      	b.n	800fdee <_svfiprintf_r+0x182>
 800fe0c:	ab03      	add	r3, sp, #12
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	4622      	mov	r2, r4
 800fe12:	4b11      	ldr	r3, [pc, #68]	; (800fe58 <_svfiprintf_r+0x1ec>)
 800fe14:	a904      	add	r1, sp, #16
 800fe16:	4640      	mov	r0, r8
 800fe18:	f3af 8000 	nop.w
 800fe1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800fe20:	4681      	mov	r9, r0
 800fe22:	d1d6      	bne.n	800fdd2 <_svfiprintf_r+0x166>
 800fe24:	89a3      	ldrh	r3, [r4, #12]
 800fe26:	065b      	lsls	r3, r3, #25
 800fe28:	f53f af35 	bmi.w	800fc96 <_svfiprintf_r+0x2a>
 800fe2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe2e:	b01d      	add	sp, #116	; 0x74
 800fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	ab03      	add	r3, sp, #12
 800fe36:	9300      	str	r3, [sp, #0]
 800fe38:	4622      	mov	r2, r4
 800fe3a:	4b07      	ldr	r3, [pc, #28]	; (800fe58 <_svfiprintf_r+0x1ec>)
 800fe3c:	a904      	add	r1, sp, #16
 800fe3e:	4640      	mov	r0, r8
 800fe40:	f000 f9c2 	bl	80101c8 <_printf_i>
 800fe44:	e7ea      	b.n	800fe1c <_svfiprintf_r+0x1b0>
 800fe46:	bf00      	nop
 800fe48:	08011a1c 	.word	0x08011a1c
 800fe4c:	08011a22 	.word	0x08011a22
 800fe50:	08011a26 	.word	0x08011a26
 800fe54:	00000000 	.word	0x00000000
 800fe58:	0800fbb9 	.word	0x0800fbb9

0800fe5c <__sfputc_r>:
 800fe5c:	6893      	ldr	r3, [r2, #8]
 800fe5e:	3b01      	subs	r3, #1
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	b410      	push	{r4}
 800fe64:	6093      	str	r3, [r2, #8]
 800fe66:	da08      	bge.n	800fe7a <__sfputc_r+0x1e>
 800fe68:	6994      	ldr	r4, [r2, #24]
 800fe6a:	42a3      	cmp	r3, r4
 800fe6c:	db01      	blt.n	800fe72 <__sfputc_r+0x16>
 800fe6e:	290a      	cmp	r1, #10
 800fe70:	d103      	bne.n	800fe7a <__sfputc_r+0x1e>
 800fe72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe76:	f7ff bb59 	b.w	800f52c <__swbuf_r>
 800fe7a:	6813      	ldr	r3, [r2, #0]
 800fe7c:	1c58      	adds	r0, r3, #1
 800fe7e:	6010      	str	r0, [r2, #0]
 800fe80:	7019      	strb	r1, [r3, #0]
 800fe82:	4608      	mov	r0, r1
 800fe84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe88:	4770      	bx	lr

0800fe8a <__sfputs_r>:
 800fe8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8c:	4606      	mov	r6, r0
 800fe8e:	460f      	mov	r7, r1
 800fe90:	4614      	mov	r4, r2
 800fe92:	18d5      	adds	r5, r2, r3
 800fe94:	42ac      	cmp	r4, r5
 800fe96:	d101      	bne.n	800fe9c <__sfputs_r+0x12>
 800fe98:	2000      	movs	r0, #0
 800fe9a:	e007      	b.n	800feac <__sfputs_r+0x22>
 800fe9c:	463a      	mov	r2, r7
 800fe9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fea2:	4630      	mov	r0, r6
 800fea4:	f7ff ffda 	bl	800fe5c <__sfputc_r>
 800fea8:	1c43      	adds	r3, r0, #1
 800feaa:	d1f3      	bne.n	800fe94 <__sfputs_r+0xa>
 800feac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800feb0 <_vfiprintf_r>:
 800feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	460c      	mov	r4, r1
 800feb6:	b09d      	sub	sp, #116	; 0x74
 800feb8:	4617      	mov	r7, r2
 800feba:	461d      	mov	r5, r3
 800febc:	4606      	mov	r6, r0
 800febe:	b118      	cbz	r0, 800fec8 <_vfiprintf_r+0x18>
 800fec0:	6983      	ldr	r3, [r0, #24]
 800fec2:	b90b      	cbnz	r3, 800fec8 <_vfiprintf_r+0x18>
 800fec4:	f7ff fce2 	bl	800f88c <__sinit>
 800fec8:	4b7c      	ldr	r3, [pc, #496]	; (80100bc <_vfiprintf_r+0x20c>)
 800feca:	429c      	cmp	r4, r3
 800fecc:	d158      	bne.n	800ff80 <_vfiprintf_r+0xd0>
 800fece:	6874      	ldr	r4, [r6, #4]
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	0718      	lsls	r0, r3, #28
 800fed4:	d55e      	bpl.n	800ff94 <_vfiprintf_r+0xe4>
 800fed6:	6923      	ldr	r3, [r4, #16]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d05b      	beq.n	800ff94 <_vfiprintf_r+0xe4>
 800fedc:	2300      	movs	r3, #0
 800fede:	9309      	str	r3, [sp, #36]	; 0x24
 800fee0:	2320      	movs	r3, #32
 800fee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fee6:	2330      	movs	r3, #48	; 0x30
 800fee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feec:	9503      	str	r5, [sp, #12]
 800feee:	f04f 0b01 	mov.w	fp, #1
 800fef2:	46b8      	mov	r8, r7
 800fef4:	4645      	mov	r5, r8
 800fef6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fefa:	b10b      	cbz	r3, 800ff00 <_vfiprintf_r+0x50>
 800fefc:	2b25      	cmp	r3, #37	; 0x25
 800fefe:	d154      	bne.n	800ffaa <_vfiprintf_r+0xfa>
 800ff00:	ebb8 0a07 	subs.w	sl, r8, r7
 800ff04:	d00b      	beq.n	800ff1e <_vfiprintf_r+0x6e>
 800ff06:	4653      	mov	r3, sl
 800ff08:	463a      	mov	r2, r7
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f7ff ffbc 	bl	800fe8a <__sfputs_r>
 800ff12:	3001      	adds	r0, #1
 800ff14:	f000 80c2 	beq.w	801009c <_vfiprintf_r+0x1ec>
 800ff18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff1a:	4453      	add	r3, sl
 800ff1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff1e:	f898 3000 	ldrb.w	r3, [r8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 80ba 	beq.w	801009c <_vfiprintf_r+0x1ec>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff32:	9304      	str	r3, [sp, #16]
 800ff34:	9307      	str	r3, [sp, #28]
 800ff36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ff3c:	46a8      	mov	r8, r5
 800ff3e:	2205      	movs	r2, #5
 800ff40:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ff44:	485e      	ldr	r0, [pc, #376]	; (80100c0 <_vfiprintf_r+0x210>)
 800ff46:	f7f0 f9d3 	bl	80002f0 <memchr>
 800ff4a:	9b04      	ldr	r3, [sp, #16]
 800ff4c:	bb78      	cbnz	r0, 800ffae <_vfiprintf_r+0xfe>
 800ff4e:	06d9      	lsls	r1, r3, #27
 800ff50:	bf44      	itt	mi
 800ff52:	2220      	movmi	r2, #32
 800ff54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff58:	071a      	lsls	r2, r3, #28
 800ff5a:	bf44      	itt	mi
 800ff5c:	222b      	movmi	r2, #43	; 0x2b
 800ff5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff62:	782a      	ldrb	r2, [r5, #0]
 800ff64:	2a2a      	cmp	r2, #42	; 0x2a
 800ff66:	d02a      	beq.n	800ffbe <_vfiprintf_r+0x10e>
 800ff68:	9a07      	ldr	r2, [sp, #28]
 800ff6a:	46a8      	mov	r8, r5
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	250a      	movs	r5, #10
 800ff70:	4641      	mov	r1, r8
 800ff72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff76:	3b30      	subs	r3, #48	; 0x30
 800ff78:	2b09      	cmp	r3, #9
 800ff7a:	d969      	bls.n	8010050 <_vfiprintf_r+0x1a0>
 800ff7c:	b360      	cbz	r0, 800ffd8 <_vfiprintf_r+0x128>
 800ff7e:	e024      	b.n	800ffca <_vfiprintf_r+0x11a>
 800ff80:	4b50      	ldr	r3, [pc, #320]	; (80100c4 <_vfiprintf_r+0x214>)
 800ff82:	429c      	cmp	r4, r3
 800ff84:	d101      	bne.n	800ff8a <_vfiprintf_r+0xda>
 800ff86:	68b4      	ldr	r4, [r6, #8]
 800ff88:	e7a2      	b.n	800fed0 <_vfiprintf_r+0x20>
 800ff8a:	4b4f      	ldr	r3, [pc, #316]	; (80100c8 <_vfiprintf_r+0x218>)
 800ff8c:	429c      	cmp	r4, r3
 800ff8e:	bf08      	it	eq
 800ff90:	68f4      	ldreq	r4, [r6, #12]
 800ff92:	e79d      	b.n	800fed0 <_vfiprintf_r+0x20>
 800ff94:	4621      	mov	r1, r4
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7ff fb1a 	bl	800f5d0 <__swsetup_r>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	d09d      	beq.n	800fedc <_vfiprintf_r+0x2c>
 800ffa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffa4:	b01d      	add	sp, #116	; 0x74
 800ffa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffaa:	46a8      	mov	r8, r5
 800ffac:	e7a2      	b.n	800fef4 <_vfiprintf_r+0x44>
 800ffae:	4a44      	ldr	r2, [pc, #272]	; (80100c0 <_vfiprintf_r+0x210>)
 800ffb0:	1a80      	subs	r0, r0, r2
 800ffb2:	fa0b f000 	lsl.w	r0, fp, r0
 800ffb6:	4318      	orrs	r0, r3
 800ffb8:	9004      	str	r0, [sp, #16]
 800ffba:	4645      	mov	r5, r8
 800ffbc:	e7be      	b.n	800ff3c <_vfiprintf_r+0x8c>
 800ffbe:	9a03      	ldr	r2, [sp, #12]
 800ffc0:	1d11      	adds	r1, r2, #4
 800ffc2:	6812      	ldr	r2, [r2, #0]
 800ffc4:	9103      	str	r1, [sp, #12]
 800ffc6:	2a00      	cmp	r2, #0
 800ffc8:	db01      	blt.n	800ffce <_vfiprintf_r+0x11e>
 800ffca:	9207      	str	r2, [sp, #28]
 800ffcc:	e004      	b.n	800ffd8 <_vfiprintf_r+0x128>
 800ffce:	4252      	negs	r2, r2
 800ffd0:	f043 0302 	orr.w	r3, r3, #2
 800ffd4:	9207      	str	r2, [sp, #28]
 800ffd6:	9304      	str	r3, [sp, #16]
 800ffd8:	f898 3000 	ldrb.w	r3, [r8]
 800ffdc:	2b2e      	cmp	r3, #46	; 0x2e
 800ffde:	d10e      	bne.n	800fffe <_vfiprintf_r+0x14e>
 800ffe0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ffe4:	2b2a      	cmp	r3, #42	; 0x2a
 800ffe6:	d138      	bne.n	801005a <_vfiprintf_r+0x1aa>
 800ffe8:	9b03      	ldr	r3, [sp, #12]
 800ffea:	1d1a      	adds	r2, r3, #4
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	9203      	str	r2, [sp, #12]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	bfb8      	it	lt
 800fff4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fff8:	f108 0802 	add.w	r8, r8, #2
 800fffc:	9305      	str	r3, [sp, #20]
 800fffe:	4d33      	ldr	r5, [pc, #204]	; (80100cc <_vfiprintf_r+0x21c>)
 8010000:	f898 1000 	ldrb.w	r1, [r8]
 8010004:	2203      	movs	r2, #3
 8010006:	4628      	mov	r0, r5
 8010008:	f7f0 f972 	bl	80002f0 <memchr>
 801000c:	b140      	cbz	r0, 8010020 <_vfiprintf_r+0x170>
 801000e:	2340      	movs	r3, #64	; 0x40
 8010010:	1b40      	subs	r0, r0, r5
 8010012:	fa03 f000 	lsl.w	r0, r3, r0
 8010016:	9b04      	ldr	r3, [sp, #16]
 8010018:	4303      	orrs	r3, r0
 801001a:	f108 0801 	add.w	r8, r8, #1
 801001e:	9304      	str	r3, [sp, #16]
 8010020:	f898 1000 	ldrb.w	r1, [r8]
 8010024:	482a      	ldr	r0, [pc, #168]	; (80100d0 <_vfiprintf_r+0x220>)
 8010026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801002a:	2206      	movs	r2, #6
 801002c:	f108 0701 	add.w	r7, r8, #1
 8010030:	f7f0 f95e 	bl	80002f0 <memchr>
 8010034:	2800      	cmp	r0, #0
 8010036:	d037      	beq.n	80100a8 <_vfiprintf_r+0x1f8>
 8010038:	4b26      	ldr	r3, [pc, #152]	; (80100d4 <_vfiprintf_r+0x224>)
 801003a:	bb1b      	cbnz	r3, 8010084 <_vfiprintf_r+0x1d4>
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	3307      	adds	r3, #7
 8010040:	f023 0307 	bic.w	r3, r3, #7
 8010044:	3308      	adds	r3, #8
 8010046:	9303      	str	r3, [sp, #12]
 8010048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801004a:	444b      	add	r3, r9
 801004c:	9309      	str	r3, [sp, #36]	; 0x24
 801004e:	e750      	b.n	800fef2 <_vfiprintf_r+0x42>
 8010050:	fb05 3202 	mla	r2, r5, r2, r3
 8010054:	2001      	movs	r0, #1
 8010056:	4688      	mov	r8, r1
 8010058:	e78a      	b.n	800ff70 <_vfiprintf_r+0xc0>
 801005a:	2300      	movs	r3, #0
 801005c:	f108 0801 	add.w	r8, r8, #1
 8010060:	9305      	str	r3, [sp, #20]
 8010062:	4619      	mov	r1, r3
 8010064:	250a      	movs	r5, #10
 8010066:	4640      	mov	r0, r8
 8010068:	f810 2b01 	ldrb.w	r2, [r0], #1
 801006c:	3a30      	subs	r2, #48	; 0x30
 801006e:	2a09      	cmp	r2, #9
 8010070:	d903      	bls.n	801007a <_vfiprintf_r+0x1ca>
 8010072:	2b00      	cmp	r3, #0
 8010074:	d0c3      	beq.n	800fffe <_vfiprintf_r+0x14e>
 8010076:	9105      	str	r1, [sp, #20]
 8010078:	e7c1      	b.n	800fffe <_vfiprintf_r+0x14e>
 801007a:	fb05 2101 	mla	r1, r5, r1, r2
 801007e:	2301      	movs	r3, #1
 8010080:	4680      	mov	r8, r0
 8010082:	e7f0      	b.n	8010066 <_vfiprintf_r+0x1b6>
 8010084:	ab03      	add	r3, sp, #12
 8010086:	9300      	str	r3, [sp, #0]
 8010088:	4622      	mov	r2, r4
 801008a:	4b13      	ldr	r3, [pc, #76]	; (80100d8 <_vfiprintf_r+0x228>)
 801008c:	a904      	add	r1, sp, #16
 801008e:	4630      	mov	r0, r6
 8010090:	f3af 8000 	nop.w
 8010094:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010098:	4681      	mov	r9, r0
 801009a:	d1d5      	bne.n	8010048 <_vfiprintf_r+0x198>
 801009c:	89a3      	ldrh	r3, [r4, #12]
 801009e:	065b      	lsls	r3, r3, #25
 80100a0:	f53f af7e 	bmi.w	800ffa0 <_vfiprintf_r+0xf0>
 80100a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100a6:	e77d      	b.n	800ffa4 <_vfiprintf_r+0xf4>
 80100a8:	ab03      	add	r3, sp, #12
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	4622      	mov	r2, r4
 80100ae:	4b0a      	ldr	r3, [pc, #40]	; (80100d8 <_vfiprintf_r+0x228>)
 80100b0:	a904      	add	r1, sp, #16
 80100b2:	4630      	mov	r0, r6
 80100b4:	f000 f888 	bl	80101c8 <_printf_i>
 80100b8:	e7ec      	b.n	8010094 <_vfiprintf_r+0x1e4>
 80100ba:	bf00      	nop
 80100bc:	080119dc 	.word	0x080119dc
 80100c0:	08011a1c 	.word	0x08011a1c
 80100c4:	080119fc 	.word	0x080119fc
 80100c8:	080119bc 	.word	0x080119bc
 80100cc:	08011a22 	.word	0x08011a22
 80100d0:	08011a26 	.word	0x08011a26
 80100d4:	00000000 	.word	0x00000000
 80100d8:	0800fe8b 	.word	0x0800fe8b

080100dc <_printf_common>:
 80100dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e0:	4691      	mov	r9, r2
 80100e2:	461f      	mov	r7, r3
 80100e4:	688a      	ldr	r2, [r1, #8]
 80100e6:	690b      	ldr	r3, [r1, #16]
 80100e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100ec:	4293      	cmp	r3, r2
 80100ee:	bfb8      	it	lt
 80100f0:	4613      	movlt	r3, r2
 80100f2:	f8c9 3000 	str.w	r3, [r9]
 80100f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100fa:	4606      	mov	r6, r0
 80100fc:	460c      	mov	r4, r1
 80100fe:	b112      	cbz	r2, 8010106 <_printf_common+0x2a>
 8010100:	3301      	adds	r3, #1
 8010102:	f8c9 3000 	str.w	r3, [r9]
 8010106:	6823      	ldr	r3, [r4, #0]
 8010108:	0699      	lsls	r1, r3, #26
 801010a:	bf42      	ittt	mi
 801010c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010110:	3302      	addmi	r3, #2
 8010112:	f8c9 3000 	strmi.w	r3, [r9]
 8010116:	6825      	ldr	r5, [r4, #0]
 8010118:	f015 0506 	ands.w	r5, r5, #6
 801011c:	d107      	bne.n	801012e <_printf_common+0x52>
 801011e:	f104 0a19 	add.w	sl, r4, #25
 8010122:	68e3      	ldr	r3, [r4, #12]
 8010124:	f8d9 2000 	ldr.w	r2, [r9]
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	42ab      	cmp	r3, r5
 801012c:	dc28      	bgt.n	8010180 <_printf_common+0xa4>
 801012e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010132:	6822      	ldr	r2, [r4, #0]
 8010134:	3300      	adds	r3, #0
 8010136:	bf18      	it	ne
 8010138:	2301      	movne	r3, #1
 801013a:	0692      	lsls	r2, r2, #26
 801013c:	d42d      	bmi.n	801019a <_printf_common+0xbe>
 801013e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010142:	4639      	mov	r1, r7
 8010144:	4630      	mov	r0, r6
 8010146:	47c0      	blx	r8
 8010148:	3001      	adds	r0, #1
 801014a:	d020      	beq.n	801018e <_printf_common+0xb2>
 801014c:	6823      	ldr	r3, [r4, #0]
 801014e:	68e5      	ldr	r5, [r4, #12]
 8010150:	f8d9 2000 	ldr.w	r2, [r9]
 8010154:	f003 0306 	and.w	r3, r3, #6
 8010158:	2b04      	cmp	r3, #4
 801015a:	bf08      	it	eq
 801015c:	1aad      	subeq	r5, r5, r2
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	6922      	ldr	r2, [r4, #16]
 8010162:	bf0c      	ite	eq
 8010164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010168:	2500      	movne	r5, #0
 801016a:	4293      	cmp	r3, r2
 801016c:	bfc4      	itt	gt
 801016e:	1a9b      	subgt	r3, r3, r2
 8010170:	18ed      	addgt	r5, r5, r3
 8010172:	f04f 0900 	mov.w	r9, #0
 8010176:	341a      	adds	r4, #26
 8010178:	454d      	cmp	r5, r9
 801017a:	d11a      	bne.n	80101b2 <_printf_common+0xd6>
 801017c:	2000      	movs	r0, #0
 801017e:	e008      	b.n	8010192 <_printf_common+0xb6>
 8010180:	2301      	movs	r3, #1
 8010182:	4652      	mov	r2, sl
 8010184:	4639      	mov	r1, r7
 8010186:	4630      	mov	r0, r6
 8010188:	47c0      	blx	r8
 801018a:	3001      	adds	r0, #1
 801018c:	d103      	bne.n	8010196 <_printf_common+0xba>
 801018e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010196:	3501      	adds	r5, #1
 8010198:	e7c3      	b.n	8010122 <_printf_common+0x46>
 801019a:	18e1      	adds	r1, r4, r3
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	2030      	movs	r0, #48	; 0x30
 80101a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101a4:	4422      	add	r2, r4
 80101a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101ae:	3302      	adds	r3, #2
 80101b0:	e7c5      	b.n	801013e <_printf_common+0x62>
 80101b2:	2301      	movs	r3, #1
 80101b4:	4622      	mov	r2, r4
 80101b6:	4639      	mov	r1, r7
 80101b8:	4630      	mov	r0, r6
 80101ba:	47c0      	blx	r8
 80101bc:	3001      	adds	r0, #1
 80101be:	d0e6      	beq.n	801018e <_printf_common+0xb2>
 80101c0:	f109 0901 	add.w	r9, r9, #1
 80101c4:	e7d8      	b.n	8010178 <_printf_common+0x9c>
	...

080101c8 <_printf_i>:
 80101c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80101d0:	460c      	mov	r4, r1
 80101d2:	7e09      	ldrb	r1, [r1, #24]
 80101d4:	b085      	sub	sp, #20
 80101d6:	296e      	cmp	r1, #110	; 0x6e
 80101d8:	4617      	mov	r7, r2
 80101da:	4606      	mov	r6, r0
 80101dc:	4698      	mov	r8, r3
 80101de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101e0:	f000 80b3 	beq.w	801034a <_printf_i+0x182>
 80101e4:	d822      	bhi.n	801022c <_printf_i+0x64>
 80101e6:	2963      	cmp	r1, #99	; 0x63
 80101e8:	d036      	beq.n	8010258 <_printf_i+0x90>
 80101ea:	d80a      	bhi.n	8010202 <_printf_i+0x3a>
 80101ec:	2900      	cmp	r1, #0
 80101ee:	f000 80b9 	beq.w	8010364 <_printf_i+0x19c>
 80101f2:	2958      	cmp	r1, #88	; 0x58
 80101f4:	f000 8083 	beq.w	80102fe <_printf_i+0x136>
 80101f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010200:	e032      	b.n	8010268 <_printf_i+0xa0>
 8010202:	2964      	cmp	r1, #100	; 0x64
 8010204:	d001      	beq.n	801020a <_printf_i+0x42>
 8010206:	2969      	cmp	r1, #105	; 0x69
 8010208:	d1f6      	bne.n	80101f8 <_printf_i+0x30>
 801020a:	6820      	ldr	r0, [r4, #0]
 801020c:	6813      	ldr	r3, [r2, #0]
 801020e:	0605      	lsls	r5, r0, #24
 8010210:	f103 0104 	add.w	r1, r3, #4
 8010214:	d52a      	bpl.n	801026c <_printf_i+0xa4>
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6011      	str	r1, [r2, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	da03      	bge.n	8010226 <_printf_i+0x5e>
 801021e:	222d      	movs	r2, #45	; 0x2d
 8010220:	425b      	negs	r3, r3
 8010222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010226:	486f      	ldr	r0, [pc, #444]	; (80103e4 <_printf_i+0x21c>)
 8010228:	220a      	movs	r2, #10
 801022a:	e039      	b.n	80102a0 <_printf_i+0xd8>
 801022c:	2973      	cmp	r1, #115	; 0x73
 801022e:	f000 809d 	beq.w	801036c <_printf_i+0x1a4>
 8010232:	d808      	bhi.n	8010246 <_printf_i+0x7e>
 8010234:	296f      	cmp	r1, #111	; 0x6f
 8010236:	d020      	beq.n	801027a <_printf_i+0xb2>
 8010238:	2970      	cmp	r1, #112	; 0x70
 801023a:	d1dd      	bne.n	80101f8 <_printf_i+0x30>
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	f043 0320 	orr.w	r3, r3, #32
 8010242:	6023      	str	r3, [r4, #0]
 8010244:	e003      	b.n	801024e <_printf_i+0x86>
 8010246:	2975      	cmp	r1, #117	; 0x75
 8010248:	d017      	beq.n	801027a <_printf_i+0xb2>
 801024a:	2978      	cmp	r1, #120	; 0x78
 801024c:	d1d4      	bne.n	80101f8 <_printf_i+0x30>
 801024e:	2378      	movs	r3, #120	; 0x78
 8010250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010254:	4864      	ldr	r0, [pc, #400]	; (80103e8 <_printf_i+0x220>)
 8010256:	e055      	b.n	8010304 <_printf_i+0x13c>
 8010258:	6813      	ldr	r3, [r2, #0]
 801025a:	1d19      	adds	r1, r3, #4
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	6011      	str	r1, [r2, #0]
 8010260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010268:	2301      	movs	r3, #1
 801026a:	e08c      	b.n	8010386 <_printf_i+0x1be>
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6011      	str	r1, [r2, #0]
 8010270:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010274:	bf18      	it	ne
 8010276:	b21b      	sxthne	r3, r3
 8010278:	e7cf      	b.n	801021a <_printf_i+0x52>
 801027a:	6813      	ldr	r3, [r2, #0]
 801027c:	6825      	ldr	r5, [r4, #0]
 801027e:	1d18      	adds	r0, r3, #4
 8010280:	6010      	str	r0, [r2, #0]
 8010282:	0628      	lsls	r0, r5, #24
 8010284:	d501      	bpl.n	801028a <_printf_i+0xc2>
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	e002      	b.n	8010290 <_printf_i+0xc8>
 801028a:	0668      	lsls	r0, r5, #25
 801028c:	d5fb      	bpl.n	8010286 <_printf_i+0xbe>
 801028e:	881b      	ldrh	r3, [r3, #0]
 8010290:	4854      	ldr	r0, [pc, #336]	; (80103e4 <_printf_i+0x21c>)
 8010292:	296f      	cmp	r1, #111	; 0x6f
 8010294:	bf14      	ite	ne
 8010296:	220a      	movne	r2, #10
 8010298:	2208      	moveq	r2, #8
 801029a:	2100      	movs	r1, #0
 801029c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102a0:	6865      	ldr	r5, [r4, #4]
 80102a2:	60a5      	str	r5, [r4, #8]
 80102a4:	2d00      	cmp	r5, #0
 80102a6:	f2c0 8095 	blt.w	80103d4 <_printf_i+0x20c>
 80102aa:	6821      	ldr	r1, [r4, #0]
 80102ac:	f021 0104 	bic.w	r1, r1, #4
 80102b0:	6021      	str	r1, [r4, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d13d      	bne.n	8010332 <_printf_i+0x16a>
 80102b6:	2d00      	cmp	r5, #0
 80102b8:	f040 808e 	bne.w	80103d8 <_printf_i+0x210>
 80102bc:	4665      	mov	r5, ip
 80102be:	2a08      	cmp	r2, #8
 80102c0:	d10b      	bne.n	80102da <_printf_i+0x112>
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	07db      	lsls	r3, r3, #31
 80102c6:	d508      	bpl.n	80102da <_printf_i+0x112>
 80102c8:	6923      	ldr	r3, [r4, #16]
 80102ca:	6862      	ldr	r2, [r4, #4]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	bfde      	ittt	le
 80102d0:	2330      	movle	r3, #48	; 0x30
 80102d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80102da:	ebac 0305 	sub.w	r3, ip, r5
 80102de:	6123      	str	r3, [r4, #16]
 80102e0:	f8cd 8000 	str.w	r8, [sp]
 80102e4:	463b      	mov	r3, r7
 80102e6:	aa03      	add	r2, sp, #12
 80102e8:	4621      	mov	r1, r4
 80102ea:	4630      	mov	r0, r6
 80102ec:	f7ff fef6 	bl	80100dc <_printf_common>
 80102f0:	3001      	adds	r0, #1
 80102f2:	d14d      	bne.n	8010390 <_printf_i+0x1c8>
 80102f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102f8:	b005      	add	sp, #20
 80102fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102fe:	4839      	ldr	r0, [pc, #228]	; (80103e4 <_printf_i+0x21c>)
 8010300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010304:	6813      	ldr	r3, [r2, #0]
 8010306:	6821      	ldr	r1, [r4, #0]
 8010308:	1d1d      	adds	r5, r3, #4
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	6015      	str	r5, [r2, #0]
 801030e:	060a      	lsls	r2, r1, #24
 8010310:	d50b      	bpl.n	801032a <_printf_i+0x162>
 8010312:	07ca      	lsls	r2, r1, #31
 8010314:	bf44      	itt	mi
 8010316:	f041 0120 	orrmi.w	r1, r1, #32
 801031a:	6021      	strmi	r1, [r4, #0]
 801031c:	b91b      	cbnz	r3, 8010326 <_printf_i+0x15e>
 801031e:	6822      	ldr	r2, [r4, #0]
 8010320:	f022 0220 	bic.w	r2, r2, #32
 8010324:	6022      	str	r2, [r4, #0]
 8010326:	2210      	movs	r2, #16
 8010328:	e7b7      	b.n	801029a <_printf_i+0xd2>
 801032a:	064d      	lsls	r5, r1, #25
 801032c:	bf48      	it	mi
 801032e:	b29b      	uxthmi	r3, r3
 8010330:	e7ef      	b.n	8010312 <_printf_i+0x14a>
 8010332:	4665      	mov	r5, ip
 8010334:	fbb3 f1f2 	udiv	r1, r3, r2
 8010338:	fb02 3311 	mls	r3, r2, r1, r3
 801033c:	5cc3      	ldrb	r3, [r0, r3]
 801033e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010342:	460b      	mov	r3, r1
 8010344:	2900      	cmp	r1, #0
 8010346:	d1f5      	bne.n	8010334 <_printf_i+0x16c>
 8010348:	e7b9      	b.n	80102be <_printf_i+0xf6>
 801034a:	6813      	ldr	r3, [r2, #0]
 801034c:	6825      	ldr	r5, [r4, #0]
 801034e:	6961      	ldr	r1, [r4, #20]
 8010350:	1d18      	adds	r0, r3, #4
 8010352:	6010      	str	r0, [r2, #0]
 8010354:	0628      	lsls	r0, r5, #24
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	d501      	bpl.n	801035e <_printf_i+0x196>
 801035a:	6019      	str	r1, [r3, #0]
 801035c:	e002      	b.n	8010364 <_printf_i+0x19c>
 801035e:	066a      	lsls	r2, r5, #25
 8010360:	d5fb      	bpl.n	801035a <_printf_i+0x192>
 8010362:	8019      	strh	r1, [r3, #0]
 8010364:	2300      	movs	r3, #0
 8010366:	6123      	str	r3, [r4, #16]
 8010368:	4665      	mov	r5, ip
 801036a:	e7b9      	b.n	80102e0 <_printf_i+0x118>
 801036c:	6813      	ldr	r3, [r2, #0]
 801036e:	1d19      	adds	r1, r3, #4
 8010370:	6011      	str	r1, [r2, #0]
 8010372:	681d      	ldr	r5, [r3, #0]
 8010374:	6862      	ldr	r2, [r4, #4]
 8010376:	2100      	movs	r1, #0
 8010378:	4628      	mov	r0, r5
 801037a:	f7ef ffb9 	bl	80002f0 <memchr>
 801037e:	b108      	cbz	r0, 8010384 <_printf_i+0x1bc>
 8010380:	1b40      	subs	r0, r0, r5
 8010382:	6060      	str	r0, [r4, #4]
 8010384:	6863      	ldr	r3, [r4, #4]
 8010386:	6123      	str	r3, [r4, #16]
 8010388:	2300      	movs	r3, #0
 801038a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801038e:	e7a7      	b.n	80102e0 <_printf_i+0x118>
 8010390:	6923      	ldr	r3, [r4, #16]
 8010392:	462a      	mov	r2, r5
 8010394:	4639      	mov	r1, r7
 8010396:	4630      	mov	r0, r6
 8010398:	47c0      	blx	r8
 801039a:	3001      	adds	r0, #1
 801039c:	d0aa      	beq.n	80102f4 <_printf_i+0x12c>
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	079b      	lsls	r3, r3, #30
 80103a2:	d413      	bmi.n	80103cc <_printf_i+0x204>
 80103a4:	68e0      	ldr	r0, [r4, #12]
 80103a6:	9b03      	ldr	r3, [sp, #12]
 80103a8:	4298      	cmp	r0, r3
 80103aa:	bfb8      	it	lt
 80103ac:	4618      	movlt	r0, r3
 80103ae:	e7a3      	b.n	80102f8 <_printf_i+0x130>
 80103b0:	2301      	movs	r3, #1
 80103b2:	464a      	mov	r2, r9
 80103b4:	4639      	mov	r1, r7
 80103b6:	4630      	mov	r0, r6
 80103b8:	47c0      	blx	r8
 80103ba:	3001      	adds	r0, #1
 80103bc:	d09a      	beq.n	80102f4 <_printf_i+0x12c>
 80103be:	3501      	adds	r5, #1
 80103c0:	68e3      	ldr	r3, [r4, #12]
 80103c2:	9a03      	ldr	r2, [sp, #12]
 80103c4:	1a9b      	subs	r3, r3, r2
 80103c6:	42ab      	cmp	r3, r5
 80103c8:	dcf2      	bgt.n	80103b0 <_printf_i+0x1e8>
 80103ca:	e7eb      	b.n	80103a4 <_printf_i+0x1dc>
 80103cc:	2500      	movs	r5, #0
 80103ce:	f104 0919 	add.w	r9, r4, #25
 80103d2:	e7f5      	b.n	80103c0 <_printf_i+0x1f8>
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d1ac      	bne.n	8010332 <_printf_i+0x16a>
 80103d8:	7803      	ldrb	r3, [r0, #0]
 80103da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103e2:	e76c      	b.n	80102be <_printf_i+0xf6>
 80103e4:	08011a2d 	.word	0x08011a2d
 80103e8:	08011a3e 	.word	0x08011a3e

080103ec <_sbrk_r>:
 80103ec:	b538      	push	{r3, r4, r5, lr}
 80103ee:	4c06      	ldr	r4, [pc, #24]	; (8010408 <_sbrk_r+0x1c>)
 80103f0:	2300      	movs	r3, #0
 80103f2:	4605      	mov	r5, r0
 80103f4:	4608      	mov	r0, r1
 80103f6:	6023      	str	r3, [r4, #0]
 80103f8:	f7fe fdea 	bl	800efd0 <_sbrk>
 80103fc:	1c43      	adds	r3, r0, #1
 80103fe:	d102      	bne.n	8010406 <_sbrk_r+0x1a>
 8010400:	6823      	ldr	r3, [r4, #0]
 8010402:	b103      	cbz	r3, 8010406 <_sbrk_r+0x1a>
 8010404:	602b      	str	r3, [r5, #0]
 8010406:	bd38      	pop	{r3, r4, r5, pc}
 8010408:	24003950 	.word	0x24003950

0801040c <__sread>:
 801040c:	b510      	push	{r4, lr}
 801040e:	460c      	mov	r4, r1
 8010410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010414:	f000 f8d6 	bl	80105c4 <_read_r>
 8010418:	2800      	cmp	r0, #0
 801041a:	bfab      	itete	ge
 801041c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801041e:	89a3      	ldrhlt	r3, [r4, #12]
 8010420:	181b      	addge	r3, r3, r0
 8010422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010426:	bfac      	ite	ge
 8010428:	6563      	strge	r3, [r4, #84]	; 0x54
 801042a:	81a3      	strhlt	r3, [r4, #12]
 801042c:	bd10      	pop	{r4, pc}

0801042e <__swrite>:
 801042e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010432:	461f      	mov	r7, r3
 8010434:	898b      	ldrh	r3, [r1, #12]
 8010436:	05db      	lsls	r3, r3, #23
 8010438:	4605      	mov	r5, r0
 801043a:	460c      	mov	r4, r1
 801043c:	4616      	mov	r6, r2
 801043e:	d505      	bpl.n	801044c <__swrite+0x1e>
 8010440:	2302      	movs	r3, #2
 8010442:	2200      	movs	r2, #0
 8010444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010448:	f000 f868 	bl	801051c <_lseek_r>
 801044c:	89a3      	ldrh	r3, [r4, #12]
 801044e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010456:	81a3      	strh	r3, [r4, #12]
 8010458:	4632      	mov	r2, r6
 801045a:	463b      	mov	r3, r7
 801045c:	4628      	mov	r0, r5
 801045e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010462:	f000 b817 	b.w	8010494 <_write_r>

08010466 <__sseek>:
 8010466:	b510      	push	{r4, lr}
 8010468:	460c      	mov	r4, r1
 801046a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046e:	f000 f855 	bl	801051c <_lseek_r>
 8010472:	1c43      	adds	r3, r0, #1
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	bf15      	itete	ne
 8010478:	6560      	strne	r0, [r4, #84]	; 0x54
 801047a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801047e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010482:	81a3      	strheq	r3, [r4, #12]
 8010484:	bf18      	it	ne
 8010486:	81a3      	strhne	r3, [r4, #12]
 8010488:	bd10      	pop	{r4, pc}

0801048a <__sclose>:
 801048a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801048e:	f000 b813 	b.w	80104b8 <_close_r>
	...

08010494 <_write_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4c07      	ldr	r4, [pc, #28]	; (80104b4 <_write_r+0x20>)
 8010498:	4605      	mov	r5, r0
 801049a:	4608      	mov	r0, r1
 801049c:	4611      	mov	r1, r2
 801049e:	2200      	movs	r2, #0
 80104a0:	6022      	str	r2, [r4, #0]
 80104a2:	461a      	mov	r2, r3
 80104a4:	f7fe fd26 	bl	800eef4 <_write>
 80104a8:	1c43      	adds	r3, r0, #1
 80104aa:	d102      	bne.n	80104b2 <_write_r+0x1e>
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	b103      	cbz	r3, 80104b2 <_write_r+0x1e>
 80104b0:	602b      	str	r3, [r5, #0]
 80104b2:	bd38      	pop	{r3, r4, r5, pc}
 80104b4:	24003950 	.word	0x24003950

080104b8 <_close_r>:
 80104b8:	b538      	push	{r3, r4, r5, lr}
 80104ba:	4c06      	ldr	r4, [pc, #24]	; (80104d4 <_close_r+0x1c>)
 80104bc:	2300      	movs	r3, #0
 80104be:	4605      	mov	r5, r0
 80104c0:	4608      	mov	r0, r1
 80104c2:	6023      	str	r3, [r4, #0]
 80104c4:	f7fe fd32 	bl	800ef2c <_close>
 80104c8:	1c43      	adds	r3, r0, #1
 80104ca:	d102      	bne.n	80104d2 <_close_r+0x1a>
 80104cc:	6823      	ldr	r3, [r4, #0]
 80104ce:	b103      	cbz	r3, 80104d2 <_close_r+0x1a>
 80104d0:	602b      	str	r3, [r5, #0]
 80104d2:	bd38      	pop	{r3, r4, r5, pc}
 80104d4:	24003950 	.word	0x24003950

080104d8 <_fstat_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4c07      	ldr	r4, [pc, #28]	; (80104f8 <_fstat_r+0x20>)
 80104dc:	2300      	movs	r3, #0
 80104de:	4605      	mov	r5, r0
 80104e0:	4608      	mov	r0, r1
 80104e2:	4611      	mov	r1, r2
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	f7fe fd2d 	bl	800ef44 <_fstat>
 80104ea:	1c43      	adds	r3, r0, #1
 80104ec:	d102      	bne.n	80104f4 <_fstat_r+0x1c>
 80104ee:	6823      	ldr	r3, [r4, #0]
 80104f0:	b103      	cbz	r3, 80104f4 <_fstat_r+0x1c>
 80104f2:	602b      	str	r3, [r5, #0]
 80104f4:	bd38      	pop	{r3, r4, r5, pc}
 80104f6:	bf00      	nop
 80104f8:	24003950 	.word	0x24003950

080104fc <_isatty_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4c06      	ldr	r4, [pc, #24]	; (8010518 <_isatty_r+0x1c>)
 8010500:	2300      	movs	r3, #0
 8010502:	4605      	mov	r5, r0
 8010504:	4608      	mov	r0, r1
 8010506:	6023      	str	r3, [r4, #0]
 8010508:	f7fe fd2c 	bl	800ef64 <_isatty>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	d102      	bne.n	8010516 <_isatty_r+0x1a>
 8010510:	6823      	ldr	r3, [r4, #0]
 8010512:	b103      	cbz	r3, 8010516 <_isatty_r+0x1a>
 8010514:	602b      	str	r3, [r5, #0]
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	24003950 	.word	0x24003950

0801051c <_lseek_r>:
 801051c:	b538      	push	{r3, r4, r5, lr}
 801051e:	4c07      	ldr	r4, [pc, #28]	; (801053c <_lseek_r+0x20>)
 8010520:	4605      	mov	r5, r0
 8010522:	4608      	mov	r0, r1
 8010524:	4611      	mov	r1, r2
 8010526:	2200      	movs	r2, #0
 8010528:	6022      	str	r2, [r4, #0]
 801052a:	461a      	mov	r2, r3
 801052c:	f7fe fd25 	bl	800ef7a <_lseek>
 8010530:	1c43      	adds	r3, r0, #1
 8010532:	d102      	bne.n	801053a <_lseek_r+0x1e>
 8010534:	6823      	ldr	r3, [r4, #0]
 8010536:	b103      	cbz	r3, 801053a <_lseek_r+0x1e>
 8010538:	602b      	str	r3, [r5, #0]
 801053a:	bd38      	pop	{r3, r4, r5, pc}
 801053c:	24003950 	.word	0x24003950

08010540 <memmove>:
 8010540:	4288      	cmp	r0, r1
 8010542:	b510      	push	{r4, lr}
 8010544:	eb01 0302 	add.w	r3, r1, r2
 8010548:	d807      	bhi.n	801055a <memmove+0x1a>
 801054a:	1e42      	subs	r2, r0, #1
 801054c:	4299      	cmp	r1, r3
 801054e:	d00a      	beq.n	8010566 <memmove+0x26>
 8010550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010554:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010558:	e7f8      	b.n	801054c <memmove+0xc>
 801055a:	4283      	cmp	r3, r0
 801055c:	d9f5      	bls.n	801054a <memmove+0xa>
 801055e:	1881      	adds	r1, r0, r2
 8010560:	1ad2      	subs	r2, r2, r3
 8010562:	42d3      	cmn	r3, r2
 8010564:	d100      	bne.n	8010568 <memmove+0x28>
 8010566:	bd10      	pop	{r4, pc}
 8010568:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801056c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010570:	e7f7      	b.n	8010562 <memmove+0x22>

08010572 <__malloc_lock>:
 8010572:	4770      	bx	lr

08010574 <__malloc_unlock>:
 8010574:	4770      	bx	lr

08010576 <_realloc_r>:
 8010576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010578:	4607      	mov	r7, r0
 801057a:	4614      	mov	r4, r2
 801057c:	460e      	mov	r6, r1
 801057e:	b921      	cbnz	r1, 801058a <_realloc_r+0x14>
 8010580:	4611      	mov	r1, r2
 8010582:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010586:	f7ff babd 	b.w	800fb04 <_malloc_r>
 801058a:	b922      	cbnz	r2, 8010596 <_realloc_r+0x20>
 801058c:	f7ff fa6c 	bl	800fa68 <_free_r>
 8010590:	4625      	mov	r5, r4
 8010592:	4628      	mov	r0, r5
 8010594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010596:	f000 f827 	bl	80105e8 <_malloc_usable_size_r>
 801059a:	42a0      	cmp	r0, r4
 801059c:	d20f      	bcs.n	80105be <_realloc_r+0x48>
 801059e:	4621      	mov	r1, r4
 80105a0:	4638      	mov	r0, r7
 80105a2:	f7ff faaf 	bl	800fb04 <_malloc_r>
 80105a6:	4605      	mov	r5, r0
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d0f2      	beq.n	8010592 <_realloc_r+0x1c>
 80105ac:	4631      	mov	r1, r6
 80105ae:	4622      	mov	r2, r4
 80105b0:	f7fe ff0d 	bl	800f3ce <memcpy>
 80105b4:	4631      	mov	r1, r6
 80105b6:	4638      	mov	r0, r7
 80105b8:	f7ff fa56 	bl	800fa68 <_free_r>
 80105bc:	e7e9      	b.n	8010592 <_realloc_r+0x1c>
 80105be:	4635      	mov	r5, r6
 80105c0:	e7e7      	b.n	8010592 <_realloc_r+0x1c>
	...

080105c4 <_read_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4c07      	ldr	r4, [pc, #28]	; (80105e4 <_read_r+0x20>)
 80105c8:	4605      	mov	r5, r0
 80105ca:	4608      	mov	r0, r1
 80105cc:	4611      	mov	r1, r2
 80105ce:	2200      	movs	r2, #0
 80105d0:	6022      	str	r2, [r4, #0]
 80105d2:	461a      	mov	r2, r3
 80105d4:	f7fe fcde 	bl	800ef94 <_read>
 80105d8:	1c43      	adds	r3, r0, #1
 80105da:	d102      	bne.n	80105e2 <_read_r+0x1e>
 80105dc:	6823      	ldr	r3, [r4, #0]
 80105de:	b103      	cbz	r3, 80105e2 <_read_r+0x1e>
 80105e0:	602b      	str	r3, [r5, #0]
 80105e2:	bd38      	pop	{r3, r4, r5, pc}
 80105e4:	24003950 	.word	0x24003950

080105e8 <_malloc_usable_size_r>:
 80105e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105ec:	1f18      	subs	r0, r3, #4
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	bfbc      	itt	lt
 80105f2:	580b      	ldrlt	r3, [r1, r0]
 80105f4:	18c0      	addlt	r0, r0, r3
 80105f6:	4770      	bx	lr

080105f8 <_init>:
 80105f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105fa:	bf00      	nop
 80105fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105fe:	bc08      	pop	{r3}
 8010600:	469e      	mov	lr, r3
 8010602:	4770      	bx	lr

08010604 <_fini>:
 8010604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010606:	bf00      	nop
 8010608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801060a:	bc08      	pop	{r3}
 801060c:	469e      	mov	lr, r3
 801060e:	4770      	bx	lr
